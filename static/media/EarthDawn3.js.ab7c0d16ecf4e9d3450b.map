{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/EarthDawn.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class EarthDawn < Base\n      # ゲームシステムの識別子\n      ID = 'EarthDawn'\n\n      # ゲームシステム名\n      NAME = 'アースドーン'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'ああすとおん'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ステップダイス　(xEn+k)\n        ステップx、目標値n(省略可能）、カルマダイスk(D2-D20)でステップダイスをロールします。\n        振り足しも自動。\n        例）9E　10E8　10E+D12\n      INFO_MESSAGE_TEXT\n\n      register_prefix('\\d+e')\n\n      def initialize(command)\n        super(command)\n\n        @sort_add_dice = true\n      end\n\n      def eval_game_system_specific_command(command)\n        return ed_step(command)\n      end\n\n      # アースドーンステップ表\n      def ed_step(str)\n        output = getStepResult(str)\n\n        return output\n      end\n\n      def getStepResult(str)\n        return nil unless /(\\d+)E(\\d+)?(\\+)?(\\d+)?(d\\d+)?/i =~ str\n\n        stepTotal = 0\n        @isFailed = true\n\n        step = Regexp.last_match(1).to_i # ステップ\n        targetNumber = 0 # 目標値\n        hasKarmaDice = false # カルマダイスの有無\n        karmaDiceCount = 0 # カルマダイスの個数又は修正\n        karmaDiceType = 0 # カルマダイスの種類\n\n        # 空値があった時の為のばんぺいくんRX\n        if step > 40\n          step = 40\n        end\n\n        if Regexp.last_match(2)\n          targetNumber = Regexp.last_match(2).to_i\n          targetNumber = 42 if targetNumber > 43\n        end\n\n        hasKarmaDice = Regexp.last_match(3).to_i if Regexp.last_match(3)\n        karmaDiceCount = Regexp.last_match(4).to_i if Regexp.last_match(4)\n        karmaDiceType = Regexp.last_match(5) if Regexp.last_match(5)\n\n        return nil if targetNumber < 0\n\n        stable = getStepTable()\n\n        nmod = stable[0][step - 1]\n        d20step = stable[1][step - 1]\n        d12step = stable[2][step - 1]\n        d10step = stable[3][step - 1]\n        d8step = stable[4][step - 1]\n        d6step = stable[5][step - 1]\n        d4step = stable[6][step - 1]\n\n        if hasKarmaDice\n          case karmaDiceType\n          when /d20/i\n            d20step += karmaDiceCount\n          when /d12/i\n            d12step += karmaDiceCount\n          when /d10/i\n            d10step += karmaDiceCount\n          when /d8/i\n            d8step  += karmaDiceCount\n          when /d6/i\n            d6step  += karmaDiceCount\n          when /d4/i\n            d4step  += karmaDiceCount\n          else\n            nmod += karmaDiceCount\n          end\n        end\n\n        @string = \"\"\n\n        debug('d20step, d12step, d10step, d8step, d6step, d4step', d20step, d12step, d10step, d8step, d6step, d4step)\n\n        stepTotal += rollStep(20, d20step)\n        stepTotal += rollStep(12, d12step)\n        stepTotal += rollStep(10, d10step)\n        stepTotal += rollStep(8,  d8step)\n        stepTotal += rollStep(6,  d6step)\n        stepTotal += rollStep(4,  d4step)\n\n        if nmod > 0 # 修正分の適用\n          @string += \"+\"\n        end\n\n        if nmod != 0\n          @string += nmod.to_s\n          stepTotal += nmod\n        end\n\n        # ステップ判定終了\n        @string += \" ＞ \#{stepTotal}\"\n\n        output = \"ステップ\#{step} ＞ \#{@string}\"\n        return output if targetNumber == 0\n\n        # 結果判定\n        @string += ' ＞ '\n\n        excelentSuccessNumber = stable[7][targetNumber - 1]\n        superSuccessNumber = stable[8][targetNumber - 1]\n        goodSuccessNumber = stable[9][targetNumber - 1]\n        failedNumber = stable[11][targetNumber - 1]\n\n        if @isFailed\n          @string += '自動失敗'\n        elsif stepTotal >= excelentSuccessNumber\n          @string += '最良成功'\n        elsif stepTotal >= superSuccessNumber\n          @string += '優成功'\n        elsif stepTotal >= goodSuccessNumber\n          @string += '良成功'\n        elsif stepTotal >= targetNumber\n          @string += '成功'\n        elsif stepTotal < failedNumber\n          @string += '大失敗'\n        else\n          @string += '失敗'\n        end\n\n        output = \"ステップ\#{step}>=\#{targetNumber} ＞ \#{@string}\"\n\n        return output\n      end\n\n      def getStepTable\n        # 表      1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 34x 3x 4x 5x 6x 7x 8x 9x10x11x12x13x\n\n        mod = [-2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]\n        d20 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]\n        d12 = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,]\n        d10 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 2, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 3, 2, 1, 1, 1, 2, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 2, 1,]\n        d8  = [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0,]\n        d6  = [0, 0, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0,]\n        d4  = [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]\n        exsuc = [6, 8, 10, 12, 14, 17, 19, 20, 22, 24, 25, 27, 29, 32, 33, 35, 37, 38, 39, 41, 42, 44, 45, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 65, 67, 68, 70, 71, 72,]\n        ssuc = [4, 6, 8, 10, 11, 13, 15, 16, 18, 19, 21, 22, 24, 26, 27, 29, 30, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62,]\n        gsuc = [2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54,]\n        nsuc = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,]\n        fsuc = [0, 1, 1, 1, 1, 2, 2, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 11, 12, 13, 13, 14, 15, 16, 17, 18, 18, 18, 20, 21, 22, 23, 23, 24, 25, 26, 26, 27, 28, 29, 30,]\n\n        stable = [mod, d20, d12, d10, d8, d6, d4, exsuc, ssuc, gsuc, nsuc, fsuc]\n\n        return stable\n      end\n\n      # 41以上のステップの為の配列です。\n      # 以下のようなルールでダイスを増やしています。より正しいステップ計算法をご存知の方は、\n      # どうぞそちらに合せて調整して下さい。\n      # 　基本：　2d20+d10+d8\n      # 　これを仮にステップ34xとしています。\n      # 　一般式としては、ステップxxのダイスは、\n\n      # 　 ステップ34xのダイス\n      # + [(xx-45)/11]d20\n      # + ステップ[(xx-34)を11で割った余り+3]のダイス\n\n      def rollStep(diceType, diceCount)\n        debug('rollStep diceType, diceCount, @string', diceType, diceCount, @string)\n\n        stepTotal = 0\n        return stepTotal unless diceCount > 0\n\n        # diceぶんのステップ判定\n\n        @string += \"+\" unless @string.empty?\n        @string += \"\#{diceCount}d\#{diceType}[\"\n        debug('rollStep @string', @string)\n\n        diceCount.times do |i|\n          dice_now = @randomizer.roll_once(diceType)\n\n          if dice_now != 1\n            @isFailed = false\n          end\n\n          dice_in = dice_now\n\n          while dice_now == diceType\n            dice_now = @randomizer.roll_once(diceType)\n\n            dice_in += dice_now\n          end\n\n          stepTotal += dice_in\n\n          @string += ',' if i != 0\n          @string += dice_in.to_s\n        end\n\n        @string += \"]\"\n\n        return stepTotal\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:GameSystem>", "<class:EarthDawn>", "self", "register_prefix", "initialize", "command", "@sort_add_dice", "eval_game_system_specific_command", "ed_step", "str", "output", "getStepResult", "=~", "stepTotal", "0", "@isFailed", "step", "Regexp", "last_match", "1", "to_i", "targetNumber", "hasKarmaDice", "karmaDiceCount", "karmaDiceType", ">", "40", "2", "43", "42", "3", "4", "5", "<", "stable", "getStepTable", "nmod", "[]", "-", "d20step", "d12step", "d10step", "d8step", "d6step", "d4step", "6", "$ret_or_1", "+", "@string", "debug", "rollStep", "20", "12", "10", "8", "to_s", "excelentSuccessNumber", "7", "superSuccessNumber", "goodSuccessNumber", "9", "failedNumber", "11", ">=", "mod", "d20", "d12", "d10", "d8", "d6", "d4", "exsuc", "ssuc", "gsuc", "nsuc", "fsuc", "diceType", "diceCount", "empty?", "times", "block in rollStep", "i", "block (2 levels) in rollStep", "dice_now", "@randomizer", "roll_once", "dice_in", "Base"], :mappings=>"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"}}, {:offset=>{:line=>217, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/EarthDawn3.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire 'bcdice/game_system/EarthDawn'\n\nmodule BCDice\n  module GameSystem\n    class EarthDawn3 < EarthDawn\n      # ゲームシステムの識別子\n      ID = 'EarthDawn3'\n\n      # ゲームシステム名\n      NAME = 'アースドーン3版'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'ああすとおん3'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ステップダイス　(xEn+k)\n        ステップx、目標値n(省略可能）、カルマダイスk(D2～D20)でステップダイスをロールします。\n        振り足しも自動。\n        例）ステップ10：10E\n        　　ステップ10、目標値8：10E8\n        　　ステップ12、目標値8、カルマダイスD12：10E8+1D6\n      INFO_MESSAGE_TEXT\n\n      register_prefix('\\d+e')\n\n      def initialize(command)\n        super(command)\n\n        @sort_add_dice = true\n      end\n\n      def eval_game_system_specific_command(command)\n        return ed_step(command)\n      end\n\n      # アースドーンステップ表\n      def ed_step(str)\n        output = getStepResult(str)\n\n        return output\n      end\n\n      def getStepResult(str)\n        return nil unless /^(\\d+)E(\\d+)?(\\+(\\d*)D(\\d+))?(\\+\\d)?/i =~ str\n\n        stepTotal = 0\n        @isFailed = true\n\n        step = Regexp.last_match(1).to_i # ステップ\n        targetNumber = [Regexp.last_match(2).to_i, 20].min # 目標値\n        hasKarmaDice = !Regexp.last_match(3).nil? # カルマダイスの有無\n        karmaDiceCount = [1, Regexp.last_match(4).to_i].max # カルマダイスの個数\n        karmaDiceType = Regexp.last_match(5).to_i # カルマダイスの種類\n        diceModify = Regexp.last_match(6).to_i\n\n        karmaDiceInfo = Hash.new(0)\n        if hasKarmaDice\n          karmaDiceInfo[karmaDiceType] = karmaDiceCount\n        end\n\n        return nil if targetNumber < 0\n\n        stepInfo = getStepInfo(step)\n        debug('stepInfo', stepInfo)\n\n        @string = \"\"\n\n        diceTypes = [20, 12, 10, 8, 6, 4]\n        diceTypes.each do |type|\n          stepTotal += rollStep(type, stepInfo.shift)\n        end\n        modify = stepInfo.shift\n\n        karmaDiceInfo.each do |diceType, diceCount|\n          stepTotal += rollStep(diceType, diceCount)\n        end\n\n        @string += (getModifyText(modify) + getModifyText(diceModify))\n        stepTotal += (modify + diceModify)\n\n        # ステップ判定終了\n        @string += \" ＞ \#{stepTotal}\"\n\n        output = \"ステップ\#{step} ＞ \#{@string}\"\n        return output if targetNumber == 0\n\n        # 結果判定\n        @string += ' ＞ ' + getSuccess(targetNumber, stepTotal)\n\n        output = \"ステップ\#{step}>=\#{targetNumber} ＞ \#{@string}\"\n\n        return output\n      end\n\n      def getModifyText(modify)\n        @string = \"\"\n        return @string if  modify == 0\n\n        @string += \"+\" if  modify > 0\n        @string += modify.to_s\n        return @string\n      end\n\n      def getBaseStepTable\n        stepTable =\n          [\n            #      dice\n            #      D20  D12  D10  D8  D6  D4  mod\n            [1, [0, 0, 0, 0, 1, 0, -3]],\n            [2,  [0,   0,   0,  0,  1,  0,  -2]],\n            [3,  [0,   0,   0,  0,  1,  0,  -1]],\n            [4,  [0,   0,   0,  0,  1,  0,   0]],\n            [5,  [0,   0,   0,  1,  0,  0,   0]],\n            [6,  [0,   0,   1,  0,  0,  0,   0]],\n            [7,  [0,   1,   0,  0,  0,  0,   0]],\n          ]\n\n        return stepTable\n      end\n\n      def getStepInfo(step)\n        baseStepTable = getBaseStepTable\n        baseMaxStep = baseStepTable.last.first\n\n        if step <= baseMaxStep\n          return get_table_by_number(step, baseStepTable)\n        end\n\n        baseStepInfo = [0, 1, 0, 0, 0, 0, 0]\n        overStep = step - baseMaxStep - 1\n\n        stepRythm =\n          [\n            # dice\n            # D20  D12  D10  D8  D6  D4  mod\n            [0, 0, 0, 0, 2, 0, 0],\n            [0,   0,   0,  1,  1,  0,   0],\n            [0,   0,   0,  2,  0,  0,   0],\n            [0,   0,   1,  1,  0,  0,   0],\n            [0,   0,   2,  0,  0,  0,   0],\n            [0,   1,   1,  0,  0,  0,   0],\n            [0,   2,   0,  0,  0,  0,   0],\n          ]\n\n        result = [0, 0, 0, 0, 0, 0, 0]\n\n        loopCount = (overStep / stepRythm.size).to_i\n\n        loopCount.times do\n          addStepToResult(result, baseStepInfo)\n        end\n\n        index = (overStep % stepRythm.size)\n        restStepInfo = stepRythm[index]\n\n        addStepToResult(result, restStepInfo)\n\n        return result\n      end\n\n      def addStepToResult(result, step)\n        result.size.times do |i|\n          result[i] += step[i]\n        end\n\n        return result\n      end\n\n      def getSuccess(targetNumber, stepTotal)\n        return '自動失敗' if @isFailed\n\n        successTable = getSuccessTable\n        successInfo = get_table_by_number(targetNumber, successTable)\n\n        pathetic, poor, average, good, excelent, extraordinary = successInfo\n\n        return 'Extraordinary(極上)' if stepTotal >= extraordinary\n        return 'Excelent(最高)' if stepTotal >= excelent\n        return 'Good(上出来)' if stepTotal >= good\n        return 'Average(そこそこ)' if stepTotal >= average\n        return 'Poor(お粗末)' if stepTotal >= poor\n        return 'Pathetic(惨め)' if stepTotal >= pathetic\n      end\n\n      def getSuccessTable\n        successTable =\n          [\n            #       Pathetic Poor Average Good Excellent Extraordinary\n            [2, [0, 1, 2, 5, 7, 9]],\n            [3,  [0,     1,     3,     6, 8, 10]],\n            [4,  [0,     1,     4,     7,    10,    12]],\n            [5,  [1,     2,     5,     8,    11,    14]],\n            [6,  [1,     2,     6,     9,    13,    17]],\n            [7,  [1,     3,     7,    11,    15,    19]],\n            [8,  [1,     4,     8,    13,    16,    20]],\n            [9,  [1,     5,     9,    15,    18,    22]],\n            [10,  [1,     6,    10,    16,    20,    24]],\n            [11,  [1,     6,    11,    17,    21,    25]],\n            [12,  [1,     7,    12,    18,    23,    27]],\n            [13,  [1,     7,    13,    20,    25,    29]],\n            [14,  [1,     8,    14,    21,    26,    31]],\n            [15,  [1,     9,    15,    23,    27,    31]],\n            [16,  [1,    10,    16,    24,    28,    33]],\n            [17,  [1,    11,    17,    25,    30,    34]],\n            [18,  [1,    12,    18,    26,    31,    36]],\n            [19,  [1,    12,    19,    28,    33,    37]],\n            [20,  [1,    13,    20,    29,    34,    39]],\n            [21,  [1,    14,    21,    30,    36,    41]],\n            [22,  [1,    15,    22,    31,    37,    42]],\n            [23,  [1,    16,    23,    33,    38,    43]],\n            [24,  [1,    16,    24,    34,    39,    44]],\n            [25,  [1,    17,    25,    35,    41,    46]],\n            [26,  [1,    18,    26,    36,    42,    47]],\n            [27,  [1,    19,    27,    37,    43,    49]],\n            [28,  [1,    19,    28,    39,    45,    50]],\n            [29,  [1,    21,    29,    40,    46,    51]],\n            [30,  [1,    21,    30,    41,    47,    53]],\n            [31,  [1,    22,    31,    42,    48,    54]],\n            [32,  [1,    23,    32,    43,    49,    55]],\n            [33,  [1,    24,    33,    45,    51,    57]],\n            [34,  [1,    24,    34,    46,    52,    58]],\n            [35,  [1,    25,    35,    47,    53,    60]],\n            [36,  [1,    26,    36,    48,    54,    60]],\n            [37,  [1,    27,    37,    49,    56,    62]],\n            [38,  [1,    28,    38,    51,    57,    63]],\n            [39,  [1,    29,    39,    52,    58,    64]],\n            [40,  [1,    30,    40,    53,    59,    66]],\n          ]\n\n        return successTable\n      end\n\n      def rollStep(diceType, diceCount)\n        debug('rollStep diceType, diceCount, @string', diceType, diceCount, @string)\n\n        stepTotal = 0\n        return stepTotal unless diceCount > 0\n\n        # diceぶんのステップ判定\n\n        @string += \"+\" unless @string.empty?\n        @string += \"\#{diceCount}d\#{diceType}[\"\n        debug('rollStep @string', @string)\n\n        diceCount.times do |i|\n          dice_now = @randomizer.roll_once(diceType)\n\n          if dice_now != 1\n            @isFailed = false\n          end\n\n          dice_in = dice_now\n\n          while dice_now == diceType\n            dice_now = @randomizer.roll_once(diceType)\n\n            dice_in += dice_now\n          end\n\n          stepTotal += dice_in\n\n          @string += ',' if i != 0\n          @string += dice_in.to_s\n        end\n\n        @string += \"]\"\n\n        return stepTotal\n      end\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:EarthDawn3>", "register_prefix", "initialize", "command", "@sort_add_dice", "eval_game_system_specific_command", "ed_step", "str", "output", "getStepResult", "=~", "stepTotal", "0", "@isFailed", "step", "Regexp", "last_match", "1", "to_i", "targetNumber", "2", "20", "min", "hasKarmaDice", "3", "nil?", "!", "karmaDiceCount", "4", "max", "karmaDiceType", "5", "diceModify", "6", "karmaDiceInfo", "Hash", "new", "[]=", "<", "stepInfo", "getStepInfo", "debug", "@string", "diceTypes", "12", "10", "8", "each", "block in getStepResult", "type", "block (2 levels) in getStepResult", "+", "rollStep", "shift", "modify", "diceType", "diceCount", "getModifyText", "getSuccess", ">", "to_s", "getBaseStepTable", "stepTable", "-3", "-2", "-1", "7", "baseStepTable", "baseMaxStep", "last", "first", "<=", "get_table_by_number", "baseStepInfo", "overStep", "-", "stepRythm", "result", "loopCount", "/", "size", "times", "block in getStepInfo", "block (2 levels) in getStepInfo", "addStepToResult", "index", "%", "restStepInfo", "[]", "block in addStepToResult", "i", "block (2 levels) in addStepToResult", "successTable", "getSuccessTable", "successInfo", "pathetic", "poor", "average", "good", "excelent", "extraordinary", ">=", "9", "11", "14", "13", "17", "15", "19", "16", "18", "22", "24", "21", "25", "23", "27", "29", "26", "31", "28", "33", "30", "34", "36", "37", "39", "41", "42", "38", "43", "44", "35", "46", "47", "49", "45", "50", "40", "51", "53", "48", "54", "32", "55", "57", "52", "58", "60", "56", "62", "63", "64", "59", "66", "empty?", "block in rollStep", "block (2 levels) in rollStep", "dice_now", "@randomizer", "roll_once", "dice_in", "EarthDawn"], :mappings=>"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"}}]}