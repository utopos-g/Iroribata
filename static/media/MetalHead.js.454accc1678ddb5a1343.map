{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/arithmetic_evaluator.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module ArithmeticEvaluator\n    class << self\n      # 四則演算を評価する\n      # @deprecated +Arithmetic.#eval+ を利用してください。\n      # @param expr [String, nil] 評価する式\n      # @param round_type [Symbol] 端数処理の種類\n      # @return [Integer] 評価結果を返す。不正な式の場合には0を返す。\n      def eval(expr, round_type: RoundType::FLOOR)\n        return 0 unless expr\n\n        Arithmetic.eval(expr, round_type) || 0\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:ArithmeticEvaluator>", "eval", "expr", "$kwargs", "RoundType::FLOOR", "RoundType", "0", "$ret_or_1", "Arithmetic", "round_type", "self"], :mappings=>"AAAAA,8CAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAA;QAAA;;QAME,OAAAC,oBAAAA,iBAASC,IAAD,EAVdC,OAUMF,GAAAA,MAAAA,IAAAA,wCAAAA;AAAAA,UAAAA;;;UAVN;;UAUqB,0CAAA,qCAAYG,IAAAC,eAAAD;UACzB,KAAA,QAAgBF,IAAhB,CAAA;YAAA,OAAOI;UAAP;UAEA,IAAA,QAAAC,CAAAA,YAAAC,gBAAUP,MAAAA,CAAMC,IAAhB,EAAsBO,UAAZR,CAAVM,CAAA,CAAA;YAAAN,OAAA;UAAA;YAAqCA,OAAAK;UAArC,EAHFL;YAAAA;YAAAA;UAAAA;QAAAA,CAAAA,IAAAA;MANF,4BAASS,IAAT;IADFV,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>40, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/range_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    # 各項目について、Rangeを用いて出目の合計の範囲を指定する、表のクラス。\n    #\n    # このクラスを使うと、表の定義を短く書ける。\n    # このクラスを使って表を定義するときは、各項目を以下の形で書く。\n    #\n    #     [出目の合計の範囲, 内容]\n    #\n    # 「出目の合計の範囲」には、Integerを要素とするRangeか、Integerを置ける。\n    #\n    # roll メソッドで表を振ると、出目の合計値と対応する項目が選ばれる。\n    #\n    # @example 表の定義（バトルテックの致命的命中表）\n    #   CRITICAL_TABLE = RangeTable.new(\n    #     '致命的命中表',\n    #     '2D6',\n    #     [\n    #       [2..7,   '致命的命中はなかった'],\n    #       [8..9,   '1箇所の致命的命中'],\n    #       [10..11, '2箇所の致命的命中'],\n    #       [12,     'その部位が吹き飛ぶ（腕、脚、頭）または3箇所の致命的命中（胴）']\n    #     ]\n    #   )\n    #\n    # @example 表を振った結果\n    #   CRITICAL_TABLE.roll(bcdice).formatted\n    #   # 出目の合計が7の場合 ：\"致命的命中表(7) ＞ 致命的命中はなかった\"\n    #   # 出目の合計が8の場合 ：\"致命的命中表(8) ＞ 1箇所の致命的命中\"\n    #   # 出目の合計が9の場合 ：\"致命的命中表(9) ＞ 1箇所の致命的命中\"\n    #   # 出目の合計が10の場合：\"致命的命中表(10) ＞ 2箇所の致命的命中\"\n    class RangeTable\n      # 表を振った結果を表す構造体\n      # @!attribute [rw] sum\n      #   @return [Integer] 出目の合計\n      # @!attribute [rw] values\n      #   @return [Array<Integer>] 出目の配列\n      # @!attribute [rw] content\n      #   @return [Object] 選ばれた項目の内容\n      # @!attribute [rw] formatted\n      #   @return [String] 整形された結果\n      RollResult = Struct.new(:sum, :values, :content, :formatted) do\n        alias_method :to_s, :formatted\n      end\n\n      # 表の項目を表す構造体\n      # @!attribute [rw] range\n      #   @return [Range] 出目の合計の範囲\n      # @!attribute [rw] content\n      #   @return [Object] 内容\n      Item = Struct.new(:range, :content)\n\n      # 項目を選ぶときのダイスロールの方法を表す正規表現\n      DICE_ROLL_METHOD_RE = /\\A(\\d+)D(\\d+)\\z/i.freeze\n\n      # 表を振った結果の整形処理（既定の処理）\n      DEFAULT_FORMATTER = lambda do |table, result|\n        \"\#{table.name}(\#{result.sum}) ＞ \#{result.content}\"\n      end\n\n      # @return [String] 表の名前\n      attr_reader :name\n      # @return [Integer] 振るダイスの個数\n      attr_reader :num_of_dice\n      # @return [Integer] 振るダイスの面数\n      attr_reader :num_of_sides\n\n      class << self\n        def from_i18n(key, locale)\n          table = I18n.t(key, locale: locale)\n          converted_items = table[:items].map do |item|\n            [conv_string_range(item[0]), item[1]]\n          end\n          new(table[:name], table[:type], converted_items)\n        end\n\n        def conv_string_range(x)\n          case x\n          when Integer\n            return x\n          when String\n            return x.include?(\"..\") ? Range.new(*x.split(\"..\", 2).map { |n| Integer(n) }) : Integer(x)\n          end\n\n          raise(\n            TypeError,\n            \"\#{@name}: \#{x} (\#{x.class}) must be a String or an Integer\"\n          )\n        end\n      end\n\n      # 表を初期化する\n      #\n      # ブロックを与えると、独自の結果整形処理を指定できる。\n      # ブロックは振った表（+table+）と振った結果（+result+）を引数として受け取る。\n      #\n      # @param [String] name 表の名前\n      # @param [String] dice_roll_method\n      #   項目を選ぶときのダイスロールの方法（+'1D6'+ など）\n      # @param [Array<(Range, Object)>, Array<(Integer, Object)>] items\n      #   表の項目の配列。[出目の合計の範囲, 内容]\n      # @yieldparam [RangeTable] table 振った表\n      # @yieldparam [RollResult] result 表を振った結果\n      # @raise [ArgumentError] ダイスロール方法が正しい書式で指定されていなかった場合\n      # @raise [TypeError] 範囲の型が正しくなかった場合\n      # @raise [RangeError] 出目の合計の最小値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の最大値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の範囲にずれや重なりがあった場合\n      #\n      # @example 表の定義（バトルテックの致命的命中表）\n      #   CRITICAL_TABLE = RangeTable.new(\n      #     '致命的命中表',\n      #     '2D6',\n      #     [\n      #       [2..7,   '致命的命中はなかった'],\n      #       [8..9,   '1箇所の致命的命中'],\n      #       [10..11, '2箇所の致命的命中'],\n      #       [12,     'その部位が吹き飛ぶ（腕、脚、頭）または3箇所の致命的命中（胴）']\n      #     ]\n      #   )\n      #\n      # @example 独自の結果整形処理を指定する場合\n      #   CRITICAL_TABLE_WITH_FORMATTER = RangeTable.new(\n      #     '致命的命中表',\n      #     '2D6',\n      #     [\n      #       [2..7,   '致命的命中はなかった'],\n      #       [8..9,   '1箇所の致命的命中'],\n      #       [10..11, '2箇所の致命的命中'],\n      #       [12,     'その部位が吹き飛ぶ（腕、脚、頭）または3箇所の致命的命中（胴）']\n      #     ]\n      #   ) do |table, result|\n      #     \"致命的命中発生? ＞ \#{result.sum}[\#{result.values}] ＞ \#{result.content}\"\n      #   end\n      #\n      #   CRITICAL_TABLE_WITH_FORMATTER.roll(bcdice).formatted\n      #   #=> \"致命的命中発生? ＞ 11[5,6] ＞ 2箇所の致命的命中\"\n      def initialize(name, dice_roll_method, items, &formatter)\n        @name = name.freeze\n        @formatter = formatter || DEFAULT_FORMATTER\n\n        m = DICE_ROLL_METHOD_RE.match(dice_roll_method)\n        unless m\n          raise(\n            ArgumentError,\n            \"\#{@name}: invalid dice roll method: \#{dice_roll_method}\"\n          )\n        end\n\n        @num_of_dice = m[1].to_i\n        @num_of_sides = m[2].to_i\n\n        store(items)\n      end\n\n      # 指定された値に対応する項目を返す\n      # @param [Integer] value 値（出目の合計）\n      # @return [Item] 指定された値に対応する項目\n      # @raise [RangeError] 範囲外の値が指定された場合\n      def fetch(value)\n        item = @items.find { |i| i.range.include?(value) }\n        unless item\n          raise RangeError, \"\#{@name}: value is out of range: \#{value}\"\n        end\n\n        return item\n      end\n\n      # 表を振る\n      # @param randomizer [#roll_barabara] ランダマイザ\n      # @return [RollResult] 表を振った結果\n      def roll(randomizer)\n        values = randomizer.roll_barabara(@num_of_dice, @num_of_sides)\n        sum = values.sum()\n\n        result = RollResult.new(sum, values, fetch(sum).content)\n        result.formatted = @formatter[self, result]\n\n        return result\n      end\n\n      private\n\n      # 表の項目を格納する\n      # @param [Array<(Range, Object)>, Array<(Integer, Object)>] items\n      #   表の項目の配列。[出目の合計の範囲, 内容]\n      # @return [self]\n      # @raise [TypeError] 範囲の型が正しくなかった場合\n      # @raise [RangeError] 出目の合計の最小値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の最大値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の範囲にずれや重なりがあった場合\n      def store(items)\n        items_with_range = items.map { |r, c| [coerce_to_int_range(r), c] }\n        sorted_items = items_with_range.sort_by { |r, _| r.min }\n\n        assert_min_sum_is_covered(sorted_items)\n        assert_max_sum_is_covered(sorted_items)\n        assert_no_gap_or_overlap_in_ranges(sorted_items)\n\n        @items = sorted_items\n                 .map { |range, content| Item.new(range, content.freeze).freeze }\n                 .freeze\n\n        self\n      end\n\n      # 引数を強制的に整数を要素とするRangeに変換する\n      # @param [Range, Integer] x 変換対象\n      # @return [Range] 整数を要素とするRange\n      # @raise [TypeError] xの型に対応していなかった場合\n      def coerce_to_int_range(x)\n        case x\n        when Integer\n          return Range.new(x, x)\n        when Range\n          if x.begin.is_a?(Integer) && x.end.is_a?(Integer)\n            return x\n          end\n        end\n\n        raise(\n          TypeError,\n          \"\#{@name}: \#{x} (\#{x.class}) must be an Integer or a Range with Integers \"\n        )\n      end\n\n      # 出目の合計の最小値がカバーされていることを確認する\n      # @param [Array<(Range, Object)>] sorted_items\n      #   ソートされた、項目の配列\n      # @return [self]\n      # @raise [RangeError] 出目の合計の最小値がカバーされていなかった場合\n      def assert_min_sum_is_covered(sorted_items)\n        min_sum = @num_of_dice\n        range = sorted_items.first[0]\n        unless range.include?(min_sum)\n          raise(\n            RangeError,\n            \"\#{@name}: min value (\#{min_sum}) is not covered: \#{range}\"\n          )\n        end\n\n        self\n      end\n\n      # 出目の合計の最大値がカバーされていることを確認する\n      # @param [Array<(Range, Object)>] sorted_items\n      #   ソートされた、項目の配列\n      # @return [self]\n      # @raise [RangeError] 出目の合計の最大値がカバーされていなかった場合\n      def assert_max_sum_is_covered(sorted_items)\n        max_sum = @num_of_dice * @num_of_sides\n        range = sorted_items.last[0]\n        unless range.include?(max_sum)\n          raise(\n            RangeError,\n            \"\#{@name}: max value (\#{max_sum}) is not covered: \#{range}\"\n          )\n        end\n\n        self\n      end\n\n      # 出目の合計の範囲にずれや重なりがないことを確認する\n      # @param [Array<(Range, Object)>] sorted_items\n      #   ソートされた、項目の配列\n      # @return [self]\n      # @raise [RangeError] 出目の合計の範囲にずれや重なりがあった場合\n      def assert_no_gap_or_overlap_in_ranges(sorted_items)\n        sorted_items.each_cons(2) do |i1, i2|\n          r1 = i1[0]\n          r2 = i2[0]\n\n          max1 = r1.max\n          next_of_max1 = max1 + 1\n\n          if r2.include?(max1)\n            raise RangeError, \"\#{@name}: Range overlap: \#{r1} and \#{r2}\"\n          end\n\n          unless r2.include?(next_of_max1)\n            raise RangeError, \"\#{@name}: Range gap: \#{r1} and \#{r2}\"\n          end\n        end\n\n        self\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:RangeTable>", "new", "Struct", "block in <class:RangeTable>", "block (2 levels) in <class:RangeTable>", "self", "alias_method", "freeze", "lambda", "table", "result", "name", "sum", "content", "attr_reader", "from_i18n", "key", "locale", "I18n", "t", "converted_items", "map", "[]", "block in from_i18n", "item", "block (2 levels) in from_i18n", "conv_string_range", "0", "1", "x", "Integer", "$ret_or_1", "String", "include?", "Range", "split", "2", "block in conv_string_range", "n", "block (2 levels) in conv_string_range", "raise", "TypeError", "@name", "class", "initialize", "dice_roll_method", "items", "@formatter", "formatter", "DEFAULT_FORMATTER", "m", "DICE_ROLL_METHOD_RE", "match", "ArgumentError", "@num_of_dice", "to_i", "@num_of_sides", "store", "fetch", "value", "find", "@items", "block in fetch", "i", "block (2 levels) in fetch", "range", "RangeError", "roll", "randomizer", "values", "roll_barabara", "RollResult", "formatted=", "private", "items_with_range", "block in store", "r", "c", "block (2 levels) in store", "coerce_to_int_range", "sorted_items", "sort_by", "_", "min", "assert_min_sum_is_covered", "assert_max_sum_is_covered", "assert_no_gap_or_overlap_in_ranges", "Item", "begin", "is_a?", "end", "min_sum", "first", "max_sum", "*", "last", "each_cons", "block in assert_no_gap_or_overlap_in_ranges", "i1", "i2", "block (2 levels) in assert_no_gap_or_overlap_in_ranges", "r1", "r2", "max1", "max", "next_of_max1", "+"], :mappings=>"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"}}, {:offset=>{:line=>247, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/MetalHead.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire 'bcdice/arithmetic_evaluator'\nrequire 'bcdice/dice_table/range_table'\n\nmodule BCDice\n  module GameSystem\n    class MetalHead < Base\n      # ゲームシステムの識別子\n      ID = 'MetalHead'\n\n      # ゲームシステム名\n      NAME = 'メタルヘッド'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'めたるへつと'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・アビリティロール  AR>=目標値\n        ・スキルロール      SR<=目標値(%)\n        ・命中判定ロール    HR<=目標値(%)\n\n          例）AR>=5\n          例）SR<=(40+25)\n          例）HR<=(50-10)\n\n          これらのロールで成否、絶対成功/絶対失敗、クリティカル/アクシデントを自動判定します。\n\n        ・クリティカルチャート  CC\n        ・アクシデントチャート  射撃・投擲用:ACL  格闘用:ACS\n        ・戦闘結果チャート      CRCsn   s=耐久レベル(SUV) n=数値\n\n          例）CRCA61 SUV=Aを対象とした数値61(62に変換される)の戦闘結果を参照する。\n          例）CRCM98 対物で数値98の戦闘結果を参照する。\n      MESSAGETEXT\n\n      register_prefix('AR', 'SR', 'HR<=', 'CC', 'ACT', 'ACL', 'ACS', 'CRC[A-Z]')\n\n      def eval_game_system_specific_command(command)\n        result = roll_tables(command, TABLES)\n        return result if result\n\n        case command\n        when /\\ACRC(\\w)(\\d+)\\z/\n          suv = Regexp.last_match(1)\n          num = Regexp.last_match(2)\n          return mh_crc_table(suv, num)\n        when /\\AHR<=(.+)/\n          target = ArithmeticEvaluator.eval(\n            Regexp.last_match(1), round_type: @round_type\n          )\n          return rollHit(target)\n        end\n\n        return nil\n      end\n\n      def change_text(string)\n        string = string.gsub(/^(S)?AR/i) { \"\#{Regexp.last_match(1)}2D6\" }\n        string = string.gsub(/^(S)?SR/i) { \"\#{Regexp.last_match(1)}1D100\" }\n        return string\n      end\n\n      def result_2d6(_total, dice_total, _dice_list, cmp_op, _target)\n        return nil if cmp_op != :>=\n\n        if dice_total >= 12\n          Result.critical(\"絶対成功\")\n        elsif dice_total <= 2\n          Result.fumble(\"絶対失敗\")\n        end\n      end\n\n      def rollHit(target)\n        total = @randomizer.roll_once(100)\n        resultText = getHitResult(total, total, target)\n\n        text = \"(1D100<=\#{target}) ＞ \#{total}\#{resultText}\"\n\n        return text\n      end\n\n      def result_1d100(_total, dice_total, cmp_op, _target)\n        return nil unless cmp_op == :<=\n\n        if dice_total <= 5\n          Result.critical(\"絶対成功\")\n        elsif dice_total >= 96\n          Result.fumble(\"絶対失敗\")\n        end\n      end\n\n      def getHitResult(total_n, _dice_n, diff)\n        diceValue = total_n % 100\n        dice1 = diceValue % 10 # 1の位を代入\n\n        debug(\"total_n\", total_n)\n\n        return ' ＞ 失敗' if total_n > diff\n\n        return ' ＞ 成功（クリティカル）' if  dice1 == 1\n        return ' ＞ 失敗（アクシデント）' if  dice1 == 0\n\n        return ' ＞ 成功'\n      end\n\n      # 戦闘結果チャートを振る\n      # @param [String] suv 耐久レベル\n      # @param [String] num 数値\n      # @return [String] 振った結果\n      def mh_crc_table(suv, num)\n        header_parts = ['戦闘結果チャート', num]\n        separator = ' ＞ '\n\n        suv = suv.to_s.upcase\n        numbuf = num.to_i\n        if numbuf < 1\n          return (header_parts + ['数値が不正です']).join(separator)\n        end\n\n        num_d1 = numbuf % 10\n        debug(\"num_d1[\#{num_d1}]\")\n        if num_d1 == 1\n          numbuf += 1\n        end\n        if num_d1 == 0\n          numbuf -= 1\n        end\n        num_d1 = numbuf % 10\n        debug(\"num_d1[\#{num_d1}]\")\n\n        table_point = [\n          nil, # 0\n          nil, # 1\n          \"腕部\", # 2\n          \"腕部\", # 3\n          \"脚部\", # 4\n          \"脚部\", # 5\n          \"胴部\", # 6\n          \"胴部\", # 7\n          \"胴部\", # 8\n          \"頭部\", # 9\n        ]\n\n        table_damage = {\n          'S' => [{'N' => 2}, {'LW' => 16}, {'MD' => 46}, {'MW' => 56}, {'HD' => 76}, {'HW' => 96}, {'MO' => 106}, {'K' => 116}],\n          'A' => [{'LW' => 2}, {'MW' => 46}, {'HW' => 76}, {'MO' => 96}, {'K' => 116}],\n          'B' => [{'LW' => 2}, {'MW' => 36}, {'HW' => 66}, {'MO' => 96}, {'K' => 106}],\n          'C' => [{'LW' => 2}, {'MW' => 26}, {'HW' => 66}, {'MO' => 86}, {'K' => 106}],\n          'D' => [{'LW' => 2}, {'MW' => 26}, {'HW' => 46}, {'MO' => 76}, {'K' => 96}],\n          'E' => [{'LW' => 2}, {'MW' => 26}, {'HW' => 39}, {'MO' => 54}, {'K' => 76}],\n          'F' => [{'LW' => 2}, {'MW' => 16}, {'HW' => 39}, {'MO' => 54}, {'K' => 66}],\n          'G' => [{'LW' => 2}, {'MW' => 6}, {'HW' => 16}, {'MO' => 26}, {'K' => 39}],\n          'M' => [{'0'  => 2}, {'1' => 22}, {'2' => 42}, {'3' => 62}, {'4' => 82}, {'5' => 92}, {'6' => 102}, {'8' => 112}],\n        }\n\n        if table_damage[suv].nil?\n          return (header_parts + [\n            \"耐久レベル(SUV)[\#{suv}]\",\n            \"耐久レベル(SUV)の値が不正です\",\n          ]).join(separator)\n        end\n\n        damage_level = ''\n        table_damage[suv].each do |v|\n          v.each do |d, n|\n            debug(\"suv[\#{suv}] \#{v} \#{d} \#{n}\")\n            if n <= numbuf\n              damage_level = d\n            end\n          end\n        end\n\n        result_parts = []\n\n        if numbuf != num.to_i\n          result_parts.push(numbuf.to_s)\n        end\n\n        if suv == 'M'\n          result_parts.push('耐物', \"HP[\#{damage_level}]\")\n        else\n          result_parts.push(\n            \"耐久レベル(SUV)[\#{suv}]\",\n            \"部位[\#{table_point[num_d1]}] ： 損傷種別[\#{damage_level}]\"\n          )\n        end\n\n        return (header_parts + result_parts).join(separator)\n      end\n\n      # 表を振った結果の整形処理\n      TABLE_ROLL_RESULT_FORMATTER = lambda do |table, result|\n        [table.name, result.sum, result.content].join(' ＞ ')\n      end\n\n      # 表の集合\n      TABLES = {\n        'CC' => DiceTable::RangeTable.new(\n          'クリティカルチャート',\n          '1D10',\n          [\n            [1,     '相手は知覚系に多大なダメージを受けた。PERを1にして頭部にHWのダメージ、および心理チェック。'],\n            [2,     '相手の運動神経を断ち切った。DEXを1にして腕部にHWのダメージ、および心理チェック。さらに腕に持っていた武器などは落としてしまう。'],\n            [3,     '相手の移動手段は完全に奪われた。REFを1にして脚部にHWダメージと心理チェック。また、次回からのこちらの攻撃は必ず命中する。'],\n            [4..5,  '相手の急所に命中。激痛のため気絶した上、胴にHWダメージ。'],\n            [6,     '効果的な一撃。胴にHWダメージ。心理チェック。'],\n            [7,     '効果的な一撃。胴にMOダメージ。心理チェック。'],\n            [8..10, '君の一撃は相手の中枢を完全に破壊した。即死である。'],\n          ],\n          &TABLE_ROLL_RESULT_FORMATTER\n        ),\n        'ACL' => DiceTable::RangeTable.new(\n          'アクシデントチャート（射撃・投擲）',\n          '1D10',\n          [\n            [1..7, 'ささいなミス。特にペナルティーはない。'],\n            [8,    '不発、またはジャム。弾を取り出さねばならない物は次のターンは射撃できない。'],\n            [9,    'ささいな故障。可能なら次のターンから個別武器のスキルロールで修理を行える。'],\n            [10,   '武器の暴発、または爆発。頭部HWの心理効果ロール。さらに、その武器は破壊されPERとDEXのどちらか、または両方に計2ポイントのマイナスを与える。（遠隔操作の場合、射手への被害は無し）'],\n          ],\n          &TABLE_ROLL_RESULT_FORMATTER\n        ),\n        'ACS' => DiceTable::RangeTable.new(\n          'アクシデントチャート（格闘）',\n          '1D10',\n          [\n            [1..3, '足を滑らせて転倒し、起き上がるまで相手に+20の命中修正を与える。'],\n            [4..6, '手を滑らせて、武器を落とす。素手の時は関係ない。'],\n            [7..9, '使用武器の破壊。素手戦闘のときはMWのダメージを受ける。'],\n            [10,   '手を滑らせ、不幸にも武器は飛んでいき、5m以内に人がいれば誰かに刺さるか、または打撃を与えるかもしれない。ランダムに決定し、普通どおり判定を続ける。素手のときは関係ない。'],\n          ],\n          &TABLE_ROLL_RESULT_FORMATTER\n        ),\n      }.freeze\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:MetalHead>", "register_prefix", "eval_game_system_specific_command", "command", "result", "roll_tables", "TABLES", "$ret_or_1", "suv", "Regexp", "last_match", "1", "num", "2", "mh_crc_table", "target", "ArithmeticEvaluator", "eval", "@round_type", "rollHit", "change_text", "string", "gsub", "block in change_text", "block (2 levels) in change_text", "result_2d6", "_total", "dice_total", "_dice_list", "cmp_op", "_target", ">=", "12", "Result", "critical", "<=", "fumble", "total", "@randomizer", "roll_once", "100", "resultText", "getHitResult", "text", "result_1d100", "5", "96", "total_n", "_dice_n", "diff", "diceValue", "%", "dice1", "10", "debug", ">", "0", "header_parts", "separator", "to_s", "upcase", "numbuf", "to_i", "<", "+", "join", "num_d1", "-", "table_point", "table_damage", "16", "46", "56", "76", "106", "116", "36", "66", "26", "86", "39", "54", "6", "22", "42", "62", "82", "92", "102", "112", "[]", "nil?", "damage_level", "each", "block in mh_crc_table", "v", "block (2 levels) in mh_crc_table", "d", "n", "block (3 levels) in mh_crc_table", "result_parts", "push", "lambda", "block in <class:MetalHead>", "table", "block (2 levels) in <class:MetalHead>", "name", "sum", "content", "new", "DiceTable::RangeTable", "DiceTable", "3", "4", "7", "8", "TABLE_ROLL_RESULT_FORMATTER", "to_proc", "9", "freeze", "Base"], :mappings=>"AAAAA,2BAAAA;EAAAA;;;EAEAC,IAAAC,SAAAA,CAAQF,6BAARE;EACAD,IAAAC,SAAAA,CAAQF,+BAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAEE,8BAAKA,WAAL;QAGA,gCAAOA,QAAP;QAGA,oCAAWA,QAAX;QAGA,wCACNA,sBADqB,GAErBA,2BAFqB,GAGrBA,0BAHqB,GAIrBA,IAJqB,GAKrBA,aALqB,GAMrBA,mBANqB,GAOrBA,mBAPqB,GAQrBA,IARqB,GASrBA,iDATqB,GAUrBA,IAVqB,GAWrBA,mBAXqB,GAYrBA,oCAZqB,GAarBA,4CAbqB,GAcrBA,IAdqB,GAerBA,mDAfqB,GAgBrBA,iCAhBM;QAmBAJ,IAAAK,iBAAAA,CAAgBD,IAAhB,EAAsBA,IAAtB,EAA4BA,MAA5B,EAAoCA,IAApC,EAA0CA,KAA1C,EAAiDA,KAAjD,EAAwDA,KAAxD,EAA+DA,UAA/DC;;AAEAC,QAAAA,iDAAAA,6CAAsCC,OAAtCD,GAAAA,MAAAA,IAAAA,wCAAAA;AAAAA,UAAAA;;;UACEE,SAASR,IAAAS,aAAAA,CAAYF,OAAZ,EAAqBG,YAArBD;UACT,IAAA,QAAiBD,MAAjB,CAAA;YAAA,OAAOA;UAAP;UAGA,IAAA,QAAK,gBAAL,EADAG,CAAAA,YAAKJ,OAALI,CACA,CAAA;;YACEC,MAAMC,YAAMC,YAAAA,CAAYC,CAAZD;YACZE,MAAMH,YAAMC,YAAAA,CAAYG,CAAZH;YACZ,OAAOd,IAAAkB,cAAAA,CAAaN,GAAb,EAAkBI,GAAlBE;UAHT,OAIA,IAAA,QAAK,WAAL,EAhDR,SAgDQ,CAAA;;YACEC,SAASC,yBAAmBC,MAAAA,CAC1BR,YAAMC,YAAAA,CAAYC,CAAZD,CADC,EACe,wBAAA,cAAYQ,eAAZ,EADID;YAG5B,OAAOrB,IAAAuB,SAAAA,CAAQJ,MAARI;UAJT;YALA;UAKA;UAOA,OAAO,IAhBTjB;YAAAA;YAAAA;UAAAA;QAAAA,CAAAA;;AAmBAkB,QAAAA,2BAAAA,uBAAgBC,MAAhBD;AAAAA;;UACEC,SAAeC,MAAND,MAAMC,QAAAA,EAAAA,CAAM,UAANA,CAAAA,EAANC,aAAAA;YAA0BC,OAAA,EAAA,GAAA,CAAGf,YAAMC,YAAAA,CAAYC,CAAZD,CAAT,CAAA,GAAwBc,KAAlDD,CAAMD;UACfD,SAAeC,MAAND,MAAMC,QAAAA,EAAAA,CAAM,UAANA,CAAAA,EAANC,aAAAA;YAA0BC,OAAA,EAAA,GAAA,CAAGf,YAAMC,YAAAA,CAAYC,CAAZD,CAAT,CAAA,GAAwBc,OAAlDD,CAAMD;UACf,OAAOD;QAHTD,CAAAA;;AAMAK,QAAAA,0BAAAA,sBAAeC,MAAD,EAASC,UAAT,EAAqBC,UAArB,EAAiCC,MAAjC,EAAyCC,OAAvDL;AAAAA;;UACE,IAAA,OAAcI,MAAd,EAAwB,IAAxB,CAAA;YAAA,OAAO;UAAP;UAEA,IAAA,QAAcE,OAAXJ,UAAWI,EAAGC,EAAHD,CAAd,CAAA;YACEN,OAAAQ,YAAMC,UAAAA,CAAUT,MAAVS;UADR,OAEA,IAAA,QAAiBC,OAAXR,UAAWQ,EAAGtB,CAAHsB,CAAjB,CAAA;YACEV,OAAAQ,YAAMG,QAAAA,CAAQX,MAARW;UADR;YArERX,OAAA;UAqEQ;QALFA,CAAAA;;AAUAN,QAAAA,uBAAAA,mBAAYJ,MAAZI;AAAAA,UAAAA;;;UACEkB,QAAQC,eAAWC,WAAAA,CAAWC,GAAXD;UACnBE,aAAa7C,IAAA8C,cAAAA,CAAaL,KAAb,EAAoBA,KAApB,EAA2BtB,MAA3B2B;UAEbC,OAAQxB,UAAD,GAAA,CAAWJ,MAAX,CAAA,GAAkBI,MAAlB,GAAA,CAAwBkB,KAAxB,CAAA,GAAA,CAAgCI,UAAhC;UAEP,OAAOE;QANTxB,CAAAA;;AASAyB,QAAAA,4BAAAA,wBAAiBlB,MAAD,EAASC,UAAT,EAAqBE,MAArB,EAA6BC,OAA7Cc;AAAAA;;UACE,KAAA,MAAkBf,MAAlB,EAA4B,IAA5B,CAAA;YAAA,OAAO;UAAP;UAEA,IAAA,QAAcM,OAAXR,UAAWQ,EAAGU,CAAHV,CAAd,CAAA;YACES,OAAAX,YAAMC,UAAAA,CAAUU,MAAVV;UADR,OAEA,IAAA,QAAiBH,OAAXJ,UAAWI,EAAGe,EAAHf,CAAjB,CAAA;YACEa,OAAAX,YAAMG,QAAAA,CAAQQ,MAARR;UADR;YAxFRQ,OAAA;UAwFQ;QALFA,CAAAA;;AAUAF,QAAAA,4BAAAA,wBAAiBK,OAAD,EAAUC,OAAV,EAAmBC,IAAnCP;AAAAA,UAAAA;;;UACEQ,YAAYH,OAAQI,MAAAA,CAAEX,GAAFW;UACpBC,QAAQF,SAAUC,MAAAA,CAAEE,EAAFF;UAElBvD,IAAA0D,OAAAA,CAAMZ,SAAN,EAAiBK,OAAjBO;UAEA,IAAA,QAA0BC,OAARR,OAAQQ,EAAEN,IAAFM,CAA1B,CAAA;YAAA,OAAOb;UAAP;UAEA,IAAA,MAA2BU,KAA3B,EAAoCzC,CAApC,CAAA;YAAA,OAAO+B;UAAP;UACA,IAAA,MAA2BU,KAA3B,EAAoCI,CAApC,CAAA;YAAA,OAAOd;UAAP;UAEA,OAAOA;QAXTA,CAAAA;;AAkBA5B,QAAAA,4BAAAA,wBAAiBN,GAAD,EAAMI,GAAtBE;AAAAA,UAAAA;;;UACE2C,eAAe,CAAC3C,UAAD,EAAaF,GAAb;UACf8C,YAAY5C;UAEZN,MAAMA,GAAGmD,MAAAA,CAAAA,CAAKC,QAAAA,CAAAA;UACdC,SAASjD,GAAGkD,MAAAA,CAAAA;UACZ,IAAA,QAAUC,OAAPF,MAAOE,EAAEpD,CAAFoD,CAAV,CAAA;YACE,OAAqBC,SAAbP,YAAaO,EAAE,CAAClD,SAAD,CAAFkD,CAAcC,MAAAA,CAAMP,SAANO;UADrC;UAIAC,SAASL,MAAOV,MAAAA,CAAEE,EAAFF;UAChBvD,IAAA0D,OAAAA,CAAOxC,SAAD,GAAA,CAAUoD,MAAV,CAAA,GAAiBpD,GAAvBwC;UACA,IAAA,MAAGY,MAAH,EAAavD,CAAb,CAAA;YACEkD,SAAOG,SAAPH,MAAOG,EAAGrD,CAAHqD;UADT;UAGA,IAAA,MAAGE,MAAH,EAAaV,CAAb,CAAA;YACEK,SAAOM,UAAPN,MAAOM,EAAGxD,CAAHwD;UADT;UAGAD,SAASL,MAAOV,MAAAA,CAAEE,EAAFF;UAChBvD,IAAA0D,OAAAA,CAAOxC,SAAD,GAAA,CAAUoD,MAAV,CAAA,GAAiBpD,GAAvBwC;UAEAc,cAAc,CACZ,GADY,EAEZ,GAFY,EAGZtD,IAHY,EAIZA,IAJY,EAKZA,IALY,EAMZA,IANY,EAOZA,IAPY,EAQZA,IARY,EASZA,IATY,EAUZA,IAVY;UAaduD,eAAe,uDAAA,KACN,CAAC,eAAA,KAAQxD,CAAR,EAAD,EAAa,gBAAA,MAASyD,EAAT,EAAb,EAA2B,gBAAA,MAASC,EAAT,EAA3B,EAAyC,gBAAA,MAASC,EAAT,EAAzC,EAAuD,gBAAA,MAASC,EAAT,EAAvD,EAAqE,gBAAA,MAAS3B,EAAT,EAArE,EAAmF,gBAAA,MAAS4B,GAAT,EAAnF,EAAkG,eAAA,KAAQC,GAAR,EAAlG,CADM,EAAA,KAEN,CAAC,gBAAA,MAAS9D,CAAT,EAAD,EAAc,gBAAA,MAAS0D,EAAT,EAAd,EAA4B,gBAAA,MAASE,EAAT,EAA5B,EAA0C,gBAAA,MAAS3B,EAAT,EAA1C,EAAwD,eAAA,KAAQ6B,GAAR,EAAxD,CAFM,EAAA,KAGN,CAAC,gBAAA,MAAS9D,CAAT,EAAD,EAAc,gBAAA,MAAS+D,EAAT,EAAd,EAA4B,gBAAA,MAASC,EAAT,EAA5B,EAA0C,gBAAA,MAAS/B,EAAT,EAA1C,EAAwD,eAAA,KAAQ4B,GAAR,EAAxD,CAHM,EAAA,KAIN,CAAC,gBAAA,MAAS7D,CAAT,EAAD,EAAc,gBAAA,MAASiE,EAAT,EAAd,EAA4B,gBAAA,MAASD,EAAT,EAA5B,EAA0C,gBAAA,MAASE,EAAT,EAA1C,EAAwD,eAAA,KAAQL,GAAR,EAAxD,CAJM,EAAA,KAKN,CAAC,gBAAA,MAAS7D,CAAT,EAAD,EAAc,gBAAA,MAASiE,EAAT,EAAd,EAA4B,gBAAA,MAASP,EAAT,EAA5B,EAA0C,gBAAA,MAASE,EAAT,EAA1C,EAAwD,eAAA,KAAQ3B,EAAR,EAAxD,CALM,EAAA,KAMN,CAAC,gBAAA,MAASjC,CAAT,EAAD,EAAc,gBAAA,MAASiE,EAAT,EAAd,EAA4B,gBAAA,MAASE,EAAT,EAA5B,EAA0C,gBAAA,MAASC,EAAT,EAA1C,EAAwD,eAAA,KAAQR,EAAR,EAAxD,CANM,EAAA,KAON,CAAC,gBAAA,MAAS5D,CAAT,EAAD,EAAc,gBAAA,MAASyD,EAAT,EAAd,EAA4B,gBAAA,MAASU,EAAT,EAA5B,EAA0C,gBAAA,MAASC,EAAT,EAA1C,EAAwD,eAAA,KAAQJ,EAAR,EAAxD,CAPM,EAAA,KAQN,CAAC,gBAAA,MAAShE,CAAT,EAAD,EAAc,gBAAA,MAASqE,CAAT,EAAd,EAA2B,gBAAA,MAASZ,EAAT,EAA3B,EAAyC,gBAAA,MAASQ,EAAT,EAAzC,EAAuD,eAAA,KAAQE,EAAR,EAAvD,CARM,EAAA,KASN,CAAC,eAAA,KAASnE,CAAT,EAAD,EAAc,eAAA,KAAQsE,EAAR,EAAd,EAA2B,eAAA,KAAQC,EAAR,EAA3B,EAAwC,eAAA,KAAQC,EAAR,EAAxC,EAAqD,eAAA,KAAQC,EAAR,EAArD,EAAkE,eAAA,KAAQC,EAAR,EAAlE,EAA+E,eAAA,KAAQC,GAAR,EAA/E,EAA6F,eAAA,KAAQC,GAAR,EAA7F,CATM;UAYf,IAAA,QAAGpB,YAAYqB,OAAAA,CAAClF,GAADkF,CAAKC,SAAAA,CAAAA,CAApB,CAAA;YACE,OAAqB3B,SAAbP,YAAaO,EAAE,CACpBlD,aAAD,GAAA,CAAcN,GAAd,CAAA,GAAkBM,GADG,EAErBA,mBAFqB,CAAFkD,CAGnBC,MAAAA,CAAMP,SAANO;UAJJ;UAOA2B,eAAe9E;UACE+E,MAAjBxB,YAAYqB,OAAAA,CAAClF,GAADkF,CAAKG,QAAAA,EAAAA,EAAAA,EAAjBC,aAA2BC,CAA3BD,EAAAE;;;YAA2B;YACzBA,OAACH,MAADE,CAACF,QAAAA,EAAAA,EAAAA,EAADG,aAAWC,CAAD,EAAIC,CAAdF,EAAAG;;;cAAW;cAAG;cACZvG,IAAA0D,OAAAA,CAAO6C,MAAD,GAAA,CAAO3F,GAAP,CAAA,GAAW2F,IAAX,GAAA,CAAeJ,CAAf,CAAA,GAAiBI,GAAjB,GAAA,CAAoBF,CAApB,CAAA,GAAsBE,GAAtB,GAAA,CAAyBD,CAAzB,CAAN5C;cACA,IAAA,QAAKnB,OAAF+D,CAAE/D,EAAG0B,MAAH1B,CAAL,CAAA;gBACEgE,OAAAP,CAAAA,eAAeK,CAAfL;cADF;gBAxKZO,OAAA;cAwKY,EAFFH,CAAAA,GAAAA,SAAAA,CAACH,EADHC,CAAAA,GAAAA,SAAAA,CAAiBD;UASjBO,eAAe;UAEf,IAAA,OAAGvC,MAAH,EAAajD,GAAGkD,MAAAA,CAAAA,CAAhB,CAAA;YACEsC,YAAYC,MAAAA,CAAMxC,MAAMF,MAAAA,CAAAA,CAAZ0C;UADd;UAIA,IAAA,MAAG7F,GAAH,EAAUM,GAAV,CAAA;YACEsF,YAAYC,MAAAA,CAAMvF,IAAlB,EAAyBA,KAAD,GAAA,CAAM8E,YAAN,CAAA,GAAmB9E,GAA/BuF;UADd;YAGED,YAAYC,MAAAA,CACTvF,aAAD,GAAA,CAAcN,GAAd,CAAA,GAAkBM,GADpB,EAEGA,KAAD,GAAA,CAAMsD,WAAWsB,OAAAA,CAACxB,MAADwB,CAAjB,CAAA,GAA0B5E,WAA1B,GAAA,CAAqC8E,YAArC,CAAA,GAAkD9E,GAFxCuF;UAHd;UASA,OAAqBrC,SAAbP,YAAaO,EAAEoC,YAAFpC,CAAeC,MAAAA,CAAMP,SAANO;QA9EtCnD,CAAAA;QAkFA,uDAA8BwF,MAAA1G,IAAA0G,UAAAA,EAAAA,EAAAA,EAAAC,sBAAWC,KAAD,EAAQpG,MAAlBmG;;UAAW;UAAO;UAC9CE,OAAA,CAACD,KAAKE,MAAAA,CAAAA,CAAN,EAAatG,MAAMuG,KAAAA,CAAAA,CAAnB,EAAyBvG,MAAMwG,SAAAA,CAAAA,CAA/B,CAAwC3C,MAAAA,CAAMwC,KAANxC,EADZsC,CAAAD,CAA9B;QAKAtG,OAAA,kCAAS,8BAAA,MACsB6G,MAArBC,IAAAC,eAAAD,eAAqBD,OAAAA,EAAAA,CAC3B7G,YADM,EAENA,MAFM,EAGN,CACE,CAACW,CAAD,EAAQX,kDAAR,CADF,EAEE,CAACa,CAAD,EAAQb,oEAAR,CAFF,EAGE,CAACgH,CAAD,EAAQhH,iEAAR,CAHF,EAIE,CAAC,OAAAiH,CAAA,EAAGpE,CAAH,QAAD,EAAQ7C,+BAAR,CAJF,EAKE,CAACkF,CAAD,EAAQlF,yBAAR,CALF,EAME,CAACkH,CAAD,EAAQlH,yBAAR,CANF,EAOE,CAAC,OAAAmH,CAAA,EAAG9D,EAAH,QAAD,EAAQrD,2BAAR,CAPF,CAH2B6G,CAAAA,EAY1BO,iCAADC,SAAAA,CAAAA,CAZ2BR,CADtB,EAAA,OAeuBA,MAArBC,IAAAC,eAAAD,eAAqBD,OAAAA,EAAAA,CAC5B7G,mBADO,EAEPA,MAFO,EAGP,CACE,CAAC,OAAAW,CAAA,EAAGuG,CAAH,QAAD,EAAOlH,qBAAP,CADF,EAEE,CAACmH,CAAD,EAAOnH,uCAAP,CAFF,EAGE,CAACsH,CAAD,EAAOtH,uCAAP,CAHF,EAIE,CAACqD,EAAD,EAAOrD,8FAAP,CAJF,CAH4B6G,CAAAA,EAS3BO,iCAADC,SAAAA,CAAAA,CAT4BR,CAfvB,EAAA,OA0BuBA,MAArBC,IAAAC,eAAAD,eAAqBD,OAAAA,EAAAA,CAC5B7G,gBADO,EAEPA,MAFO,EAGP,CACE,CAAC,OAAAW,CAAA,EAAGqG,CAAH,QAAD,EAAOhH,mCAAP,CADF,EAEE,CAAC,OAAAiH,CAAA,EAAG/B,CAAH,QAAD,EAAOlF,0BAAP,CAFF,EAGE,CAAC,OAAAkH,CAAA,EAAGI,CAAH,QAAD,EAAOtH,8BAAP,CAHF,EAIE,CAACqD,EAAD,EAAOrD,uFAAP,CAJF,CAH4B6G,CAAAA,EAS3BO,iCAADC,SAAAA,CAAAA,CAT4BR,CA1BvB,EAqCRU,QAAAA,CAAAA,CArCD;MA/LFvH,GAAAA,WAAAA,EAAkBwH,UAAlBxH;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AALAH;"}}]}