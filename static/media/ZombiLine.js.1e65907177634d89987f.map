{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/ZombiLine.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class ZombiLine < Base\n      # ゲームシステムの識別子\n      ID = \"ZombiLine\"\n\n      # ゲームシステム名\n      NAME = \"ゾンビライン\"\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = \"そんひらいん\"\n\n      HELP_MESSAGE = <<~TEXT\n        ■ 判定 (xZL<=y)\n        　x：ダイス数(省略時は1)\n        　y：成功率\n\n        ■ 各種表\n        　ストレス症状表 SST\n        　食材表 IT\n      TEXT\n\n      def initialize(command)\n        super(command)\n        @sides_implicit_d = 10\n      end\n\n      def eval_game_system_specific_command(command)\n        return check_action(command) || roll_tables(command, TABLES)\n      end\n\n      def check_action(command)\n        parser = Command::Parser.new(\"ZL\", round_type: @round_type)\n                                .enable_prefix_number\n                                .disable_modifier\n                                .restrict_cmp_op_to(:<=)\n        parsed = parser.parse(command)\n        unless parsed\n          return nil\n        end\n\n        dice_count = parsed.prefix_number || 1\n        target_num = parsed.target_number\n\n        debug(dice_count)\n\n        dice_list = @randomizer.roll_barabara(dice_count, 100).sort\n        is_success = dice_list.any? { |i| i <= target_num }\n        is_critical = dice_list.any? { |i| i <= 5 }\n        is_fumble = dice_list.any? { |i| i >= 96 && i > target_num }\n        if is_critical && is_fumble\n          is_critical = false\n          is_fumble = false\n        end\n\n        success_message =\n          if is_success && is_critical\n            \"成功(クリティカル)\"\n          elsif is_success && is_fumble\n            \"成功(ファンブル)\"\n          elsif is_success\n            \"成功\"\n          elsif is_fumble\n            \"失敗(ファンブル)\"\n          else\n            \"失敗\"\n          end\n        sequence = [\n          \"(\#{parsed})\",\n          \"[\#{dice_list.join(',')}]\",\n          success_message\n        ]\n\n        Result.new.tap do |r|\n          r.text = sequence.join(\" ＞ \")\n          r.condition = is_success\n          r.critical = is_critical\n          r.fumble = is_fumble\n        end\n      end\n\n      TABLES = {\n        'SST' => DiceTable::Table.new(\n          'ストレス症状表',\n          '1D10',\n          [\n            '憤怒：一番近い敵を攻撃（成功率+20%）しにいきます。近くに敵がいない場合、誰かのストレスを＋１させます。　頭に血が上り、誰かに怒りをぶつけます。',\n            '逃避：落下してでも敵から逃げるように移動します。周囲に敵が居ない場合、現実逃避します。　耐えられなくなり、逃げ出します。',\n            '幻覚：戦闘中は、「行動放棄（全AP）」します。戦闘以外なら、幻覚を見て笑います。　自分が望む幻覚が見えます。',\n            '絶叫：戦闘中は、「注目を集める（2AP）」をします。戦闘以外なら、無意味に叫びます。　思わず叫んでしまいます。',\n            '自傷：自ら【怪我】を負います。戦闘中は「自傷行為（1AP）」をして自分が【怪我】します。　思わず自分を傷つけます。',\n            '不安：誰かのストレスを１上げます。近くに誰も居ない場合、泣き出します。　不安にかられて余計なことを言います。',\n            '忌避：その場から一番近い対象に「石（1AP）」を投げます。それができない場合、【転倒】してうずくまります。　嫌悪感から全てを拒みます。',\n            '暴走：一番近い敵を攻撃しにいきます。近くに敵がいない場合、周りの意見も聞かずに安直な行動をします。　冷静でいられなくなり、直情的になります。',\n            '混乱：近くにいるランダムな対象に格闘で攻撃しにいきます。それができない場合、「行動放棄（全 AP）」します。　世界全てが敵に見えて攻撃します。',\n            '開眼：ストレスは0まで下がります。あなたは教祖となって教義をひとつつくって「布教」できます。次の症状が出るまで効果は続きます。　ゾンビだらけの世界の真理を見つけます。',\n          ]\n        ),\n        'IT' => DiceTable::RangeTable.new(\n          '食材表',\n          '1d100',\n          [\n            [1..50, '生モノ食材'],\n            [51..80, '怪しい食材'],\n            [81..100, '危ない食材']\n          ]\n        )\n      }.freeze\n\n      register_prefix('\\d*ZL', TABLES.keys)\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:ZombiLine>", "initialize", "command", "self", "@sides_implicit_d", "10", "eval_game_system_specific_command", "$ret_or_1", "check_action", "roll_tables", "TABLES", "parser", "Command::Parser", "Command", "new", "@round_type", "enable_prefix_number", "disable_modifier", "restrict_cmp_op_to", "parsed", "parse", "dice_count", "prefix_number", "1", "target_num", "target_number", "debug", "dice_list", "@randomizer", "roll_barabara", "100", "sort", "is_success", "any?", "block in check_action", "i", "block (2 levels) in check_action", "<=", "is_critical", "5", "is_fumble", ">=", "96", ">", "success_message", "sequence", "join", "tap", "Result", "r", "text=", "condition=", "critical=", "fumble=", "DiceTable::Table", "DiceTable", "DiceTable::RangeTable", "50", "51", "80", "81", "freeze", "register_prefix", "keys", "Base"], :mappings=>"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"}}]}