{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Raisondetre.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Raisondetre < Base\n      # ゲームシステムの識別子\n      ID = 'Raisondetre'\n\n      # ゲームシステム名\n      NAME = '叛逆レゾンデートル'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'はんきやくれそんてとおる'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        判定：[判定値]RD[技能][@目標値]\n        ダメージロール：[ダイス数]DD[装甲]\n\n        []内のコマンドは省略可能。\n        「判定値」で判定に使用するダイス数を指定。省略時は「1」。0以下も指定可。\n        「技能」で有効なダイス数を指定。省略時は「1」。\n        達成値はクリティカルを含めて、「最も高くなる」ように計算します。\n        「@目標値」指定で、判定の成否を追加表示します。\n\n        ダメージロールは[装甲]指定で、有効なダイス数と0の出目の数を表示します。\n        [装甲]省略時は、ダイス結果のみ表示します。（複数の対象への攻撃時用）\n\n        【書式例】\n        ・RD → 1Dで達成値を表示。\n        ・2RD1@8 → 2D（1個選択）で目標値8の判定。\n        ・-3RD → 1Dでダイスペナルティ-4の判定。\n        ・4DD2 → 4Dで装甲2のダメージロール。\n      MESSAGETEXT\n\n      def initialize(command)\n        super(command)\n        @sort_add_dice = true # ダイスのソート有\n      end\n\n      register_prefix(\n        '(-)?(\\d+)?RD',\n        '(-)?(\\d+)?DD'\n      )\n\n      def eval_game_system_specific_command(command)\n        if command =~ /(-)?(\\d+)?RD(\\d+)?(@(\\d+))?$/i\n          diceCount = (Regexp.last_match(2) || 1).to_i\n          diceCount *= -1 unless Regexp.last_match(1).nil?\n          choiceCount = (Regexp.last_match(3) || 1).to_i\n          target = (Regexp.last_match(5) || 0).to_i\n\n          return checkRoll(diceCount, choiceCount, target)\n\n        elsif command =~ /(-)?(\\d+)?DD([1-9])?([+-]\\d+)?$/i\n          diceCount = (Regexp.last_match(2) || 1).to_i\n          diceCount *= -1 unless Regexp.last_match(1).nil?\n          armor = (Regexp.last_match(3) || 0).to_i\n          if armor > 0\n            armor += (Regexp.last_match(4) || 0).to_i\n            armor = 1 if  armor < 1\n            armor = 9 if  armor > 9\n          end\n\n          return checkDamage(diceCount, armor)\n\n        end\n\n        return nil\n      end\n\n      def checkRoll(diceCount, choiceCount, target)\n        if diceCount <= 0\n          correction = 1 + diceCount * -1\n          rollCount = 1\n        else\n          correction = 0\n          rollCount = diceCount\n        end\n\n        diceArray = @randomizer.roll_barabara(rollCount, 10).sort\n        diceText = diceArray.join(',')\n\n        diceArray.map! { |x| x == 10 ? 0 : x }\n        diceArray.map! { |i| i - correction }\n        diceText2 = diceArray.sort.join(',')\n\n        funbleArray = diceArray.select { |i| i <= 1 }\n        isFunble = (funbleArray.size >= rollCount)\n\n        dice = 0\n        success = 0\n        unless isFunble\n          criticalCount = diceArray.count(0)\n          critical = criticalCount * 10\n\n          choiceArray = diceArray.reverse\n          choiceArray.delete(0)\n          choiceArray = choiceArray.slice(0..(choiceCount - 1))\n          choiceText = choiceArray.join(',')\n          dice = choiceArray.inject(:+)\n          success = dice + critical\n        end\n\n        result = \"\#{rollCount}D10\"\n        result += \"-\#{correction}\" if correction > 0\n        result += \" ＞ [\#{diceText}] ＞ [\#{diceText2}] ＞ \"\n\n        if isFunble\n          result += \"達成値：0 (Funble)\"\n        else\n          result += \"\#{dice}[\#{choiceText}]\"\n          result += \"+\#{critical}\" if critical > 0\n          result += \"=達成値：\#{success}\"\n          result += \" (\#{criticalCount}Critical)\" if critical > 0\n        end\n\n        if target > 0\n          result += \">=\#{target} \"\n          result += \"【成功】\" if  success >= target\n          result += \"【失敗】\" if  success < target\n        end\n\n        return result\n      end\n\n      def checkDamage(diceCount, armor)\n        if diceCount <= 0\n          correction = 1 + diceCount * -1\n          rollCount = 1\n        else\n          correction = 0\n          rollCount = diceCount\n        end\n\n        dice_list = @randomizer.roll_barabara(rollCount, 10).sort\n        diceText = dice_list.join(\",\")\n\n        diceArray = dice_list.map { |x| x == 10 ? 0 : x }.sort\n        criticalCount = diceArray.count(0)\n        diceArray.map! { |i| i - correction }\n        diceText2 = diceArray.join(\",\")\n\n        result = \"\#{rollCount}D10\"\n        result += \"-\#{correction}\" if correction > 0\n        result += \" ＞ [\#{diceText}] ＞ [\#{diceText2}]\"\n\n        if armor > 0\n          resultArray = []\n          success = 0\n\n          diceArray.each do |i|\n            if i >= armor\n              resultArray.push(i)\n              success += 1\n            else\n              resultArray.push(\"×\")\n            end\n          end\n          resultText = resultArray.join(',')\n\n          result += \" ＞ [\#{resultText}]>=\#{armor} 有効数：\#{success}\"\n        end\n\n        result += \"　0=\#{criticalCount}個\"\n\n        return result\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Raisondetre>", "initialize", "command", "self", "@sort_add_dice", "register_prefix", "eval_game_system_specific_command", "=~", "diceCount", "$ret_or_1", "Regexp", "last_match", "2", "1", "to_i", "nil?", "*", "-1", "choiceCount", "3", "target", "5", "0", "checkRoll", "armor", ">", "+", "4", "<", "9", "checkDamage", "<=", "correction", "rollCount", "diceArray", "@randomizer", "roll_barabara", "10", "sort", "diceText", "join", "map!", "block in checkRoll", "x", "block (2 levels) in checkRoll", "i", "-", "diceText2", "funbleArray", "select", "isFunble", ">=", "size", "dice", "success", "criticalCount", "count", "critical", "choiceArray", "reverse", "delete", "slice", "choiceText", "inject", "result", "dice_list", "map", "block in checkDamage", "block (2 levels) in checkDamage", "resultArray", "each", "push", "resultText", "Base"], :mappings=>"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"}}]}