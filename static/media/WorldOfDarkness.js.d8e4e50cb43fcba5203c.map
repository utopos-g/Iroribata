{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/WorldOfDarkness.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class WorldOfDarkness < Base\n      # ゲームシステムの識別子\n      ID = 'WorldOfDarkness'\n\n      # ゲームシステム名\n      NAME = 'ワールド・オブ・ダークネス'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'わあるとおふたあくねす'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・判定コマンド(xSTn+y or xSTSn+y or xSTAn+y)\n        　(ダイス個数)ST(難易度)+(自動成功)\n        　(ダイス個数)STS(難易度)+(自動成功) ※出目10で振り足し、振り足し分の出目1で打ち消されない\n        　(ダイス個数)STB(難易度)+(自動成功) ※出目10で振り足し、振り足し分の出目1で打ち消される\n        　(ダイス個数)STA(難易度)+(自動成功) ※出目10は2成功 [20thルール]\n\n        　難易度=省略時6\n        　自動成功=省略時0、出目1で打ち消されない自動成功を指定\n      INFO_MESSAGE_TEXT\n\n      register_prefix('\\d+ST')\n\n      def eval_game_system_specific_command(command)\n        difficulty = 6\n        auto_success = 0\n        enabled_reroll = false\n        enabled_reroll_with_botch = false\n        enabled_20th = false\n\n        md = command.match(/\\A(\\d+)(ST[SAB]?)(\\d+)?([+-]\\d+)?/)\n\n        dice_pool = md[1].to_i\n        case md[2]\n        when 'STS'\n          enabled_reroll = true\n        when 'STA'\n          enabled_20th = true\n        when 'STB'\n          enabled_reroll_with_botch = true\n        end\n        difficulty = md[3].to_i if md[3]\n        auto_success = md[4].to_i if md[4]\n\n        difficulty = 6 if difficulty < 2\n\n        sequence = []\n        sequence.push \"DicePool=\#{dice_pool}, Difficulty=\#{difficulty}, AutomaticSuccess=\#{auto_success}\"\n\n        # 出力では Difficulty=11..12 もあり得る\n        difficulty = 10 if difficulty > 10\n\n        total_success = 0\n        total_botch = 0\n        once_success = false\n\n        dice, ten_success, success, botch = roll_wod(dice_pool, difficulty)\n        sequence.push dice.join(',')\n        total_success += success\n        total_botch += botch\n\n        # 成功がひとつでもあったか覚えておく\n        once_success = true if success > 0 || ten_success > 0\n\n        if enabled_20th\n          # 20周年記念版なら10の目は2成功扱い\n          total_success += ten_success * 2\n        else\n          # Revised Editionでは10は1成功と数える\n          total_success += ten_success\n\n          # 振り足し判定ありなら10が出ただけ振り足しを行う\n          if enabled_reroll || enabled_reroll_with_botch\n            while ten_success > 0\n              dice, ten_success, success, botch = roll_wod(ten_success, difficulty)\n              sequence.push dice.join(',')\n              total_success += (success + ten_success)\n\n              if enabled_reroll_with_botch\n                # 振り足しでのボッチありなら出目1をカウントする\n                total_botch += botch\n              end\n            end\n          end\n        end\n\n        total_success -= [total_success, total_botch].min\n\n        total_success += auto_success # 意志力による自動成功は打ち消されない\n\n        if total_success > 0\n          sequence.push \"成功数\#{total_success}\"\n          return Result.success(sequence.join(' ＞ '))\n        elsif total_botch > 0 && once_success == false\n          # ボッチが存在し、かつ成功がひとつもない場合のみ大失敗\n          sequence.push \"大失敗\"\n          return Result.fumble(sequence.join(' ＞ '))\n        else\n          sequence.push \"失敗\"\n          return Result.failure(sequence.join(' ＞ '))\n        end\n      end\n\n      # 出目10と1、難易度以上が出た成功の目をカウントする。\n      # それぞれの解釈はバージョンによって異なるため、呼び出し元で行う。\n      def roll_wod(dice_pool, difficulty)\n        # FIXME: まとめて振る\n        dice = Array.new(dice_pool) do\n          dice_now = @randomizer.roll_once(10)\n          dice_now\n        end\n\n        dice.sort!\n\n        success = 0\n        botch = 0\n        ten_success = 0\n\n        dice.each do |d|\n          case d\n          when 10\n            ten_success += 1\n          when difficulty...10\n            success += 1\n          when 1\n            botch += 1\n          end\n        end\n\n        return dice, ten_success, success, botch\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:WorldOfDarkness>", "self", "register_prefix", "eval_game_system_specific_command", "command", "difficulty", "6", "auto_success", "0", "enabled_reroll", "enabled_reroll_with_botch", "enabled_20th", "md", "match", "dice_pool", "[]", "1", "to_i", "2", "3", "4", "<", "sequence", "push", ">", "10", "total_success", "total_botch", "once_success", "roll_wod", "dice", "ten_success", "success", "botch", "join", "+", "*", "-", "min", "Result", "fumble", "failure", "new", "Array", "block in roll_wod", "block (2 levels) in roll_wod", "dice_now", "@randomizer", "roll_once", "sort!", "each", "d", "$ret_or_1", "Base"], :mappings=>"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"}}]}