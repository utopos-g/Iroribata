{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["racc/parser.rb"], :sourcesContent=>["# Opal port of racc/parser.rb.\n#\n# Original license:\n#\n# frozen_string_literal: false\n#--\n# $originalId: parser.rb,v 1.8 2006/07/06 11:42:07 aamine Exp $\n#\n# Copyright (c) 1999-2006 Minero Aoki\n#\n# This program is free software.\n# You can distribute/modify this program under the same terms of ruby.\n#\n# As a special exception, when this code is copied by Racc\n# into a Racc output file, you may use that output file\n# without restriction.\n#++\n\nmodule Racc\n  class ParseError < StandardError; end\nend\nunless defined?(::ParseError)\n  ParseError = Racc::ParseError\nend\n\n# Racc is a LALR(1) parser generator.\n# It is written in Ruby itself, and generates Ruby programs.\n#\n# == Command-line Reference\n#\n#     racc [-o<var>filename</var>] [--output-file=<var>filename</var>]\n#          [-e<var>rubypath</var>] [--embedded=<var>rubypath</var>]\n#          [-v] [--verbose]\n#          [-O<var>filename</var>] [--log-file=<var>filename</var>]\n#          [-g] [--debug]\n#          [-E] [--embedded]\n#          [-l] [--no-line-convert]\n#          [-c] [--line-convert-all]\n#          [-a] [--no-omit-actions]\n#          [-C] [--check-only]\n#          [-S] [--output-status]\n#          [--version] [--copyright] [--help] <var>grammarfile</var>\n#\n# [+filename+]\n#   Racc grammar file. Any extension is permitted.\n# [-o+outfile+, --output-file=+outfile+]\n#   A filename for output. default is <+filename+>.tab.rb\n# [-O+filename+, --log-file=+filename+]\n#   Place logging output in file +filename+.\n#   Default log file name is <+filename+>.output.\n# [-e+rubypath+, --executable=+rubypath+]\n#   output executable file(mode 755). where +path+ is the Ruby interpreter.\n# [-v, --verbose]\n#   verbose mode. create +filename+.output file, like yacc's y.output file.\n# [-g, --debug]\n#   add debug code to parser class. To display debugging information,\n#   use this '-g' option and set @yydebug true in parser class.\n# [-E, --embedded]\n#   Output parser which doesn't need runtime files (racc/parser.rb).\n# [-C, --check-only]\n#   Check syntax of racc grammar file and quit.\n# [-S, --output-status]\n#   Print messages time to time while compiling.\n# [-l, --no-line-convert]\n#   turns off line number converting.\n# [-c, --line-convert-all]\n#   Convert line number of actions, inner, header and footer.\n# [-a, --no-omit-actions]\n#   Call all actions, even if an action is empty.\n# [--version]\n#   print Racc version and quit.\n# [--copyright]\n#   Print copyright and quit.\n# [--help]\n#   Print usage and quit.\n#\n# == Generating Parser Using Racc\n#\n# To compile Racc grammar file, simply type:\n#\n#   $ racc parse.y\n#\n# This creates Ruby script file \"parse.tab.y\". The -o option can change the output filename.\n#\n# == Writing A Racc Grammar File\n#\n# If you want your own parser, you have to write a grammar file.\n# A grammar file contains the name of your parser class, grammar for the parser,\n# user code, and anything else.\n# When writing a grammar file, yacc's knowledge is helpful.\n# If you have not used yacc before, Racc is not too difficult.\n#\n# Here's an example Racc grammar file.\n#\n#   class Calcparser\n#   rule\n#     target: exp { print val[0] }\n#\n#     exp: exp '+' exp\n#        | exp '*' exp\n#        | '(' exp ')'\n#        | NUMBER\n#   end\n#\n# Racc grammar files resemble yacc files.\n# But (of course), this is Ruby code.\n# yacc's $$ is the 'result', $0, $1... is\n# an array called 'val', and $-1, $-2... is an array called '_values'.\n#\n# See the {Grammar File Reference}[rdoc-ref:lib/racc/rdoc/grammar.en.rdoc] for\n# more information on grammar files.\n#\n# == Parser\n#\n# Then you must prepare the parse entry method. There are two types of\n# parse methods in Racc, Racc::Parser#do_parse and Racc::Parser#yyparse\n#\n# Racc::Parser#do_parse is simple.\n#\n# It's yyparse() of yacc, and Racc::Parser#next_token is yylex().\n# This method must returns an array like [TOKENSYMBOL, ITS_VALUE].\n# EOF is [false, false].\n# (TOKENSYMBOL is a Ruby symbol (taken from String#intern) by default.\n# If you want to change this, see the grammar reference.\n#\n# Racc::Parser#yyparse is little complicated, but useful.\n# It does not use Racc::Parser#next_token, instead it gets tokens from any iterator.\n#\n# For example, <code>yyparse(obj, :scan)</code> causes\n# calling +obj#scan+, and you can return tokens by yielding them from +obj#scan+.\n#\n# == Debugging\n#\n# When debugging, \"-v\" or/and the \"-g\" option is helpful.\n#\n# \"-v\" creates verbose log file (.output).\n# \"-g\" creates a \"Verbose Parser\".\n# Verbose Parser prints the internal status when parsing.\n# But it's _not_ automatic.\n# You must use -g option and set +@yydebug+ to +true+ in order to get output.\n# -g option only creates the verbose parser.\n#\n# === Racc reported syntax error.\n#\n# Isn't there too many \"end\"?\n# grammar of racc file is changed in v0.10.\n#\n# Racc does not use '%' mark, while yacc uses huge number of '%' marks..\n#\n# === Racc reported \"XXXX conflicts\".\n#\n# Try \"racc -v xxxx.y\".\n# It causes producing racc's internal log file, xxxx.output.\n#\n# === Generated parsers does not work correctly\n#\n# Try \"racc -g xxxx.y\".\n# This command let racc generate \"debugging parser\".\n# Then set @yydebug=true in your parser.\n# It produces a working log of your parser.\n#\n# == Re-distributing Racc runtime\n#\n# A parser, which is created by Racc, requires the Racc runtime module;\n# racc/parser.rb.\n#\n# Ruby 1.8.x comes with Racc runtime module,\n# you need NOT distribute Racc runtime files.\n#\n# If you want to include the Racc runtime module with your parser.\n# This can be done by using '-E' option:\n#\n#   $ racc -E -omyparser.rb myparser.y\n#\n# This command creates myparser.rb which `includes' Racc runtime.\n# Only you must do is to distribute your parser file (myparser.rb).\n#\n# Note: parser.rb is LGPL, but your parser is not.\n# Your own parser is completely yours.\nmodule Racc\n\n  unless defined?(Racc_No_Extensions)\n    Racc_No_Extensions = false # :nodoc:\n  end\n\n  class Parser\n\n    Racc_Runtime_Version = '1.4.6'\n    Racc_Runtime_Revision = %w$originalRevision: 1.8 $[1]\n\n    Racc_Runtime_Core_Version_R = '1.4.6'\n    Racc_Runtime_Core_Revision_R = %w$originalRevision: 1.8 $[1]\n    # DISABLED: opal has no racc/cparse\n    # begin\n    #   require 'racc/cparse'\n    # # Racc_Runtime_Core_Version_C  = (defined in extension)\n    #   Racc_Runtime_Core_Revision_C = Racc_Runtime_Core_Id_C.split[2]\n    #   unless new.respond_to?(:_racc_do_parse_c, true)\n    #     raise LoadError, 'old cparse.so'\n    #   end\n    #   if Racc_No_Extensions\n    #     raise LoadError, 'selecting ruby version of racc runtime core'\n    #   end\n    #\n    #   Racc_Main_Parsing_Routine    = :_racc_do_parse_c # :nodoc:\n    #   Racc_YY_Parse_Method         = :_racc_yyparse_c # :nodoc:\n    #   Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C # :nodoc:\n    #   Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_C # :nodoc:\n    #   Racc_Runtime_Type            = 'c' # :nodoc:\n    # rescue LoadError\n      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb\n      Racc_YY_Parse_Method         = :_racc_yyparse_rb\n      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R\n      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_R\n      Racc_Runtime_Type            = 'ruby'\n    # end\n\n    def Parser.racc_runtime_type # :nodoc:\n      Racc_Runtime_Type\n    end\n\n    def _racc_setup\n      @yydebug = false unless self.class::Racc_debug_parser\n      @yydebug = false unless defined?(@yydebug)\n      if @yydebug\n        @racc_debug_out = $stderr unless defined?(@racc_debug_out)\n        @racc_debug_out ||= $stderr\n      end\n      arg = self.class::Racc_arg\n      arg[13] = true if arg.size < 14\n      arg\n    end\n\n    def _racc_init_sysvars\n      @racc_state  = [0]\n      @racc_tstack = []\n      @racc_vstack = []\n\n      @racc_t = nil\n      @racc_val = nil\n\n      @racc_read_next = true\n\n      @racc_user_yyerror = false\n      @racc_error_status = 0\n    end\n\n    # The entry point of the parser. This method is used with #next_token.\n    # If Racc wants to get token (and its value), calls next_token.\n    #\n    # Example:\n    #     def parse\n    #       @q = [[1,1],\n    #             [2,2],\n    #             [3,3],\n    #             [false, '$']]\n    #       do_parse\n    #     end\n    #\n    #     def next_token\n    #       @q.shift\n    #     end\n    def do_parse\n      __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)\n    end\n\n    # The method to fetch next token.\n    # If you use #do_parse method, you must implement #next_token.\n    #\n    # The format of return value is [TOKEN_SYMBOL, VALUE].\n    # +token-symbol+ is represented by Ruby's symbol by default, e.g. :IDENT\n    # for 'IDENT'.  \";\" (String) for ';'.\n    #\n    # The final symbol (End of file) must be false.\n    def next_token\n      raise NotImplementedError, \"\#{self.class}\\#next_token is not defined\"\n    end\n\n    def _racc_do_parse_rb(arg, in_debug)\n      action_table, action_check, action_default, action_pointer,\n      _,            _,            _,              _,\n      _,            _,            token_table,    _,\n      _,            _,            * = arg\n\n      _racc_init_sysvars\n      tok = act = i = nil\n\n      catch(:racc_end_parse) {\n        while true\n          if i = action_pointer[@racc_state[-1]]\n            if @racc_read_next\n              if @racc_t != 0   # not EOF\n                tok, @racc_val = next_token()\n                unless tok      # EOF\n                  @racc_t = 0\n                else\n                  @racc_t = (token_table[tok] or 1)   # error token\n                end\n                racc_read_token(@racc_t, tok, @racc_val) if @yydebug\n                @racc_read_next = false\n              end\n            end\n            i += @racc_t\n            unless i >= 0 and\n                   act = action_table[i] and\n                   action_check[i] == @racc_state[-1]\n              act = action_default[@racc_state[-1]]\n            end\n          else\n            act = action_default[@racc_state[-1]]\n          end\n          while act = _racc_evalact(act, arg)\n            ;\n          end\n        end\n      }\n    end\n\n    # Another entry point for the parser.\n    # If you use this method, you must implement RECEIVER#METHOD_ID method.\n    #\n    # RECEIVER#METHOD_ID is a method to get next token.\n    # It must 'yield' the token, which format is [TOKEN-SYMBOL, VALUE].\n    def yyparse(recv, mid)\n      __send__(Racc_YY_Parse_Method, recv, mid, _racc_setup(), true)\n    end\n\n    def _racc_yyparse_rb(recv, mid, arg, c_debug)\n      action_table, action_check, action_default, action_pointer,\n      _,             _,            _,              _,\n      _,            _,            token_table,    _,\n      _,            _,            * = arg\n\n      _racc_init_sysvars\n      act = nil\n      i = nil\n\n      catch(:racc_end_parse) {\n        until i = action_pointer[@racc_state[-1]]\n          while act = _racc_evalact(action_default[@racc_state[-1]], arg)\n            ;\n          end\n        end\n        recv.__send__(mid) do |tok, val|\n          unless tok\n            @racc_t = 0\n          else\n            @racc_t = (token_table[tok] or 1)   # error token\n          end\n          @racc_val = val\n          @racc_read_next = false\n\n          i += @racc_t\n          unless i >= 0 and\n                 act = action_table[i] and\n                 action_check[i] == @racc_state[-1]\n            act = action_default[@racc_state[-1]]\n          end\n          while act = _racc_evalact(act, arg)\n            ;\n          end\n\n          while not(i = action_pointer[@racc_state[-1]]) or\n                not @racc_read_next or\n                @racc_t == 0   # $\n            unless i and i += @racc_t and\n                   i >= 0 and\n                   act = action_table[i] and\n                   action_check[i] == @racc_state[-1]\n              act = action_default[@racc_state[-1]]\n            end\n            while act = _racc_evalact(act, arg)\n              ;\n            end\n          end\n        end\n      }\n    end\n\n    ###\n    ### common\n    ###\n\n    def _racc_evalact(act, arg)\n      action_table, action_check, _, action_pointer,\n      _,   _, _, _,\n      _,   _, _, shift_n,  reduce_n,\n      _,   _, * = arg\n\n      if act > 0 and act < shift_n\n        #\n        # shift\n        #\n        if @racc_error_status > 0\n          @racc_error_status -= 1 unless @racc_t == 1   # error token\n        end\n        @racc_vstack.push @racc_val\n        @racc_state.push act\n        @racc_read_next = true\n        if @yydebug\n          @racc_tstack.push @racc_t\n          racc_shift @racc_t, @racc_tstack, @racc_vstack\n        end\n\n      elsif act < 0 and act > -reduce_n\n        #\n        # reduce\n        #\n        code = catch(:racc_jump) {\n          @racc_state.push _racc_do_reduce(arg, act)\n          false\n        }\n        if code\n          case code\n          when 1 # yyerror\n            @racc_user_yyerror = true   # user_yyerror\n            return -reduce_n\n          when 2 # yyaccept\n            return shift_n\n          else\n            raise '[Racc Bug] unknown jump code'\n          end\n        end\n\n      elsif act == shift_n\n        #\n        # accept\n        #\n        racc_accept if @yydebug\n        throw :racc_end_parse, @racc_vstack[0]\n\n      elsif act == -reduce_n\n        #\n        # error\n        #\n        case @racc_error_status\n        when 0\n          unless arg[21]    # user_yyerror\n            on_error @racc_t, @racc_val, @racc_vstack\n          end\n        when 3\n          if @racc_t == 0   # is $\n            throw :racc_end_parse, nil\n          end\n          @racc_read_next = true\n        end\n        @racc_user_yyerror = false\n        @racc_error_status = 3\n        while true\n          if i = action_pointer[@racc_state[-1]]\n            i += 1   # error token\n            if  i >= 0 and\n                (act = action_table[i]) and\n                action_check[i] == @racc_state[-1]\n              break\n            end\n          end\n          throw :racc_end_parse, nil if @racc_state.size <= 1\n          @racc_state.pop\n          @racc_vstack.pop\n          if @yydebug\n            @racc_tstack.pop\n            racc_e_pop @racc_state, @racc_tstack, @racc_vstack\n          end\n        end\n        return act\n\n      else\n        raise \"[Racc Bug] unknown action \#{act.inspect}\"\n      end\n\n      racc_next_state(@racc_state[-1], @racc_state) if @yydebug\n\n      nil\n    end\n\n    def _racc_do_reduce(arg, act)\n      _, _, _, _,\n      goto_table,   goto_check,   goto_default,   goto_pointer,\n      nt_base,      reduce_table, _,    _,\n      _,     use_result,   * = arg\n      state = @racc_state\n      vstack = @racc_vstack\n      tstack = @racc_tstack\n\n      i = act * -3\n      len       = reduce_table[i]\n      reduce_to = reduce_table[i+1]\n      method_id = reduce_table[i+2]\n      void_array = []\n\n      tmp_t = tstack[-len, len] if @yydebug\n      tmp_v = vstack[-len, len]\n      tstack[-len, len] = void_array if @yydebug\n      vstack[-len, len] = void_array\n      state[-len, len]  = void_array\n\n      # tstack must be updated AFTER method call\n      if use_result\n        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])\n      else\n        vstack.push __send__(method_id, tmp_v, vstack)\n      end\n      tstack.push reduce_to\n\n      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug\n\n      k1 = reduce_to - nt_base\n      if i = goto_pointer[k1]\n        i += state[-1]\n        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1\n          return curstate\n        end\n      end\n      goto_default[k1]\n    end\n\n    # This method is called when a parse error is found.\n    #\n    # ERROR_TOKEN_ID is an internal ID of token which caused error.\n    # You can get string representation of this ID by calling\n    # #token_to_str.\n    #\n    # ERROR_VALUE is a value of error token.\n    #\n    # value_stack is a stack of symbol values.\n    # DO NOT MODIFY this object.\n    #\n    # This method raises ParseError by default.\n    #\n    # If this method returns, parsers enter \"error recovering mode\".\n    def on_error(t, val, vstack)\n      raise ParseError, sprintf(\"\\nparse error on value %s (%s)\",\n                                val.inspect, token_to_str(t) || '?')\n    end\n\n    # Enter error recovering mode.\n    # This method does not call #on_error.\n    def yyerror\n      throw :racc_jump, 1\n    end\n\n    # Exit parser.\n    # Return value is Symbol_Value_Stack[0].\n    def yyaccept\n      throw :racc_jump, 2\n    end\n\n    # Leave error recovering mode.\n    def yyerrok\n      @racc_error_status = 0\n    end\n\n    # For debugging output\n    def racc_read_token(t, tok, val)\n      @racc_debug_out.print 'read    '\n      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '\n      @racc_debug_out.puts val.inspect\n      @racc_debug_out.puts\n    end\n\n    def racc_shift(tok, tstack, vstack)\n      @racc_debug_out.puts \"shift   \#{racc_token2str tok}\"\n      racc_print_stacks tstack, vstack\n      @racc_debug_out.puts\n    end\n\n    def racc_reduce(toks, sim, tstack, vstack)\n      out = @racc_debug_out\n      out.print 'reduce '\n      if toks.empty?\n        out.print ' <none>'\n      else\n        toks.each {|t| out.print ' ', racc_token2str(t) }\n      end\n      out.puts \" --> \#{racc_token2str(sim)}\"\n\n      racc_print_stacks tstack, vstack\n      @racc_debug_out.puts\n    end\n\n    def racc_accept\n      @racc_debug_out.puts 'accept'\n      @racc_debug_out.puts\n    end\n\n    def racc_e_pop(state, tstack, vstack)\n      @racc_debug_out.puts 'error recovering mode: pop token'\n      racc_print_states state\n      racc_print_stacks tstack, vstack\n      @racc_debug_out.puts\n    end\n\n    def racc_next_state(curstate, state)\n      @racc_debug_out.puts  \"goto    \#{curstate}\"\n      racc_print_states state\n      @racc_debug_out.puts\n    end\n\n    def racc_print_stacks(t, v)\n      out = @racc_debug_out\n      out.print '        ['\n      t.each_index do |i|\n        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'\n      end\n      out.puts ' ]'\n    end\n\n    def racc_print_states(s)\n      out = @racc_debug_out\n      out.print '        ['\n      s.each {|st| out.print ' ', st }\n      out.puts ' ]'\n    end\n\n    def racc_token2str(tok)\n      self.class::Racc_token_to_s_table[tok] or\n          raise \"[Racc Bug] can't convert token \#{tok} to string\"\n    end\n\n    # Convert internal ID of token symbol to the string.\n    def token_to_str(t)\n      self.class::Racc_token_to_s_table[t]\n    end\n\n  end\n\nend\n"], :names=>["<top (required)>", "<module:Racc>", "<class:ParseError>", "StandardError", "Racc::ParseError", "Racc", "<class:Parser>", "[]", "1", "Racc_Runtime_Core_Version_R", "Racc_Runtime_Core_Revision_R", "racc_runtime_type", "Parser", "Racc_Runtime_Type", "_racc_setup", "class::Racc_debug_parser", "self", "class", "@yydebug", "@racc_debug_out", "$stderr", "$ret_or_1", "arg", "class::Racc_arg", "<", "size", "14", "[]=", "13", "_racc_init_sysvars", "@racc_state", "0", "@racc_tstack", "@racc_vstack", "@racc_t", "@racc_val", "@racc_read_next", "@racc_user_yyerror", "@racc_error_status", "do_parse", "__send__", "Racc_Main_Parsing_Routine", "next_token", "raise", "NotImplementedError", "_racc_do_parse_rb", "in_debug", "action_table", "action_check", "action_default", "action_pointer", "_", "token_table", "tok", "act", "i", "catch", "block in _racc_do_parse_rb", "block (2 levels) in _racc_do_parse_rb", "-1", "racc_read_token", "+", ">=", "_racc_evalact", "yyparse", "recv", "mid", "Racc_YY_Parse_Method", "_racc_yyparse_rb", "c_debug", "block in _racc_yyparse_rb", "block (2 levels) in _racc_yyparse_rb", "val", "block (3 levels) in _racc_yyparse_rb", "$ret_or_2", "!", "==", "shift_n", "reduce_n", ">", "-", "push", "racc_shift", "-@", "code", "block in _racc_evalact", "block (2 levels) in _racc_evalact", "_racc_do_reduce", "2", "racc_accept", "throw", "21", "on_error", "3", "<=", "pop", "racc_e_pop", "inspect", "racc_next_state", "goto_table", "goto_check", "goto_default", "goto_pointer", "nt_base", "reduce_table", "use_result", "state", "vstack", "tstack", "*", "-3", "len", "reduce_to", "method_id", "void_array", "tmp_t", "tmp_v", "racc_reduce", "k1", "curstate", "t", "ParseError", "sprintf", "token_to_str", "yyerror", "yyaccept", "yyerrok", "print", "racc_token2str", "puts", "racc_print_stacks", "toks", "sim", "out", "empty?", "each", "block in racc_reduce", "block (2 levels) in racc_reduce", "racc_print_states", "v", "each_index", "block in racc_print_stacks", "block (2 levels) in racc_print_stacks", "s", "block in racc_print_states", "st", "block (2 levels) in racc_print_states", "class::Racc_token_to_s_table"], :mappings=>"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"}}, {:offset=>{:line=>468, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/arithmetic/node.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module Arithmetic\n    module Node\n      class BinaryOp\n        def initialize(lhs, op, rhs)\n          @lhs = lhs\n          @op = op\n          @rhs = rhs\n        end\n\n        def eval(round_type)\n          l = @lhs.eval(round_type)\n          r = @rhs.eval(round_type)\n          l.send(@op, r)\n        end\n\n        # @return [String] メッセージへの出力\n        def output\n          \"\#{@lhs.output}\#{@op}\#{@rhs.output}\"\n        end\n\n        # @return [String] ノードのS式\n        def s_exp\n          \"(\#{op_for_s_exp} \#{@lhs.s_exp} \#{@rhs.s_exp})\"\n        end\n\n        # @return [String] S式で使う演算子の表現\n        def op_for_s_exp\n          @op\n        end\n      end\n\n      # 除算ノードの基底クラス\n      #\n      # 定数 +ROUNDING_METHOD+ で端数処理方法を示す記号\n      # ( +'U'+, +'R'+, +''+ ) を定義すること。\n      # また、除算および端数処理を行う +divide_and_round+ メソッドを実装すること。\n      class DivideBase < BinaryOp\n        # ノードを初期化する\n        # @param [Object] lhs 左のオペランドのノード\n        # @param [Object] rhs 右のオペランドのノード\n        def initialize(lhs, rhs)\n          super(lhs, :/, rhs)\n        end\n\n        def eval(round_type)\n          l = @lhs.eval(round_type)\n          r = @rhs.eval(round_type)\n\n          raise ZeroDivisionError if r == 0\n          divide_and_round(l, r, round_type)\n        end\n\n        # メッセージへの出力を返す\n        #\n        # 通常の結果の末尾に、端数処理方法を示す記号を付加する。\n        #\n        # @return [String]\n        def output\n          \"\#{super}\#{rounding_method}\"\n        end\n\n        private\n\n        # 端数処理方法を示す記号を返す\n        # @return [String]\n        def rounding_method\n          self.class::ROUNDING_METHOD\n        end\n\n        # S式で使う演算子の表現を返す\n        # @return [String]\n        def op_for_s_exp\n          \"\#{@op}\#{rounding_method}\"\n        end\n\n        # 除算および端数処理を行う\n        # @param [Integer] _dividend 被除数\n        # @param [Integer] _divisor 除数（0以外）\n        # @param [Symbol] _round_type ゲームシステムの端数処理設定\n        # @return [Integer]\n        def divide_and_round(_dividend, _divisor, _round_type)\n          raise NotImplementedError\n        end\n      end\n\n      # 除算（端数処理はゲームシステム依存）のノード\n      class DivideWithGameSystemDefault < DivideBase\n        # 端数処理方法を示す記号\n        ROUNDING_METHOD = \"\"\n\n        private\n\n        # 除算および端数処理を行う\n        # @param [Integer] dividend 被除数\n        # @param [Integer] divisor 除数（0以外）\n        # @param [Symbol] round_type ゲームシステムの端数処理設定\n        # @return [Integer]\n        def divide_and_round(dividend, divisor, round_type)\n          case round_type\n          when RoundType::CEIL\n            (dividend.to_f / divisor).ceil\n          when RoundType::ROUND\n            x = dividend.to_f / divisor\n            x.negative? ? -(x.abs.round) : x.round\n          else # RoundType::FLOOR\n            (dividend / divisor).floor\n          end\n        end\n      end\n\n      # 除算（切り上げ）のノード\n      class DivideWithCeil < DivideBase\n        # 端数処理方法を示す記号\n        ROUNDING_METHOD = \"C\"\n\n        private\n\n        # 除算および端数処理を行う\n        # @param [Integer] dividend 被除数\n        # @param [Integer] divisor 除数（0以外）\n        # @param [Symbol] _round_type ゲームシステムの端数処理設定\n        # @return [Integer]\n        def divide_and_round(dividend, divisor, _round_type)\n          (dividend.to_f / divisor).ceil\n        end\n      end\n\n      # 除算（四捨五入）のノード\n      class DivideWithRound < DivideBase\n        # 端数処理方法を示す記号\n        ROUNDING_METHOD = \"R\"\n\n        private\n\n        # 除算および端数処理を行う\n        # @param [Integer] dividend 被除数\n        # @param [Integer] divisor 除数（0以外）\n        # @param [Symbol] _round_type ゲームシステムの端数処理設定\n        # @return [Integer]\n        def divide_and_round(dividend, divisor, _round_type)\n          x = dividend.to_f / divisor\n          x.negative? ? -(x.abs.round) : x.round\n        end\n      end\n\n      # 除算（切り捨て）のノード\n      class DivideWithFloor < DivideBase\n        # 端数処理方法を示す記号\n        ROUNDING_METHOD = \"F\"\n\n        private\n\n        # 除算および端数処理を行う\n        # @param [Integer] dividend 被除数\n        # @param [Integer] divisor 除数（0以外）\n        # @param [Symbol] _round_type ゲームシステムの端数処理設定\n        # @return [Integer]\n        def divide_and_round(dividend, divisor, _round_type)\n          (dividend / divisor).floor\n        end\n      end\n\n      class Negative\n        def initialize(body)\n          @body = body\n        end\n\n        def eval(round_type)\n          -@body.eval(round_type)\n        end\n\n        # @return [String] メッセージへの出力\n        def output\n          \"-\#{@body.output}\"\n        end\n\n        def s_exp\n          \"(- \#{@body.s_exp})\"\n        end\n      end\n\n      # カッコで式をまとめるノード\n      class Parenthesis\n        # @param expr [Object] カッコ内のノード\n        def initialize(expr)\n          @expr = expr\n        end\n\n        # @param round_type [Symbol] 端数処理方法\n        # @return [Integer] 評価結果\n        def eval(round_type)\n          @expr.eval(round_type)\n        end\n\n        # @return [String] メッセージへの出力\n        def output\n          \"(\#{@expr.output})\"\n        end\n\n        # @return [String] S式\n        def s_exp\n          \"(Parenthesis \#{@expr.s_exp})\"\n        end\n      end\n\n      class Number\n        def initialize(value)\n          @value = value\n        end\n\n        def eval(_round_type)\n          @value\n        end\n\n        # @return [String] メッセージへの出力\n        def output\n          @value.to_s\n        end\n\n        alias s_exp output\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:Arithmetic>", "<module:Node>", "<class:BinaryOp>", "initialize", "lhs", "op", "rhs", "@lhs", "@op", "@rhs", "eval", "round_type", "l", "r", "send", "output", "s_exp", "self", "op_for_s_exp", "<class:DivideBase>", "0", "raise", "ZeroDivisionError", "divide_and_round", "rounding_method", "private", "class::ROUNDING_METHOD", "class", "_dividend", "_divisor", "_round_type", "NotImplementedError", "BinaryOp", "<class:DivideWithGameSystemDefault>", "dividend", "divisor", "RoundType::CEIL", "RoundType", "$ret_or_1", "/", "to_f", "ceil", "RoundType::ROUND", "x", "negative?", "abs", "round", "-@", "floor", "DivideBase", "<class:DivideWithCeil>", "<class:DivideWithRound>", "<class:DivideWithFloor>", "<class:Negative>", "@body", "<class:Parenthesis>", "@expr", "<class:Number>", "@value", "to_s"], :mappings=>"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"}}, {:offset=>{:line=>740, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["./strscan.rb"], :sourcesContent=>["class StringScanner\n  attr_reader :pos, :matched\n\n  def initialize(string)\n    @string  = string\n    @pos     = 0\n    @matched = nil\n    @working = string\n    @match   = []\n  end\n\n  attr_reader :string\n\n  def beginning_of_line?\n    `\#{@pos} === 0 || \#{@string}.charAt(\#{@pos} - 1) === \"\\n\"`\n  end\n\n  def scan(pattern)\n    pattern = anchor(pattern)\n\n    %x{\n      var result = pattern.exec(\#{@working});\n\n      if (result == null) {\n        return \#{@matched} = nil;\n      }\n      \#{@prev_pos} = \#{@pos};\n      \#{@pos}     += result[0].length;\n      \#{@working}  = \#{@working}.substring(result[0].length);\n      \#{@matched}  = result[0];\n      \#{@match}    = result;\n\n      return result[0];\n    }\n  end\n\n  def scan_until(pattern)\n    pattern = anchor(pattern)\n\n    %x{\n      var working = \#{@working}\n\n      for(var i = 0; working.length != i; ++i) {\n        var result  = pattern.exec(working.substr(i));\n        if (result !== null) {\n          var matched_size = i + result[0].length\n          var matched = working.substr(0, matched_size)\n\n          \#{@matched}  = result[0]\n          \#{@match}  = result\n          \#{@prev_pos} = \#{@pos} + i; // Position of first character of matched\n          \#{@pos} += matched_size // Position one after last character of matched\n          \#{@working} = working.substr(matched_size)\n\n          return matched\n        }\n      }\n      return \#{@matched} = nil;\n    }\n  end\n\n  def [](idx)\n    if @match.empty?\n      return nil\n    end\n    case idx\n    when Symbol\n      idx = idx.to_s\n    when String\n      # noop\n    else\n      idx = ::Opal.coerce_to!(idx, Integer, :to_int)\n    end\n    %x{\n      var match = \#{@match};\n\n      if (idx < 0) {\n        idx += match.length;\n      }\n\n      if (idx < 0 || idx >= match.length) {\n        return nil;\n      }\n\n      if (match[idx] == null) {\n        return nil;\n      }\n\n      return match[idx];\n    }\n  end\n\n  def check(pattern)\n    pattern = anchor(pattern)\n\n    %x{\n      var result = pattern.exec(\#{@working});\n\n      if (result == null) {\n        return \#{@matched} = nil;\n      }\n\n      return \#{@matched} = result[0];\n    }\n  end\n\n  def check_until(pattern)\n    %x{\n      var old_prev_pos = \#{@prev_pos};\n      var old_pos      = \#{@pos};\n      var old_working  = \#{@working};\n\n      var result = \#{scan_until(pattern)};\n\n      \#{@prev_pos} = old_prev_pos;\n      \#{@pos}      = old_pos;\n      \#{@working}  = old_working;\n\n      return result;\n    }\n  end\n\n  def peek(length)\n    `\#{@working}.substring(0, length)`\n  end\n\n  def eos?\n    `\#{@working}.length === 0`\n  end\n\n  def exist?(pattern)\n    %x{\n      var result = pattern.exec(\#{@working});\n\n      if (result == null) {\n        return nil;\n      }\n      else if (result.index == 0) {\n        return 0;\n      }\n      else {\n        return result.index + 1;\n      }\n    }\n  end\n\n  def skip(pattern)\n    pattern = anchor(pattern)\n\n    %x{\n      var result = pattern.exec(\#{@working});\n\n      if (result == null) {\n        \#{@match} = [];\n        return \#{@matched} = nil;\n      }\n      else {\n        var match_str = result[0];\n        var match_len = match_str.length;\n\n        \#{@matched}   = match_str;\n        \#{@match}     = result;\n        \#{@prev_pos}  = \#{@pos};\n        \#{@pos}      += match_len;\n        \#{@working}   = \#{@working}.substring(match_len);\n\n        return match_len;\n      }\n    }\n  end\n\n  def skip_until(pattern)\n    %x{\n      var result = \#{scan_until(pattern)};\n\n      if (result === nil) {\n        return nil;\n      }\n      else {\n        \#{@matched} = result.substr(-1);\n\n        return result.length;\n      }\n    }\n  end\n\n  def get_byte\n    %x{\n      var result = nil;\n\n      if (\#{@pos} < \#{@string}.length) {\n        \#{@prev_pos}  = \#{@pos};\n        \#{@pos}      += 1;\n        result      = \#{@matched} = \#{@working}.substring(0, 1);\n        \#{@working}   = \#{@working}.substring(1);\n      }\n      else {\n        \#{@matched} = nil;\n      }\n\n      return result;\n    }\n  end\n\n  def match?(pattern)\n    pattern = anchor(pattern)\n\n    %x{\n      var result = pattern.exec(\#{@working});\n\n      if (result == null) {\n        return nil;\n      }\n      else {\n        \#{@prev_pos} = \#{@pos};\n\n        return result[0].length;\n      }\n    }\n  end\n\n  def pos=(pos)\n    %x{\n      if (pos < 0) {\n        pos += \#{@string.length};\n      }\n    }\n\n    @pos     = pos\n    @working = `\#{@string}.slice(pos)`\n  end\n\n  def matched_size\n    %x{\n      if (\#{@matched} === nil) {\n        return nil;\n      }\n\n      return \#{@matched}.length\n    }\n  end\n\n  def post_match\n    %x{\n      if (\#{@matched} === nil) {\n        return nil;\n      }\n\n      return \#{@string}.substr(\#{@pos});\n    }\n  end\n\n  def pre_match\n    %x{\n      if (\#{@matched} === nil) {\n        return nil;\n      }\n\n      return \#{@string}.substr(0, \#{@prev_pos});\n    }\n  end\n\n  def reset\n    @working = @string\n    @matched = nil\n    @pos     = 0\n  end\n\n  def rest\n    @working\n  end\n\n  def rest?\n    `\#{@working}.length !== 0`\n  end\n\n  def rest_size\n    rest.size\n  end\n\n  def terminate\n    @match = nil\n    self.pos = @string.length\n  end\n\n  def unscan\n    @pos      = @prev_pos\n    @prev_pos = nil\n    @match    = nil\n\n    self\n  end\n\n  alias bol? beginning_of_line?\n  alias getch get_byte # not exactly the same, but for now...\n\n  private\n\n  def anchor(pattern)\n    %x{\n      var flags = pattern.toString().match(/\\/([^\\/]+)$/);\n      flags = flags ? flags[1] : undefined;\n      return new RegExp('^(?:' + pattern.source + ')', flags);\n    }\n  end\nend\n"], :names=>["<top (required)>", "<class:StringScanner>", "self", "attr_reader", "initialize", "string", "@string", "@pos", "0", "@matched", "@working", "@match", "beginning_of_line?", "scan", "pattern", "anchor", "@prev_pos", "scan_until", "[]", "idx", "empty?", "Symbol", "$ret_or_1", "to_s", "String", "Opal", "coerce_to!", "Integer", "check", "check_until", "peek", "length", "eos?", "exist?", "skip", "skip_until", "get_byte", "match?", "pos=", "pos", "matched_size", "post_match", "pre_match", "reset", "rest", "rest?", "rest_size", "size", "terminate", "unscan", "private"], :mappings=>"AAAAA,0BAAAA,gBAAAA;EAAAA;;EAAAA,OAAAC;EAAAA;;IAAAA;;AAAAA;;IACEC,IAAAC,aAAAA,CAAY,KAAZ,EAAkB,SAAlBA;;AAEAC,IAAAA,0BAAAA,sBAAeC,MAAfD;AAAAA,MAAAA;;;MACEE,cAAWD;MACXE,WAAWC;MACXC,eAAW;MACXC,eAAWL;MACXD,OAAAO,CAAAA,aAAW,EAAXA;IALFP,CAAAA;IAQAF,IAAAC,aAAAA,CAAY,QAAZA;;AAEAS,IAAAA,kCAAAA,iDAAAA;AAAAA,MAAAA;;MACEA,OAAGL,QAAKK,UAAYN,WAAQM,QAAUL,QAAKK;IAD7CA,CAAAA;;AAIAC,IAAAA,oBAAAA,gBAASC,OAATD;AAAAA,MAAAA;;;MACEC,UAAUZ,IAAAa,QAAAA,CAAOD,OAAPC;;AAGdF,gCAAkCH,YAASG;;AAE3CA;AACAA,eAAiBJ,YAASI;AAC1BA;AACAA,MAAQG,aAAUH,GAAKN,QAAKM;AAC5BA,MAAQN,QAAKM;AACbA,MAAQH,YAASG,IAAMH,YAASG;AAChCA,MAAQJ,YAASI;AACjBA,MAAQF,UAAOE;;AAEfA;AACAA;IAhBEA,CAAAA;;AAmBAI,IAAAA,0BAAAA,sBAAeH,OAAfG;AAAAA,MAAAA;;;MACEH,UAAUZ,IAAAa,QAAAA,CAAOD,OAAPC;;AAGdE,oBAAsBP;;AAEtBO;AACAA;AACAA;AACAA;AACAA;;AAEAA,UAAYR,YAASQ;AACrBA,UAAYN,UAAOM;AACnBA,UAAYD,aAAUC,GAAKV,QAAKU;AAChCA,UAAYV,QAAKU;AACjBA,UAAYP,YAASO;;AAErBA;AACAA;AACAA;AACAA,aAAeR,YAASQ;AACxBA;IAtBEA,CAAAA;;AAyBAC,IAAAA,kBAAAA,6BAAOC,GAAPD;AAAAA,MAAAA;;;MACE,IAAA,QAAGP,UAAMS,WAAAA,CAAAA,CAAT,CAAA;QACE,OAAO;MADT;MAIA,IAAA,QAAKC,YAAL,EADAC,CAAAA,YAAKH,GAALG,CACA,CAAA;QACEH,MAAMA,GAAGI,MAAAA,CAAAA;MADX,OAEA,KAAA,QAAKC,YAAL,EApEJ,SAoEI,CAAA;QAGEL,MAAMM,KAAMC,eAAAA,CAAYP,GAAlB,EAAuBQ,aAAvB,EAAgC,QAA1BD;MAHd;;AAMJR,kBAAoBP,UAAOO;;AAE3BA;AACAA;AACAA;;AAEAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;;AAEAA;AACAA;IA5BEA,CAAAA;;AA+BAU,IAAAA,qBAAAA,iBAAUd,OAAVc;AAAAA,MAAAA;;;MACEd,UAAUZ,IAAAa,QAAAA,CAAOD,OAAPC;;AAGda,gCAAkClB,YAASkB;;AAE3CA;AACAA,eAAiBnB,YAASmB;AAC1BA;;AAEAA,aAAenB,YAASmB;AACxBA;IAXEA,CAAAA;;AAcAC,IAAAA,2BAAAA,uBAAgBf,OAAhBe;AAAAA,MAAAA;;;AAEFA,yBAA2Bb,aAAUa;AACrCA,yBAA2BtB,QAAKsB;AAChCA,yBAA2BnB,YAASmB;;AAEpCA,mBAAqB3B,IAAAe,YAAAA,CAAWH,OAAXG,CAAoBY;;AAEzCA,MAAQb,aAAUa;AAClBA,MAAQtB,QAAKsB;AACbA,MAAQnB,YAASmB;;AAEjBA;AACAA;IAbEA,CAAAA;;AAgBAC,IAAAA,oBAAAA,gBAASC,MAATD;AAAAA,MAAAA;;MACEA,OAAGpB,YAASoB;IADdA,CAAAA;;AAIAE,IAAAA,oBAAAA,mCAAAA;AAAAA,MAAAA;;MACEA,OAAGtB,YAASsB;IADdA,CAAAA;;AAIAC,IAAAA,sBAAAA,qCAAWnB,OAAXmB;AAAAA,MAAAA;;;AAEFA,gCAAkCvB,YAASuB;;AAE3CA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;IAbEA,CAAAA;;AAgBAC,IAAAA,oBAAAA,gBAASpB,OAAToB;AAAAA,MAAAA;;;MACEpB,UAAUZ,IAAAa,QAAAA,CAAOD,OAAPC;;AAGdmB,gCAAkCxB,YAASwB;;AAE3CA;AACAA,QAAUvB,UAAOuB;AACjBA,eAAiBzB,YAASyB;AAC1BA;AACAA;AACAA;AACAA;;AAEAA,QAAUzB,YAASyB;AACnBA,QAAUvB,UAAOuB;AACjBA,QAAUlB,aAAUkB,IAAM3B,QAAK2B;AAC/BA,QAAU3B,QAAK2B;AACfA,QAAUxB,YAASwB,KAAOxB,YAASwB;;AAEnCA;AACAA;AACAA;IAtBEA,CAAAA;;AAyBAC,IAAAA,0BAAAA,sBAAerB,OAAfqB;AAAAA,MAAAA;;;AAEFA,mBAAqBjC,IAAAe,YAAAA,CAAWH,OAAXG,CAAoBkB;;AAEzCA;AACAA;AACAA;AACAA;AACAA,QAAU1B,YAAS0B;;AAEnBA;AACAA;AACAA;IAZEA,CAAAA;;AAeAC,IAAAA,wBAAAA,oBAAAA;AAAAA,MAAAA;;;AAEFA;;AAEAA,UAAY7B,QAAK6B,GAAK9B,WAAQ8B;AAC9BA,QAAUpB,aAAUoB,IAAM7B,QAAK6B;AAC/BA,QAAU7B,QAAK6B;AACfA,sBAAwB3B,YAAS2B,GAAK1B,YAAS0B;AAC/CA,QAAU1B,YAAS0B,KAAO1B,YAAS0B;AACnCA;AACAA;AACAA,QAAU3B,YAAS2B;AACnBA;;AAEAA;AACAA;IAfEA,CAAAA;;AAkBAC,IAAAA,sBAAAA,qCAAWvB,OAAXuB;AAAAA,MAAAA;;;MACEvB,UAAUZ,IAAAa,QAAAA,CAAOD,OAAPC;;AAGdsB,gCAAkC3B,YAAS2B;;AAE3CA;AACAA;AACAA;AACAA;AACAA,QAAUrB,aAAUqB,GAAK9B,QAAK8B;;AAE9BA;AACAA;AACAA;IAdEA,CAAAA;;AAiBAC,IAAAA,oBAAAA,iCAASC,GAATD;AAAAA,MAAAA;;;;AAEFA;AACAA,eAAiBhC,WAAOyB,QAAAA,CAAAA,CAAQO;AAChCA;AACAA;MAEI/B,WAAWgC;MACXD,OAAA5B,CAAAA,eAAcJ,WAAQgC,WAAtB5B;IARF4B,CAAAA;;AAWAE,IAAAA,4BAAAA,wBAAAA;AAAAA,MAAAA;;;AAEFA,UAAY/B,YAAS+B;AACrBA;AACAA;;AAEAA,aAAe/B,YAAS+B;AACxBA;IAPEA,CAAAA;;AAUAC,IAAAA,0BAAAA,sBAAAA;AAAAA,MAAAA;;;AAEFA,UAAYhC,YAASgC;AACrBA;AACAA;;AAEAA,aAAenC,WAAQmC,QAAUlC,QAAKkC;AACtCA;IAPEA,CAAAA;;AAUAC,IAAAA,yBAAAA,qBAAAA;AAAAA,MAAAA;;;AAEFA,UAAYjC,YAASiC;AACrBA;AACAA;;AAEAA,aAAepC,WAAQoC,WAAa1B,aAAU0B;AAC9CA;IAPEA,CAAAA;;AAUAC,IAAAA,qBAAAA,iBAAAA;AAAAA,MAAAA;;;MACEjC,eAAWJ;MACXG,eAAW;MACXkC,OAAApC,CAAAA,WAAWC,CAAXD;IAHFoC,CAAAA;;AAMAC,IAAAA,oBAAAA,aACE,SADFA,CAAAA;;AAIAC,IAAAA,qBAAAA,oCAAAA;AAAAA,MAAAA;;MACEA,OAAGnC,YAASmC;IADdA,CAAAA;;AAIAC,IAAAA,yBAAAA,qBAAAA;AAAAA,MAAAA;;MACEA,OAAA5C,IAAA0C,MAAAA,CAAAA,CAAIG,MAAAA,CAAAA;IADND,CAAAA;;AAIAE,IAAAA,yBAAAA,qBAAAA;AAAAA,MAAAA;;;MACErC,aAAS;MACTqC,OAAIV,MAAAA,CAAOhC,WAAOyB,QAAAA,CAAAA,CAAdO,CAAAA,EAAAA,MAAJpC,IAAIoC,QAAAA,EAAAA,EAAAA,CAAAA,EAAAA;IAFNU,CAAAA;;AAKAC,IAAAA,sBAAAA,kBAAAA;AAAAA,MAAAA;;;MACE1C,WAAYS;MACZA,gBAAY;MACZL,aAAY;MAEZsC,OAAA/C;IALF+C,CAAAA;IAQA,aAAM,MAAN,EAAW,oBAAX;IACA,aAAM,OAAN,EAAY,UAAZ;IAEA/C,IAAAgD,SAAAA,CAAAA;IAEAjD,OAAAc,sBAAAA,kBAAWD,OAAXC;AAAAA;;AAEFA;AACAA;AACAA;AACAA;IALEA,CAAAA;EA1SFd,GAAAA,WAAAA,EAAAA,IAAAA;AAAAD;"}}, {:offset=>{:line=>1099, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/normalize.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module Normalize\n    module_function\n\n    # 比較演算子をシンボルに正規化する\n    #\n    # @param op [String]\n    # @return [Symbol, nil]\n    def comparison_operator(op)\n      case op\n      when /<=|=</\n        :<=\n      when />=|=>/\n        :>=\n      when /<>|!=|=!/\n        :'!='\n      when /</\n        :<\n      when />/\n        :>\n      when /=/\n        :==\n      end\n    end\n\n    # 目標値を正規化する\n    #\n    # @param val [String]\n    # @return [Integer, String] 整数か'?'\n    def target_number(val)\n      if val == \"?\"\n        val\n      else\n        val.to_i\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:Normalize>", "self", "module_function", "comparison_operator", "op", "$ret_or_1", "target_number", "val", "to_i"], :mappings=>"AAAAA,mCAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;;;MACEC,IAAAC,iBAAAA,CAAAA;;AAMAC,MAAAA,mCAAAA,+BAAwBC,EAAxBD;AAAAA,QAAAA;;QAEE,IAAA,QAAK,OAAL,EADAE,CAAAA,YAAKD,EAALC,CACA,CAAA;UACEF,OAAA;QADF,OAEA,IAAA,QAAK,OAAL,EAdN,SAcM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,UAAL,EAhBN,SAgBM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,GAAL,EAlBN,SAkBM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,GAAL,EApBN,SAoBM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,GAAL,EAtBN,SAsBM,CAAA;UACEA,OAAA;QADF;UAXAA,OAAA;QAWA;MAZFA,CAAAA;MAqBAH,OAAAM,6BAAAA,yBAAkBC,GAAlBD;AAAAA;QACE,IAAA,MAAGC,GAAH,EAAUD,GAAV,CAAA;UACEA,OAAAC;QADF;UAGED,OAAAC,GAAGC,MAAAA,CAAAA;QAHL;MADFF,CAAAA;IA5BFN,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>1145, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/command/lexer.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"strscan\"\nrequire \"bcdice/normalize\"\n\nmodule BCDice\n  module Command\n    class Lexer\n      SYMBOLS = {\n        \"+\" => :PLUS,\n        \"-\" => :MINUS,\n        \"*\" => :ASTERISK,\n        \"/\" => :SLASH,\n        \"(\" => :PARENL,\n        \")\" => :PARENR,\n        \"?\" => :QUESTION,\n        \"@\" => :AT,\n        \"#\" => :SHARP,\n        \"$\" => :DOLLAR,\n      }.freeze\n\n      def initialize(source, notations)\n        # sourceが空文字だとString#splitが空になる\n        source = source&.split(\" \", 2)&.first || \"\"\n        @scanner = StringScanner.new(source)\n        @notations = notations.map do |n|\n          n.is_a?(String) ? Regexp.new(n) : n\n        end\n      end\n\n      def next_token\n        return [false, \"$\"] if @scanner.eos?\n\n        @notations.each do |n|\n          token = @scanner.scan(n)\n          return [:NOTATION, token] if token\n        end\n\n        if (number = @scanner.scan(/\\d+/))\n          [:NUMBER, number.to_i]\n        elsif (cmp_op = @scanner.scan(/[<>!=]+/))\n          cmp_op = Normalize.comparison_operator(cmp_op)\n          type = cmp_op ? :CMP_OP : :ILLEGAL\n          [type, cmp_op]\n        else\n          char = @scanner.getch.upcase\n          type = SYMBOLS[char] || char.to_sym\n          [type, char]\n        end\n      end\n\n      def source\n        @scanner.string\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "self", "require", "<module:BCDice>", "<module:Command>", "<class:Lexer>", "freeze", "initialize", "source", "notations", "$ret_or_1", "2", "@scanner", "StringScanner", "new", "@notations", "map", "block in initialize", "n", "is_a?", "String", "block (2 levels) in initialize", "Regexp", "next_token", "eos?", "each", "block in next_token", "block (2 levels) in next_token", "token", "scan", "number", "to_i", "cmp_op", "Normalize", "comparison_operator", "type", "char$", "getch", "upcase", "SYMBOLS", "[]", "to_sym", "string"], :mappings=>"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"}}, {:offset=>{:line=>1231, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/command/parsed.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module Command\n    class Parsed\n      # @return [String]\n      attr_accessor :command\n\n      # @return [Integer, nil]\n      attr_accessor :prefix_number\n\n      # @return [Integer, nil]\n      attr_accessor :suffix_number\n\n      # @return [Integer, nil]\n      attr_accessor :critical\n\n      # @return [Integer, nil]\n      attr_accessor :fumble\n\n      # @return [Integer, nil]\n      attr_accessor :dollar\n\n      # @return [Integer]\n      attr_accessor :modify_number\n\n      # @return [Symbol, nil]\n      attr_accessor :cmp_op\n\n      # @return [Integer, nil]\n      attr_accessor :target_number\n\n      # @param value [Boolean]\n      # @return [Boolean]\n      attr_writer :question_target\n\n      def initialize\n        @prefix_number = nil\n        @suffix_number = nil\n        @critical = nil\n        @fumble = nil\n        @dollar = nil\n        @cmp_op = nil\n        @target_number = nil\n        @question_target = false\n      end\n\n      # @return [Boolean]\n      def question_target?\n        @question_target\n      end\n\n      # @param suffix_position [Symbol] クリティカルなどの表示位置\n      # @return [String]\n      def to_s(suffix_position = :after_command)\n        c = @critical ? \"@\#{@critical}\" : nil\n        f = @fumble ? \"#\#{@fumble}\" : nil\n        d = @dollar ? \"$\#{@dollar}\" : nil\n        m = Format.modifier(@modify_number)\n        target = @question_target ? \"?\" : @target_number\n\n        case suffix_position\n        when :after_command\n          [@prefix_number, @command, @suffix_number, c, f, d, m, @cmp_op, target].join()\n        when :after_modify_number\n          [@prefix_number, @command, @suffix_number, m, c, f, d, @cmp_op, target].join()\n        when :after_target_number\n          [@prefix_number, @command, @suffix_number, m, @cmp_op, target, c, f, d].join()\n        end\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:Command>", "<class:Parsed>", "self", "attr_accessor", "attr_writer", "initialize", "@prefix_number", "@suffix_number", "@critical", "@fumble", "@dollar", "@cmp_op", "@target_number", "@question_target", "question_target?", "to_s", "suffix_position", "c", "f", "d", "m", "Format", "modifier", "@modify_number", "target", "@command", "join"], :mappings=>"AAAAA,wCAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAEEC,IAAAC,eAAAA,CAAc,SAAdA;QAGAD,IAAAC,eAAAA,CAAc,eAAdA;QAGAD,IAAAC,eAAAA,CAAc,eAAdA;QAGAD,IAAAC,eAAAA,CAAc,UAAdA;QAGAD,IAAAC,eAAAA,CAAc,QAAdA;QAGAD,IAAAC,eAAAA,CAAc,QAAdA;QAGAD,IAAAC,eAAAA,CAAc,eAAdA;QAGAD,IAAAC,eAAAA,CAAc,QAAdA;QAGAD,IAAAC,eAAAA,CAAc,eAAdA;QAIAD,IAAAE,aAAAA,CAAY,iBAAZA;;AAEAC,QAAAA,0BAAAA,sBAAAA;AAAAA,UAAAA;;;UACEC,qBAAiB;UACjBC,qBAAiB;UACjBC,gBAAY;UACZC,cAAU;UACVC,cAAU;UACVC,cAAU;UACVC,qBAAiB;UACjBP,OAAAQ,CAAAA,uBAAmB,KAAnBA;QARFR,CAAAA;;AAYAS,QAAAA,gCAAAA,aACE,iBADFA,CAAAA;QAMAb,OAAAc,oBAAAA,gBAASC,eAATD;AAAAA,UAAAA;;;UAAS,+CAAkB;UACzBE,IAAI,CAAA,QAAAT,aAAA,CAAA,GAAA,CAAaO,GAAD,GAAA,CAAIP,aAAJ,CAAZ,IAAA,CAA8B,GAA9B,CAAA;UACJU,IAAI,CAAA,QAAAT,WAAA,CAAA,GAAA,CAAWM,GAAD,GAAA,CAAIN,WAAJ,CAAV,IAAA,CAA0B,GAA1B,CAAA;UACJU,IAAI,CAAA,QAAAT,WAAA,CAAA,GAAA,CAAWK,GAAD,GAAA,CAAIL,WAAJ,CAAV,IAAA,CAA0B,GAA1B,CAAA;UACJU,IAAIC,YAAMC,UAAAA,CAAUC,kBAAVD;UACVE,SAAS,CAAA,QAAAX,oBAAA,CAAA,GAAA,CAAmBE,GAAnB,IAAA,CAAyBH,kBAAzB,CAAA;;UAGT,QADKI,eACL;YAAA,KAAK,eAAL;cACED,OAAA,CAACT,kBAAD,EAAiBmB,YAAjB,EAA2BlB,kBAA3B,EAA2CU,CAA3C,EAA8CC,CAA9C,EAAiDC,CAAjD,EAAoDC,CAApD,EAAuDT,WAAvD,EAAgEa,MAAhE,CAAuEE,MAAAA,CAAAA;YACzE,KAAK,qBAAL;cACEX,OAAA,CAACT,kBAAD,EAAiBmB,YAAjB,EAA2BlB,kBAA3B,EAA2Ca,CAA3C,EAA8CH,CAA9C,EAAiDC,CAAjD,EAAoDC,CAApD,EAAuDR,WAAvD,EAAgEa,MAAhE,CAAuEE,MAAAA,CAAAA;YACzE,KAAK,qBAAL;cACEX,OAAA,CAACT,kBAAD,EAAiBmB,YAAjB,EAA2BlB,kBAA3B,EAA2Ca,CAA3C,EAA8CT,WAA9C,EAAuDa,MAAvD,EAA+DP,CAA/D,EAAkEC,CAAlE,EAAqEC,CAArE,CAAuEO,MAAAA,CAAAA;YADzE;cALAX,OAAA;UACA;QARFA,CAAAA,IAAAA;MAlDFd,GAAAA,WAAAA,EAAAA,IAAAA;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>1304, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/command/parser.rb"], :sourcesContent=>["#\n# DO NOT MODIFY!!!!\n# This file is automatically generated by Racc 1.7.3\n# from Racc grammar file \"parser.y\".\n#\n\nrequire 'racc/parser.rb'\n\n\nrequire \"bcdice/arithmetic/node\"\nrequire \"bcdice/command/lexer\"\nrequire \"bcdice/command/parsed\"\n\n# よくある形式のコマンドのパースを補助するクラス\n#\n# @example Literal by String\n#   parser = Command::Parser.new(\"MC\", round_type: BCDice::RoundType::FLOOR)\n#                           .enable_critical\n#   parsed = parser.parse(\"MC+2*3@30<=10/2-3\") #=> <Command::Parsed>\n#\n#   parsed.command #=> \"MC\"\n#   parsed.modify_number #=> 6\n#   parsed.critical #=> 30\n#   parsed.cmp_op #=> #>=\n#   parsed.target_number #=> 2\n#\n# @example Literal by Regexp\n#   parser = Command::Parser.new(/RE\\d+/)\n#   parsed = parser.parse(\"RE44+20\") #=> <Command::Parsed>\n#\n#   parsed.command #=> \"RE44\"\n#   parsed.modify_number #=> 20\nclass BCDice::Command::Parser < Racc::Parser; end\n\nmodule BCDice\n  module Command\n    class Parser < Racc::Parser\n\n\n# @param notations [Array<String, Regexp>] 反応するコマンドの表記\n# @param round_type [Symbol] 除算での端数の扱い\ndef initialize(*notations, round_type:)\n  super()\n  @notations = notations\n  @round_type = round_type\n  @prefix_number = false\n  @suffix_number = false\n  @need_prefix_number = false\n  @need_suffix_number = false\n  @modifier = true\n  @critical = false\n  @fumble = false\n  @dollar = false\n  @allowed_cmp_op = [nil, :>=, :>, :<=, :<, :==, :!=]\n  @question_target = false\nend\n\n# 修正値は受け付けないようにする\n# @return [BCDice::Command::Parser]\ndef disable_modifier\n  @modifier = false\n  self\nend\n\n# リテラルの前に数値を許可する\n# @return [BCDice::Command::Parser]\ndef enable_prefix_number\n  @prefix_number = true\n  self\nend\n\n# リテラルの後ろに数値を許可する\n# @return [BCDice::Command::Parser]\ndef enable_suffix_number\n  @suffix_number = true\n  self\nend\n\n# リテラルの前に数値が必要であると設定する\n# @return [BCDice::Command::Parser]\ndef has_prefix_number\n  @prefix_number = true\n  @need_prefix_number = true\n  self\nend\n\n# リテラルの後ろに数値が必要であると設定する\n# @return [BCDice::Command::Parser]\ndef has_suffix_number\n  @suffix_number = true\n  @need_suffix_number = true\n  self\nend\n\n# +@+によるクリティカル値の指定を許可する\n# @return [BCDice::Command::Parser]\ndef enable_critical\n  @critical = true\n  self\nend\n\n# +#+によるファンブル値の指定を許可する\n# @return [BCDice::Command::Parser]\ndef enable_fumble\n  @fumble = true\n  self\nend\n\n# +$+による値の指定を許可する\n# @return [BCDice::Command::Parser]\ndef enable_dollar\n  @dollar = true\n  self\nend\n\n# 使用できる比較演算子を制限する。\n# 目標値未入力を許可する場合には+nil+を指定する。\n# @param ops [Array<nil, Symbol>] 許可する比較演算子の一覧\n# @return [BCDice::Command::Parser]\ndef restrict_cmp_op_to(*ops)\n  @allowed_cmp_op = ops\n  self\nend\n\n# 目標値\"?\"の指定を許可する\n# @return [BCDice::Command::Parser]\ndef enable_question_target\n  @question_target = true\n  self\nend\n\n# @param source [String]\n# @return [BCDice::Command::Parsed, nil]\ndef parse(source)\n  @lexer = Lexer.new(source, @notations)\n  do_parse()\nrescue ParseError, ZeroDivisionError\n  nil\nend\n\nprivate\n\ndef parsed(notation, option, modifier, target)\n  Parsed.new.tap do |p|\n    p.command = notation[:command]\n    p.prefix_number = notation[:prefix]&.eval(@round_type)\n    p.suffix_number = notation[:suffix]&.eval(@round_type)\n    p.critical = option[:critical]&.eval(@round_type)\n    p.fumble = option[:fumble]&.eval(@round_type)\n    p.dollar = option[:dollar]&.eval(@round_type)\n    p.modify_number = modifier.eval(@round_type)\n    p.cmp_op = target[:cmp_op]\n    if target[:target] == \"?\"\n      p.question_target = true\n      p.target_number = 0\n    else\n      p.question_target = false\n      p.target_number = target[:target]&.eval(@round_type)\n    end\n  end\nend\n\ndef next_token\n  @lexer.next_token\nend\n##### State transition tables begin ###\n\nracc_action_table = [\n     6,     6,     6,     6,     7,    28,    29,    17,    18,     5,\n     5,     5,     5,     6,    26,    12,     4,    45,    17,    18,\n    10,    11,     5,    10,    11,     6,    23,    24,    25,    26,\n    17,    18,     6,    20,     5,    33,    34,    17,    18,     6,\n    35,     5,    28,    29,    17,    18,     6,   nil,     5,    36,\n    37,    17,    18,     6,   nil,     5,    36,    37,    17,    18,\n     6,   nil,     5,    36,    37,    17,    18,     6,   nil,     5,\n    33,    34,    17,    18,     6,   nil,     5,    36,    37,    17,\n    18,     6,   nil,     5,    36,    37,    17,    18,     6,   nil,\n     5,    36,    37,    17,    18,     6,   nil,     5,    36,    37,\n    17,    18,     6,   nil,     5,   nil,   nil,    17,    18,     6,\n   nil,     5,   nil,   nil,    17,    18,   nil,   nil,     5,    23,\n    24,    25,    26,    56,    54,    55,    57 ]\n\nracc_action_check = [\n     0,     4,    26,    12,     1,    21,    21,    26,    26,     0,\n     4,    26,    12,     5,    21,     3,     0,    26,     5,     5,\n     8,     8,     5,     2,     2,    10,     8,     8,     8,     8,\n    10,    10,    11,     7,    10,    14,    14,    11,    11,    17,\n    14,    11,     9,     9,    17,    17,    18,   nil,    17,    15,\n    15,    18,    18,    23,   nil,    18,    30,    30,    23,    23,\n    24,   nil,    23,    31,    31,    24,    24,    25,   nil,    24,\n    44,    44,    25,    25,    28,   nil,    25,    47,    47,    28,\n    28,    29,   nil,    28,    48,    48,    29,    29,    33,   nil,\n    29,    49,    49,    33,    33,    34,   nil,    33,    50,    50,\n    34,    34,    36,   nil,    34,   nil,   nil,    36,    36,    37,\n   nil,    36,   nil,   nil,    37,    37,   nil,   nil,    37,    27,\n    27,    27,    27,    52,    52,    52,    52 ]\n\nracc_action_pointer = [\n    -2,     4,    16,    -3,    -1,    11,   nil,    33,    13,    35,\n    23,    30,     1,   nil,    28,    40,   nil,    37,    44,   nil,\n   nil,    -2,   nil,    51,    58,    65,     0,   106,    72,    79,\n    47,    54,   nil,    86,    93,   nil,   100,   107,   nil,   nil,\n   nil,   nil,   nil,   nil,    63,   nil,   nil,    68,    75,    82,\n    89,   nil,   120,   nil,   nil,   nil,   nil,   nil ]\n\nracc_action_default = [\n   -35,   -35,    -8,   -35,    -7,   -35,   -34,   -35,   -16,    -8,\n   -35,   -35,    -5,    -6,   -35,   -21,   -24,   -35,   -35,   -32,\n    58,   -16,    -3,   -35,   -35,   -35,   -35,   -16,   -35,   -35,\n   -12,   -13,    -4,   -35,   -35,   -33,   -35,   -35,   -30,   -31,\n    -1,    -9,   -10,   -11,   -17,   -18,    -2,   -14,   -15,   -19,\n   -20,   -22,   -25,   -23,   -26,   -27,   -28,   -29 ]\n\nracc_goto_table = [\n    30,    31,    38,    39,    14,     8,     1,    22,    41,    42,\n    43,     9,    27,     2,    53,   nil,   nil,    21,    47,    48,\n    40,    51,    52,    49,    50,    44,    46,     3,   nil,   nil,\n   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32 ]\n\nracc_goto_check = [\n     8,     8,     7,     7,     9,     3,     1,     5,     7,     7,\n     7,     4,     3,     2,    10,   nil,   nil,     4,     8,     8,\n     5,     7,     7,     8,     8,     9,     5,     6,   nil,   nil,\n   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6 ]\n\nracc_goto_pointer = [\n   nil,     6,    13,     3,     9,    -1,    27,   -15,   -10,    -1,\n   -38 ]\n\nracc_goto_default = [\n   nil,   nil,   nil,   nil,   nil,   nil,    19,    16,    15,   nil,\n   nil ]\n\nracc_reduce_table = [\n  0, 0, :racc_error,\n  4, 20, :_reduce_1,\n  4, 20, :_reduce_2,\n  3, 20, :_reduce_3,\n  3, 21, :_reduce_4,\n  2, 21, :_reduce_5,\n  2, 21, :_reduce_6,\n  1, 21, :_reduce_7,\n  0, 22, :_reduce_8,\n  3, 22, :_reduce_9,\n  3, 22, :_reduce_10,\n  3, 22, :_reduce_11,\n  2, 23, :_reduce_12,\n  2, 23, :_reduce_13,\n  3, 23, :_reduce_14,\n  3, 23, :_reduce_15,\n  0, 24, :_reduce_16,\n  2, 24, :_reduce_17,\n  2, 24, :_reduce_18,\n  3, 28, :_reduce_19,\n  3, 28, :_reduce_20,\n  1, 28, :_reduce_none,\n  3, 27, :_reduce_22,\n  4, 27, :_reduce_23,\n  1, 27, :_reduce_none,\n  0, 29, :_reduce_25,\n  1, 29, :_reduce_26,\n  1, 29, :_reduce_27,\n  1, 29, :_reduce_28,\n  1, 29, :_reduce_29,\n  2, 26, :_reduce_30,\n  2, 26, :_reduce_31,\n  1, 26, :_reduce_none,\n  3, 25, :_reduce_33,\n  1, 25, :_reduce_34 ]\n\nracc_reduce_n = 35\n\nracc_shift_n = 58\n\nracc_token_table = {\n  false => 0,\n  :error => 1,\n  :NUMBER => 2,\n  :R => 3,\n  :U => 4,\n  :C => 5,\n  :F => 6,\n  :PLUS => 7,\n  :MINUS => 8,\n  :ASTERISK => 9,\n  :SLASH => 10,\n  :PARENL => 11,\n  :PARENR => 12,\n  :AT => 13,\n  :SHARP => 14,\n  :DOLLAR => 15,\n  :CMP_OP => 16,\n  :QUESTION => 17,\n  :NOTATION => 18 }\n\nracc_nt_base = 19\n\nracc_use_result_var = true\n\nRacc_arg = [\n  racc_action_table,\n  racc_action_check,\n  racc_action_default,\n  racc_action_pointer,\n  racc_goto_table,\n  racc_goto_check,\n  racc_goto_default,\n  racc_goto_pointer,\n  racc_nt_base,\n  racc_reduce_table,\n  racc_token_table,\n  racc_shift_n,\n  racc_reduce_n,\n  racc_use_result_var ]\nRactor.make_shareable(Racc_arg) if defined?(Ractor)\n\nRacc_token_to_s_table = [\n  \"$end\",\n  \"error\",\n  \"NUMBER\",\n  \"R\",\n  \"U\",\n  \"C\",\n  \"F\",\n  \"PLUS\",\n  \"MINUS\",\n  \"ASTERISK\",\n  \"SLASH\",\n  \"PARENL\",\n  \"PARENR\",\n  \"AT\",\n  \"SHARP\",\n  \"DOLLAR\",\n  \"CMP_OP\",\n  \"QUESTION\",\n  \"NOTATION\",\n  \"$start\",\n  \"expr\",\n  \"notation\",\n  \"option\",\n  \"modifier\",\n  \"target\",\n  \"term\",\n  \"unary\",\n  \"mul\",\n  \"add\",\n  \"round_type\" ]\nRactor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)\n\nRacc_debug_parser = false\n\n##### State transition tables end #####\n\n# reduce 0 omitted\n\ndef _reduce_1(val, _values, result)\n          raise ParseError unless @modifier\n          notation, option, modifier, target = val\n          result = parsed(notation, option, modifier, target)\n\n    result\nend\n\ndef _reduce_2(val, _values, result)\n          raise ParseError unless @modifier\n          notation, modifier, option, target = val\n          result = parsed(notation, option, modifier, target)\n\n    result\nend\n\ndef _reduce_3(val, _values, result)\n          notation, option, target = val\n          result = parsed(notation, option,  Arithmetic::Node::Number.new(0), target)\n\n    result\nend\n\ndef _reduce_4(val, _values, result)\n              raise ParseError unless @prefix_number && @suffix_number\n              result = { command: val[1], prefix: val[0], suffix: val[2] }\n\n    result\nend\n\ndef _reduce_5(val, _values, result)\n              raise ParseError unless @prefix_number\n              raise ParseError if @need_suffix_number\n              result = { command: val[1], prefix: val[0] }\n\n    result\nend\n\ndef _reduce_6(val, _values, result)\n              raise ParseError unless @suffix_number\n              raise ParseError if @need_prefix_number\n              result = { command: val[0], suffix: val[1] }\n\n    result\nend\n\ndef _reduce_7(val, _values, result)\n              raise ParseError if @need_prefix_number || @need_suffix_number\n              result = { command: val[0] }\n\n    result\nend\n\ndef _reduce_8(val, _values, result)\n            result = {}\n\n    result\nend\n\ndef _reduce_9(val, _values, result)\n            option, _, term = val\n            raise ParseError unless @critical && option[:critical].nil?\n\n            option[:critical] = term\n            result = option\n\n    result\nend\n\ndef _reduce_10(val, _values, result)\n            option, _, term = val\n            raise ParseError unless @fumble && option[:fumble].nil?\n\n            option[:fumble] = term\n            result = option\n\n    result\nend\n\ndef _reduce_11(val, _values, result)\n            option, _, term = val\n            raise ParseError unless @dollar && option[:dollar].nil?\n\n            option[:dollar] = term\n            result = option\n\n    result\nend\n\ndef _reduce_12(val, _values, result)\n result = val[1]\n    result\nend\n\ndef _reduce_13(val, _values, result)\n result = Arithmetic::Node::Negative.new(val[1])\n    result\nend\n\ndef _reduce_14(val, _values, result)\n result = Arithmetic::Node::BinaryOp.new(val[0], :+, val[2])\n    result\nend\n\ndef _reduce_15(val, _values, result)\n result = Arithmetic::Node::BinaryOp.new(val[0], :-, val[2])\n    result\nend\n\ndef _reduce_16(val, _values, result)\n            raise ParseError unless @allowed_cmp_op.include?(nil)\n            result = {}\n\n    result\nend\n\ndef _reduce_17(val, _values, result)\n            cmp_op, target = val\n            raise ParseError unless @allowed_cmp_op.include?(cmp_op)\n\n            result = {cmp_op: cmp_op, target: target}\n\n    result\nend\n\ndef _reduce_18(val, _values, result)\n            cmp_op = val[0]\n            raise ParseError unless @question_target\n            raise ParseError unless @allowed_cmp_op.include?(cmp_op)\n\n            result = {cmp_op: cmp_op, target: \"?\"}\n\n    result\nend\n\ndef _reduce_19(val, _values, result)\n result = Arithmetic::Node::BinaryOp.new(val[0], :+, val[2])\n    result\nend\n\ndef _reduce_20(val, _values, result)\n result = Arithmetic::Node::BinaryOp.new(val[0], :-, val[2])\n    result\nend\n\n# reduce 21 omitted\n\ndef _reduce_22(val, _values, result)\n result = Arithmetic::Node::BinaryOp.new(val[0], :*, val[2])\n    result\nend\n\ndef _reduce_23(val, _values, result)\n         divied_class = val[3]\n         result = divied_class.new(val[0], val[2])\n\n    result\nend\n\n# reduce 24 omitted\n\ndef _reduce_25(val, _values, result)\n result = Arithmetic::Node::DivideWithGameSystemDefault\n    result\nend\n\ndef _reduce_26(val, _values, result)\n result = Arithmetic::Node::DivideWithCeil\n    result\nend\n\ndef _reduce_27(val, _values, result)\n result = Arithmetic::Node::DivideWithCeil\n    result\nend\n\ndef _reduce_28(val, _values, result)\n result = Arithmetic::Node::DivideWithRound\n    result\nend\n\ndef _reduce_29(val, _values, result)\n result = Arithmetic::Node::DivideWithFloor\n    result\nend\n\ndef _reduce_30(val, _values, result)\n result = val[1]\n    result\nend\n\ndef _reduce_31(val, _values, result)\n result = Arithmetic::Node::Negative.new(val[1])\n    result\nend\n\n# reduce 32 omitted\n\ndef _reduce_33(val, _values, result)\n result = val[1]\n    result\nend\n\ndef _reduce_34(val, _values, result)\n result = Arithmetic::Node::Number.new(val[0])\n    result\nend\n\ndef _reduce_none(val, _values, result)\n  val[0]\nend\n\n    end   # class Parser\n  end   # module Command\nend   # module BCDice\n"], :names=>["<top (required)>", "self", "require", "<class:BCDice::Command::Parser>", "BCDice::Command", "BCDice", "Racc::Parser", "Racc", "<module:BCDice>", "<module:Command>", "<class:Parser>", "initialize", "@notations", "notations", "@round_type", "round_type", "@prefix_number", "@suffix_number", "@need_prefix_number", "@need_suffix_number", "@modifier", "@critical", "@fumble", "@dollar", "@allowed_cmp_op", "@question_target", "disable_modifier", "enable_prefix_number", "enable_suffix_number", "has_prefix_number", "has_suffix_number", "enable_critical", "enable_fumble", "enable_dollar", "restrict_cmp_op_to", "ops", "enable_question_target", "parse", "source", "@lexer", "Lexer", "new", "do_parse", "ParseError", "ZeroDivisionError", "private", "parsed", "notation", "option", "modifier", "target", "tap", "Parsed", "block in parsed", "p", "block (2 levels) in parsed", "command=", "[]", "prefix_number=", "suffix_number=", "critical=", "fumble=", "dollar=", "modify_number=", "eval", "cmp_op=", "question_target=", "target_number=", "0", "next_token", "racc_action_table", "racc_action_check", "racc_action_pointer", "racc_action_default", "racc_goto_table", "racc_goto_check", "racc_goto_pointer", "6", "13", "3", "9", "-1", "27", "-15", "-10", "-38", "racc_goto_default", "19", "16", "15", "racc_reduce_table", "racc_reduce_n", "35", "racc_shift_n", "58", "racc_token_table", "1", "2", "4", "5", "7", "8", "10", "11", "12", "14", "17", "18", "racc_nt_base", "racc_use_result_var", "Ractor", "make_shareable", "Racc_arg", "Racc_token_to_s_table", "_reduce_1", "val", "_values", "result", "raise", "_reduce_2", "_reduce_3", "Arithmetic::Node::Number", "Arithmetic::Node", "Arithmetic", "_reduce_4", "_reduce_5", "_reduce_6", "_reduce_7", "_reduce_8", "_reduce_9", "_", "term", "nil?", "[]=", "_reduce_10", "_reduce_11", "_reduce_12", "_reduce_13", "Arithmetic::Node::Negative", "_reduce_14", "Arithmetic::Node::BinaryOp", "_reduce_15", "_reduce_16", "include?", "_reduce_17", "cmp_op", "_reduce_18", "_reduce_19", "_reduce_20", "_reduce_22", "_reduce_23", "divied_class", "_reduce_25", "Arithmetic::Node::DivideWithGameSystemDefault", "_reduce_26", "Arithmetic::Node::DivideWithCeil", "_reduce_27", "_reduce_28", "Arithmetic::Node::DivideWithRound", "_reduce_29", "Arithmetic::Node::DivideWithFloor", "_reduce_30", "_reduce_31", "_reduce_33", "_reduce_34", "_reduce_none"], :mappings=>"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"}}, {:offset=>{:line=>1764, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/VisionConnect.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire 'bcdice/command/parser'\n\nmodule BCDice\n  module GameSystem\n    class VisionConnect < Base\n      # ゲームシステムの識別子\n      ID = \"VisionConnect\"\n\n      # ゲームシステム名\n      NAME = \"ヴィジョンコネクト\"\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = \"ういしよんこねくと\"\n\n      HELP_MESSAGE = <<~TEXT\n        ・判定(VC+x@c#f>=y)\n          !：コマンドの最初に付けると致命的失敗が全てアクシデントになる。\n          x：修正値。能力値、戦闘値、その他修正値など。省略可。\n          y：目標値。省略時は決定的成功/致命的失敗のみ表示。\n          c：クリティカル値。@ごと省略可。省略時は12。\n          f：ファンブル値。#ごと省略可。省略時は3。\n          (例)VC+3>=8\n              VC+7@11>=12\n              !VC+6-1#4>=10\n\n        ・各種表\n          アクシデント表 AT\n          トラブル表 TT\n      TEXT\n\n      def eval_game_system_specific_command(command)\n        return check_action(command) || roll_tables(command, TABLES)\n      end\n\n      def check_action(command)\n        parser = Command::Parser.new(/!?VC/, round_type: RoundType::FLOOR)\n                                .enable_critical\n                                .enable_fumble\n                                .restrict_cmp_op_to(nil, :>=)\n        parsed = parser.parse(command)\n        return nil if parsed.nil?\n\n        stamina_zero = parsed.command[0] == '!'\n        critical_target = parsed.critical || 12\n        fumble_target = parsed.fumble || 3\n        accident_target = stamina_zero ? fumble_target : 2\n\n        dice_arr = @randomizer.roll_barabara(2, 6)\n        dice_sum = dice_arr.sum\n        result_sum = dice_sum + parsed.modify_number\n        is_critical = dice_sum >= critical_target\n        is_fumble = dice_sum <= fumble_target\n        is_accident = dice_sum <= accident_target\n        is_trouble = is_fumble && !is_accident\n        if is_critical\n          is_success = true\n          result_str = \"決定的成功\"\n        elsif is_accident\n          is_success = false\n          result_str = \"致命的失敗(アクシデント)\"\n        elsif is_trouble\n          is_success = false\n          result_str = \"致命的失敗(トラブル)\"\n        elsif parsed.target_number.nil?\n          is_success = nil\n        elsif result_sum >= parsed.target_number\n          is_success = true\n          result_str = \"成功\"\n        else\n          is_success = false\n          result_str = \"失敗\"\n        end\n\n        sequence = [\n          \"(\#{parsed.to_s(:after_modify_number)})\",\n          \"\#{dice_sum}[\#{dice_arr.join(',')}]\#{Format.modifier(parsed.modify_number)}\",\n          result_sum,\n          result_str\n        ].compact\n\n        Result.new.tap do |r|\n          r.text = sequence.join(\" ＞ \")\n          r.critical = is_critical\n          r.fumble = is_fumble\n          r.success = is_success || false\n          r.failure = is_success.nil? ? false : !is_success\n        end\n      end\n\n      TABLES = {\n        'AT' => DiceTable::Table.new(\n          'アクシデント表',\n          '1D6',\n          [\n            '頭がぼんやりして、まぶたが重くなってきた……。これは睡魔の襲来？　キャラクターの操作がおぼつかなくなる。シーン終了まで能力値判定、戦闘値判定の達成値に-3される。スタミナを3点消費することで、この効果を打ち消すことができる。',\n            'キーボード、マウス、ゲームパッドなどが操作不能になった！　キャラクターを操作することができない。戦闘中の場合は次のラウンドの準備プロセス終了までキャラクターアクションを行うことができず、スキルや特技の使用もできない。スタミナを3点消費することで、この効果を打ち消すことができる。',\n            '急に画面が真っ暗に！　パソコンやゲーム機を見ると、動作はしている。これはモニタの問題かっ！　キャラクターを操作することができない。戦闘中の場合は次のラウンドの終了までキャラクターアクションを行うことができず、スキル、特技の使用もできない。スタミナを4点消費することで、この効果を打ち消すことができる。',\n            '突然、通信回線が不調となり、切断されてしまった！　急いで再ログインしなければ！　シーンから自動的に退場となる。戦闘中の場合は次のラウンドの準備プロセス終了後、登場できる。スタミナを4点消費することで、この効果を打ち消すことができる。',\n            'いきなり画面が真っ黒になり、パソコンやゲーム機が再起動し始めた……。シーンから自動的に退場となる。戦闘中の場合は次のラウンドの終了後、登場できる。スタミナを5点消費することで、この効果を打ち消すことができる。',\n            '突然、画面が消えた。いや、画面だけじゃない。電化製品がすべて止まっているようだ。もしや、これは停電！？　シーンから自動的に退場となる。次のシーンの開始時に登場できる。スタミナを5点消費することで、この効果を打ち消すことができる。',\n          ]\n        ),\n        'TT' => DiceTable::D66RangeTable.new(\n          'トラブル表',\n          {\n            11..13 => 'チャットで誤爆(発言ミス)をしてしまった。恥ずかしさで、スタミナが1点減少する。',\n            14..16 => 'かまってほしいのか、ペットがちょっとした悪戯をしてきた。ごめん、今は忙しいのだ。ペットを取得していない場合は何も起こらない。ペットを取得していた場合、罪悪感によりスタミナが1点減少する。',\n            21..23 => '何かの用事があるのか、それとも食事の時間なのか、家族から声を掛けられた。家族を取得していない場合は何も起こらない。家族を取得していた場合、気が焦ってスタミナが2点減少する。',\n            24..26 => '玄関のチャイムが鳴り、「宅配便でーす」の声が外から聞こえてきた。こんな時にっ！？　家族がいれば、荷物を受け取ってもらえるのだが……。家族を取得している場合は何も起こらない。家族を取得していない場合、スタミナが2点減少する。',\n            31..33 => '操作中に勢い余って腕が飲み物に当たってしまい、中身がこぼれてしまった。あとで掃除しないと……。ドリンクを取得していない、あるいはすべて使用済みである場合は何も起こらない。ドリンクを1個失う。',\n            34..36 => 'キーボードやゲームパッドの調子があまりよくない。やっぱり、ゲーミングデバイスに買い換えた方がいいか……。デバイスを取得している場合は何も起こらない。デバイスを取得していない場合、ストレスによりスタミナが2点減少する。',\n            41..43 => '知り合いから電話が掛かってきた。電話しながらの操作はちょっと大変だ。より集中しなければならないため、スタミナが2点減少する。',\n            44..46 => '急にお手洗いに行きたくなってきた。ちょっと我慢しなければならないため、スタミナが2点減少する。',\n            51..51 => 'レアモンスターがポップ(出現)したとチャットで通知が来た！　でも、今は行くことができない……。ブレイブを取得していない場合は何も起こらない。ブレイブを取得している場合、悔しさでスタミナが3点減少する。',\n            52..52 => '出品しているアイテムのマーケットでの相場が下がったと知り合いからチャットが飛んできた。マイスターを取得していない場合は何も起こらない。マイスターを取得している場合、悲しさでスタミナが3点減少する。',\n            53..53 => '操作の方法が分からなくなって、焦りまくる。ノービスを取得していない場合は何も起こらない。ノービスを取得している場合、混乱でスタミナが3点減少する。',\n            54..54 => 'ギルドのメンバーからギルドを抜けたいという相談のチャットが飛んできた。リーダーを取得していない場合は何も起こらない。リーダーを取得している場合、驚きのあまりスタミナが3点減少する。',\n            55..55 => '知り合いから攻略の手伝いを頼むチャットが飛んできた。ごめんなさい、今はちょっと無理……。ヘルパーを取得していない場合は何も起こらない。ヘルパーを取得している場合、申し訳なさでスタミナが3点減少する。',\n            56..56 => 'つきまとってくるユーザーから、しつこくチャットが飛んでくる。面倒くさいなぁ。フェイバリットを取得していない場合は何も起こらない。フェイバリットを取得している場合、煩わしさでスタミナが3点減少する。',\n            61..61 => '誰かと一緒にプレイするのに慣れていないためか、ちょっと緊張しているかもしれない。ローンウルフを取得していない場合は何も起こらない。ローンウルフを取得している場合、緊張でスタミナが3点減少する。',\n            62..62 => '事前に入手していた情報が間違っていた！？　どう対応してよいか分からず、焦りまくる。ブレインを取得していない場合は何も起こらない。ブレインを取得している場合、焦りのあまりスタミナが3点減少する。',\n            63..63 => '配信でトラブルが発生！？　対応に慌ててしまう。ストリーマーを取得していない場合は何も起こらない。ストリーマーを取得している場合、狼狽によってスタミナが3点減少する。',\n            64..64 => '使っているゲーミングデバイスの調子がよくない。ガジェッターを取得していない場合は何も起こらない。ガジェッターを取得している場合、いらだちでスタミナが3点減少する。',\n            65..65 => '合間にプレイしている別のゲームや流し見していた動画に注意が向いて、操作をミスしてしまう。カジュアルを取得していない場合は何も起こらない。カジュアルを取得している場合、後悔でスタミナが3点減少する。',\n            66..66 => 'ハードコアを取得していない場合は何も起こらない。トラブル表の51～65の項目の効果を受ける。ハードコア以外に取得しているスタイルに合わせて、効果を適用すること(たとえば、ブレイブならば51、マイスターなら52となる)。',\n          }\n        ),\n      }.freeze\n\n      register_prefix('!?VC', TABLES.keys)\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:VisionConnect>", "eval_game_system_specific_command", "command", "$ret_or_1", "check_action", "roll_tables", "TABLES", "parser", "Command::Parser", "Command", "new", "RoundType::FLOOR", "RoundType", "enable_critical", "enable_fumble", "restrict_cmp_op_to", "parsed", "parse", "nil?", "stamina_zero", "[]", "0", "==", "critical_target", "critical", "12", "fumble_target", "fumble", "3", "accident_target", "2", "dice_arr", "@randomizer", "roll_barabara", "6", "dice_sum", "sum", "result_sum", "+", "modify_number", "is_critical", ">=", "is_fumble", "<=", "is_accident", "is_trouble", "!", "is_success", "result_str", "target_number", "sequence", "to_s", "join", "Format", "modifier", "compact", "tap", "Result", "block in check_action", "r", "block (2 levels) in check_action", "text=", "critical=", "fumble=", "success=", "failure=", "DiceTable::Table", "DiceTable", "DiceTable::D66RangeTable", "11", "13", "14", "16", "21", "23", "24", "26", "31", "33", "34", "36", "41", "43", "44", "46", "51", "52", "53", "54", "55", "56", "61", "62", "63", "64", "65", "66", "freeze", "register_prefix", "keys", "Base"], :mappings=>"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"}}]}