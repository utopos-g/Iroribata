{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/HunterTheReckoning5th.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class HunterTheReckoning5th < Base\n      # ゲームシステムの識別子\n      ID = 'HunterTheReckoning5th'\n\n      # ゲームシステム名\n      NAME = 'Hunter: The Reckoning 5th Edition'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'はんあたされこにんく5'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・判定コマンド(nHRFx+x)\n          注意：難易度は必要成功数を表す\n\n          難易度指定：成功数のカウント、判定成功と失敗、Critical処理、Critical Win、Total Failureのチェックを行う\n                     （Desperationダイスがある場合）OverreachとDespairの発生チェックを行う\n          例) (難易度)HRF(通常ダイス)+(Desperationダイス)\n              (難易度)HRF(通常ダイス)\n\n          難易度省略：成功数のカウント、判定失敗、Critical処理、Total Failure、（Desperationダイスがある場合）Despairチェックを行う\n                      判定成功、Overreachのチェックを行わない\n                      Critical Win、（Desperationダイスがある場合）Despair、Overreachのヒントを出力\n          例) HRF(通常ダイス)+(Desperationダイス)\n              HRF(通常ダイス)\n\n          難易度0指定：全てのチェックを行わない\n          例) 0HRF(通常ダイス)+(Desperationダイス)\n              0HRF(通常ダイス)\n\n      MESSAGETEXT\n\n      DIFFICULTY_INDEX   = 1\n      DICE_POOL_INDEX    = 3\n      DESPERATION_DICE_INDEX = 5\n\n      # 難易度に指定可能な特殊値\n      NOT_CHECK_SUCCESS = -1 # 判定成功にかかわるチェックを行わない(判定失敗に関わるチェックは行う)\n\n      # ダイスボットで使用するコマンドを配列で列挙する\n      register_prefix('\\d*HRF')\n\n      def eval_game_system_specific_command(command)\n        m = /\\A(\\d+)?(HRF)(\\d+)(\\+(\\d+))?$/.match(command)\n        unless m\n          return ''\n        end\n\n        dice_pool = m[DICE_POOL_INDEX].to_i\n        dice_text, success_dice, ten_dice, = make_dice_roll(dice_pool)\n        result_text = \"(\#{dice_pool}D10\"\n\n        desperaton_dice_pool = m[DESPERATION_DICE_INDEX]&.to_i\n        if desperaton_dice_pool\n          if desperaton_dice_pool > 5\n            return \"Desperationダイス指定は5ダイスが最大です。\"\n          end\n\n          desperaton_dice_text, desperaton_success_dice, desperaton_ten_dice, desperaton_botch_dice = make_dice_roll(desperaton_dice_pool)\n\n          ten_dice += desperaton_ten_dice\n          success_dice += desperaton_success_dice\n\n          result_text = \"\#{result_text}+\#{desperaton_dice_pool}D10) ＞ [\#{dice_text}]+[\#{desperaton_dice_text}] \"\n        else\n          desperaton_ten_dice = 0\n          desperaton_botch_dice = 0\n          result_text = \"\#{result_text}) ＞ [\#{dice_text}] \"\n        end\n\n        success_dice += get_critical_success(ten_dice)\n\n        difficulty = m[DIFFICULTY_INDEX] ? m[DIFFICULTY_INDEX].to_i : NOT_CHECK_SUCCESS\n\n        return get_roll_result(result_text, success_dice, ten_dice, desperaton_ten_dice, desperaton_botch_dice, difficulty)\n      end\n\n      private\n\n      def get_roll_result(result_text, success_dice, ten_dice, _desperaton_ten_dice, desperaton_botch_dice, difficulty)\n        result_text = \"\#{result_text} 成功数=\#{success_dice}\"\n        is_critical = ten_dice >= 2\n        desperation_result = \"\"\n\n        if difficulty > 0\n          result_text = \"\#{result_text} 難易度=\#{difficulty}\"\n\n          if success_dice >= difficulty\n            result_text = \"\#{result_text} 差分=\#{success_dice - difficulty}\"\n\n            if desperaton_botch_dice > 0\n              desperation_result = \" [Overreach or Despair?]\"\n            end\n\n            if is_critical\n              return Result.critical(\"\#{result_text}：判定成功! [Critical Win]\#{desperation_result}\")\n            else\n              return Result.success(\"\#{result_text}：判定成功!\#{desperation_result}\")\n            end\n\n          else\n            if desperaton_botch_dice > 0\n              return Result.fumble(\"\#{result_text}：判定失敗! [Despair]\")\n            end\n            if success_dice == 0\n              return Result.fumble(\"\#{result_text}：判定失敗! [Total Failure]\")\n            end\n\n            return Result.failure(\"\#{result_text}：判定失敗!\")\n          end\n        elsif difficulty < 0\n          if success_dice == 0\n            if desperaton_botch_dice > 0\n              return Result.fumble(\"\#{result_text}：判定失敗! [Despair]\")\n            end\n\n            return Result.fumble(\"\#{result_text}：判定失敗! [Total Failure]\")\n          else\n            if desperaton_botch_dice > 0\n              result_text = \"\#{result_text}\\n　判定失敗なら [Despair]\"\n              desperation_result = \" [Overreach or Despair?]\"\n            end\n\n            if is_critical\n              result_text = \"\#{result_text}\\n　判定成功なら [Critical Win]\"\n            elsif desperaton_botch_dice > 0\n              result_text = \"\#{result_text}\\n　判定成功なら\"\n            end\n\n            return \"\#{result_text}\#{desperation_result}\"\n          end\n        end\n\n        # 難易度0指定(=全ての判定チェックを行わない)\n        return result_text.to_s\n      end\n\n      def get_critical_success(ten_dice)\n        # 10の目が2個毎に追加2成功\n        return ((ten_dice / 2).to_i * 2)\n      end\n\n      def make_dice_roll(dice_pool)\n        dice_list = @randomizer.roll_barabara(dice_pool, 10)\n\n        dice_text = dice_list.join(',')\n        success_dice = dice_list.count { |x| x >= 6 }\n        ten_dice = dice_list.count(10)\n        botch_dice = dice_list.count(1)\n\n        return dice_text, success_dice, ten_dice, botch_dice\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:HunterTheReckoning5th>", "1", "3", "5", "-1", "self", "register_prefix", "eval_game_system_specific_command", "command", "m", "match", "dice_pool", "[]", "DICE_POOL_INDEX", "to_i", "make_dice_roll", "dice_text", "success_dice", "ten_dice", "result_text", "desperaton_dice_pool", "DESPERATION_DICE_INDEX", ">", "desperaton_dice_text", "desperaton_success_dice", "desperaton_ten_dice", "desperaton_botch_dice", "+", "0", "get_critical_success", "difficulty", "DIFFICULTY_INDEX", "NOT_CHECK_SUCCESS", "get_roll_result", "private", "_desperaton_ten_dice", "is_critical", ">=", "2", "desperation_result", "-", "Result", "critical", "success", "fumble", "failure", "<", "to_s", "*", "/", "dice_list", "@randomizer", "roll_barabara", "10", "join", "count", "block in make_dice_roll", "x", "block (2 levels) in make_dice_roll", "6", "botch_dice", "Base"], :mappings=>"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"}}]}