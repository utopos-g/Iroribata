{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Kamigakari.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Kamigakari < Base\n      # ゲームシステムの識別子\n      ID = 'Kamigakari'\n\n      # ゲームシステム名\n      NAME = '神我狩'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'かみかかり'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・各種表\n         ・感情表(ET)\n         ・霊紋消費の代償表(RT)\n         ・伝奇名字・名前決定表(NT)\n         ・魔境臨界表(KT)\n         ・獲得素材チャート(MTx xは［法則障害］の［強度］。省略時は１)\n        　　例） MT　MT3　MT9\n        ・D66ダイスあり\n      INFO_MESSAGE_TEXT\n\n      def initialize(command)\n        super(command)\n\n        @sort_add_dice = true\n        @d66_sort_type = D66SortType::NO_SORT\n      end\n\n      def eval_game_system_specific_command(command)\n        tableName = \"\"\n        result = \"\"\n\n        debug(\"eval_game_system_specific_command command\", command)\n\n        case command.upcase\n        when /^MT(\\d*)$/\n          rank = Regexp.last_match(1)\n          rank ||= 1\n          rank = rank.to_i\n          tableName, result, number = getGetMaterialTableResult(rank)\n        else\n          return roll_tables(command, self.class::TABLES)\n        end\n\n        if result.empty?\n          return \"\"\n        end\n\n        text = \"\#{tableName}(\#{number}) ＞ \#{result}\"\n        return text\n      end\n\n      def getGetMaterialTableResult(rank)\n        tableName = translate(\"Kamigakari.MT.name\")\n        table = translate(\"Kamigakari.MT.items\")\n\n        result, number = get_table_by_d66(table)\n\n        effect, number2 = getMaterialEffect(rank)\n        number = \"\#{number},\#{number2}\"\n\n        price = getPrice(effect)\n\n        result = translate(\"Kamigakari.MT.result_format\", material: result, effect: effect)\n        result += \"：\#{price}\" unless price.nil?\n\n        return tableName, result, number\n      end\n\n      def getMaterialEffect(rank)\n        number = @randomizer.roll_once(6)\n\n        result = \"\"\n        type = \"\"\n        if number < 6\n          result, number2 = getMaterialEffectNomal(rank)\n          type = translate(\"Kamigakari.MT.common_material.name\")\n        else\n          result, number2 = getMaterialEffectRare()\n          type = translate(\"Kamigakari.MT.rare_material.name\")\n        end\n\n        result = \"\#{type}：\#{result}\"\n        number = \"\#{number},\#{number2}\"\n\n        return result, number\n      end\n\n      def getMaterialEffectNomal(rank)\n        table = translate(\"Kamigakari.MT.common_material.items\")\n\n        number = @randomizer.roll_d66(D66SortType::NO_SORT)\n\n        result = get_table_by_number(number, table)\n        debug(\"getMaterialEffectNomal result\", result)\n\n        if result =~ /\\+n/\n          power, number2 = getMaterialEffectPower(rank)\n\n          result = result.sub(/\\+n/, \"+\#{power}\")\n          number = \"\#{number},\#{number2}\"\n        end\n\n        return result, number\n      end\n\n      def getMaterialEffectPower(rank)\n        table = [\n          [4, [1, 1, 1, 2, 2, 3]],\n          [8, [1, 1, 2, 2, 3, 3]],\n          [9, [1, 2, 3, 3, 4, 5]],\n        ]\n\n        rank = 9 if rank > 9\n        rankTable = get_table_by_number(rank, table)\n        power, number = get_table_by_1d6(rankTable)\n\n        return power, number\n      end\n\n      def getMaterialEffectRare()\n        table = [\n          [3, \"**\" + translate(\"Kamigakari.MT.rare_material.give_attribute\")], # 付与\n          [5, \"**\" + translate(\"Kamigakari.MT.rare_material.halve_damage\")], # 半減\n          [6, translate(\"Kamigakari.MT.rare_material.optional_by_GM\")],\n        ]\n\n        number = @randomizer.roll_once(6)\n        result = get_table_by_number(number, table)\n        debug('getMaterialEffectRare result', result)\n\n        if result.include?(\"**\")\n          attribute, number2 = getAttribute()\n          result = result.sub(\"**\", attribute.to_s)\n          number = \"\#{number},\#{number2}\"\n        end\n\n        return result, number\n      end\n\n      def getAttribute()\n        table = translate(\"Kamigakari.MT.attribute\")\n\n        number = @randomizer.roll_d66(D66SortType::NO_SORT)\n\n        result = get_table_by_number(number, table)\n\n        return result, number\n      end\n\n      def getPrice(effect)\n        power =\n          if (m = effect.match(/\\+(\\d+)/))\n            m[1].to_i\n          elsif effect.include?(translate(\"Kamigakari.MT.rare_material.give_attribute\")) # 付与\n            3\n          elsif effect.include?(translate(\"Kamigakari.MT.rare_material.halve_damage\")) # 半減\n            4\n          else\n            0\n          end\n\n        table = [\n          nil,\n          \"500G(\#{translate('Kamigakari.MT.effect_power')}:1)\",\n          \"1000G(\#{translate('Kamigakari.MT.effect_power')}:2)\",\n          \"1500G(\#{translate('Kamigakari.MT.effect_power')}:3)\",\n          \"2000G(\#{translate('Kamigakari.MT.effect_power')}:4)\",\n          \"3000G(\#{translate('Kamigakari.MT.effect_power')}:5)\",\n        ]\n        price = table[power]\n\n        return price\n      end\n\n      class << self\n        private\n\n        def translate_tables(locale)\n          {\n            \"RT\" => DiceTable::Table.from_i18n(\"Kamigakari.table.RT\", locale),\n            \"ET\" => DiceTable::D66Table.from_i18n(\"Kamigakari.table.ET\", locale),\n            \"KT\" => DiceTable::D66Table.from_i18n(\"Kamigakari.table.KT\", locale),\n            \"NT\" => DiceTable::D66Table.from_i18n(\"Kamigakari.table.NT\", locale),\n          }\n        end\n      end\n\n      TABLES = translate_tables(:ja_jp)\n\n      register_prefix('MT', TABLES.keys)\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:GameSystem>", "<class:Kamigakari>", "initialize", "command", "self", "@sort_add_dice", "@d66_sort_type", "D66SortType::NO_SORT", "D66SortType", "eval_game_system_specific_command", "tableName", "result", "debug", "$ret_or_1", "upcase", "rank", "Regexp", "last_match", "1", "$ret_or_2", "to_i", "getGetMaterialTableResult", "number", "roll_tables", "class::TABLES", "class", "empty?", "text", "translate", "table", "get_table_by_d66", "getMaterialEffect", "effect", "number2", "price", "getPrice", "nil?", "+", "@randomizer", "roll_once", "6", "type", "<", "getMaterialEffectNomal", "getMaterialEffectRare", "roll_d66", "get_table_by_number", "=~", "getMaterialEffectPower", "power", "sub", "4", "2", "3", "8", "9", "5", ">", "rankTable", "get_table_by_1d6", "include?", "getAttribute", "attribute", "to_s", "m", "match", "[]", "0", "private", "translate_tables", "locale", "DiceTable::Table", "DiceTable", "from_i18n", "DiceTable::D66Table", "register_prefix", "TABLES", "keys", "Base"], :mappings=>"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"}}, {:offset=>{:line=>179, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Kamigakari_Korean.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/game_system/Kamigakari\"\n\nmodule BCDice\n  module GameSystem\n    class Kamigakari_Korean < Kamigakari\n      # ゲームシステムの識別子\n      ID = 'Kamigakari:Korean'\n\n      # ゲームシステム名\n      NAME = '카미가카리'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = '国際化:Korean:카미가카리'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・각종표\n         ・감정표(ET)\n         ・영문소비의 댓가표(RT)\n         ・전기 성씨・이름 결정표(NT)\n         ・마경임계표(KT)\n         ・획득 소재 차트(MTx x는［법칙장해］의［강도］.생략할 때는１)\n        　　예） MT　MT3　MT9\n        ・D66주사위 가능\n      INFO_MESSAGE_TEXT\n\n      register_prefix_from_super_class()\n\n      def initialize(command)\n        super(command)\n\n        @locale = :ko_kr\n      end\n\n      TABLES = translate_tables(:ko_kr).freeze\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:Kamigakari_Korean>", "register_prefix_from_super_class", "initialize", "command", "@locale", "translate_tables", "freeze", "Kamigakari"], :mappings=>"AAAAA,2BAAAA;EAAAA;;;EAEAC,IAAAC,SAAAA,CAAQF,+BAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;;QAEE,8BAAKA,mBAAL;QAGA,gCAAOA,OAAP;QAGA,oCAAWA,kBAAX;QAGA,wCACNA,QADqB,GAErBA,aAFqB,GAGrBA,mBAHqB,GAIrBA,sBAJqB,GAKrBA,eALqB,GAMrBA,yCANqB,GAOrBA,mBAPqB,GAQrBA,cARM;QAWAJ,IAAAK,kCAAAA,CAAAA;;AAEAC,QAAAA,0BAAAA,sBAAeC,OAAfD;AAAAA,UAAAA;;UAAAA;;UACE,OAAAN,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAMO,OAAN,CAAA,EAAA,IAAA;UAEAD,OAAAE,CAAAA,cAAU,OAAVA;QAHFF,CAAAA;QAMAF,OAAA,kCAASJ,IAAAS,kBAAAA,CAAiB,OAAjBA,CAAwBC,QAAAA,CAAAA,CAAjC;MA9BFN,GAAAA,WAAAA,EAA0BO,gBAA1BP;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAJAH;"}}]}