{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/CrashWorld.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class CrashWorld < Base\n      # ゲームシステムの識別子\n      ID = 'CrashWorld'\n\n      # ゲームシステム名\n      NAME = '墜落世界'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'ついらくせかい'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・判定 CWn\n        初期目標値n (必須)\n        例・CW8\n      INFO_MESSAGE_TEXT\n\n      register_prefix('CW')\n\n      def eval_game_system_specific_command(command)\n        result = nil\n\n        case command\n        when /CW(\\d+)/i\n          result = getCrashWorldRoll(Regexp.last_match(1).to_i)\n        end\n\n        return result\n      end\n\n      def getCrashWorldRoll(target)\n        debug(\"target\", target)\n\n        output = \"(\"\n        isEnd = false\n        successness = 0\n        num = 0\n\n        while !isEnd\n          num = @randomizer.roll_once(12)\n\n          # 振った数字を出力へ書き足す\n          if output == \"(\"\n            output = \"(\#{num}\"\n          else\n            output = \"\#{output}, \#{num}\"\n          end\n\n          if num <= target || num == 11\n            # 成功/クリティカル(11)。 次回の目標値を変更して継続\n            target = num\n            successness += 1\n          elsif num == 12\n            # ファンブルなら終了。\n            isEnd = true\n          else\n            # target < num < 11で終了\n            isEnd = true\n          end\n        end\n\n        if num == 12\n          # ファンブルの時、成功度は0\n          successness = 0\n        end\n\n        output = \"\#{output})  成功度 : \#{successness}\"\n\n        if num == 12\n          output = \"\#{output} ファンブル\"\n        end\n\n        return output\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:CrashWorld>", "self", "register_prefix", "eval_game_system_specific_command", "command", "result", "$ret_or_1", "getCrashWorldRoll", "Regexp", "last_match", "1", "to_i", "target", "debug", "output", "isEnd", "successness", "0", "num", "@randomizer", "roll_once", "12", "<=", "11", "+", "Base"], :mappings=>"AAAAA,2BAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAEE,8BAAKA,YAAL;QAGA,gCAAOA,MAAP;QAGA,oCAAWA,SAAX;QAGA,wCACNA,WADqB,GAErBA,eAFqB,GAGrBA,SAHM;QAMAC,IAAAC,iBAAAA,CAAgBF,IAAhBE;;AAEAC,QAAAA,iDAAAA,6CAAsCC,OAAtCD;AAAAA,UAAAA;;;UACEE,SAAS;UAGT,IAAA,QAAK,UAAL,EADAC,CAAAA,YAAKF,OAALE,CACA,CAAA;YACED,SAASJ,IAAAM,mBAAAA,CAAkBC,YAAMC,YAAAA,CAAYC,CAAZD,CAAcE,MAAAA,CAAAA,CAAtCJ;UADX;YADA;UACA;UAIA,OAAOF;QARTF,CAAAA;QAWAH,OAAAO,iCAAAA,6BAAsBK,MAAtBL;AAAAA,UAAAA;;;UACEN,IAAAY,OAAAA,CAAMN,QAAN,EAAgBK,MAAhBC;UAEAC,SAASP;UACTQ,QAAQ;UACRC,cAAcC;UACdC,MAAMD;UAEN,OAAA,KAAOF,KAAP,CAAA;;YACEG,MAAMC,eAAWC,WAAAA,CAAWC,EAAXD;YAGjB,IAAA,MAAGN,MAAH,EAAaP,GAAb,CAAA;cACEO,SAAUP,GAAD,GAAA,CAAIW,GAAJ;YADX;cAGEJ,SAAS,EAAA,GAAA,CAAGA,MAAH,CAAA,GAAUP,IAAV,GAAA,CAAcW,GAAd;YAHX;YAMA,IAAG,CAAA,QAAII,OAAJJ,GAAII,EAAGV,MAAHU,CAAJ,CAAA,IAAA,CAAA,MAAiBJ,GAAjB,EAAwBK,EAAxB,CAAA,CAAA,CAAH;;cAEEX,SAASM;cACTF,cAAYQ,SAAZR,WAAYQ,EAAGd,CAAHc;YAHd,OAIA,IAAA,MAAMN,GAAN,EAAaG,EAAb,CAAA;cAEEN,QAAQ;YAFV;cAKEA,QAAQ;YALV;UAdF;UAuBA,IAAA,MAAGG,GAAH,EAAUG,EAAV,CAAA;YAEEL,cAAcC;UAFhB;UAKAH,SAAS,EAAA,GAAA,CAAGA,MAAH,CAAA,GAAUP,WAAV,GAAA,CAAqBS,WAArB;UAET,IAAA,MAAGE,GAAH,EAAUG,EAAV,CAAA;YACEP,SAAS,EAAA,GAAA,CAAGA,MAAH,CAAA,GAAUP;UADrB;UAIA,OAAOO;QA1CTP,CAAAA;MA9BFP,GAAAA,WAAAA,EAAmByB,UAAnBzB;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}]}