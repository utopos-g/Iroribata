{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Bloodorium.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Bloodorium < Base\n      # ゲームシステムの識別子\n      ID = 'Bloodorium'\n\n      # ゲームシステム名\n      NAME = 'ブラドリウム'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'ふらとりうむ'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・ダイスチェック xDC+y\n        　【ダイスチェック】を行う。《トライアンフ》を結果に自動反映する。\n        　x: ダイス数\n        　y: 結果への修正値 （省略可）\n      INFO_MESSAGE_TEXT\n\n      register_prefix('\\d+DC')\n\n      def eval_game_system_specific_command(command)\n        dicecheck(command)\n      end\n\n      private\n\n      def dicecheck(command)\n        parser = Command::Parser.new(\"DC\", round_type: @round_type).has_prefix_number.restrict_cmp_op_to(nil)\n        parsed = parser.parse(command)\n        unless parsed\n          return nil\n        end\n\n        dice_list = @randomizer.roll_barabara(parsed.prefix_number, 6).sort\n        dice_value = dice_list.max\n        values_count = dice_list\n                       .group_by(&:itself)\n                       .transform_values(&:length)\n        triumph = values_count.values.max\n\n        total = dice_value * triumph + parsed.modify_number\n\n        sequence = [\n          \"(\#{parsed})\",\n          \"[\#{dice_list.join(',')}]\#{Format.modifier(parsed.modify_number)}\",\n          (\"《トライアンフ》(*\#{triumph})\" if triumph > 1),\n          (total_expr(dice_value, triumph, parsed.modify_number) if total != dice_value),\n          total,\n        ].compact\n\n        return Result.new.tap do |r|\n          r.critical = triumph > 1\n          r.text = sequence.join(\" ＞ \")\n        end\n      end\n\n      def total_expr(dice_value, triumph, modify_number)\n        formated_triumph = triumph > 1 ? \"*\#{triumph}\" : nil\n\n        return \"\#{dice_value}\#{formated_triumph}\#{Format.modifier(modify_number)}\"\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Bloodorium>", "self", "register_prefix", "eval_game_system_specific_command", "command", "dicecheck", "private", "parser", "Command::Parser", "Command", "new", "@round_type", "has_prefix_number", "restrict_cmp_op_to", "parsed", "parse", "dice_list", "@randomizer", "roll_barabara", "prefix_number", "6", "sort", "dice_value", "max", "values_count", "transform_values", "group_by", "to_proc", "triumph", "values", "total", "+", "*", "modify_number", "sequence", "join", "Format", "modifier", ">", "1", "total_expr", "compact", "tap", "Result", "block in dicecheck", "r", "block (2 levels) in dicecheck", "critical=", "text=", "formated_triumph", "Base"], :mappings=>"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"}}]}