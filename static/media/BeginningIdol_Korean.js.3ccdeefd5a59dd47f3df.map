{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/beginning_idol/chain_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class BeginningIdol < Base\n      class ChainTable\n        # @param [String] name 表の名前\n        # @param [String] type 項目を選ぶときのダイスロールの方法 '1D6'など\n        # @param [Array<Array<String, #roll>>] items 表の項目の配列\n        def initialize(name, type, items)\n          @name = name\n          @items = items.freeze\n\n          m = /^(\\d+)D(\\d+)$/i.match(type)\n          unless m\n            raise ArgumentError, \"Unexpected table type: \#{type}\"\n          end\n\n          @times = m[1].to_i\n          @sides = m[2].to_i\n        end\n\n        # 表を振る\n        # @param randomizer [#roll_sum] ランダマイザ\n        # @return [String] 結果\n        def roll(randomizer)\n          value = randomizer.roll_sum(@times, @sides)\n          index = value - @times\n          chosen = @items[index]\n          body = chosen.map { |item| item.respond_to?(:roll) ? item.roll(randomizer) : item }.join(\"\\n\")\n\n          return \"\#{@name}(\#{value}) ＞ \#{body}\"\n        end\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:GameSystem>", "<class:BeginningIdol>", "<class:ChainTable>", "initialize", "name", "type", "items", "@name", "@items", "freeze", "m", "match", "self", "raise", "ArgumentError", "@times", "[]", "1", "to_i", "@sides", "2", "roll", "randomizer", "value", "roll_sum", "index", "-", "chosen", "body", "map", "block in roll", "item", "respond_to?", "block (2 levels) in roll", "join", "Base"], :mappings=>"AAAAA,gEAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;QACEA,OAAAC;QAAAA;;UAAAA;;AAAAA;;;AAIEC,UAAAA,0BAAAA,sBAAeC,IAAD,EAAOC,IAAP,EAAaC,KAA3BH;AAAAA,YAAAA;;;YACEI,YAAQH;YACRI,aAASF,KAAKG,QAAAA,CAAAA;YAEdC,IAAI,gBAAgBC,OAAAA,CAAON,IAAPM;YACpB,KAAA,QAAOD,CAAP,CAAA;cACEE,IAAAC,OAAAA,CAAMC,mBAAN,EAAsBX,yBAAD,GAAA,CAA0BE,IAA1B,CAArBQ;YADF;YAIAE,aAASL,CAACM,OAAAA,CAACC,CAADD,CAAGE,MAAAA,CAAAA;YACbf,OAAAgB,CAAAA,aAAST,CAACM,OAAAA,CAACI,CAADJ,CAAGE,MAAAA,CAAAA,CAAbC;UAVFhB,CAAAA;UAgBAD,OAAAmB,oBAAAA,gBAASC,UAATD;AAAAA,YAAAA;;;YACEE,QAAQD,UAAUE,UAAAA,CAAUT,UAApB,EAA4BI,UAAlBK;YAClBC,QAAcC,UAANH,KAAMG,EAAEX,UAAFW;YACdC,SAASnB,UAAMQ,OAAAA,CAACS,KAADT;YACfY,OAAaC,MAANF,MAAME,OAAAA,EAAAA,EAAAA,EAANC,aAAcC,IAAdD;;cAAc;cAAM,IAAA,QAAAC,IAAIC,gBAAAA,CAAa,MAAbA,CAAJ,CAAA;gBAA0BC,OAAAF,IAAIV,MAAAA,CAAMC,UAAND;cAA9B;gBAAkDY,OAAAF;cAAlD,EAApBD,CAAMD,CAAsEK,MAAAA,CAAMb,IAANa;YAEnF,OAAO,EAAA,GAAA,CAAG3B,SAAH,CAAA,GAASc,GAAT,GAAA,CAAYE,KAAZ,CAAA,GAAkBF,MAAlB,GAAA,CAAwBO,IAAxB;UANTP,CAAAA;QApBFnB,GAAAA,WAAAA,EAAAA,IAAAA;MADFD,GAAAA,WAAAA,EAAsBkC,UAAtBlC;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>62, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/beginning_idol/chain_d66_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class BeginningIdol < Base\n      class ChainD66Table\n        # @param [String] name 表の名前\n        # @param [Array<Array<String, #roll>>] items 表の項目の配列\n        def initialize(name, items)\n          @name = name\n          @items = items.freeze\n        end\n\n        # 表を振る\n        # @param randomizer [#roll_sum] ランダマイザ\n        # @return [String] 結果\n        def roll(randomizer)\n          dice = randomizer.roll_barabara(2, 6).sort\n\n          value = dice[0] * 10 + dice[1]\n          chosen = @items[value.to_s]\n          body = chosen.map { |item| item.respond_to?(:roll) ? item.roll(randomizer) : item }.join(\"\\n\")\n\n          return \"\#{@name}(\#{value}) ＞ \#{body}\"\n        end\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:GameSystem>", "<class:BeginningIdol>", "<class:ChainD66Table>", "initialize", "name", "items", "@name", "@items", "freeze", "roll", "randomizer", "dice", "roll_barabara", "2", "6", "sort", "value", "+", "*", "[]", "0", "10", "1", "chosen", "to_s", "body", "map", "block in roll", "item", "respond_to?", "block (2 levels) in roll", "join", "Base"], :mappings=>"AAAAA,oEAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;QACEA,OAAAC;QAAAA;;UAAAA;;AAAAA;;;AAGEC,UAAAA,0BAAAA,sBAAeC,IAAD,EAAOC,KAArBF;AAAAA,YAAAA;;;YACEG,YAAQF;YACRD,OAAAI,CAAAA,aAASF,KAAKG,QAAAA,CAAAA,CAAdD;UAFFJ,CAAAA;UAQAD,OAAAO,oBAAAA,gBAASC,UAATD;AAAAA,YAAAA;;;YACEE,OAAOD,UAAUE,eAAAA,CAAeC,CAAzB,EAA4BC,CAAlBF,CAAoBG,MAAAA,CAAAA;YAErCC,QAAqBC,SAALC,UAARP,IAAIQ,OAAAA,CAACC,CAADD,CAAID,EAAEG,EAAFH,CAAKD,EAAEN,IAAIQ,OAAAA,CAACG,CAADH,CAANF;YACrBM,SAAShB,UAAMY,OAAAA,CAACH,KAAKQ,MAAAA,CAAAA,CAANL;YACfM,OAAaC,MAANH,MAAMG,OAAAA,EAAAA,EAAAA,EAANC,aAAcC,IAAdD;;cAAc;cAAM,IAAA,QAAAC,IAAIC,gBAAAA,CAAa,MAAbA,CAAJ,CAAA;gBAA0BC,OAAAF,IAAInB,MAAAA,CAAMC,UAAND;cAA9B;gBAAkDqB,OAAAF;cAAlD,EAApBD,CAAMD,CAAsEK,MAAAA,CAAMtB,IAANsB;YAEnF,OAAO,EAAA,GAAA,CAAGzB,SAAH,CAAA,GAASG,GAAT,GAAA,CAAYO,KAAZ,CAAA,GAAkBP,MAAlB,GAAA,CAAwBgB,IAAxB;UAPThB,CAAAA;QAXFP,GAAAA,WAAAA,EAAAA,IAAAA;MADFD,GAAAA,WAAAA,EAAsB+B,UAAtB/B;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>118, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/beginning_idol/bad_status_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class BeginningIdol < Base\n      class BadStatusTable\n        def initialize(locale)\n          @locale = locale\n        end\n\n        def roll_command(randomizer, command)\n          m = /^BT(\\d+)?$/.match(command)\n          unless m\n            return nil\n          end\n\n          roll_counts = m[1]&.to_i || 1\n          return roll(randomizer, roll_counts)\n        end\n\n        # @param randomizer [BCDice::Randomizer]\n        # @param counts [Integer]\n        def roll(randomizer, roll_counts = 1)\n          if roll_counts <= 0\n            return nil\n          end\n\n          name = I18n.t(\"BeginningIdol.BT.name\", locale: @locale)\n          items = I18n.t(\"BeginningIdol.BT.items\", locale: @locale)\n          prefix_format = I18n.t(\"BeginningIdol.BT.prefix_format\", locale: @locale)\n\n          dice_list = randomizer.roll_barabara(roll_counts, 6).sort\n          index_list = dice_list.uniq\n\n          result_prefix = format(prefix_format, count_bad_status: index_list.size) + \"\\n\" if index_list.size > 1\n          result_text = index_list.map { |i| items[i - 1] }.join(\"\\n\")\n\n          return \"\#{name} ＞ [\#{dice_list.join(',')}] ＞ \#{result_prefix}\#{result_text}\"\n        end\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:GameSystem>", "<class:BeginningIdol>", "<class:BadStatusTable>", "initialize", "roll_command", "randomizer", "command", "m", "match", "roll_counts", "$ret_or_1", "[]", "1", "self", "roll", "<=", "0", "name", "I18n", "t", "@locale", "items", "prefix_format", "dice_list", "roll_barabara", "6", "sort", "index_list", "uniq", ">", "size", "result_prefix", "+", "format", "result_text", "map", "block in roll", "i", "block (2 levels) in roll", "-", "join", "Base"], :mappings=>"AAAAA,qEAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;QACEA,OAAAC;QAAAA;;UAAAA;;AAAAA;;;AACEC,UAAAA,0BAAAA,aACE,QADFA,CAAAA;;AAIAC,UAAAA,4BAAAA,wBAAiBC,UAAD,EAAaC,OAA7BF;AAAAA,YAAAA;;;YACEG,IAAI,YAAYC,OAAAA,CAAOF,OAAPE;YAChB,KAAA,QAAOD,CAAP,CAAA;cACE,OAAO;YADT;YAIAE,cAAc,CAAA,QAAAC,CAAAA,YAAA,CAAA,KAAAH,CAACI,OAAAA,CAACC,CAADD,CAAD,qCAAA,EAAA,MAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAcE,CAAd,CAAA;YACd,OAAOC,IAAAC,MAAAA,CAAKT,UAAL,EAAiBI,WAAjBK;UAPTV,CAAAA;UAYAF,OAAAY,oBAAAA,gBAAST,UAAD,EAAaI,WAArBK;AAAAA,YAAAA;;;YAAqB,uCAAcF;YACjC,IAAA,QAAeG,OAAZN,WAAYM,EAAGC,CAAHD,CAAf,CAAA;cACE,OAAO;YADT;YAIAE,OAAOC,UAAIC,GAAAA,CAAGL,uBAAP,EAAgC,oBAAA,UAAQM,WAAR,EAA5BD;YACXE,QAAQH,UAAIC,GAAAA,CAAGL,wBAAP,EAAiC,oBAAA,UAAQM,WAAR,EAA7BD;YACZG,gBAAgBJ,UAAIC,GAAAA,CAAGL,gCAAP,EAAyC,oBAAA,UAAQM,WAAR,EAArCD;YAEpBI,YAAYlB,UAAUmB,eAAAA,CAAef,WAAzB,EAAsCgB,CAA5BD,CAA8BE,MAAAA,CAAAA;YACpDC,aAAaJ,SAASK,MAAAA,CAAAA;YAEtB,IAAA,QAAmGC,OAAhBF,UAAUG,MAAAA,CAAAA,CAAMD,EAAEjB,CAAFiB,CAAnG,CAAA;cAAAE,gBAAyEC,SAAzDnB,IAAAoB,QAAAA,CAAOX,aAAP,EAAsB,8BAAA,oBAAkBK,UAAUG,MAAAA,CAAAA,CAA5B,EAAtBG,CAAyDD,EAAElB,IAAFkB;YAAzE;YACAE,cAAwBC,MAAVR,UAAUQ,OAAAA,EAAAA,EAAAA,EAAVC,aAAkBC,CAAlBD;;cAAkB;cAAGE,OAAAjB,KAAKV,OAAAA,CAAG4B,UAAFF,CAAEE,EAAE3B,CAAF2B,CAAH5B,EAA1ByB,CAAUD,CAAyBK,MAAAA,CAAM1B,IAAN0B;YAEjD,OAAO,EAAA,GAAA,CAAGvB,IAAH,CAAA,GAAQH,MAAR,GAAA,CAAcS,SAASiB,MAAAA,CAAM1B,GAAN0B,CAAvB,CAAA,GAAkC1B,MAAlC,GAAA,CAAwCiB,aAAxC,CAAA,GAAA,CAAwDG,WAAxD;UAfTpB,CAAAA,IAAAA;QAjBFZ,GAAAA,WAAAA,EAAAA,IAAAA;MADFD,GAAAA,WAAAA,EAAsBwC,UAAtBxC;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>185, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/beginning_idol/random_event_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class BeginningIdol < Base\n      class RandomEventTable\n        # @param locale [Symbol]\n        # @return [MySkillNameTable]\n        def initialize(locale)\n          @locale = locale\n        end\n\n        # @param randomizer [BCDice::Randomizer]\n        # @return [String]\n        def roll(randomizer)\n          first_index = randomizer.roll_once(6)\n          d66_index = randomizer.roll_d66(D66SortType::NO_SORT)\n\n          i18n_key = first_index.even? ? \"BeginningIdol.RE.on_event\" : \"BeginningIdol.RE.off_event\"\n          table = I18n.t(i18n_key, locale: @locale)\n          name = I18n.t(\"BeginningIdol.RE.name\", locale: @locale)\n          result_format = I18n.t(\"BeginningIdol.RE.format\", locale: @locale)\n\n          chosen = table[:items][d66_index.to_s]\n\n          return \"\#{name} ＞ (1D6) ＞ \#{first_index}\\n\#{table[:name]} ＞ [\#{d66_index}] ＞ \#{format(result_format, event: chosen[0], page: chosen[1])}\"\n        end\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:GameSystem>", "<class:BeginningIdol>", "<class:RandomEventTable>", "initialize", "roll", "randomizer", "first_index", "roll_once", "6", "d66_index", "roll_d66", "D66SortType::NO_SORT", "D66SortType", "i18n_key", "even?", "table", "I18n", "t", "@locale", "name", "result_format", "chosen", "[]", "to_s", "self", "format", "0", "1", "Base"], :mappings=>"AAAAA,uEAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;QACEA,OAAAC;QAAAA;;UAAAA;;AAAAA;;;AAGEC,UAAAA,0BAAAA,aACE,QADFA,CAAAA;UAMAD,OAAAE,oBAAAA,gBAASC,UAATD;AAAAA,YAAAA;;;YACEE,cAAcD,UAAUE,WAAAA,CAAWC,CAAXD;YACxBE,YAAYJ,UAAUK,UAAAA,CAAUC,IAAAC,iBAAAD,YAAVD;YAEtBG,WAAW,CAAA,QAAAP,WAAWQ,UAAAA,CAAAA,CAAX,CAAA,GAAA,CAAoBV,2BAApB,IAAA,CAAkDA,4BAAlD,CAAA;YACXW,QAAQC,UAAIC,GAAAA,CAAGJ,QAAP,EAAiB,oBAAA,UAAQK,WAAR,EAAbD;YACZE,OAAOH,UAAIC,GAAAA,CAAGb,uBAAP,EAAgC,oBAAA,UAAQc,WAAR,EAA5BD;YACXG,gBAAgBJ,UAAIC,GAAAA,CAAGb,yBAAP,EAAkC,oBAAA,UAAQc,WAAR,EAA9BD;YAEpBI,SAASN,KAAKO,OAAAA,CAAC,OAADA,CAAQA,OAAAA,CAACb,SAASc,MAAAA,CAAAA,CAAVD;YAEtB,OAAO,EAAA,GAAA,CAAGH,IAAH,CAAA,GAAQf,aAAR,GAAA,CAAqBE,WAArB,CAAA,GAAiCF,IAAjC,GAAA,CAAqCW,KAAKO,OAAAA,CAAC,MAADA,CAA1C,CAAA,GAAkDlB,MAAlD,GAAA,CAAwDK,SAAxD,CAAA,GAAkEL,MAAlE,GAAA,CAAwEoB,IAAAC,QAAAA,CAAOL,aAAP,EAAsB,2BAAA,SAAOC,MAAMC,OAAAA,CAACI,CAADJ,CAAb,EAAA,QAAwBD,MAAMC,OAAAA,CAACK,CAADL,CAA9B,EAAtBG,CAAxE;UAXTrB,CAAAA;QATFF,GAAAA,WAAAA,EAAAA,IAAAA;MADFD,GAAAA,WAAAA,EAAsB2B,UAAtB3B;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>231, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/beginning_idol/my_skill_name_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class BeginningIdol < Base\n      class MySkillNameTable\n        # @param locale [Symbol]\n        # @return [MySkillNameTable]\n        def initialize(locale)\n          @locale = locale\n\n          article = DiceTable::Table.from_i18n(\"BeginningIdol.MS.subtables.article\", locale)\n          describe = DiceTable::D66Table.from_i18n(\"BeginningIdol.MS.subtables.describe\", locale)\n          scene = DiceTable::D66Table.from_i18n(\"BeginningIdol.MS.subtables.scene\", locale)\n          material = DiceTable::D66Table.from_i18n(\"BeginningIdol.MS.subtables.material\", locale)\n          action = DiceTable::D66Table.from_i18n(\"BeginningIdol.MS.subtables.action\", locale)\n          @chains = [\n            [describe, scene, material],\n            [describe, scene, action],\n            [describe, material, action],\n            [scene, material, action],\n            [describe, scene, article],\n            [material, action, article],\n          ].freeze\n        end\n\n        # @param randomizer [BCDice::Randomizer]\n        # @return [String]\n        def roll(randomizer)\n          index = randomizer.roll_once(6)\n          chosens = @chains[index - 1].map { |t| t.roll(randomizer) }\n\n          dice = chosens.map { |chosen| chosen.table_name + chosen.value.to_s }\n\n          name = I18n.t(\"BeginningIdol.MS.name\", locale: @locale)\n          skill_name_format = I18n.t(\"BeginningIdol.MS.formats\", locale: @locale)[index - 1]\n          skill_name = format(skill_name_format, *chosens.map(&:body))\n\n          \"\#{name} ＞ [\#{index},\#{dice.join(',')}] ＞ \#{skill_name}\"\n        end\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:GameSystem>", "<class:BeginningIdol>", "<class:MySkillNameTable>", "initialize", "locale", "@locale", "article", "DiceTable::Table", "DiceTable", "from_i18n", "describe", "DiceTable::D66Table", "scene", "material", "action", "@chains", "freeze", "roll", "randomizer", "index", "roll_once", "6", "chosens", "map", "[]", "-", "1", "block in roll", "t", "block (2 levels) in roll", "dice", "chosen", "+", "table_name", "value", "to_s", "name", "I18n", "skill_name_format", "skill_name", "format", "self", "to_proc", "join", "Base"], :mappings=>"AAAAA,wEAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;QACEA,OAAAC;QAAAA;;UAAAA;;AAAAA;;;AAGEC,UAAAA,0BAAAA,sBAAeC,MAAfD;AAAAA,YAAAA;;;YACEE,cAAUD;YAEVE,UAAUC,IAAAC,eAAAD,UAAgBE,WAAAA,CAAWN,oCAA3B,EAAiEC,MAAjDK;YAC1BC,WAAWC,IAAAH,eAAAG,aAAmBF,WAAAA,CAAWN,qCAA9B,EAAqEC,MAAlDK;YAC9BG,QAAQD,IAAAH,eAAAG,aAAmBF,WAAAA,CAAWN,kCAA9B,EAAkEC,MAA/CK;YAC3BI,WAAWF,IAAAH,eAAAG,aAAmBF,WAAAA,CAAWN,qCAA9B,EAAqEC,MAAlDK;YAC9BK,SAASH,IAAAH,eAAAG,aAAmBF,WAAAA,CAAWN,mCAA9B,EAAmEC,MAAhDK;YAC5BN,OAAAY,CAAAA,cAAU,CACR,CAACL,QAAD,EAAWE,KAAX,EAAkBC,QAAlB,CADQ,EAER,CAACH,QAAD,EAAWE,KAAX,EAAkBE,MAAlB,CAFQ,EAGR,CAACJ,QAAD,EAAWG,QAAX,EAAqBC,MAArB,CAHQ,EAIR,CAACF,KAAD,EAAQC,QAAR,EAAkBC,MAAlB,CAJQ,EAKR,CAACJ,QAAD,EAAWE,KAAX,EAAkBN,OAAlB,CALQ,EAMR,CAACO,QAAD,EAAWC,MAAX,EAAmBR,OAAnB,CANQ,CAOTU,QAAAA,CAAAA,CAPDD;UARFZ,CAAAA;UAoBAD,OAAAe,oBAAAA,gBAASC,UAATD;AAAAA,YAAAA;;;YACEE,QAAQD,UAAUE,WAAAA,CAAWC,CAAXD;YAClBE,UAA4BC,MAAlBR,WAAOS,OAAAA,CAAOC,UAANN,KAAMM,EAAEC,CAAFD,CAAPD,CAAWD,OAAAA,EAAAA,EAAAA,EAAlBI,aAA0BC,CAA1BD;;cAA0B;cAAGE,OAAAD,CAACX,MAAAA,CAAMC,UAAND,EAA9BU,CAAkBJ;YAE5BO,OAAcP,MAAPD,OAAOC,OAAAA,EAAAA,EAAAA,EAAPI,aAAeI,MAAfJ;;cAAe;cAAQE,OAAkBG,SAAlBD,MAAME,YAAAA,CAAAA,CAAYD,EAAED,MAAMG,OAAAA,CAAAA,CAAMC,MAAAA,CAAAA,CAAdH,EAAzCL,CAAOJ;YAEda,OAAOC,UAAIT,GAAAA,CAAGX,uBAAP,EAAgC,oBAAA,UAAQZ,WAAR,EAA5BuB;YACXU,oBAAoBD,UAAIT,GAAAA,CAAGX,0BAAP,EAAmC,oBAAA,UAAQZ,WAAR,EAA/BuB,CAA+CJ,OAAAA,CAAOC,UAANN,KAAMM,EAAEC,CAAFD,CAAPD;YACvEe,aAAaC,MAAAC,IAAAD,UAAAA,EAAA,CAAOF,iBAAP,CAAA,QAA0B,MAAQf,MAAPD,OAAOC,OAAAA,EAAAA,EAAAA,EAAM,MAADmB,SAAAA,CAAAA,CAALnB,CAAR,CAA1B,CAAAiB;YAEbvB,OAAA,EAAA,GAAA,CAAGmB,IAAH,CAAA,GAAQnB,MAAR,GAAA,CAAcE,KAAd,CAAA,GAAoBF,GAApB,GAAA,CAAuBa,IAAIa,MAAAA,CAAM1B,GAAN0B,CAA3B,CAAA,GAAsC1B,MAAtC,GAAA,CAA4CsB,UAA5C;UAVFtB,CAAAA;QAvBFf,GAAAA,WAAAA,EAAAA,IAAAA;MADFD,GAAAA,WAAAA,EAAsB2C,UAAtB3C;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>293, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/beginning_idol/d6_twice_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class BeginningIdol < Base\n      class D6TwiceTable\n        # @param key [String]\n        # @param locale [Symbol]\n        # @return [D6TwiceTable]\n        def self.from_i18n(key, locale)\n          table = I18n.t(key, locale: locale)\n          new(table[:name], table[:items1], table[:items2])\n        end\n\n        # @param name [String]\n        # @param items1 [Array<String>]\n        # @param items2 [Array<String>]\n        def initialize(name, items1, items2)\n          @name = name\n          @items1 = items1\n          @items2 = items2\n        end\n\n        # @param [Randomizer]\n        # @return [String]\n        def roll(randomizer)\n          value1, value2 = randomizer.roll_barabara(2, 6)\n          chosen1 = @items1[value1 - 1]\n          chosen2 = @items2[value2 - 1]\n\n          \"\#{@name}[\#{value1},\#{value2}] ＞ \#{chosen1}\#{chosen2}\"\n        end\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:GameSystem>", "<class:BeginningIdol>", "<class:D6TwiceTable>", "from_i18n", "self", "key", "locale", "table", "I18n", "t", "new", "[]", "initialize", "name", "items1", "items2", "@name", "@items1", "@items2", "roll", "randomizer", "roll_barabara", "2", "6", "value1", "value2", "chosen1", "-", "1", "chosen2", "Base"], :mappings=>"AAAAA,mEAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;QACEA,OAAAC;QAAAA;;UAAAA;;AAAAA;;UAIEC,MAAIC,IAAJD,gBAAAA,qBAAmBE,GAAD,EAAMC,MAAxBH;AAAAA,YAAAA;;;YACEI,QAAQC,UAAIC,GAAAA,CAAGJ,GAAP,EAAY,oBAAA,UAAQC,MAAR,EAARG;YACZN,OAAAC,IAAAM,KAAAA,CAAIH,KAAKI,OAAAA,CAAC,MAADA,CAAT,EAAkBJ,KAAKI,OAAAA,CAAC,QAADA,CAAvB,EAAkCJ,KAAKI,OAAAA,CAAC,QAADA,CAAvCD;UAFFP,CAAAA;;AAQAS,UAAAA,0BAAAA,sBAAeC,IAAD,EAAOC,MAAP,EAAeC,MAA7BH;AAAAA,YAAAA;;;YACEI,YAAQH;YACRI,cAAUH;YACVF,OAAAM,CAAAA,cAAUH,MAAVG;UAHFN,CAAAA;UAQAV,OAAAiB,oBAAAA,gBAASC,UAATD;AAAAA,YAAAA;;;YACE,KAAiBC,UAAUC,eAAAA,CAAeC,CAAzB,EAA4BC,CAAlBF,CAA3B,kBAAA,EAAAG,CAAAA,SAAA,6BAAAA,CAAA,EAAQC,CAAAA,SAAR,6BAAQA,CAAR;YACAC,UAAUT,WAAON,OAAAA,CAAQgB,UAAPH,MAAOG,EAAEC,CAAFD,CAARhB;YACjBkB,UAAUX,WAAOP,OAAAA,CAAQgB,UAAPF,MAAOE,EAAEC,CAAFD,CAARhB;YAEjBQ,OAAA,EAAA,GAAA,CAAGH,SAAH,CAAA,GAASG,GAAT,GAAA,CAAYK,MAAZ,CAAA,GAAmBL,GAAnB,GAAA,CAAsBM,MAAtB,CAAA,GAA6BN,MAA7B,GAAA,CAAmCO,OAAnC,CAAA,GAAA,CAA6CG,OAA7C;UALFV,CAAAA;QApBFjB,GAAAA,WAAAA,EAAAA,IAAAA;MADFD,GAAAA,WAAAA,EAAsB6B,UAAtB7B;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>349, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/beginning_idol/item_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class BeginningIdol < Base\n      class ItemTable\n        def initialize(locale)\n          @locale = locale\n        end\n\n        def roll_command(randomizer, command)\n          m = /^IT(\\d+)?$/.match(command)\n          unless m\n            return nil\n          end\n\n          roll_counts = m[1]&.to_i || 1\n          return roll(randomizer, roll_counts)\n        end\n\n        # @param randomizer [BCDice::Randomizer]\n        # @param counts [Integer]\n        def roll(randomizer, roll_counts = 1)\n          if roll_counts == 0\n            return nil\n          end\n\n          table = I18n.t(\"BeginningIdol.item_table\", locale: @locale)\n\n          dice_list = randomizer.roll_barabara(roll_counts, 6).sort\n          grouped = dice_list.group_by(&:itself)\n\n          item_list = grouped.map do |dice, list|\n            item = table[:items][dice - 1]\n            if grouped.size != 1\n              item = format(table[:emph], item: item)\n            end\n\n            if dice_list.size == grouped.size\n              item\n            else\n              format(table[:counting], item: item, count: list.size)\n            end\n          end\n\n          return \"\#{table[:name]} ＞ [\#{dice_list.join(',')}] ＞ \#{item_list.join(table[:sep])}\"\n        end\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:GameSystem>", "<class:BeginningIdol>", "<class:ItemTable>", "initialize", "roll_command", "randomizer", "command", "m", "match", "roll_counts", "$ret_or_1", "[]", "1", "self", "roll", "0", "table", "I18n", "t", "@locale", "dice_list", "roll_barabara", "6", "sort", "grouped", "group_by", "to_proc", "item_list", "map", "block in roll", "dice", "list", "block (2 levels) in roll", "item", "-", "size", "format", "join", "Base"], :mappings=>"AAAAA,+DAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;QACEA,OAAAC;QAAAA;;UAAAA;;AAAAA;;;AACEC,UAAAA,0BAAAA,aACE,QADFA,CAAAA;;AAIAC,UAAAA,4BAAAA,wBAAiBC,UAAD,EAAaC,OAA7BF;AAAAA,YAAAA;;;YACEG,IAAI,YAAYC,OAAAA,CAAOF,OAAPE;YAChB,KAAA,QAAOD,CAAP,CAAA;cACE,OAAO;YADT;YAIAE,cAAc,CAAA,QAAAC,CAAAA,YAAA,CAAA,KAAAH,CAACI,OAAAA,CAACC,CAADD,CAAD,qCAAA,EAAA,MAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAcE,CAAd,CAAA;YACd,OAAOC,IAAAC,MAAAA,CAAKT,UAAL,EAAiBI,WAAjBK;UAPTV,CAAAA;UAYAF,OAAAY,oBAAAA,gBAAST,UAAD,EAAaI,WAArBK;AAAAA,YAAAA;;;YAAqB,uCAAcF;YACjC,IAAA,MAAGH,WAAH,EAAkBM,CAAlB,CAAA;cACE,OAAO;YADT;YAIAC,QAAQC,UAAIC,GAAAA,CAAGJ,0BAAP,EAAmC,oBAAA,UAAQK,WAAR,EAA/BD;YAEZE,YAAYf,UAAUgB,eAAAA,CAAeZ,WAAzB,EAAsCa,CAA5BD,CAA8BE,MAAAA,CAAAA;YACpDC,UAAmBC,MAATL,SAASK,YAAAA,EAAAA,EAAAA,EAAW,QAADC,SAAAA,CAAAA,CAAVD;YAEnBE,YAAmBC,MAAPJ,OAAOI,OAAAA,EAAAA,EAAAA,EAAPC,aAAgBC,IAAD,EAAOC,IAAtBF,EAAAG;;;cAAgB;cAAM;cAChCC,OAAOjB,KAAKL,OAAAA,CAAC,OAADA,CAAQA,OAAAA,CAAMuB,UAALJ,IAAKI,EAAEtB,CAAFsB,CAANvB;cACpB,IAAA,OAAGa,OAAOW,MAAAA,CAAAA,CAAV,EAAmBvB,CAAnB,CAAA;gBACEqB,OAAOpB,IAAAuB,QAAAA,CAAOpB,KAAKL,OAAAA,CAAC,MAADA,CAAZ,EAAqB,kBAAA,QAAMsB,IAAN,EAArBG;cADT;cAIA,IAAA,MAAGhB,SAASe,MAAAA,CAAAA,CAAZ,EAAqBX,OAAOW,MAAAA,CAAAA,CAA5B,CAAA;gBACEH,OAAAC;cADF;gBAGED,OAAAnB,IAAAuB,QAAAA,CAAOpB,KAAKL,OAAAA,CAAC,UAADA,CAAZ,EAAyB,2BAAA,QAAMsB,IAAN,EAAA,SAAmBF,IAAII,MAAAA,CAAAA,CAAvB,EAAzBC;cAHF,EANUP,CAAAA,GAAAA,SAAAA,CAAOD;YAanB,OAAO,EAAA,GAAA,CAAGZ,KAAKL,OAAAA,CAAC,MAADA,CAAR,CAAA,GAAgBG,MAAhB,GAAA,CAAsBM,SAASiB,MAAAA,CAAMvB,GAANuB,CAA/B,CAAA,GAA0CvB,MAA1C,GAAA,CAAgDa,SAASU,MAAAA,CAAMrB,KAAKL,OAAAA,CAAC,KAADA,CAAX0B,CAAzD;UAvBTvB,CAAAA,IAAAA;QAjBFZ,GAAAA,WAAAA,EAAAA,IAAAA;MADFD,GAAAA,WAAAA,EAAsBqC,UAAtBrC;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>421, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/beginning_idol/costume_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class BeginningIdol < Base\n      class CostumeTable\n        def self.from_i18n(key, locale)\n          table = I18n.t(key, locale: locale)\n          new(table[:name], table[:items])\n        end\n\n        # @param name [String]\n        # @param items [Hash{Integer => String}]\n        def initialize(name, items)\n          @name = name\n          @items = items\n        end\n\n        # @param randomizer [Randomizer]\n        # @return [String]\n        def roll(randomizer)\n          value = randomizer.roll_d66(D66SortType::ASC)\n          \"\#{@name}(\#{value}) ＞ \#{@items[value.to_s]}\"\n        end\n\n        # @return [DiceTable::D66Table]\n        def brand_only()\n          DiceTable::D66Table.new(\n            @name,\n            D66SortType::ASC,\n            @items.transform_values { |e| e.split(\"\\n\").first }\n          )\n        end\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:GameSystem>", "<class:BeginningIdol>", "<class:CostumeTable>", "from_i18n", "self", "key", "locale", "table", "I18n", "t", "new", "[]", "initialize", "name", "items", "@name", "@items", "roll", "randomizer", "value", "roll_d66", "D66SortType::ASC", "D66SortType", "to_s", "brand_only", "DiceTable::D66Table", "DiceTable", "transform_values", "block in brand_only", "e", "block (2 levels) in brand_only", "split", "first", "Base"], :mappings=>"AAAAA,kEAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;QACEA,OAAAC;QAAAA;;UAAAA;;AAAAA;;UACEC,MAAIC,IAAJD,gBAAAA,qBAAmBE,GAAD,EAAMC,MAAxBH;AAAAA,YAAAA;;;YACEI,QAAQC,UAAIC,GAAAA,CAAGJ,GAAP,EAAY,oBAAA,UAAQC,MAAR,EAARG;YACZN,OAAAC,IAAAM,KAAAA,CAAIH,KAAKI,OAAAA,CAAC,MAADA,CAAT,EAAkBJ,KAAKI,OAAAA,CAAC,OAADA,CAAvBD;UAFFP,CAAAA;;AAOAS,UAAAA,0BAAAA,sBAAeC,IAAD,EAAOC,KAArBF;AAAAA,YAAAA;;;YACEG,YAAQF;YACRD,OAAAI,CAAAA,aAASF,KAATE;UAFFJ,CAAAA;;AAOAK,UAAAA,oBAAAA,gBAASC,UAATD;AAAAA,YAAAA;;;YACEE,QAAQD,UAAUE,UAAAA,CAAUC,IAAAC,iBAAAD,QAAVD;YAClBH,OAAA,EAAA,GAAA,CAAGF,SAAH,CAAA,GAASE,GAAT,GAAA,CAAYE,KAAZ,CAAA,GAAkBF,MAAlB,GAAA,CAAwBD,UAAML,OAAAA,CAACQ,KAAKI,MAAAA,CAAAA,CAANZ,CAA9B;UAFFM,CAAAA;UAMAf,OAAAsB,0BAAAA,sBAAAA;AAAAA,YAAAA;;YACEA,OAAAC,IAAAC,eAAAD,aAAmBf,KAAAA,CACjBK,SADF,EAEEM,IAAAC,iBAAAD,QAFF,EAGQM,MAANX,UAAMW,oBAAAA,EAAAA,EAAAA,EAANC,aAA2BC,CAA3BD;;cAA2B;cAAGE,OAAAD,CAACE,OAAAA,CAAOD,IAAPC,CAAYC,OAAAA,CAAAA,EAA3CJ,CAAMD,CAHWjB;UADrBc,CAAAA;QArBFtB,GAAAA,WAAAA,EAAAA,IAAAA;MADFD,GAAAA,WAAAA,EAAsBgC,UAAtBhC;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>483, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/beginning_idol/accessories_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class BeginningIdol < Base\n      class << self\n        private\n\n        # @params locale [Symbol]\n        # @return [ChainTable]\n        def translate_accessories_table(locale)\n          items = I18n.t(\"BeginningIdol.ACT.items\", locale: locale)\n          subtables = [\n            DiceTable::D66Table.from_i18n(\"BeginningIdol.ACT.subtables.head\", locale),\n            DiceTable::D66Table.from_i18n(\"BeginningIdol.ACT.subtables.hat\", locale),\n            DiceTable::D66Table.from_i18n(\"BeginningIdol.ACT.subtables.body\", locale),\n            DiceTable::D66Table.from_i18n(\"BeginningIdol.ACT.subtables.arm\", locale),\n            DiceTable::D66Table.from_i18n(\"BeginningIdol.ACT.subtables.foot\", locale),\n            DiceTable::D66Table.from_i18n(\"BeginningIdol.ACT.subtables.other\", locale),\n          ]\n\n          ChainTable.new(\n            I18n.t(\"BeginningIdol.ACT.name\", locale: locale),\n            \"1D6\",\n            items.zip(subtables)\n          )\n        end\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:GameSystem>", "<class:BeginningIdol>", "self", "private", "translate_accessories_table", "locale", "items", "I18n", "t", "subtables", "DiceTable::D66Table", "DiceTable", "from_i18n", "ChainTable", "new", "zip", "Base"], :mappings=>"AAAAA,sEAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;QACEA,OAAA;UAAA;;;UACEC,IAAAC,SAAAA,CAAAA;UAIA,OAAAC,2CAAAA,uCAAgCC,MAAhCD;AAAAA,YAAAA;;;YACEE,QAAQC,UAAIC,GAAAA,CAAGJ,yBAAP,EAAkC,oBAAA,UAAQC,MAAR,EAA9BG;YACZC,YAAY,CACVC,IAAAC,eAAAD,aAAmBE,WAAAA,CAAWR,kCAA9B,EAAkEC,MAA/CO,CADT,EAEVF,IAAAC,eAAAD,aAAmBE,WAAAA,CAAWR,iCAA9B,EAAiEC,MAA9CO,CAFT,EAGVF,IAAAC,eAAAD,aAAmBE,WAAAA,CAAWR,kCAA9B,EAAkEC,MAA/CO,CAHT,EAIVF,IAAAC,eAAAD,aAAmBE,WAAAA,CAAWR,iCAA9B,EAAiEC,MAA9CO,CAJT,EAKVF,IAAAC,eAAAD,aAAmBE,WAAAA,CAAWR,kCAA9B,EAAkEC,MAA/CO,CALT,EAMVF,IAAAC,eAAAD,aAAmBE,WAAAA,CAAWR,mCAA9B,EAAmEC,MAAhDO,CANT;YASZR,OAAAS,gBAAUC,KAAAA,CACRP,UAAIC,GAAAA,CAAGJ,wBAAP,EAAiC,oBAAA,UAAQC,MAAR,EAA7BG,CADN,EAEEJ,KAFF,EAGEE,KAAKS,KAAAA,CAAKN,SAALM,CAHGD;UAXZV,CAAAA;QALF,4BAASF,IAAT;MADFD,GAAAA,WAAAA,EAAsBe,UAAtBf;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>520, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/beginning_idol/with_abnormality.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class BeginningIdol < Base\n      module WithAbnormality\n        def replace_abnormality(chosen, randomizer)\n          reg = Regexp.new(I18n.t(\"BeginningIdol.abnormality.regexp\", locale: @locale))\n          m = reg.match(chosen.body)\n          unless m\n            return chosen\n          end\n\n          abno_count = kanji_to_i(m[1])\n          unless abno_count\n            return chosen\n          end\n\n          text = @bad_status_table.roll(randomizer, abno_count)\n          new_body = chosen.body.sub(reg, text)\n\n          return DiceTable::RollResult.new(chosen.table_name, chosen.value, new_body)\n        end\n\n        def kanji_to_i(kanji)\n          list = I18n.t(\"BeginningIdol.abnormality.num_map\", locale: @locale)\n          list.find_index(kanji)&.succ\n        end\n      end\n\n      class D66WithAbnormality < DiceTable::D66Table\n        include WithAbnormality\n\n        def self.from_i18n(key, bad_status_table, locale)\n          table = I18n.t(key, locale: locale)\n          sort_type = D66SortType.const_get(table[:d66_sort_type])\n\n          new(table[:name], sort_type, table[:items], bad_status_table, locale)\n        end\n\n        def initialize(name, sort_type, items, bad_status_table, locale)\n          super(name, sort_type, items)\n          @bad_status_table = bad_status_table\n          @locale = locale\n        end\n\n        def roll(randomizer)\n          chosen = super(randomizer)\n          replace_abnormality(chosen, randomizer)\n        end\n      end\n\n      class TableWithAbnormality < DiceTable::Table\n        include WithAbnormality\n\n        def self.from_i18n(key, bad_status_table, locale)\n          table = I18n.t(key, locale: locale)\n          new(table[:name], table[:type], table[:items], bad_status_table, locale)\n        end\n\n        def initialize(name, type, items, bad_status_table, locale)\n          super(name, type, items)\n          @bad_status_table = bad_status_table\n          @locale = locale\n        end\n\n        def roll(randomizer)\n          chosen = super(randomizer)\n          replace_abnormality(chosen, randomizer)\n        end\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:GameSystem>", "<class:BeginningIdol>", "<module:WithAbnormality>", "replace_abnormality", "chosen", "randomizer", "reg", "Regexp", "new", "I18n", "t", "@locale", "m", "match", "body", "abno_count", "self", "kanji_to_i", "[]", "1", "text", "@bad_status_table", "roll", "new_body", "sub", "DiceTable::RollResult", "DiceTable", "table_name", "value", "kanji", "list", "find_index", "<class:D66WithAbnormality>", "include", "WithAbnormality", "from_i18n", "key", "bad_status_table", "locale", "table", "sort_type", "D66SortType", "const_get", "initialize", "name", "items", "DiceTable::D66Table", "<class:TableWithAbnormality>", "type", "DiceTable::Table", "Base"], :mappings=>"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"}}, {:offset=>{:line=>646, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/beginning_idol/work_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class BeginningIdol < Base\n      class WorkWithChanceTable < DiceTable::D66Table\n        def self.from_i18n(key, locale)\n          table = I18n.t(key, locale: locale)\n          sort_type = D66SortType.const_get(table[:d66_sort_type])\n\n          new(table[:name], sort_type, table[:items], locale)\n        end\n\n        def initialize(name, sort_type, items, locale)\n          super(name, sort_type, items)\n          @regexp = Regexp.new(I18n.t(\"BeginningIdol.with_chance.regexp\", locale: locale))\n          @off = I18n.t(\"BeginningIdol.with_chance.off_text\", locale: locale)\n        end\n\n        def roll_command(randomizer, command)\n          m = /^LO([1-6]{1,2})?$/.match(command)\n          unless m\n            return nil\n          end\n\n          roll(randomizer, m[1]&.to_i)\n        end\n\n        def roll(randomizer, chance = nil)\n          chosen = super(randomizer)\n          unless chance\n            return chosen\n          end\n\n          m = @regexp.match(chosen.body)\n          if m && m[1].to_i >= chance\n            DiceTable::RollResult.new(chosen.table_name, chosen.value, @off)\n          elsif m\n            DiceTable::RollResult.new(chosen.table_name, chosen.value, chosen.body.sub(@regexp, \"\"))\n          else\n            chosen\n          end\n        end\n      end\n\n      class << self\n        private\n\n        def translate_local_work_table(locale)\n          WorkWithChanceTable.from_i18n(\"BeginningIdol.local_work\", locale)\n        end\n      end\n\n      register_prefix(\"LO\")\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:GameSystem>", "<class:BeginningIdol>", "<class:WorkWithChanceTable>", "from_i18n", "self", "key", "locale", "table", "I18n", "t", "sort_type", "D66SortType", "const_get", "[]", "new", "initialize", "name", "items", "@regexp", "Regexp", "@off", "roll_command", "randomizer", "command", "m", "match", "roll", "1", "chance", "chosen", "body", ">=", "to_i", "DiceTable::RollResult", "DiceTable", "table_name", "value", "sub", "DiceTable::D66Table", "private", "translate_local_work_table", "WorkWithChanceTable", "register_prefix", "Base"], :mappings=>"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"}}, {:offset=>{:line=>737, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/beginning_idol/skill_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class BeginningIdol < Base\n      class SkillTable < DiceTable::SaiFicSkillTable\n        def roll(randomizer)\n          roll_command(randomizer, \"RTT\")\n        end\n      end\n\n      class SkillGetTable < DiceTable::Table\n        def self.from_i18n(key, skill_table, locale)\n          table = I18n.t(key, locale: locale)\n          new(table[:name], table[:type], table[:items], skill_table, locale)\n        end\n\n        def initialize(name, type, items, skill_table, locale)\n          super(name, type, items)\n          @skill_table = skill_table\n\n          skill_get_table = I18n.t(\"BeginningIdol.skill_get_table\", locale: locale)\n          @reroll_reg = Regexp.new(skill_get_table[:reroll_reg])\n          @reroll = skill_get_table[:reroll]\n          @secondary_name = skill_get_table[:secondary_name]\n        end\n\n        def roll(randomizer)\n          chosen = super(randomizer)\n\n          m = @reroll_reg.match(chosen.body)\n          unless m\n            return chosen\n          end\n\n          reroll_category = m.captures\n          body = chosen.body + \"\\n\"\n          loop do\n            skill = @skill_table.roll_skill(randomizer)\n            body += \"\#{@secondary_name} ＞ [\#{skill.category_dice},\#{skill.row_dice}] ＞ \#{skill}\"\n            unless reroll_category.include?(skill.category_name)\n              break\n            end\n\n            body += \" ＞ \#{@reroll}\\n\"\n          end\n\n          DiceTable::RollResult.new(chosen.table_name, chosen.value, body)\n        end\n      end\n\n      class SkillHometown\n        def initialize(skill_table)\n          @skill_name = skill_table\n        end\n\n        def roll(randomizer)\n          @skill_name.roll_command(randomizer, \"AT6\")\n        end\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:GameSystem>", "<class:BeginningIdol>", "<class:SkillTable>", "roll", "randomizer", "self", "roll_command", "DiceTable::SaiFicSkillTable", "DiceTable", "<class:SkillGetTable>", "from_i18n", "key", "skill_table", "locale", "table", "I18n", "t", "new", "[]", "initialize", "name", "type", "items", "@skill_table", "skill_get_table", "@reroll_reg", "Regexp", "@reroll", "@secondary_name", "chosen", "m", "match", "body", "reroll_category", "captures", "+", "loop", "block in roll", "block (2 levels) in roll", "skill", "roll_skill", "category_dice", "row_dice", "include?", "category_name", "DiceTable::RollResult", "table_name", "value", "DiceTable::Table", "<class:SkillHometown>", "@skill_name", "Base"], :mappings=>"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"}}, {:offset=>{:line=>843, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/beginning_idol/table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/game_system/beginning_idol/chain_table\"\nrequire \"bcdice/game_system/beginning_idol/chain_d66_table\"\nrequire \"bcdice/game_system/beginning_idol/bad_status_table\"\nrequire \"bcdice/game_system/beginning_idol/random_event_table\"\nrequire \"bcdice/game_system/beginning_idol/my_skill_name_table\"\nrequire \"bcdice/game_system/beginning_idol/d6_twice_table\"\nrequire \"bcdice/game_system/beginning_idol/item_table\"\nrequire \"bcdice/game_system/beginning_idol/costume_table\"\nrequire \"bcdice/game_system/beginning_idol/accessories_table\"\nrequire \"bcdice/game_system/beginning_idol/with_abnormality\"\nrequire \"bcdice/game_system/beginning_idol/work_table\"\nrequire \"bcdice/game_system/beginning_idol/skill_table\"\n\nmodule BCDice\n  module GameSystem\n    class BeginningIdol < Base\n      class << self\n        private\n\n        def translate_skill_table(locale)\n          SkillTable.from_i18n(\n            \"BeginningIdol.skill_table\",\n            locale,\n            rtt: \"AT\",\n            rttn: [\"AT1\", \"AT2\", \"AT3\", \"AT4\", \"AT5\", \"AT6\"]\n          )\n        end\n\n        def translate_tables(locale)\n          costume_challenge_girls = CostumeTable.from_i18n(\"BeginningIdol.tables.DT\", locale)\n          costume_road_to_prince = CostumeTable.from_i18n(\"BeginningIdol.tables.RC\", locale)\n          costume_fortune_stars = CostumeTable.from_i18n(\"BeginningIdol.tables.FC\", locale)\n\n          bland = ChainTable.new(\n            I18n.t(\"BeginningIdol.ACB.name\", locale: locale),\n            \"1D6\",\n            [\n              [I18n.t(\"BeginningIdol.ACB.items.challenge_girls\", locale: locale), costume_challenge_girls.brand_only()],\n              [I18n.t(\"BeginningIdol.ACB.items.challenge_girls\", locale: locale), costume_challenge_girls.brand_only()],\n              [I18n.t(\"BeginningIdol.ACB.items.road_to_prince\", locale: locale), costume_road_to_prince.brand_only()],\n              [I18n.t(\"BeginningIdol.ACB.items.road_to_prince\", locale: locale), costume_road_to_prince.brand_only()],\n              [I18n.t(\"BeginningIdol.ACB.items.fortune_stars\", locale: locale), costume_fortune_stars.brand_only()],\n              [I18n.t(\"BeginningIdol.ACB.items.fortune_stars\", locale: locale), costume_fortune_stars.brand_only()],\n            ]\n          )\n\n          bad_status_table = BadStatusTable.new(locale)\n\n          skill_table = translate_skill_table(locale)\n\n          rare_skill_table = DiceTable::Table.from_i18n(\"BeginningIdol.rare_skill_table\", locale)\n\n          item_table = ItemTable.new(locale)\n\n          tn = ChainTable.new(\n            I18n.t(\"BeginningIdol.TN.name\", locale: locale),\n            \"1D6\",\n            I18n.t(\"BeginningIdol.TN.items\", locale: locale).dup.tap { |items| items[3].push(skill_table) }\n          )\n\n          cg = ChainTable.new(\n            I18n.t(\"BeginningIdol.CG.name\", locale: locale),\n            \"1D6\",\n            I18n.t(\"BeginningIdol.CG.items\", locale: locale).map.with_index do |item, index|\n              if [3, 4].include?(index)\n                [item, item_table]\n              else\n                [item]\n              end\n            end\n          )\n\n          gg = ChainD66Table.new(\n            I18n.t(\"BeginningIdol.GG.name\", locale: locale),\n            I18n.t(\"BeginningIdol.GG.items\", locale: locale).to_h do |index, value|\n              chain =\n                if [\"23\", \"24\", \"25\"].include?(index)\n                  [value, rare_skill_table]\n                elsif index == \"56\"\n                  [value, item_table]\n                else\n                  [value]\n                end\n\n              [index, chain]\n            end\n          )\n\n          ha_items = I18n.t(\"BeginningIdol.HA.items\", locale: locale)\n          ha_items[\"22\"] = [ha_items[\"22\"], SkillHometown.new(skill_table)].flatten\n\n\n          ha = ChainD66Table.new(\n            I18n.t(\"BeginningIdol.HA.name\", locale: locale),\n            ha_items\n          )\n\n          {\n            \"DT\" => costume_challenge_girls,\n            \"RC\" => costume_road_to_prince,\n            \"FC\" => costume_fortune_stars,\n            \"ACB\" => bland,\n            \"TN\" => tn,\n            \"CG\" => cg,\n            \"GG\" => gg,\n            \"HA\" => ha,\n            \"CBT\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.CBT\", locale),\n            \"RCB\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.RCB\", locale),\n            \"HBT\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.HBT\", locale),\n            \"RHB\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.RHB\", locale),\n            \"RU\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.RU\", locale),\n            \"SIP\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.SIP\", locale),\n            \"BU\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.BU\", locale),\n            \"HW\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.HW\", locale),\n            \"FL\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.FL\", locale),\n            \"MSE\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.MSE\", locale),\n            \"ST\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.ST\", locale),\n            \"FST\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.FST\", locale),\n            \"BWT\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.BWT\", locale),\n            \"LWT\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.LWT\", locale),\n            \"TWT\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.TWT\", locale),\n            \"CWT\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.CWT\", locale),\n            \"SU\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.SU\", locale),\n            \"WI\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.WI\", locale),\n            \"NA\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.NA\", locale),\n            \"GA\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.GA\", locale),\n            \"BA\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.BA\", locale),\n            \"WT\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.WT\", locale),\n            \"VA\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.VA\", locale),\n            \"MU\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.MU\", locale),\n            \"DR\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.DR\", locale),\n            \"VI\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.VI\", locale),\n            \"SP\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.SP\", locale),\n            \"CHR\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.CHR\", locale),\n            \"PAR\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.PAR\", locale),\n            \"SW\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.SW\", locale),\n            \"AN\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.AN\", locale),\n            \"MOV\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.MOV\", locale),\n            \"FA\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.FA\", locale),\n            \"BVT\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.BVT\", locale),\n            \"LVT\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.LVT\", locale),\n            \"TVT\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.TVT\", locale),\n            \"CVT\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.CVT\", locale),\n            \"BST\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.BST\", locale),\n            \"LST\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.LST\", locale),\n            \"TST\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.TST\", locale),\n            \"CST\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.CST\", locale),\n            \"BPT\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.BPT\", locale),\n            \"LPT\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.LPT\", locale),\n            \"TPT\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.TPT\", locale),\n            \"CPT\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.CPT\", locale),\n            \"BIT\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.BIT\", locale),\n            \"LIT\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.LIT\", locale),\n            \"TIT\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.TIT\", locale),\n            \"CIT\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.CIT\", locale),\n            \"CHO\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.CHO\", locale),\n            \"SCH\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.SCH\", locale),\n            \"WCH\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.WCH\", locale),\n            \"NCH\" => DiceTable::Table.from_i18n(\"BeginningIdol.tables.NCH\", locale),\n            \"GCH\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.GCH\", locale),\n            \"PCH\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.PCH\", locale),\n            \"LUR\" => D6TwiceTable.from_i18n(\"BeginningIdol.tables.LUR\", locale),\n            \"SUR\" => D6TwiceTable.from_i18n(\"BeginningIdol.tables.SUR\", locale),\n            \"WUR\" => D6TwiceTable.from_i18n(\"BeginningIdol.tables.WUR\", locale),\n            \"NUR\" => D6TwiceTable.from_i18n(\"BeginningIdol.tables.NUR\", locale),\n            \"GUR\" => D6TwiceTable.from_i18n(\"BeginningIdol.tables.GUR\", locale),\n            \"BUR\" => D6TwiceTable.from_i18n(\"BeginningIdol.tables.BUR\", locale),\n            \"ACE\" => DiceTable::D66Table.from_i18n(\"BeginningIdol.tables.ACE\", locale),\n            \"ACT\" => translate_accessories_table(locale),\n            \"MS\" => MySkillNameTable.new(locale),\n            \"RE\" => RandomEventTable.new(locale),\n            \"SH\" => D66WithAbnormality.from_i18n(\"BeginningIdol.tables.SH\", bad_status_table, locale),\n            \"MO\" => D66WithAbnormality.from_i18n(\"BeginningIdol.tables.MO\", bad_status_table, locale),\n            \"SEA\" => D66WithAbnormality.from_i18n(\"BeginningIdol.tables.SEA\", bad_status_table, locale),\n            \"SPA\" => D66WithAbnormality.from_i18n(\"BeginningIdol.tables.SPA\", bad_status_table, locale),\n            \"LN\" => TableWithAbnormality.from_i18n(\"BeginningIdol.tables.LN\", bad_status_table, locale),\n            \"SGT\" => SkillGetTable.from_i18n(\"BeginningIdol.tables.SGT\", skill_table, locale),\n            \"RS\" => SkillGetTable.from_i18n(\"BeginningIdol.tables.RS\", skill_table, locale),\n          }\n        end\n      end\n\n      TABLES = translate_tables(:ja_jp)\n\n      BAD_STATUS_TABLE = BadStatusTable.new(:ja_jp)\n\n      LOCAL_WORK_TABLE = translate_local_work_table(:ja_jp)\n      ITEM_TABLE = ItemTable.new(:ja_jp)\n\n      SKILL_TABLE = translate_skill_table(:ja_jp)\n\n      register_prefix(TABLES.keys)\n    end\n  end\nend\n"], :names=>["<top (required)>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:BeginningIdol>", "private", "translate_skill_table", "locale", "SkillTable", "from_i18n", "translate_tables", "costume_challenge_girls", "CostumeTable", "costume_road_to_prince", "costume_fortune_stars", "bland", "ChainTable", "new", "I18n", "t", "brand_only", "bad_status_table", "BadStatusTable", "skill_table", "rare_skill_table", "DiceTable::Table", "DiceTable", "item_table", "ItemTable", "tn", "tap", "dup", "block in translate_tables", "items", "block (2 levels) in translate_tables", "[]", "3", "push", "cg", "with_index", "map", "item", "index", "4", "include?", "gg", "ChainD66Table", "to_h", "value", "chain", "ha_items", "[]=", "SkillHometown", "flatten", "ha", "DiceTable::D66Table", "D6TwiceTable", "translate_accessories_table", "MySkillNameTable", "RandomEventTable", "D66WithAbnormality", "TableWithAbnormality", "SkillGetTable", "translate_local_work_table", "register_prefix", "TABLES", "keys", "Base"], :mappings=>"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"}}, {:offset=>{:line=>934, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/BeginningIdol.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire 'bcdice/game_system/beginning_idol/table'\n\nmodule BCDice\n  module GameSystem\n    class BeginningIdol < Base\n      # ゲームシステムの識別子\n      ID = 'BeginningIdol'\n\n      # ゲームシステム名\n      NAME = 'ビギニングアイドル'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'ひきにんくあいとる'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        これは、2015年に新書サイズで発売された『駆け出しアイドルRPG ビギニングアイドル チャレンジガールズ』およびそのサプリメントに対応したコマンドです。\n\n        ・パフォーマンス　[r]PDn[+m/-m](r：場に残った出目　n：振る数　m：修正値)\n        ・ワールドセッティング仕事表　BWT：大手芸能プロ　LWT：弱小芸能プロ\n        　TWT：ライブシアター　CWT：アイドル部　LO[n]：地方アイドル(n：チャンス)\n        　SU：情熱の夏　WI：ぬくもりの冬　NA：大自然　GA：女学園　BA：アカデミー\n        ・仕事表　WT　VA：バラエティ　MU：音楽関係　DR：ドラマ関係\n        　VI：ビジュアル関係　SP：スポーツ　CHR：クリスマス　PAR：パートナー関係\n        　SW：お菓子　AN：動物　MOV：映画　FA：ファンタジー\n        ・ランダムイベント　RE\n        ・ハプニング表　HA\n        ・特技リスト　AT[n](n：分野No.)\n        ・アイドルスキル修得表　SGT：チャレンジガールズ　RS：ロードトゥプリンス\n        ・変調　BT[n](n：発生数)\n        ・アイテム　IT[n](n：獲得数)\n        ・アクセサリー　ACT：種別決定　ACB：ブランド決定　ACE：効果表\n        ・衣装　DT：チャレンジガールズ　RC：ロードトゥプリンス　FC:フォーチュンスターズ\n        ・無茶ぶり表　LUR：地方アイドル　SUR：情熱の夏　WUR：ぬくもりの冬\n        　NUR：大自然　GUR：女学園　BUR：アカデミー\n        ・センタールール　HW：向かい風シーン表　FL：駆け出しシーン表　LN：孤独表\n        　マイスキル【MS：名前決定　MSE：効果表】　演出表【ST　FST：ファンタジー】\n        ・合宿ルール　散策表【SH：ショッピングモール　MO：山　SEA：海　SPA：温泉街】\n        　TN：夜語りシチュエーション表　成長表【CG：コモン　GG：ゴールド】\n        ・サビ表　CHO　SCH：情熱の夏　WCH：ぬくもりの冬　NCH：大自然\n        　GCH：女性向け　PCH：力強い\n        ・キャラ空白表　CBT：チャレンジガールズ　RCB：ロードトゥプリンス\n        ・趣味空白表　HBT：チャレンジガールズ　RHB：ロードトゥプリンス\n        ・マスコット暴走表　RU\n        ・アイドル熱湯風呂　nC：バーストタイム(n：温度)　BU：バースト表\n        ・攻撃　n[S]A[r][+m/-m](n：振る数　S：失敗しない　r：取り除く出目　m：修正値)\n        ・かんたんパーソン表　SIP\n        ・会場表\n        　BVT：大手芸能プロ　LVT：弱小芸能プロ　TVT：ライブシアター　CVT：アイドル部\n        ・場所表\n        　BST：大手芸能プロ　LST：弱小芸能プロ　TST：ライブシアター　CST：アイドル部\n        ・プレッシャー種別決定表\n        　BPT：大手芸能プロ　LPT：弱小芸能プロ　TPT：ライブシアター　CPT：アイドル部\n        ・道具表\n        　BIT：大手芸能プロ　LIT：弱小芸能プロ　TIT：ライブシアター　CIT：アイドル部\n        []内は省略可　D66入れ替えあり\n      INFO_MESSAGE_TEXT\n\n      register_prefix(\n        SKILL_TABLE.prefixes,\n        'IT',\n        'BT',\n        '\\d{2}C',\n        '\\d+S?A',\n        '[1-7]*PD'\n      )\n\n      def initialize(command)\n        super(command)\n\n        @sort_add_dice = true\n        @d66_sort_type = D66SortType::ASC\n      end\n\n      def result_nd6(total, dice_total, _value_list, cmp_op, target)\n        return nil if target == '?'\n        return nil unless cmp_op == :>=\n\n        if dice_total <= 2\n          Result.fumble(translate(\"BeginningIdol.fumble\"))\n        elsif dice_total >= 12\n          Result.critical(translate(\"BeginningIdol.special\"))\n        elsif total >= target\n          Result.success(translate(\"success\"))\n        else\n          Result.failure(translate(\"failure\"))\n        end\n      end\n\n      alias check_2D6 check_nD6\n\n      def eval_game_system_specific_command(command)\n        roll_attack(command) ||\n          roll_burst(command) ||\n          roll_performance(command) ||\n          self.class::SKILL_TABLE.roll_command(@randomizer, command) ||\n          self.class::ITEM_TABLE.roll_command(@randomizer, command) ||\n          self.class::BAD_STATUS_TABLE.roll_command(@randomizer, command) ||\n          self.class::LOCAL_WORK_TABLE.roll_command(@randomizer, command) ||\n          roll_tables(command, self.class::TABLES)\n      end\n\n      private\n\n      def roll_burst(command)\n        m = /^(\\d{2})C$/.match(command)\n        unless m\n          return nil\n        end\n\n        degrees = m[1].to_i\n        if (degrees < 45) || (degrees > 55)\n          return nil\n        end\n\n        counts =\n          if degrees <= 49\n            3\n          elsif degrees <= 52\n            4\n          elsif degrees <= 54\n            5\n          else\n            6\n          end\n\n        dice_list = @randomizer.roll_barabara(counts, 6).sort\n        total = dice_list.sum() + degrees\n\n        result =\n          if total >= 80\n            translate(\"BeginningIdol.burst.burst\")\n          elsif total >= 75\n            translate(\"BeginningIdol.burst.critical_success\")\n          elsif total >= 65\n            translate(\"BeginningIdol.burst.success\")\n          else\n            translate(\"failure\")\n          end\n\n        name = translate(\"BeginningIdol.burst.name\")\n        return \"\#{name} ＞ \#{degrees}+[\#{dice_list.join(',')}] ＞ \#{total} ＞ \#{result}\"\n      end\n\n      def roll_attack(command)\n        m = /^(\\d+)(S?)A([1-6]*)([+-]\\d+)?$/.match(command)\n        unless m\n          return nil\n        end\n\n        counts = m[1].to_i\n        return nil if counts <= 0\n\n        sure = !m[2].empty?\n        remove = m[3].each_char.map(&:to_i)\n        adjust = m[4].to_i\n        adjust_str = Format.modifier(adjust)\n\n        dice = @randomizer.roll_barabara(counts, 6).sort\n        dice_str = dice.join(\",\")\n\n        dice -= remove\n\n        text = \"\#{translate('BeginningIdol.attack.name')} ＞ [\#{dice_str}]\#{adjust_str} ＞ \"\n\n        unless (dice.count == counts) || dice.empty?\n          text += \"[\#{dice.join(',')}]\#{adjust_str} ＞ \"\n        end\n\n        if sure || (dice.count == dice.uniq.count)\n          total = [dice.sum() + adjust.to_i, 0].max\n          text += format(translate('BeginningIdol.attack.damage'), total: total)\n        else\n          text += translate('failure')\n        end\n        return text\n      end\n\n      def roll_performance(command)\n        m = /^([1-7]*)PD(\\d+)([+-]\\d+)?$/.match(command)\n        unless m\n          return nil\n        end\n\n        counts = m[2].to_i\n        return nil if counts <= 0\n\n        carry = m[1].chars.map(&:to_i).sort\n        modifier = m[3].to_i\n\n        dice_list = @randomizer.roll_barabara(counts, 6).sort\n        all_dice = (dice_list + carry).sort\n        filtered = select_uniqs(all_dice)\n\n        title = carry.empty? ? translate(\"BeginningIdol.PD.paformance\") : translate(\"BeginningIdol.PD.symphony\")\n\n        result =\n          if carry.empty?\n            result_performance(filtered, modifier, all_dice)\n          else\n            result_symphony(filtered, modifier)\n          end\n\n        sequence = [\n          title,\n          format_dice_list(dice_list, carry, modifier),\n          result,\n        ]\n\n        return sequence.join(\" ＞ \")\n      end\n\n      def select_uniqs(dice_list)\n        dice_list.group_by(&:itself).to_a\n                 .select { |_, arr| arr.size == 1 }\n                 .map { |dice, _| dice }\n                 .sort\n      end\n\n      def format_dice_list(dice_list, carry, modifier)\n        if carry.empty?\n          \"[\#{dice_list.join(',')}]\#{Format.modifier(modifier)}\"\n        else\n          \"[\#{dice_list.join(',')}],[\#{carry.join(',')}]\#{Format.modifier(modifier)}\"\n        end\n      end\n\n      def result_performance(list, modifier, all_list)\n        if list.empty?\n          format(translate(\"BeginningIdol.PD.miracle\"), value: modifier + 10)\n        elsif list == [1, 2, 3, 4, 5, 6]\n          format(translate(\"BeginningIdol.PD.perfect_miracle\"), value: modifier + 30)\n        elsif list.size != all_list.size\n          \"[\#{list.join(',')}]\#{Format.modifier(modifier)} ＞ \#{list.sum() + modifier}\"\n        else\n          (list.sum() + modifier).to_s\n        end\n      end\n\n      def result_symphony(list, modifier)\n        if list.empty?\n          format(translate(\"BeginningIdol.PD.miracle_synchro\"), value: modifier + 15)\n        elsif list == [1, 2, 3, 4, 5, 6]\n          perfect_miracle = format(translate(\"BeginningIdol.PD.perfect_miracle\"), value: modifier + 30)\n          \"[\#{list.join(',')}]\#{Format.modifier(modifier)} ＞ \#{perfect_miracle}\"\n        else\n          \"[\#{list.join(',')}]\#{Format.modifier(modifier)} ＞ \#{list.sum() + modifier}\"\n        end\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:BeginningIdol>", "register_prefix", "SKILL_TABLE", "prefixes", "initialize", "command", "@sort_add_dice", "@d66_sort_type", "D66SortType::ASC", "D66SortType", "result_nd6", "total", "dice_total", "_value_list", "cmp_op", "target", "<=", "2", "Result", "fumble", "translate", ">=", "12", "critical", "success", "failure", "eval_game_system_specific_command", "$ret_or_1", "$ret_or_2", "$ret_or_3", "$ret_or_4", "$ret_or_5", "$ret_or_6", "$ret_or_7", "roll_attack", "roll_burst", "roll_performance", "class::SKILL_TABLE", "class", "roll_command", "@randomizer", "class::ITEM_TABLE", "class::BAD_STATUS_TABLE", "class::LOCAL_WORK_TABLE", "roll_tables", "class::TABLES", "private", "m", "match", "degrees", "[]", "1", "to_i", "<", "45", ">", "55", "counts", "49", "3", "52", "4", "54", "5", "6", "dice_list", "roll_barabara", "sort", "+", "sum", "result", "80", "75", "65", "name", "join", "0", "sure", "empty?", "!", "remove", "map", "each_char", "to_proc", "adjust", "adjust_str", "Format", "modifier", "dice", "dice_str", "-", "text", "count", "uniq", "max", "format", "carry", "chars", "all_dice", "filtered", "select_uniqs", "title", "result_performance", "result_symphony", "sequence", "format_dice_list", "select", "group_by", "to_a", "block in select_uniqs", "_", "arr", "block (2 levels) in select_uniqs", "size", "==", "list", "all_list", "10", "30", "to_s", "15", "perfect_miracle", "Base"], :mappings=>"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"}}, {:offset=>{:line=>1134, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/BeginningIdol_Korean.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/game_system/BeginningIdol\"\n\nmodule BCDice\n  module GameSystem\n    class BeginningIdol_Korean < BeginningIdol\n      # ゲームシステムの識別子\n      ID = 'BeginningIdol:Korean'\n\n      # ゲームシステム名\n      NAME = '비기닝 아이돌'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = '国際化:Korean:비기닝 아이돌'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・퍼포먼스　[r]PDn[+m/-m](r：남은 주사위 눈　n：굴릴 갯수　m：수정치)\n        ・월드세팅 업무표　BWT：대형 연예 프로덕션　LWT：약소 연예 프로덕션\n        　TWT：라이브 시어터　CWT：아이돌 부　LO[n]：로컬 아이돌(n：찬스)\n        　SU：열정의 여름　WI：온기의 겨울　NA：대자연　GA：女学園　BA：アカデミー\n        ・업무표　WT　VA：버라이어티　MU：음악 관련　DR：드라마 관련\n        　VI：비주얼 관련　SP：스포츠　CHR：크리스마스　PAR：파트너 관련\n        ・특기 리스트　AN：動物　MOV：映画　FA：ファンタジー\n        ・ハプニング表　HA\n        ・特技リスト　AT[n](n：分野No.)\n        ・아이돌 스킬 습득표　SGT：챌린지 걸즈　RS：로드 투 프린스\n        ・변조　BT[n](n：주사위눈)\n        ・아이템　IT[n](n：보유 갯수)\n        ・アクセサリー　ACT：種別決定　ACB：ブランド決定　ACE：効果表\n        ・의상　DT：챌린지 걸즈　RC：로드 투 프린스　FC:フォーチュンスターズ\n        ・엉망진창 표　LUR：로컬 아이돌　SUR：정열의 여름　WUR：온기의 겨울\n        　NUR：대자연　GUR：女学園　BUR：アカデミー\n        ・센터 룰　HW：역풍 씬표　FL：신출내기 씬표　LN：고독표\n        　マイスキル【MS：名前決定　MSE：効果表】　演出表【ST　FST：ファンタジー】\n        ・합숙 룰　산책표 【SH：쇼핑몰　MO：산　SEA：바다　SPA：온천】\n        　TN：야밤의 대화 시츄에이션　성장표 【CG：커먼　GG：골드】\n        ・작사표　CHO　SCH：정열의 여름　WCH：온기의 겨울　NCH：대자연\n        ・캐릭터 공백표　CBT：챌린지 걸즈　RCB：로드 투 프린스\n        ・취미 공백표　HBT：챌린지 걸즈　RHB：로드 투 프린스\n        ・마스코트 폭주표　RU\n        ・버스트 타임　nC：バーストタイム(n：온도)　BU：バースト表\n        ・攻撃　n[S]A[r][+m/-m](n：振る数　S：失敗しない　r：取り除く出目　m：修正値)\n        ・かんたんパーソン表　SIP\n        ・회장표\n        　BVT：대형 예능 프로덕션　LVT：약소 예능 프로덕션　TVT：라이브 시어터　CVT：아이돌 부\n        ・장소표\n        　BST：대형 예능 프로덕션　LST：약소 예능 프로덕션　TST：라이브 시어터　CST：아이돌 부\n        ・프레셔 종류 결정표\n        　BPT：대형 예능 프로덕션　LPT：약소 예능 프로덕션　TPT：라이브 시어터　CPT：아이돌 부\n        ・도구표\n        　BIT：대형 예능 프로덕션　LIT：약소 예능 프로덕션　TIT：라이브 시어터　CIT：아이돌 부\n        []内は省略可　D66 다이스가 존재\n      INFO_MESSAGE_TEXT\n\n      register_prefix_from_super_class()\n\n      def initialize(command)\n        super(command)\n\n        @locale = :ko_kr\n      end\n\n      TABLES = translate_tables(:ko_kr)\n\n      BAD_STATUS_TABLE = BadStatusTable.new(:ko_kr)\n\n      LOCAL_WORK_TABLE = translate_local_work_table(:ko_kr)\n      ITEM_TABLE = ItemTable.new(:ko_kr)\n\n      SKILL_TABLE = translate_skill_table(:ko_kr)\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:BeginningIdol_Korean>", "register_prefix_from_super_class", "initialize", "command", "@locale", "translate_tables", "BadStatusTable", "new", "translate_local_work_table", "ItemTable", "translate_skill_table", "BeginningIdol"], :mappings=>"AAAAA,2BAAAA;EAAAA;;;EAEAC,IAAAC,SAAAA,CAAQF,kCAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;;QAEE,8BAAKA,sBAAL;QAGA,gCAAOA,SAAP;QAGA,oCAAWA,oBAAX;QAGA,wCACNA,iDADqB,GAErBA,2CAFqB,GAGrBA,6CAHqB,GAIrBA,+CAJqB,GAKrBA,uCALqB,GAMrBA,0CANqB,GAOrBA,kCAPqB,GAQrBA,cARqB,GASrBA,yBATqB,GAUrBA,sCAVqB,GAWrBA,qBAXqB,GAYrBA,uBAZqB,GAarBA,uCAbqB,GAcrBA,2CAdqB,GAerBA,4CAfqB,GAgBrBA,8BAhBqB,GAiBrBA,oCAjBqB,GAkBrBA,8CAlBqB,GAmBrBA,yCAnBqB,GAoBrBA,sCApBqB,GAqBrBA,0CArBqB,GAsBrBA,oCAtBqB,GAuBrBA,mCAvBqB,GAwBrBA,gBAxBqB,GAyBrBA,qCAzBqB,GA0BrBA,qDA1BqB,GA2BrBA,kBA3BqB,GA4BrBA,QA5BqB,GA6BrBA,wDA7BqB,GA8BrBA,QA9BqB,GA+BrBA,wDA/BqB,GAgCrBA,eAhCqB,GAiCrBA,wDAjCqB,GAkCrBA,QAlCqB,GAmCrBA,wDAnCqB,GAoCrBA,uBApCM;QAuCAJ,IAAAK,kCAAAA,CAAAA;;AAEAC,QAAAA,0BAAAA,sBAAeC,OAAfD;AAAAA,UAAAA;;UAAAA;;UACE,OAAAN,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAMO,OAAN,CAAA,EAAA,IAAA;UAEAD,OAAAE,CAAAA,cAAU,OAAVA;QAHFF,CAAAA;QAMA,kCAASN,IAAAS,kBAAAA,CAAiB,OAAjBA,CAAT;QAEA,4CAAmBC,oBAAcC,KAAAA,CAAK,OAALA,CAAjC;QAEA,4CAAmBX,IAAAY,4BAAAA,CAA2B,OAA3BA,CAAnB;QACA,sCAAaC,eAASF,KAAAA,CAAK,OAALA,CAAtB;QAEAP,OAAA,uCAAcJ,IAAAc,uBAAAA,CAAsB,OAAtBA,CAAd;MAjEFV,GAAAA,WAAAA,EAA6BW,mBAA7BX;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAJAH;"}}]}