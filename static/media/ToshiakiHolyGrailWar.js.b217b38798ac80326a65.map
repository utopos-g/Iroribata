{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/ToshiakiHolyGrailWar.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class ToshiakiHolyGrailWar < Base\n      # ゲームシステムの識別子\n      ID = 'ToshiakiHolyGrailWar'\n      # ゲームシステム名\n      NAME = 'としあきの聖杯戦争TRPG'\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'としあきのせいはいせんそうTRPG'\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ■ 判定 (Fx+y-z@a>=t)\n          補正値ペナルティを自動計算してダイスの面数を決定しダイスロールを実行します。\n          ダイス面数は2以上、10以下の範囲に制限されます。\n          x: ステータス\n          y: 補正値 (任意)\n          z: マイナス補正値 (任意)\n          a: ダイス面数の増量 (任意)\n          t: 目標値 (任意)\n          例)\n            F8+11, F8+11-5, F8+11-5@1, F8+11+9-3-2@-1, F8+11-5>=50, F8\n      INFO_MESSAGE_TEXT\n\n      register_prefix('F')\n\n      def eval_game_system_specific_command(command)\n        roll_f(command)\n      end\n\n      private\n\n      def roll_f(command)\n        parser = Command::Parser.new(/F(\\d+)(\\+\\d+)*(-\\d+)*/, round_type: RoundType::CEIL)\n                                .disable_modifier\n                                .enable_critical\n        cmd = parser.parse(command)\n        unless cmd\n          return nil\n        end\n\n        m = cmd.command.match(/^F(\\d+)((?:\\+\\d+)+)?((?:-\\d+)+)?$/)\n        unless m\n          return nil\n        end\n\n        status = m[1].to_i\n        positive_modifier = m[2] ? Arithmetic.eval(m[2], RoundType::CEIL) : 0\n        negative_modifier = m[3] ? Arithmetic.eval(m[3], RoundType::CEIL) : 0\n        side_bonus = cmd.critical || 0\n\n        times = [status + positive_modifier + negative_modifier, 0].max\n        sides = (6 - positive_modifier_penalty(positive_modifier) + negative_modifier_bonus(negative_modifier) + side_bonus).clamp(2, 10)\n\n        list = @randomizer.roll_barabara(times, sides)\n        total = list.sum()\n        result =\n          if cmd.cmp_op.nil?\n            Result.new\n          elsif total.send(cmd.cmp_op, cmd.target_number)\n            Result.success(\"成功\")\n          else\n            Result.failure(\"失敗\")\n          end\n\n        sequence = [\n          cmd,\n          \"(\#{times}D\#{sides}\#{cmd.cmp_op}\#{cmd.target_number})\",\n          \"\#{total}[\#{list.join(',')}]\",\n          total,\n          result.text,\n        ].compact\n\n        result.text = sequence.join(\" ＞ \")\n        return result\n      end\n\n      def positive_modifier_penalty(modifier)\n        if modifier <= 10\n          0\n        else\n          (modifier / 10).to_i\n        end\n      end\n\n      def negative_modifier_bonus(modifier)\n        modifier <= -5 ? 1 : 0\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:ToshiakiHolyGrailWar>", "self", "register_prefix", "eval_game_system_specific_command", "command", "roll_f", "private", "parser", "Command::Parser", "Command", "new", "RoundType::CEIL", "RoundType", "disable_modifier", "enable_critical", "cmd", "parse", "m", "match", "status", "[]", "1", "to_i", "positive_modifier", "2", "Arithmetic", "eval", "0", "negative_modifier", "3", "side_bonus", "$ret_or_1", "critical", "times", "+", "max", "sides", "-", "6", "positive_modifier_penalty", "negative_modifier_bonus", "clamp", "10", "list", "@randomizer", "roll_barabara", "total", "sum", "result", "cmp_op", "nil?", "Result", "send", "target_number", "success", "failure", "sequence", "join", "text", "compact", "text=", "modifier", "<=", "/", "-5", "Base"], :mappings=>"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"}}]}