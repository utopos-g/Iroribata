{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/StratoShout.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class StratoShout < Base\n      # ゲームシステムの識別子\n      ID = 'StratoShout'\n\n      # ゲームシステム名\n      NAME = 'ストラトシャウト'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'すとらとしやうと'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n\n        VOT, GUT, BAT, KEYT, DRT: (ボーカル、ギター、ベース、キーボード、ドラム)トラブル表\n        EMO: 感情表\n        ATn, RTTn: 特技表(n＝分野。空:ランダム 1:主義 2:身体 3:モチーフ 4:エモーション 5:行動 6:逆境)\n        RCT: 分野ランダム表\n        SCENE, MACHI, GAKKO, BAND: (汎用、街角、学校、バンド)シーン表 接近シーンで使用\n        TENKAI: シーン展開表 奔走シーン 練習シーンで使用\n\n        D66入れ替えあり\n      INFO_MESSAGE_TEXT\n\n      def initialize(command)\n        super(command)\n\n        @sort_add_dice = true\n        @d66_sort_type = D66SortType::ASC\n      end\n\n      def result_2d6(_total, dice_total, _dice_list, cmp_op, _target)\n        return nil unless cmp_op == :>=\n\n        if dice_total <= 2\n          Result.fumble(translate(\"StratoShout.fumble\"))\n        elsif dice_total >= 12\n          Result.critical(translate(\"StratoShout.critical\"))\n        end\n      end\n\n      def eval_game_system_specific_command(command)\n        roll_tables(command, self.class::TABLES) || self.class::RTT.roll_command(@randomizer, command)\n      end\n\n      class << self\n        private\n\n        def translate_tables(locale)\n          {\n            \"VOT\" => DiceTable::Table.from_i18n(\"StratoShout.table.VOT\", locale),\n            \"GUT\" => DiceTable::Table.from_i18n(\"StratoShout.table.GUT\", locale),\n            \"BAT\" => DiceTable::Table.from_i18n(\"StratoShout.table.BAT\", locale),\n            \"KEYT\" => DiceTable::Table.from_i18n(\"StratoShout.table.KEYT\", locale),\n            \"DRT\" => DiceTable::Table.from_i18n(\"StratoShout.table.DRT\", locale),\n            \"EMO\" => DiceTable::Table.from_i18n(\"StratoShout.table.EMO\", locale),\n            \"SCENE\" => DiceTable::Table.from_i18n(\"StratoShout.table.SCENE\", locale),\n            \"MACHI\" => DiceTable::Table.from_i18n(\"StratoShout.table.MACHI\", locale),\n            \"GAKKO\" => DiceTable::Table.from_i18n(\"StratoShout.table.GAKKO\", locale),\n            \"BAND\" => DiceTable::Table.from_i18n(\"StratoShout.table.BAND\", locale),\n            \"TENKAI\" => DiceTable::D66Table.from_i18n(\"StratoShout.table.TENKAI\", locale),\n          }\n        end\n\n        def translate_rtt(locale)\n          DiceTable::SaiFicSkillTable.from_i18n(\"StratoShout.RTT\", locale, rtt: 'AT', rttn: ['AT1', 'AT2', 'AT3', 'AT4', 'AT5', 'AT6'])\n        end\n      end\n\n      TABLES = translate_tables(:ja_jp)\n      RTT = translate_rtt(:ja_jp)\n\n      register_prefix(TABLES.keys, RTT.prefixes)\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:GameSystem>", "<class:StratoShout>", "initialize", "command", "self", "@sort_add_dice", "@d66_sort_type", "D66SortType::ASC", "D66SortType", "result_2d6", "_total", "dice_total", "_dice_list", "cmp_op", "_target", "<=", "2", "Result", "fumble", "translate", ">=", "12", "critical", "eval_game_system_specific_command", "$ret_or_1", "roll_tables", "class::TABLES", "class", "class::RTT", "roll_command", "@randomizer", "private", "translate_tables", "locale", "DiceTable::Table", "DiceTable", "from_i18n", "DiceTable::D66Table", "translate_rtt", "DiceTable::SaiFicSkillTable", "register_prefix", "TABLES", "keys", "RTT", "prefixes", "Base"], :mappings=>"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"}}, {:offset=>{:line=>83, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/StratoShout_Korean.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/game_system/StratoShout\"\n\nmodule BCDice\n  module GameSystem\n    class StratoShout_Korean < StratoShout\n      # ゲームシステムの識別子\n      ID = 'StratoShout:Korean'\n\n      # ゲームシステム名\n      NAME = '스트라토 샤우트'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = '国際化:Korean:스트라토 샤우트'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        VOT, GUT, BAT, KEYT, DRT: (보컬, 기타, 베이스, 키보드, 드럼)트러블표\n        EMO: 감정표\n        RTT[1-6], AT[1-6]: 특기표(공백: 랜덤 1: 주의 2: 신체 3: 모티브 4: 이모션 5: 행동 6: 역경)\n        SCENE, MACHI, GAKKO, BAND: (범용, 거리, 학교, 밴드)장면표. 접근 장면에 사용\n        TENKAI: 장면 전개표. 분주 장면, 연습 장면에 사용\n        []내는 생략가능　D66는 변동있음\n      INFO_MESSAGE_TEXT\n\n      register_prefix_from_super_class()\n\n      def initialize(command)\n        super(command)\n\n        @locale = :ko_kr\n      end\n\n      TABLES = translate_tables(:ko_kr).freeze\n      RTT = translate_rtt(:ko_kr)\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:StratoShout_Korean>", "register_prefix_from_super_class", "initialize", "command", "@locale", "translate_tables", "freeze", "translate_rtt", "StratoShout"], :mappings=>"AAAAA,2BAAAA;EAAAA;;;EAEAC,IAAAC,SAAAA,CAAQF,gCAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;;QAEE,8BAAKA,oBAAL;QAGA,gCAAOA,UAAP;QAGA,oCAAWA,qBAAX;QAGA,wCACNA,wDADqB,GAErBA,YAFqB,GAGrBA,wEAHqB,GAIrBA,6DAJqB,GAKrBA,oCALqB,GAMrBA,uBANM;QASAJ,IAAAK,kCAAAA,CAAAA;;AAEAC,QAAAA,0BAAAA,sBAAeC,OAAfD;AAAAA,UAAAA;;UAAAA;;UACE,OAAAN,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAMO,OAAN,CAAA,EAAA,IAAA;UAEAD,OAAAE,CAAAA,cAAU,OAAVA;QAHFF,CAAAA;QAMA,kCAASN,IAAAS,kBAAAA,CAAiB,OAAjBA,CAAwBC,QAAAA,CAAAA,CAAjC;QACAN,OAAA,+BAAMJ,IAAAW,eAAAA,CAAc,OAAdA,CAAN;MA7BFP,GAAAA,WAAAA,EAA2BQ,iBAA3BR;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAJAH;"}}]}