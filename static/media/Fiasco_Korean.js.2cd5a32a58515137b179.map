{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Fiasco.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Fiasco < Base\n      # ゲームシステムの識別子\n      ID = 'Fiasco'\n\n      # ゲームシステム名\n      NAME = 'フィアスコ'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'ふいあすこ'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<INFO_MESSAGE_TEXT\n  ・判定コマンド(FSx, WxBx)\n    相関図・転落要素用(FSx)：相関図や転落要素のためにx個ダイスを振り、出目ごとに分類する\n    黒白差分判定用(WxBx)  ：転落、残響のために白ダイス(W指定)と黒ダイス(B指定)で差分を求める\n      ※ WとBは片方指定(Bx, Wx)、入替指定(WxBx,BxWx)可能\nINFO_MESSAGE_TEXT\n\n      register_prefix('FS', 'W', 'B')\n\n      def eval_game_system_specific_command(command)\n        roll_fs(command) || roll_white_black(command) || roll_white_black_single(command)\n      end\n\n      private\n\n      # 6面ダイスを複数ダイスロールして、各面が出た個数をカウントする\n      # @param command [String]\n      # @return [String, nil]\n      def roll_fs(command)\n        m = /^FS(\\d+)$/.match(command)\n        unless m\n          return nil\n        end\n\n        dice_count = m[1].to_i\n        dice_list = @randomizer.roll_barabara(dice_count, 6)\n\n        # 各出目の個数を数える\n        bucket = [nil, 0, 0, 0, 0, 0, 0]\n        dice_list.each do |val|\n          bucket[val] += 1\n        end\n\n        # \"n個\" 表記にする\n        bucket.map! { |count| translate(\"Fiasco.fs.count\", count: count) }\n\n        return \"1 => \#{bucket[1]}, 2 => \#{bucket[2]}, 3 => \#{bucket[3]}, 4 => \#{bucket[4]}, 5 => \#{bucket[5]}, 6 => \#{bucket[6]}\"\n      end\n\n      # 白か黒かの片方だけダイスロールする\n      #\n      # \"W4\", \"B6\" など\n      # @param command [String]\n      # @return [String, nil]\n      def roll_white_black_single(command)\n        m = /^([WB])(\\d+)$/.match(command)\n        unless m\n          return nil\n        end\n\n        a = Side.new(color(m[1]), m[2].to_i)\n        result = a.roll(@randomizer)\n\n        return \"\#{result} ＞ \#{a.color}\#{a.total}\"\n      end\n\n      # 白黒両方ダイスロールして、その差分を表示する\n      # @param command [String]\n      # @return [String, nil]\n      def roll_white_black(command)\n        m = /^([WB])(\\d+)([WB])(\\d+)$/.match(command)\n        unless m\n          return nil\n        end\n\n        case command\n        when /^W\\d+W\\d+$/\n          return \"\#{command}：\#{translate('Fiasco.wb.duplicate_error.white')}\"\n        when /^B\\d+B\\d+$/\n          return \"\#{command}：\#{translate('Fiasco.wb.duplicate_error.black')}\"\n        end\n\n        a = Side.new(color(m[1]), m[2].to_i)\n        result_a = a.roll(@randomizer)\n\n        b = Side.new(color(m[3]), m[4].to_i)\n        result_b = b.roll(@randomizer)\n\n        return \"\#{result_a} \#{result_b} ＞ \#{a.diff(b)}\"\n      end\n\n      def color(c)\n        c == \"W\" ? translate(\"Fiasco.white\") : translate(\"Fiasco.black\")\n      end\n\n      # 片方の色のダイスロールを抽象化したクラス\n      class Side\n        def initialize(color, count)\n          @color = color\n          @count = count\n        end\n\n        # @param randomizer [Randomizer]\n        # @return [String]\n        def roll(randomizer)\n          @dice_list =\n            if @count == 0\n              [0]\n            else\n              randomizer.roll_barabara(@count, 6)\n            end\n\n          @total = @dice_list.sum()\n\n          \"\#{@color}\#{@total}[\#{@dice_list.join(',')}]\"\n        end\n\n        # もう一方の色との差分を求める\n        # @param other [Side]\n        # @return [String]\n        def diff(other)\n          if @total == other.total\n            \"0\"\n          elsif @total > other.total\n            \"\#{@color}\#{@total - other.total}\"\n          else\n            \"\#{other.color}\#{other.total - @total}\"\n          end\n        end\n\n        attr_reader :color, :total\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:GameSystem>", "<class:Fiasco>", "self", "register_prefix", "eval_game_system_specific_command", "command", "$ret_or_1", "$ret_or_2", "roll_fs", "roll_white_black", "roll_white_black_single", "private", "m", "match", "dice_count", "[]", "1", "to_i", "dice_list", "@randomizer", "roll_barabara", "6", "bucket", "0", "each", "block in roll_fs", "val", "block (2 levels) in roll_fs", "[]=", "+", "map!", "count", "translate", "2", "3", "4", "5", "a", "Side", "new", "color", "result", "roll", "total", "result_a", "b", "result_b", "diff", "c", "<class:Side>", "initialize", "@color", "@count", "randomizer", "@dice_list", "@total", "sum", "join", "other", ">", "-", "attr_reader", "Base"], :mappings=>"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"}}, {:offset=>{:line=>148, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Fiasco_Korean.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/game_system/Fiasco\"\n\nmodule BCDice\n  module GameSystem\n    class Fiasco_Korean < Fiasco\n      # ゲームシステムの識別子\n      ID = 'Fiasco:Korean'\n\n      # ゲームシステム名\n      NAME = '피아스코'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = '国際化:Korean:피아스코'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<INFO_MESSAGE_TEXT\n  ・판정 커맨드(FSx, WxBx)\n    관계, 비틀기 요소용(FSx)：관계나 비틀기 요소를 위해 x개의 다이스를 굴려 나온 값별로 분류한다.\n    흑백차이판정용(WxBx)    ：비틀기, 후기를 위해 흰 다이스(W지정)과 검은 다이스(B지정)으로 차이를 구한다.\n      ※ W와B는 한 쪽만 지정(Bx, Wx), 앞뒤 바꿔 지정(WxBx,BxWx)도 가능\nINFO_MESSAGE_TEXT\n\n      register_prefix_from_super_class()\n\n      def initialize(command)\n        super(command)\n\n        @locale = :ko_kr\n      end\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:Fiasco_Korean>", "register_prefix_from_super_class", "initialize", "command", "@locale", "Fiasco"], :mappings=>"AAAAA,2BAAAA;EAAAA;;;EAEAC,IAAAC,SAAAA,CAAQF,2BAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;;QAEE,8BAAKA,eAAL;QAGA,gCAAOA,MAAP;QAGA,oCAAWA,iBAAX;QAGA,wCACNA,wBADqB,GAErBA,gEAFqB,GAGrBA,wEAHqB,GAIrBA,yDAJM;QAOAJ,IAAAK,kCAAAA,CAAAA;QAEAD,OAAAE,0BAAAA,sBAAeC,OAAfD;AAAAA,UAAAA;;UAAAA;;UACE,OAAAN,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAMO,OAAN,CAAA,EAAA,IAAA;UAEAD,OAAAE,CAAAA,cAAU,OAAVA;QAHFF,CAAAA;MApBFF,GAAAA,WAAAA,EAAsBK,YAAtBL;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAJAH;"}}]}