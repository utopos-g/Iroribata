{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/TheOneRing2nd.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class TheOneRing2nd < Base\n      # ゲームシステムの識別子\n      ID = \"TheOneRing2nd\"\n\n      # ゲームシステム名\n      NAME = \"一つの指輪：指輪物語TRPG2版\"\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = \"ひとつのゆひわゆひわものかたりTRPG2\"\n\n      HELP_MESSAGE = <<~TEXT\n        ・判定コマンド(nRG[x][@y][Az][f[0|1]][i[0|1]][w[0|1]][m[0|1]])\n         判定用に難易度nを指定して判定ダイスを振る。技量ダイスx、痛打判定値y、修正値zを指定可能。\n         技量ダイス、痛打判定値、修正値は0、または未指定（0と同じ）にできる。\n         痛打判定値の0、未指定は痛打判定を行わない。\n         修正値は判定合計値に加算され、「ガンダルフ・ルーン」や「サウロンの目」はその影響を受けない。\n         例1: 13RG     (難易度13 技量ダイス0個)\n         例2: 13RG3    (難易度13 技量ダイス3個)\n         例3: 13RG3@10A1  (難易度13 技量ダイス3個、痛打判定10、結果に1を加算)\n\n        ・表用コマンド(FD[x][f[0|1]][i[0|1]])\n         表用に判定ダイスを振る。修正値xが指定可能。修正値は0、あるいは未指定(0と同じ)にできる。\n         「ガンダルフ・ルーン」や「サウロンの目」は修正値の影響を受けず、値が10を越えることもない。\n         例1: FD      (1d12で判定)\n         例2: FD1     (1d12で判定し、ダイス目に+1修正)\n\n        ・コマンドオプション\n        オプションは、判定コマンドなら4個まで、表用コマンドなら2個まで、順不同で指定可能（重複可）。\n          f: 有利(favoured)オプション。不利と同時指定時は相殺。選択された値に◎。\n          i: 不利(ill-favoured)オプション。有利と同時指定時は相殺。選択された値に◎。\n         例1: 13RG3f   (難易度13 技量ダイス3個、有利)\n         例2: FD1f     (1修正、有利)\n         例3: 13RG3if   (難易度13 技量ダイス3個、不利、有利)\n              ※有利/不利は相殺。\n\n         判定コマンドでは更に下記のオプションを同じ条件で指定可能。\n          w: 疲労(weary)状態オプション。\n          m: 絶望(miserable)状態オプション。\n         例1: 13RG3wf   (難易度13 技量ダイス3個、疲労状態、有利)\n         例2: 13RG3fiwm (難易度13 技量ダイス3個、有利、不利、疲労状態、絶望状態)\n              ※有利/不利は相殺。最大オプション数である4つを指定。\n\n        ・オプションスイッチ\n         指定したオプションのon/offを1/0で指定可能。1はon、0はoffを表す。\n         複数の同じオプションへのスイッチ指定は、最後のスイッチが有効となる。\n         例1: 13RG3if0  (難易度13 技量ダイス3個、不利はon、有利はoff)\n              ※ 有利指定がoffのため、相殺されず不利となる。\n         例2: 13RG3f1f0 (難易度13 技量ダイス3個、有利は最終的にoff)\n      TEXT\n\n      register_prefix('\\d+RG', 'FD')\n\n      SAURONS_EYE_NUMBER        = 11 # サウロンの目\n      GANDALF_RUNE_NUMBER       = 12 # ガンダルフ・ルーン\n\n      CHOICE_DIE_MARK = '◎' # 有利/不利の状態で選択されたダイスにつけるマーク\n\n      # 有利/不利状態のenum\n      module FavouredState\n        NORMAL = -98 # 通常状態\n        FAVOURED = -99 # 有利状態\n        ILLFAVOURED = -100 # 不利状態\n      end\n\n      def eval_game_system_specific_command(command)\n        case command\n        when /^\\d+RG/i\n          return rg_command_exec(command)\n        when /^FD/i\n          return fd_command_exec(command)\n        end\n        return \"Error\" # 到達しないはずだが、念のため\n      end\n\n      private\n\n      # ================ RG/FGコマンド共有メソッド等 ================#\n\n      # オプションデータクラス\n      class OptionData\n        attr_reader :favoured_state, :weary, :miserable\n\n        def initialize(favoured_state_value: FavouredState::NORMAL, weary_condition: false, miserable_condition: false)\n          @favoured_state = favoured_state_value\n          @weary = weary_condition\n          @miserable = miserable_condition\n        end\n      end\n\n      # 指定された修正値文字列を取得\n      def get_adjust_number_text(adjust_number)\n        adjust_number_text = \"\"\n\n        if adjust_number > 0\n          adjust_number_text = \"+\#{adjust_number}\"\n        elsif adjust_number < 0\n          adjust_number_text = adjust_number.to_s\n        end\n\n        return adjust_number_text\n      end\n\n      # 指定された状態文字列を取得\n      def get_condition_text(opts)\n        if opts.favoured_state == FavouredState::NORMAL && !opts.weary && !opts.miserable\n          return \"\"\n        end\n\n        condition_text = \"\\n状態：\"\n        if opts.favoured_state == FavouredState::FAVOURED\n          condition_text = \"\#{condition_text}有利 \"\n        elsif opts.favoured_state == FavouredState::ILLFAVOURED\n          condition_text = \"\#{condition_text}不利 \"\n        end\n        if opts.weary\n          condition_text = \"\#{condition_text}疲労 \"\n        end\n        if opts.miserable\n          condition_text = \"\#{condition_text}絶望 \"\n        end\n\n        return condition_text.rstrip\n      end\n\n      # 指定された状態文字列を取得\n      def get_options(opt_params)\n        favoured_state_value = FavouredState::NORMAL\n        miserable_condition = false\n        weary_condition = false\n\n        opt_params.each do |x|\n          case x[/[WFIM]/]\n          when \"W\"\n            weary_condition = on_option_switch?(x)\n          when \"F\"\n            favoured_state_value = get_favoured_state(on_option_switch?(x), favoured_state_value, FavouredState::FAVOURED)\n          when \"I\"\n            favoured_state_value = get_favoured_state(on_option_switch?(x), favoured_state_value, FavouredState::ILLFAVOURED)\n          when \"M\"\n            miserable_condition = on_option_switch?(x)\n          end\n        end\n\n        return OptionData.new(favoured_state_value: favoured_state_value, weary_condition: weary_condition, miserable_condition: miserable_condition)\n      end\n\n      # オプションから有利/不利状態指定を取得\n      def get_favoured_state(option_switch, before_favoured_state_value, tagert_state_type)\n        if option_switch\n          if before_favoured_state_value == tagert_state_type || before_favoured_state_value == FavouredState::NORMAL\n            return tagert_state_type\n          end\n\n          return FavouredState::NORMAL\n        else\n          if before_favoured_state_value == tagert_state_type\n            return FavouredState::NORMAL\n          end\n        end\n        return before_favoured_state_value\n      end\n\n      # オプションのON/OFFを取得\n      def on_option_switch?(opt_value)\n        if opt_value.length == 1 || opt_value[1..opt_value.length].to_i > 0\n          return true\n        end\n\n        return false\n      end\n\n      # 技量ダイスロールを行う\n      def make_successdice_roll(success_dice_count, weary_condition)\n        dice_list = @randomizer.roll_barabara(success_dice_count, 6)\n        success_count = dice_list.count(6)\n        if weary_condition\n          success_total_number = dice_list.reject { |i| i <= 3 }.sum\n        else\n          success_total_number = dice_list.sum\n        end\n        return dice_list.to_s, success_total_number, success_count\n      end\n\n      # 判定ダイスロールを行う\n      def make_featdice_roll(favoured_state_value)\n        feat_dice_count = favoured_state_value == FavouredState::NORMAL ? 1 : 2\n        dice_list = @randomizer.roll_barabara(feat_dice_count, 12)\n\n        choice_die_number = die_choice(dice_list, favoured_state_value)\n        if feat_dice_count > 1\n\n          choice_index = dice_list.find_index(choice_die_number)\n\n          first_die = \"\#{CHOICE_DIE_MARK if choice_index == 0}\#{get_specal_die_str(dice_list[0])}\"\n          second_die = \"\#{CHOICE_DIE_MARK if choice_index == 1}\#{get_specal_die_str(dice_list[1])}\"\n\n          feat_result_text = \"[\#{first_die}, \#{second_die}]\"\n        else\n          feat_result_text = \"[\#{get_specal_die_str(choice_die_number)}]\"\n        end\n\n        return feat_result_text, choice_die_number, feat_dice_count\n      end\n\n      # 有利/不利を含めて判定ダイスの結果を取得\n      def die_choice(dice_list, favoured_state_value)\n        if favoured_state_value == FavouredState::ILLFAVOURED\n          if dice_list.count(SAURONS_EYE_NUMBER) >= 1\n            return SAURONS_EYE_NUMBER\n          else\n            return dice_list.min\n          end\n        elsif favoured_state_value == FavouredState::FAVOURED\n          if dice_list.count(GANDALF_RUNE_NUMBER) >= 1\n            return GANDALF_RUNE_NUMBER\n          else\n            # ガンダルフ・ルーンが無ければサウロンの目を除いた最大値を選ぶ\n            # ※ どちらもサウロンの目ならサウロンの目を返す\n            return dice_list.count(SAURONS_EYE_NUMBER) == 2 ? SAURONS_EYE_NUMBER : dice_list.reject { |x| x == SAURONS_EYE_NUMBER }.max\n          end\n        end\n        return dice_list[0]\n      end\n\n      # 判定ダイスが特殊ダイス目だった場合、該当文字列に変換する\n      def get_specal_die_str(die_number)\n        if die_number == GANDALF_RUNE_NUMBER\n          return \"ガンダルフ・ルーン\"\n        elsif die_number == SAURONS_EYE_NUMBER\n          return \"サウロンの目\"\n        end\n\n        return die_number\n      end\n\n      # ================ FDコマンド ================#\n\n      FD_ADJUST_NUMBER_INDEX    = 2\n      FD_OPTION_START_INDEX     = 3\n\n      # FDコマンド実行\n      def fd_command_exec(command)\n        m = /\\A(FD)(-?\\d*)?([FI]-?\\d*)?([FI]-?\\d*)?$/.match(command)\n        unless m\n          return ''\n        end\n\n        # コマンドパラメータ取得\n        adjust_number, opts = get_fd_params(m)\n\n        # 判定ダイス処理\n        feat_result_text, feat_die_number, feat_dice_count = make_featdice_roll(opts.favoured_state)\n        result_header_text = \"(\#{feat_dice_count}D12\"\n\n        return get_fd_roll_result(result_header_text, feat_result_text, feat_die_number, feat_dice_count, adjust_number)\n      end\n\n      # FDコマンド判定結果の取得\n      def get_fd_roll_result(result_header_text, feat_result_text, feat_die_number, feat_dice_count, adjust_number)\n        # 修正値処理\n        reslt_die_number, adjust_number_text = get_fd_adjust(feat_die_number, adjust_number)\n\n        result_header_text = \"\#{result_header_text}\#{adjust_number_text}) ＞ \#{feat_result_text}\#{adjust_number_text}\"\n        if adjust_number != 0 || feat_dice_count != 1\n          return \"\#{result_header_text} ＞ [\#{get_specal_die_str(reslt_die_number)}]\"\n        end\n\n        return result_header_text\n      end\n\n      # FDコマンドの修正値取得\n      def get_fd_adjust(feat_die_number, adjust_number)\n        if [SAURONS_EYE_NUMBER, GANDALF_RUNE_NUMBER].include?(feat_die_number)\n          return feat_die_number, get_adjust_number_text(adjust_number)\n        end\n\n        res_total_num = feat_die_number + adjust_number\n        if res_total_num > 10\n          res_total_num = 10\n        elsif res_total_num < 1\n          res_total_num = 1\n        end\n        return res_total_num, get_adjust_number_text(adjust_number)\n      end\n\n      # FDコマンドパラメータの取得\n      def get_fd_params(m)\n        adjust_number = m[FD_ADJUST_NUMBER_INDEX].to_i\n\n        opt_params = m[FD_OPTION_START_INDEX..m.length].compact\n\n        return adjust_number, get_options(opt_params)\n      end\n\n      # ================ RGコマンド ================#\n\n      RG_DIFFICULTY_INDEX       = 1\n      RG_SUCCESS_DICE_INDEX     = 3\n      RG_PIERCING_BLOWS_INDEX   = 5\n      RG_ADJUST_NUMBER_INDEX    = 7\n      RG_OPTION_START_INDEX     = 8\n\n      # RGコマンド実行\n      def rg_command_exec(command)\n        m = /\\A(\\d+)(RG)(\\d*)(@(\\d{0,2}))?(A(-?\\d*))?([WFIM]-?\\d*)?([WFIM]-?\\d*)?([WFIM]-?\\d*)?([WFIM]-?\\d*)?$/.match(command)\n        unless m\n          return ''\n        end\n\n        success_count = 0\n\n        # コマンドパラメータ取得\n        difficulty, success_dice_count, piercing_blows_number, adjust_number, opts = get_rg_params(m)\n\n        # 判定ダイス処理\n        feat_result_text, feat_die_number, feat_dice_count = make_featdice_roll(opts.favoured_state)\n        total_dice_number = (feat_die_number != SAURONS_EYE_NUMBER ? feat_die_number : 0)\n\n        result_header_text = \"(\#{feat_dice_count}D12\"\n        result_dice_text = feat_result_text\n\n        # 技量ダイスが指定されているならその処理\n        if success_dice_count > 0\n          success_result_text, success_total_number, success_count = make_successdice_roll(success_dice_count, opts.weary)\n          total_dice_number += success_total_number\n\n          result_header_text = \"\#{result_header_text}+\#{success_dice_count}D6\"\n          result_dice_text = \"\#{result_dice_text}+\#{success_result_text}\"\n        end\n\n        # 修正値処理\n        total_dice_number, adjust_number_text = get_rg_adjust(total_dice_number, adjust_number)\n\n        result_header_text = \"\#{result_header_text}\#{adjust_number_text}) ＞ \#{result_dice_text}\#{adjust_number_text}\"\n\n        return get_rg_roll_result(result_header_text, difficulty, feat_die_number, piercing_blows_number, total_dice_number, success_count, opts)\n      end\n\n      # 修正値と修正値テキストの取得\n      def get_rg_adjust(total_dice_number, adjust_number)\n        total_dice_number += adjust_number\n        total_dice_number = 0 if total_dice_number < 0\n\n        return total_dice_number, get_adjust_number_text(adjust_number)\n      end\n\n      # RGコマンド判定結果の取得\n      def get_rg_roll_result(result_header_text, difficulty, feat_die_number, piercing_blows_number, total_dice_number, success_count, opts)\n        # 状態表示取得\n        condition_text = get_condition_text(opts)\n\n        success_count_text = \"成功度 \#{success_count}\"\n\n        # 痛打判定をブロック化\n        piercing_blows = lambda() { |feat_die_num, piercing_blows_num, res_text, cond_text|\n          if piercing_blows_num > 0 && feat_die_num >= piercing_blows_num && feat_die_num != SAURONS_EYE_NUMBER\n            res_text = \"\#{res_text} 痛打発生！\"\n          end\n          return \"\#{res_text}\#{cond_text}\"\n        }\n\n        if feat_die_number == GANDALF_RUNE_NUMBER\n          gandalf_rune_text = \"\#{result_header_text}：自動成功[\#{success_count_text}]\"\n          gandalf_rune_text = piercing_blows.call(feat_die_number, piercing_blows_number, gandalf_rune_text, condition_text)\n          if success_count >= 2\n            return Result.critical(gandalf_rune_text)\n          end\n\n          return Result.success(gandalf_rune_text)\n        elsif opts.miserable && feat_die_number == SAURONS_EYE_NUMBER\n          return Result.failure(\"\#{result_header_text}：自動失敗\#{condition_text}\")\n        end\n\n        result_detail_text = \"難易度 \#{difficulty} 達成値 \#{total_dice_number}\"\n        if difficulty > total_dice_number\n          return Result.failure(\"\#{result_header_text} \#{result_detail_text}：失敗\#{condition_text}\")\n        end\n\n        success_text = \"\#{result_header_text} \#{result_detail_text}：成功[\#{success_count_text}]\"\n        success_text = piercing_blows.call(feat_die_number, piercing_blows_number, success_text, condition_text)\n        if success_count >= 2\n          return Result.critical(success_text)\n        end\n\n        return Result.success(success_text)\n      end\n\n      # RGコマンドパラメータの取得\n      def get_rg_params(m)\n        difficulty = m[RG_DIFFICULTY_INDEX].to_i\n\n        success_dice_count = m[RG_SUCCESS_DICE_INDEX].to_i\n        adjust_number = m[RG_ADJUST_NUMBER_INDEX].to_i\n        piercing_blows_number = m[RG_PIERCING_BLOWS_INDEX]&.to_i || -1 # -1は痛打判定自体を行わない\n\n        opt_params = m[RG_OPTION_START_INDEX..m.length].compact\n\n        return difficulty, success_dice_count, piercing_blows_number, adjust_number, get_options(opt_params)\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:TheOneRing2nd>", "self", "register_prefix", "11", "12", "<module:FavouredState>", "-98", "-99", "-100", "eval_game_system_specific_command", "command", "$ret_or_1", "rg_command_exec", "fd_command_exec", "private", "<class:OptionData>", "attr_reader", "initialize", "$kwargs", "FavouredState::NORMAL", "FavouredState", "@favoured_state", "favoured_state_value", "@weary", "weary_condition", "@miserable", "miserable_condition", "get_adjust_number_text", "adjust_number", "adjust_number_text", ">", "0", "<", "to_s", "get_condition_text", "opts", "favoured_state", "weary", "miserable", "condition_text", "FavouredState::FAVOURED", "FavouredState::ILLFAVOURED", "rstrip", "get_options", "opt_params", "each", "block in get_options", "x", "block (2 levels) in get_options", "[]", "on_option_switch?", "get_favoured_state", "OptionData", "new", "option_switch", "before_favoured_state_value", "tagert_state_type", "opt_value", "length", "1", "to_i", "make_successdice_roll", "success_dice_count", "dice_list", "@randomizer", "roll_barabara", "6", "success_count", "count", "success_total_number", "reject", "block in make_successdice_roll", "i", "block (2 levels) in make_successdice_roll", "<=", "3", "sum", "make_featdice_roll", "feat_dice_count", "2", "choice_die_number", "die_choice", "choice_index", "find_index", "first_die", "CHOICE_DIE_MARK", "get_specal_die_str", "second_die", "feat_result_text", ">=", "SAURONS_EYE_NUMBER", "min", "GANDALF_RUNE_NUMBER", "block in die_choice", "block (2 levels) in die_choice", "==", "max", "die_number", "m", "match", "get_fd_params", "feat_die_number", "result_header_text", "get_fd_roll_result", "get_fd_adjust", "reslt_die_number", "include?", "res_total_num", "+", "10", "FD_ADJUST_NUMBER_INDEX", "FD_OPTION_START_INDEX", "compact", "5", "7", "8", "get_rg_params", "difficulty", "piercing_blows_number", "total_dice_number", "result_dice_text", "success_result_text", "get_rg_adjust", "get_rg_roll_result", "success_count_text", "piercing_blows", "lambda", "block in get_rg_roll_result", "feat_die_num", "piercing_blows_num", "res_text", "cond_text", "block (2 levels) in get_rg_roll_result", "gandalf_rune_text", "call", "Result", "critical", "success", "failure", "result_detail_text", "success_text", "RG_DIFFICULTY_INDEX", "RG_SUCCESS_DICE_INDEX", "RG_ADJUST_NUMBER_INDEX", "RG_PIERCING_BLOWS_INDEX", "-1", "RG_OPTION_START_INDEX", "Base"], :mappings=>"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"}}]}