{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/BBN.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class BBN < Base\n      # ダイスボットで使用するコマンドを配列で列挙する\n      register_prefix('\\d+BN')\n\n      ID = 'BBN'\n\n      NAME = 'BBNTRPG'\n\n      SORT_KEY = 'ひいひいえぬTRPG'\n\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・判定(xBN±y>=z[c,f])\n        　xD6の判定。クリティカル、ファンブルの自動判定を行います。\n        　1Dのクリティカル値とファンブル値は1。2Dのクリティカル値とファンブル値は2。\n        　nDのクリティカル値とファンブル値は n/2 の切り上げ。\n        　クリティカルとファンブルが同時に発生した場合、クリティカルを優先。\n        　x：xに振るダイス数を入力。\n        　y：yに修正値を入力。省略可能。\n          z：zに目標値を入力。省略可能。\n          c：クリティカルに必要なダイス目「6」の数の増減。省略可能。\n          f：ファンブルに必要なダイス目「1」の数の増減。省略可能。\n        　例） 3BN+4　3BN>=8　3BN+1>=10[-1] 3BN+1>=10[,1] 3BN+1>=10[1,1]\n      MESSAGETEXT\n\n      def eval_game_system_specific_command(command)\n        unless parse(command)\n          return nil\n        end\n\n        # ダイスロール\n        dice_list = @randomizer.roll_barabara(@roll_times, 6)\n        dice = dice_list.sum()\n        dice_str = dice_list.join(\",\")\n\n        total = dice + @modify\n\n        # 出力文の生成\n        sequence = [\n          \"(\#{command})\",\n          \"\#{dice}[\#{dice_str}]\#{@modify_str}\",\n          total\n        ]\n\n        # クリティカルとファンブルが同時に発生した時にはクリティカルが優先\n        if critical_?(dice_list)\n          sequence.push(\"クリティカル！\", *additional_roll(dice_list.count(6), total))\n        elsif fumble_?(dice_list)\n          sequence.push(\"ファンブル！\")\n        elsif @difficulty\n          sequence.push(total >= @difficulty ? \"成功\" : \"失敗\")\n        end\n\n        return sequence.join(\" ＞ \")\n      end\n\n      private\n\n      # コマンド文字列をパースする\n      #\n      # @param command [String] コマンド\n      # @return [Boolean] パースに成功したか\n      def parse(command)\n        m = /^(\\d+)BN([+-]\\d+)?(>=(([+-]?\\d+)))?(\\[([+-]?\\d+)?(,([+-]?\\d+))?\\])?/.match(command)\n        unless m\n          return false\n        end\n\n        @roll_times = m[1].to_i\n        @modify_str = m[2] || ''\n        @modify = m[2].to_i\n        @difficulty = m[4]&.to_i\n\n        base = critical_base(@roll_times)\n        @critical = base + m[7].to_i\n        @fumble = base + m[9].to_i\n\n        return true\n      end\n\n      # 振るダイスの数からクリティカルとファンブルの基本値を算出する\n      #\n      # @param roll_times [Integer] 振るダイスの数\n      # @return [Integer] クリティカルの値\n      def critical_base(roll_times)\n        case roll_times\n        when 1, 2\n          roll_times\n        else\n          (roll_times.to_f / 2).ceil\n        end\n      end\n\n      # @return [Boolean] クリティカルか\n      def critical_?(dice_list)\n        dice_list.count(6) >= @critical\n      end\n\n      # @return [Boolean] ファンブルか\n      def fumble_?(dice_list)\n        dice_list.count(1) >= @fumble\n      end\n\n      # クリティカルの追加ロールをする\n      # 追加ロールで6が出た場合、さらに追加ロールが行われる\n      #\n      # @param additional_dice [Integer] クリティカルによる追加のダイス数\n      # @param total [Integer] 現在の合計値\n      # @return [Array<String>]\n      def additional_roll(additional_dice, total)\n        sequence = []\n        reroll_count = 0\n\n        # 追加クリティカルは無限ループしうるので、10回に制限\n        while additional_dice > 0 && reroll_count < 10\n          reroll_count += 1\n\n          dice_list = @randomizer.roll_barabara(additional_dice, 6)\n          dice_total = dice_list.sum()\n          dice_str = dice_list.join(\",\")\n          additional_dice = dice_list.count(6)\n\n          sequence.push(\"\#{total}+\#{dice_total}[\#{dice_str}]\")\n          sequence.push(\"追加クリティカル！\") if additional_dice > 0\n\n          total += dice_total\n        end\n\n        if additional_dice > 0\n          sequence.push(\"無限ループ防止のため中断\")\n        end\n\n        sequence.push total\n        if @difficulty\n          sequence.push(total >= @difficulty ? \"成功\" : \"失敗\")\n        end\n\n        return sequence\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:BBN>", "self", "register_prefix", "eval_game_system_specific_command", "command", "parse", "dice_list", "@randomizer", "roll_barabara", "@roll_times", "6", "dice", "sum", "dice_str", "join", "total", "+", "@modify", "sequence", "@modify_str", "critical_?", "push", "additional_roll", "count", "fumble_?", "@difficulty", ">=", "private", "m", "match", "[]", "1", "to_i", "$ret_or_1", "2", "4", "base", "critical_base", "@critical", "7", "@fumble", "9", "roll_times", "/", "to_f", "ceil", "additional_dice", "reroll_count", "0", ">", "<", "10", "dice_total", "Base"], :mappings=>"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"}}]}