{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/cyberpunk_red/tables.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class CyberpunkRed < Base\n      class ScreamSheetRandomizerTable\n        def initialize(locale:, type_table:, a_table:, of_table:, b_table:, c_table:)\n          @locale = locale\n          @type_table = type_table\n          @a_table = a_table\n          @of_table = of_table\n          @b_table = b_table\n          @c_table = c_table\n        end\n\n        def roll(randomizer)\n          result = \"\"\n\n          dice = randomizer.roll_once(6)\n          scs_type = @type_table.choice(dice)\n          result += \"\#{scs_type}\#{I18n.translate('CyberpunkRed.news', locale: @locale, raise: true)}　『\"\n\n          dice = randomizer.roll_once(10)\n          scs_val_a = @a_table.choice(dice).body\n          result += scs_val_a\n\n          dice = randomizer.roll_once(6)\n          scs_val_of = @of_table.choice(dice).body\n          result += scs_val_of\n\n          dice = randomizer.roll_once(10)\n          scs_val_a = @a_table.choice(dice).body\n          result += scs_val_a\n\n          dice = randomizer.roll_once(6)\n          scs_val_of = @of_table.choice(dice).body\n          result += scs_val_of\n\n          dice = randomizer.roll_once(10)\n          scs_val_b = @b_table.choice(dice).body\n          result += scs_val_b\n\n          dice = randomizer.roll_once(10)\n          scs_val_c = @c_table.choice(dice).body\n          result += scs_val_c\n\n          result += \"』\"\n\n          return result\n        end\n      end\n\n      class ShopPeopleTable\n        def initialize(locale:, staff_table:, people_a_table:, people_b_table:)\n          @locale = locale\n          @staff_table = staff_table\n          @people_a_table = people_a_table\n          @people_b_table = people_b_table\n        end\n\n        def roll(randomizer)\n          result = I18n.translate(\"CyberpunkRed.ShopPeopleTableText.intro\", locale: @locale, raise: true)\n\n          dice = randomizer.roll_once(6)\n          staff = @staff_table.choice(dice).body\n          staff = staff[0..-2]\n          result += staff\n          result += I18n.translate(\"CyberpunkRed.ShopPeopleTableText.shop_staff\", locale: @locale, raise: true)\n\n          dice = randomizer.roll_once(6)\n          people = @people_a_table.choice(dice).body\n          people = people[0..-2]\n          result += people\n          result += I18n.translate(\"CyberpunkRed.ShopPeopleTableText.people_a\", locale: @locale, raise: true)\n\n          dice = randomizer.roll_once(6)\n          people = @people_b_table.choice(dice).body\n          people = people[0..-2]\n          result += people\n          result += I18n.translate(\"CyberpunkRed.ShopPeopleTableText.people_b\", locale: @locale, raise: true)\n          result += I18n.translate(\"CyberpunkRed.ShopPeopleTableText.outro\", locale: @locale, raise: true)\n\n          return result\n        end\n      end\n\n      class << self\n        private\n\n        def translate_tables(locale)\n          nigit_market_type_table = DiceTable::Table.from_i18n(\"CyberpunkRed.NightMarketTypeTable\", locale)\n          night_market_foods_table = DiceTable::RangeTable.from_i18n(\"CyberpunkRed.NightMarketFoodsTable\", locale)\n          night_market_mechanic_table = DiceTable::RangeTable.from_i18n(\"CyberpunkRed.NightMarketMechanicTable\", locale)\n          night_market_weapons_table = DiceTable::RangeTable.from_i18n(\"CyberpunkRed.NightMarketWeaponsTable\", locale)\n          night_market_cyberware_table = DiceTable::RangeTable.from_i18n(\"CyberpunkRed.NightMarketCyberwareTable\", locale)\n          night_market_fashion_table = DiceTable::RangeTable.from_i18n(\"CyberpunkRed.NightMarketFashionTable\", locale)\n          night_market_suvival_table = DiceTable::RangeTable.from_i18n(\"CyberpunkRed.NightMarketSuvivalTable\", locale)\n\n          scream_sheet_type_table = DiceTable::Table.from_i18n(\"CyberpunkRed.ScreamSheetTypeTable\", locale)\n          scream_sheet_a_table = DiceTable::Table.from_i18n(\"CyberpunkRed.ScreamSheetATable\", locale)\n          scream_sheet_b_table = DiceTable::Table.from_i18n(\"CyberpunkRed.ScreamSheetBTable\", locale)\n          scream_sheet_c_table = DiceTable::Table.from_i18n(\"CyberpunkRed.ScreamSheetCTable\", locale)\n          scream_sheet_of_table = DiceTable::Table.from_i18n(\"CyberpunkRed.ScreamSheetOfTable\", locale)\n\n          vending_machine_type_table = DiceTable::RangeTable.from_i18n(\"CyberpunkRed.VendingMachineTypeTable\", locale)\n          vending_machine_food_table = DiceTable::Table.from_i18n(\"CyberpunkRed.VendingMachineFoodTable\", locale)\n          vending_machine_fashion_table = DiceTable::Table.from_i18n(\"CyberpunkRed.VendingMachineFashionTable\", locale)\n          vending_machine_strange_table = DiceTable::Table.from_i18n(\"CyberpunkRed.VendingMachineStrangeTable\", locale)\n\n          shop_staff_table = DiceTable::Table.from_i18n(\"CyberpunkRed.ShopStaffTable\", locale)\n          shop_people_a_table = DiceTable::Table.from_i18n(\"CyberpunkRed.ShopPeopleATable\", locale)\n          shop_people_b_table = DiceTable::Table.from_i18n(\"CyberpunkRed.ShopPeopleBTable\", locale)\n\n          return {\n            \"FFD\" => DiceTable::Table.from_i18n(\"CyberpunkRed.FrameFatalDamageTable\", locale),\n            \"HFD\" => DiceTable::Table.from_i18n(\"CyberpunkRed.HeadFatalDamageTable\", locale),\n            \"NCDT\" => DiceTable::RangeTable.from_i18n(\"CyberpunkRed.NightCityDaytimeEncounterTable\", locale),\n            \"NCMT\" => DiceTable::RangeTable.from_i18n(\"CyberpunkRed.NightCityMidnightEncounterTable\", locale),\n            \"NMCT\" => nigit_market_type_table,\n            \"NMCFO\" => night_market_foods_table,\n            \"NMCME\" => night_market_mechanic_table,\n            \"NMCWE\" => night_market_weapons_table,\n            \"NMCCY\" => night_market_cyberware_table,\n            \"NMCFA\" => night_market_fashion_table,\n            \"NMCSU\" => night_market_suvival_table,\n            \"SCST\" => scream_sheet_type_table,\n            \"SCSA\" => scream_sheet_a_table,\n            \"SCSB\" => scream_sheet_b_table,\n            \"SCSC\" => scream_sheet_c_table,\n            \"SCSR\" => ScreamSheetRandomizerTable.new(\n              locale: locale,\n              type_table: scream_sheet_type_table,\n              a_table: scream_sheet_a_table,\n              b_table: scream_sheet_b_table,\n              c_table: scream_sheet_c_table,\n              of_table: scream_sheet_of_table\n            ).freeze,\n            \"VMCT\" => vending_machine_type_table,\n            \"VMCE\" => vending_machine_food_table,\n            \"VMCF\" => vending_machine_fashion_table,\n            \"VMCS\" => vending_machine_strange_table,\n            \"VMCR\" => DiceTable::ChainTable.new(\n              I18n.translate(\"CyberpunkRed.VendingMachineTable.name\", locale: locale, raise: true),\n              \"1D6\",\n              [\n                vending_machine_food_table,\n                vending_machine_food_table,\n                vending_machine_food_table,\n                vending_machine_fashion_table,\n                vending_machine_fashion_table,\n                vending_machine_strange_table\n              ]\n            ),\n            \"STOREA\" => shop_staff_table,\n            \"STOREB\" => shop_people_a_table,\n            \"STOREC\" => shop_people_b_table,\n            \"STORE\" => ShopPeopleTable.new(\n              locale: locale,\n              staff_table: shop_staff_table,\n              people_a_table: shop_people_a_table,\n              people_b_table: shop_people_b_table\n            ).freeze\n          }.freeze\n        end\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:GameSystem>", "<class:CyberpunkRed>", "<class:ScreamSheetRandomizerTable>", "initialize", "$kwargs", "@locale", "locale", "@type_table", "type_table", "@a_table", "a_table", "@of_table", "of_table", "@b_table", "b_table", "@c_table", "c_table", "roll", "randomizer", "result", "dice", "roll_once", "6", "scs_type", "choice", "+", "I18n", "translate", "10", "scs_val_a", "body", "scs_val_of", "scs_val_b", "scs_val_c", "<class:ShopPeopleTable>", "@staff_table", "staff_table", "@people_a_table", "people_a_table", "@people_b_table", "people_b_table", "staff", "[]", "0", "-2", "people", "self", "private", "translate_tables", "nigit_market_type_table", "DiceTable::Table", "DiceTable", "from_i18n", "night_market_foods_table", "DiceTable::RangeTable", "night_market_mechanic_table", "night_market_weapons_table", "night_market_cyberware_table", "night_market_fashion_table", "night_market_suvival_table", "scream_sheet_type_table", "scream_sheet_a_table", "scream_sheet_b_table", "scream_sheet_c_table", "scream_sheet_of_table", "vending_machine_type_table", "vending_machine_food_table", "vending_machine_fashion_table", "vending_machine_strange_table", "shop_staff_table", "shop_people_a_table", "shop_people_b_table", "ScreamSheetRandomizerTable", "new", "freeze", "DiceTable::ChainTable", "ShopPeopleTable", "Base"], :mappings=>"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"}}, {:offset=>{:line=>157, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/CyberpunkRed.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/game_system/cyberpunk_red/tables\"\n\nmodule BCDice\n  module GameSystem\n    class CyberpunkRed < Base\n      # ゲームシステムの識別子\n      ID = 'CyberpunkRed'\n\n      # ゲームシステム名\n      NAME = 'サイバーパンクRED'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'さいはあはんくれつと'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~HELP\n        ・判定　CPx+y>z\n        　(x＝能力値と技能値の合計、y＝修正値、z＝難易度 or 受動側　x、y、zは省略可)\n        　例）CP12 CP10+2>12　CP7-1　CP8+4　CP7>12　CP　CP>9\n\n        各種表\n        ・致命的損傷表\n        　FFD　：身体への致命的損傷\n        　HFD　：頭部への致命的損傷\n        ・遭遇表\n        　NCDT　：ナイトシティ(日中)\n        　NCMT　：ナイトシティ(深夜)\n        ・スクリームシート\n        　SCSR　：スクリームシート(ランダム)\n        　SCST　：スクリームシート分類\n        　SCSA　：ヘッドラインA\n        　SCSB　：ヘッドラインB\n        　SCSC　：ヘッドラインC\n        ・最寄りの自販機\n        　VMCR　：最寄りの自販機表\n        　VMCT　：自販機タイプ決定表\n        　VMCE　：食品\n        　VMCF　：ファッション\n        　VMCS　：変なもの\n        ・ボデガの客\n        　STORE　：ボデガの客と店員\n        　STOREA　：店主またはレジ係\n        　STOREB　：変わった客その1\n        　STOREC　：変わった客その2\n        ・夜の市\n        　NMCT　：商品の分野\n        　NMCFO　：食品とドラッグ\n        　NMCME　：個人用電子機器\n        　NMCWE　：武器と防具\n        　NMCCY　：サイバーウェア\n        　NMCFA　：衣料品とファッションウェア\n        　NMCSU　：サバイバル用品\n      HELP\n\n      TABLES = translate_tables(@locale)\n\n      # 判定の正規表現\n      CP_RE = /^CP(?<ability>\\d+)?(?<modifier>[+-]\\d+)?(?<target>>=\\d+)?/.freeze\n\n      def initialize(command)\n        super(command)\n\n        @sort_add_dice = false\n        @d66_sort_type = D66SortType::NO_SORT\n      end\n\n      def eval_game_system_specific_command(command)\n        debug(\"eval_game_system_specific_command begin string\", command)\n\n        cp_roll_result(command) || roll_tables(command, TABLES)\n      end\n\n      private_constant :CP_RE\n\n      def cp_roll_result(command)\n        parser = Command::Parser.new('CP', round_type: RoundType::FLOOR)\n                                .enable_suffix_number\n                                .restrict_cmp_op_to(nil, :>)\n        parsed = parser.parse(command)\n        return nil if parsed.nil?\n\n        dice_cnt = 1\n        dice_face = 10\n        modify_number = 0\n        total = 0\n\n        result = Result.new\n\n        dices = [@randomizer.roll_once(dice_face)]\n        total += dices.first\n        modify_number += parsed.suffix_number if parsed.suffix_number\n        modify_number += parsed.modify_number if parsed.modify_number\n        total += modify_number\n\n        case dices.first\n        when 10 # critical\n          dices << @randomizer.roll_once(dice_face)\n          total += dices.last\n          result.critical = true\n        when 1 # fumble\n          dices << @randomizer.roll_once(dice_face)\n          total -= dices.last\n          result.fumble = true\n        end\n\n        if parsed.target_number\n          result.condition = total > parsed.target_number\n        end\n\n        result.text = \"(\#{dice_cnt}D\#{dice_face}\#{Format.modifier(modify_number)}\#{parsed.cmp_op}\#{parsed.target_number})\"\n        result.text += ' ＞ '\n        result.text += \"\#{dices.first}[\#{dices.first}]\#{Format.modifier(modify_number)}\"\n        result.text += ' ＞ '\n\n        if result.critical?\n          result.text += \"\#{translate('CyberpunkRed.critical')} ＞ \"\n          result.text += \"\#{dices.last}[\#{dices.last}] ＞ \"\n        end\n        if result.fumble?\n          result.text += \"\#{translate('CyberpunkRed.fumble')} ＞ \"\n          result.text += \"\#{dices.last}[\#{dices.last}] ＞ \"\n        end\n\n        result.text += total.to_s\n\n        if result.success?\n          result.text += \" ＞ \#{translate('success')}\"\n        end\n        if result.failure?\n          result.text += \" ＞ \#{translate('failure')}\"\n        end\n\n        return result\n      end\n\n      register_prefix('CP', TABLES.keys)\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:CyberpunkRed>", "translate_tables", "@locale", "freeze", "initialize", "command", "@sort_add_dice", "@d66_sort_type", "D66SortType::NO_SORT", "D66SortType", "eval_game_system_specific_command", "debug", "$ret_or_1", "cp_roll_result", "roll_tables", "TABLES", "private_constant", "parser", "Command::Parser", "Command", "new", "RoundType::FLOOR", "RoundType", "enable_suffix_number", "restrict_cmp_op_to", "parsed", "parse", "nil?", "dice_cnt", "1", "dice_face", "10", "modify_number", "0", "total", "result", "Result", "dices", "@randomizer", "roll_once", "+", "first", "suffix_number", "<<", "last", "critical=", "-", "fumble=", "target_number", "condition=", ">", "text=", "Format", "modifier", "cmp_op", "text", "critical?", "translate", "fumble?", "to_s", "success?", "failure?", "register_prefix", "keys", "Base"], :mappings=>"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"}}]}