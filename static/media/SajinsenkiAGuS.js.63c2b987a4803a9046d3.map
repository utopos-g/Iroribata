{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/SajinsenkiAGuS.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class SajinsenkiAGuS < Base\n      # ゲームシステムの識別子\n      ID = 'SajinsenkiAGuS'\n\n      # ゲームシステム名\n      NAME = '砂塵戦機アーガス'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'さしんせんきああかす'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・一般判定Lv（チャンス出目0→判定0） nAG+x\n        　　　nは習得レベル、Lv0の場合nの省略可能。xは判定値修正（数式による修正可）、省略した場合はレベル修正0\n        　　　例）AG:習得レベル0の一般技能、1AG+1:習得レベル1・判定値修正+1の技能、AG+2-1：習得レベル0・判定値修正2-1の技能、(1-1)AG：習得レベル1・レベル修正-1の技能\n\n        ・適正距離での命中判定（チャンス出目0→判定0、HR算出）OM+y@z\n        　　　yは命中補正値（数式可）、zはクリティカル値。クリティカル値省略時は0\n        　　　HRの算出時には、HRが大きくなる場合に出目0を10に読み替えます。\n        　　　例）OM+18-6@2:命中補正値+18-6でクリティカル値2、適正距離の判定\n\n        ・非適正距離での命中判定（チャンス出目0→判定0、HR算出）NM+y@z\n        　　　yは命中補正値（数式可）、zはクリティカル値。クリティカル値省略時は0\n        　　　HRの算出時には、HRが大きくなる場合に出目0を10に読み替えます。\n        　　　例）NM+4-3:命中補正値+4-3で非適正距離の判定\n\n        ・クリティカル表 CR\n\n        ※通常の1D10などの10面ダイスにおいて出目10の読み替えはしません。コマンドのみです。\n\n      INFO_MESSAGE_TEXT\n      register_prefix('-?\\d*AG', 'OM', 'NM', 'CR')\n\n      def eval_game_system_specific_command(command)\n        roll_ippan(command) || roll_hit_check(command) || roll_tables(command, TABLES)\n      end\n\n      private\n\n      def roll_ippan(command)\n        m = /^(-?\\d+)?AG((?:[-+]\\d+)*)$/.match(command)\n        return nil unless m\n\n        level = m[1].to_i\n        x = Arithmetic.eval(m[2], @round_type) || 0\n        target = level <= 0 ? 7 + x : 10 + level + x\n\n        dice_list = @randomizer.roll_barabara(2, 10).map { |d| d == 10 ? 0 : d }\n        total = dice_list.sum\n        success_level = 1 + dice_list.count { |val| val <= level }\n\n        return Result.new.tap do |result|\n          result.condition = total <= target\n          result.rands = dice_list\n\n          sequence = [\n            \"(2D10<=\#{target})\",\n            \"\#{total}[\#{dice_list.join(',')}]\",\n            (\"チャンス\" if dice_list.include?(0)),\n            result.success? ? \"成功(+\#{success_level})\" : \"失敗\"\n          ].compact\n\n          result.text = sequence.join(\" ＞ \")\n        end\n      end\n\n      # 命中判定＆HR算出\n      def roll_hit_check(command)\n        parser = Command::Parser.new(\"OM\", \"NM\", round_type: @round_type).enable_critical\n        parsed = parser.parse(command)\n        return nil unless parsed\n\n        if parsed.command == \"OM\"\n          return roll_om(parsed)\n        elsif parsed.command == \"NM\"\n          return roll_nm(parsed)\n        end\n      end\n\n      def roll_om(parsed)\n        target = parsed.modify_number\n        critical = parsed.critical || 0\n\n        dice_list = @randomizer.roll_barabara(2, 10).map { |v| v == 10 ? 0 : v }.sort.reverse\n\n        total = dice_list.sum()\n        criticals = dice_list.count { |v| v <= critical }\n        hr = calc_hr(target, dice_list)\n\n        return Result.new.tap do |r|\n          r.condition = total <= target\n          r.rands = dice_list\n          r.critical = criticals >= 1\n          r.text = [\n            \"(2D10<=\#{target})\",\n            \"\#{total}[\#{dice_list.join(',')}]\",\n            (\"チャンス\" if dice_list.include?(0)),\n            r.success? ? \"成功（HR=\#{hr}、クリティカル\#{criticals}）\" : \"失敗\",\n          ].compact.join(\" ＞ \")\n        end\n      end\n\n      def roll_nm(parsed)\n        target = parsed.modify_number\n        critical = parsed.critical || 0\n\n        dice_list = @randomizer.roll_barabara(3, 10).map { |v| v == 10 ? 0 : v }.sort.reverse\n\n        chosen_dice_list = dice_list.take(2)\n        total = chosen_dice_list.sum()\n        criticals = chosen_dice_list.count { |v| v <= critical }\n        hr = calc_hr(target, chosen_dice_list)\n\n        return Result.new.tap do |r|\n          r.condition = total <= target\n          r.rands = dice_list\n          r.critical = criticals >= 1\n          r.text = [\n            \"(3D10<=\#{target})\",\n            \"\#{total}[\#{dice_list[0]},\#{dice_list[1]}&\#{dice_list[2]}]\",\n            (\"チャンス\" if chosen_dice_list.include?(0)),\n            r.success? ? \"成功（HR=\#{hr}、クリティカル\#{criticals}）\" : \"失敗\",\n          ].compact.join(\" ＞ \")\n        end\n      end\n\n      def calc_hr(target, chosen_dice_list)\n        total = chosen_dice_list.sum()\n        a = (target - total).abs\n        b = (target - total - chosen_dice_list.count(0) * 10).abs\n        return [a, b].max\n      end\n\n      TABLES = {\n        \"CR\" => DiceTable::Table.new(\n          \"クリティカル表\",\n          \"1D10\",\n          [\n            \"1：「小破」ダメージ+［5］。耐久値-［1］\",\n            \"2：「小破」ダメージ+［5］。耐久値-［1］\",\n            \"3：「小破」ダメージ+［5］。耐久値-［1］\",\n            \"4：「小破」ダメージ+［5］。耐久値-［1］\",\n            \"5：「兵装」損壊を受けるごとに［1D10］を振り、出目に応じた部位の兵装とオプションが《脱落》\",\n            \"6：「上体」攻撃系能力［白兵/ 火器/ 索敵］は各［- 損壊Lv］\",\n            \"7：「脚部」行動系・防御系能力［Iv 値（イニシア値）/ 最大MP/ 回避］は各［- 損壊Lv］\",\n            \"8：「搭乗者」搭乗者の〈最大HP〉および〈HP〉は［-（4 ×損壊Lv）］\",\n            \"9：「搭乗者」搭乗者の〈最大HP〉および〈HP〉は［-（4 ×損壊Lv）］\",\n            \"0：「小破」ダメージ+［5］。耐久値-［1］\",\n          ]\n        )\n      }.freeze\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:SajinsenkiAGuS>", "self", "register_prefix", "eval_game_system_specific_command", "command", "$ret_or_1", "$ret_or_2", "roll_ippan", "roll_hit_check", "roll_tables", "TABLES", "private", "m", "match", "level", "[]", "1", "to_i", "x", "Arithmetic", "eval", "2", "@round_type", "0", "target", "<=", "+", "7", "10", "dice_list", "map", "@randomizer", "roll_barabara", "block in roll_ippan", "d", "block (2 levels) in roll_ippan", "total", "sum", "success_level", "count", "val", "tap", "Result", "new", "result", "condition=", "rands=", "sequence", "join", "include?", "success?", "compact", "text=", "parser", "Command::Parser", "Command", "enable_critical", "parsed", "parse", "roll_om", "roll_nm", "modify_number", "critical", "block in roll_om", "v", "block (2 levels) in roll_om", "sort", "reverse", "criticals", "hr", "calc_hr", "r", "critical=", ">=", "3", "block in roll_nm", "block (2 levels) in roll_nm", "chosen_dice_list", "take", "a", "-", "abs", "b", "*", "max", "DiceTable::Table", "DiceTable", "freeze", "Base"], :mappings=>"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"}}]}