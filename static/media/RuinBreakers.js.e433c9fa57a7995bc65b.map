{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/arithmetic_evaluator.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module ArithmeticEvaluator\n    class << self\n      # 四則演算を評価する\n      # @deprecated +Arithmetic.#eval+ を利用してください。\n      # @param expr [String, nil] 評価する式\n      # @param round_type [Symbol] 端数処理の種類\n      # @return [Integer] 評価結果を返す。不正な式の場合には0を返す。\n      def eval(expr, round_type: RoundType::FLOOR)\n        return 0 unless expr\n\n        Arithmetic.eval(expr, round_type) || 0\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:ArithmeticEvaluator>", "eval", "expr", "$kwargs", "RoundType::FLOOR", "RoundType", "0", "$ret_or_1", "Arithmetic", "round_type", "self"], :mappings=>"AAAAA,8CAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAA;QAAA;;QAME,OAAAC,oBAAAA,iBAASC,IAAD,EAVdC,OAUMF,GAAAA,MAAAA,IAAAA,wCAAAA;AAAAA,UAAAA;;;UAVN;;UAUqB,0CAAA,qCAAYG,IAAAC,eAAAD;UACzB,KAAA,QAAgBF,IAAhB,CAAA;YAAA,OAAOI;UAAP;UAEA,IAAA,QAAAC,CAAAA,YAAAC,gBAAUP,MAAAA,CAAMC,IAAhB,EAAsBO,UAAZR,CAAVM,CAAA,CAAA;YAAAN,OAAA;UAAA;YAAqCA,OAAAK;UAArC,EAHFL;YAAAA;YAAAA;UAAAA;QAAAA,CAAAA,IAAAA;MANF,4BAASS,IAAT;IADFV,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>40, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    # 表を表すクラス\n    class Table\n      # @param key [String]\n      # @param locale [Symbol]\n      # @return [Table]\n      def self.from_i18n(key, locale)\n        table = I18n.t(key, locale: locale)\n        new(table[:name], table[:type], table[:items])\n      end\n\n      # @param [String] name 表の名前\n      # @param [String] type 項目を選ぶときのダイスロールの方法 '1D6'など\n      # @param [Array<String>] items 表の項目の配列\n      def initialize(name, type, items)\n        @name = name\n        @items = items.freeze\n\n        m = /(\\d+)D(\\d+)/i.match(type)\n        unless m\n          raise ArgumentError, \"Unexpected table type: \#{type}\"\n        end\n\n        @times = m[1].to_i\n        @sides = m[2].to_i\n      end\n\n      # 表を振る\n      # @param [BCDice] bcdice ランダマイザ\n      # @return [String] 結果\n      def roll(bcdice)\n        value = bcdice.roll_sum(@times, @sides)\n        return choice(value)\n      end\n\n      def choice(value)\n        index = value - @times\n        return RollResult.new(@name, value, @items[index])\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:Table>", "from_i18n", "self", "key", "locale", "table", "I18n", "t", "new", "[]", "initialize", "name", "type", "items", "@name", "@items", "freeze", "m", "match", "raise", "ArgumentError", "@times", "1", "to_i", "@sides", "2", "roll", "bcdice", "value", "roll_sum", "choice", "index", "-", "RollResult"], :mappings=>"AAAAA,0CAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MAEEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAIEC,MAAIC,IAAJD,gBAAAA,qBAAmBE,GAAD,EAAMC,MAAxBH;AAAAA,UAAAA;;;UACEI,QAAQC,UAAIC,GAAAA,CAAGJ,GAAP,EAAY,oBAAA,UAAQC,MAAR,EAARG;UACZN,OAAAC,IAAAM,KAAAA,CAAIH,KAAKI,OAAAA,CAAC,MAADA,CAAT,EAAkBJ,KAAKI,OAAAA,CAAC,MAADA,CAAvB,EAAgCJ,KAAKI,OAAAA,CAAC,OAADA,CAArCD;QAFFP,CAAAA;;AAQAS,QAAAA,0BAAAA,sBAAeC,IAAD,EAAOC,IAAP,EAAaC,KAA3BH;AAAAA,UAAAA;;;UACEI,YAAQH;UACRI,aAASF,KAAKG,QAAAA,CAAAA;UAEdC,IAAI,cAAcC,OAAAA,CAAON,IAAPM;UAClB,KAAA,QAAOD,CAAP,CAAA;YACEf,IAAAiB,OAAAA,CAAMC,mBAAN,EAAsBV,yBAAD,GAAA,CAA0BE,IAA1B,CAArBO;UADF;UAIAE,aAASJ,CAACR,OAAAA,CAACa,CAADb,CAAGc,MAAAA,CAAAA;UACbb,OAAAc,CAAAA,aAASP,CAACR,OAAAA,CAACgB,CAADhB,CAAGc,MAAAA,CAAAA,CAAbC;QAVFd,CAAAA;;AAgBAgB,QAAAA,oBAAAA,gBAASC,MAATD;AAAAA,UAAAA;;;UACEE,QAAQD,MAAME,UAAAA,CAAUR,UAAhB,EAAwBG,UAAlBK;UACd,OAAO3B,IAAA4B,QAAAA,CAAOF,KAAPE;QAFTJ,CAAAA;QAKA1B,OAAA8B,sBAAAA,kBAAWF,KAAXE;AAAAA,UAAAA;;;UACEC,QAAcC,UAANJ,KAAMI,EAAEX,UAAFW;UACd,OAAOC,gBAAUzB,KAAAA,CAAKM,SAAf,EAAsBc,KAAtB,EAA6Bb,UAAMN,OAAAA,CAACsB,KAADtB,CAAzBD;QAFnBsB,CAAAA;MAjCF9B,GAAAA,WAAAA,EAAAA,IAAAA;IAFFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>101, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/range_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    # 各項目について、Rangeを用いて出目の合計の範囲を指定する、表のクラス。\n    #\n    # このクラスを使うと、表の定義を短く書ける。\n    # このクラスを使って表を定義するときは、各項目を以下の形で書く。\n    #\n    #     [出目の合計の範囲, 内容]\n    #\n    # 「出目の合計の範囲」には、Integerを要素とするRangeか、Integerを置ける。\n    #\n    # roll メソッドで表を振ると、出目の合計値と対応する項目が選ばれる。\n    #\n    # @example 表の定義（バトルテックの致命的命中表）\n    #   CRITICAL_TABLE = RangeTable.new(\n    #     '致命的命中表',\n    #     '2D6',\n    #     [\n    #       [2..7,   '致命的命中はなかった'],\n    #       [8..9,   '1箇所の致命的命中'],\n    #       [10..11, '2箇所の致命的命中'],\n    #       [12,     'その部位が吹き飛ぶ（腕、脚、頭）または3箇所の致命的命中（胴）']\n    #     ]\n    #   )\n    #\n    # @example 表を振った結果\n    #   CRITICAL_TABLE.roll(bcdice).formatted\n    #   # 出目の合計が7の場合 ：\"致命的命中表(7) ＞ 致命的命中はなかった\"\n    #   # 出目の合計が8の場合 ：\"致命的命中表(8) ＞ 1箇所の致命的命中\"\n    #   # 出目の合計が9の場合 ：\"致命的命中表(9) ＞ 1箇所の致命的命中\"\n    #   # 出目の合計が10の場合：\"致命的命中表(10) ＞ 2箇所の致命的命中\"\n    class RangeTable\n      # 表を振った結果を表す構造体\n      # @!attribute [rw] sum\n      #   @return [Integer] 出目の合計\n      # @!attribute [rw] values\n      #   @return [Array<Integer>] 出目の配列\n      # @!attribute [rw] content\n      #   @return [Object] 選ばれた項目の内容\n      # @!attribute [rw] formatted\n      #   @return [String] 整形された結果\n      RollResult = Struct.new(:sum, :values, :content, :formatted) do\n        alias_method :to_s, :formatted\n      end\n\n      # 表の項目を表す構造体\n      # @!attribute [rw] range\n      #   @return [Range] 出目の合計の範囲\n      # @!attribute [rw] content\n      #   @return [Object] 内容\n      Item = Struct.new(:range, :content)\n\n      # 項目を選ぶときのダイスロールの方法を表す正規表現\n      DICE_ROLL_METHOD_RE = /\\A(\\d+)D(\\d+)\\z/i.freeze\n\n      # 表を振った結果の整形処理（既定の処理）\n      DEFAULT_FORMATTER = lambda do |table, result|\n        \"\#{table.name}(\#{result.sum}) ＞ \#{result.content}\"\n      end\n\n      # @return [String] 表の名前\n      attr_reader :name\n      # @return [Integer] 振るダイスの個数\n      attr_reader :num_of_dice\n      # @return [Integer] 振るダイスの面数\n      attr_reader :num_of_sides\n\n      class << self\n        def from_i18n(key, locale)\n          table = I18n.t(key, locale: locale)\n          converted_items = table[:items].map do |item|\n            [conv_string_range(item[0]), item[1]]\n          end\n          new(table[:name], table[:type], converted_items)\n        end\n\n        def conv_string_range(x)\n          case x\n          when Integer\n            return x\n          when String\n            return x.include?(\"..\") ? Range.new(*x.split(\"..\", 2).map { |n| Integer(n) }) : Integer(x)\n          end\n\n          raise(\n            TypeError,\n            \"\#{@name}: \#{x} (\#{x.class}) must be a String or an Integer\"\n          )\n        end\n      end\n\n      # 表を初期化する\n      #\n      # ブロックを与えると、独自の結果整形処理を指定できる。\n      # ブロックは振った表（+table+）と振った結果（+result+）を引数として受け取る。\n      #\n      # @param [String] name 表の名前\n      # @param [String] dice_roll_method\n      #   項目を選ぶときのダイスロールの方法（+'1D6'+ など）\n      # @param [Array<(Range, Object)>, Array<(Integer, Object)>] items\n      #   表の項目の配列。[出目の合計の範囲, 内容]\n      # @yieldparam [RangeTable] table 振った表\n      # @yieldparam [RollResult] result 表を振った結果\n      # @raise [ArgumentError] ダイスロール方法が正しい書式で指定されていなかった場合\n      # @raise [TypeError] 範囲の型が正しくなかった場合\n      # @raise [RangeError] 出目の合計の最小値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の最大値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の範囲にずれや重なりがあった場合\n      #\n      # @example 表の定義（バトルテックの致命的命中表）\n      #   CRITICAL_TABLE = RangeTable.new(\n      #     '致命的命中表',\n      #     '2D6',\n      #     [\n      #       [2..7,   '致命的命中はなかった'],\n      #       [8..9,   '1箇所の致命的命中'],\n      #       [10..11, '2箇所の致命的命中'],\n      #       [12,     'その部位が吹き飛ぶ（腕、脚、頭）または3箇所の致命的命中（胴）']\n      #     ]\n      #   )\n      #\n      # @example 独自の結果整形処理を指定する場合\n      #   CRITICAL_TABLE_WITH_FORMATTER = RangeTable.new(\n      #     '致命的命中表',\n      #     '2D6',\n      #     [\n      #       [2..7,   '致命的命中はなかった'],\n      #       [8..9,   '1箇所の致命的命中'],\n      #       [10..11, '2箇所の致命的命中'],\n      #       [12,     'その部位が吹き飛ぶ（腕、脚、頭）または3箇所の致命的命中（胴）']\n      #     ]\n      #   ) do |table, result|\n      #     \"致命的命中発生? ＞ \#{result.sum}[\#{result.values}] ＞ \#{result.content}\"\n      #   end\n      #\n      #   CRITICAL_TABLE_WITH_FORMATTER.roll(bcdice).formatted\n      #   #=> \"致命的命中発生? ＞ 11[5,6] ＞ 2箇所の致命的命中\"\n      def initialize(name, dice_roll_method, items, &formatter)\n        @name = name.freeze\n        @formatter = formatter || DEFAULT_FORMATTER\n\n        m = DICE_ROLL_METHOD_RE.match(dice_roll_method)\n        unless m\n          raise(\n            ArgumentError,\n            \"\#{@name}: invalid dice roll method: \#{dice_roll_method}\"\n          )\n        end\n\n        @num_of_dice = m[1].to_i\n        @num_of_sides = m[2].to_i\n\n        store(items)\n      end\n\n      # 指定された値に対応する項目を返す\n      # @param [Integer] value 値（出目の合計）\n      # @return [Item] 指定された値に対応する項目\n      # @raise [RangeError] 範囲外の値が指定された場合\n      def fetch(value)\n        item = @items.find { |i| i.range.include?(value) }\n        unless item\n          raise RangeError, \"\#{@name}: value is out of range: \#{value}\"\n        end\n\n        return item\n      end\n\n      # 表を振る\n      # @param randomizer [#roll_barabara] ランダマイザ\n      # @return [RollResult] 表を振った結果\n      def roll(randomizer)\n        values = randomizer.roll_barabara(@num_of_dice, @num_of_sides)\n        sum = values.sum()\n\n        result = RollResult.new(sum, values, fetch(sum).content)\n        result.formatted = @formatter[self, result]\n\n        return result\n      end\n\n      private\n\n      # 表の項目を格納する\n      # @param [Array<(Range, Object)>, Array<(Integer, Object)>] items\n      #   表の項目の配列。[出目の合計の範囲, 内容]\n      # @return [self]\n      # @raise [TypeError] 範囲の型が正しくなかった場合\n      # @raise [RangeError] 出目の合計の最小値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の最大値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の範囲にずれや重なりがあった場合\n      def store(items)\n        items_with_range = items.map { |r, c| [coerce_to_int_range(r), c] }\n        sorted_items = items_with_range.sort_by { |r, _| r.min }\n\n        assert_min_sum_is_covered(sorted_items)\n        assert_max_sum_is_covered(sorted_items)\n        assert_no_gap_or_overlap_in_ranges(sorted_items)\n\n        @items = sorted_items\n                 .map { |range, content| Item.new(range, content.freeze).freeze }\n                 .freeze\n\n        self\n      end\n\n      # 引数を強制的に整数を要素とするRangeに変換する\n      # @param [Range, Integer] x 変換対象\n      # @return [Range] 整数を要素とするRange\n      # @raise [TypeError] xの型に対応していなかった場合\n      def coerce_to_int_range(x)\n        case x\n        when Integer\n          return Range.new(x, x)\n        when Range\n          if x.begin.is_a?(Integer) && x.end.is_a?(Integer)\n            return x\n          end\n        end\n\n        raise(\n          TypeError,\n          \"\#{@name}: \#{x} (\#{x.class}) must be an Integer or a Range with Integers \"\n        )\n      end\n\n      # 出目の合計の最小値がカバーされていることを確認する\n      # @param [Array<(Range, Object)>] sorted_items\n      #   ソートされた、項目の配列\n      # @return [self]\n      # @raise [RangeError] 出目の合計の最小値がカバーされていなかった場合\n      def assert_min_sum_is_covered(sorted_items)\n        min_sum = @num_of_dice\n        range = sorted_items.first[0]\n        unless range.include?(min_sum)\n          raise(\n            RangeError,\n            \"\#{@name}: min value (\#{min_sum}) is not covered: \#{range}\"\n          )\n        end\n\n        self\n      end\n\n      # 出目の合計の最大値がカバーされていることを確認する\n      # @param [Array<(Range, Object)>] sorted_items\n      #   ソートされた、項目の配列\n      # @return [self]\n      # @raise [RangeError] 出目の合計の最大値がカバーされていなかった場合\n      def assert_max_sum_is_covered(sorted_items)\n        max_sum = @num_of_dice * @num_of_sides\n        range = sorted_items.last[0]\n        unless range.include?(max_sum)\n          raise(\n            RangeError,\n            \"\#{@name}: max value (\#{max_sum}) is not covered: \#{range}\"\n          )\n        end\n\n        self\n      end\n\n      # 出目の合計の範囲にずれや重なりがないことを確認する\n      # @param [Array<(Range, Object)>] sorted_items\n      #   ソートされた、項目の配列\n      # @return [self]\n      # @raise [RangeError] 出目の合計の範囲にずれや重なりがあった場合\n      def assert_no_gap_or_overlap_in_ranges(sorted_items)\n        sorted_items.each_cons(2) do |i1, i2|\n          r1 = i1[0]\n          r2 = i2[0]\n\n          max1 = r1.max\n          next_of_max1 = max1 + 1\n\n          if r2.include?(max1)\n            raise RangeError, \"\#{@name}: Range overlap: \#{r1} and \#{r2}\"\n          end\n\n          unless r2.include?(next_of_max1)\n            raise RangeError, \"\#{@name}: Range gap: \#{r1} and \#{r2}\"\n          end\n        end\n\n        self\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:RangeTable>", "new", "Struct", "block in <class:RangeTable>", "block (2 levels) in <class:RangeTable>", "self", "alias_method", "freeze", "lambda", "table", "result", "name", "sum", "content", "attr_reader", "from_i18n", "key", "locale", "I18n", "t", "converted_items", "map", "[]", "block in from_i18n", "item", "block (2 levels) in from_i18n", "conv_string_range", "0", "1", "x", "Integer", "$ret_or_1", "String", "include?", "Range", "split", "2", "block in conv_string_range", "n", "block (2 levels) in conv_string_range", "raise", "TypeError", "@name", "class", "initialize", "dice_roll_method", "items", "@formatter", "formatter", "DEFAULT_FORMATTER", "m", "DICE_ROLL_METHOD_RE", "match", "ArgumentError", "@num_of_dice", "to_i", "@num_of_sides", "store", "fetch", "value", "find", "@items", "block in fetch", "i", "block (2 levels) in fetch", "range", "RangeError", "roll", "randomizer", "values", "roll_barabara", "RollResult", "formatted=", "private", "items_with_range", "block in store", "r", "c", "block (2 levels) in store", "coerce_to_int_range", "sorted_items", "sort_by", "_", "min", "assert_min_sum_is_covered", "assert_max_sum_is_covered", "assert_no_gap_or_overlap_in_ranges", "Item", "begin", "is_a?", "end", "min_sum", "first", "max_sum", "*", "last", "each_cons", "block in assert_no_gap_or_overlap_in_ranges", "i1", "i2", "block (2 levels) in assert_no_gap_or_overlap_in_ranges", "r1", "r2", "max1", "max", "next_of_max1", "+"], :mappings=>"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"}}, {:offset=>{:line=>308, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/RuinBreakers.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire 'bcdice/arithmetic_evaluator'\nrequire 'bcdice/dice_table/table'\nrequire 'bcdice/dice_table/range_table'\n\nmodule BCDice\n  module GameSystem\n    class RuinBreakers < Base\n      # ゲームシステムの識別子\n      ID = 'RuinBreakers'\n\n      # ゲームシステム名\n      NAME = 'ルーインブレイカーズ'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'るういんふれいかあす'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ■ 基本判定 (RBx@y#z)\n          x：成功率、y：クリティカル値（省略可）、z：ファンブル値（省略可）\n          1D100を振って、成功率に応じて成功／失敗／クリティカル／ファンブルの判定を行います。(P.60)\n          クリティカル値を省略した場合は成功率の5分の1（切り捨て、最低1）\n          ファンブル値を省略した場合は、成功率が99以下の場合は96、100以上の場合は99\n          例） RB32, RB(45+20)/2, RB30@10, RB35+20#90, RB40-20+10@10#90\n\n        ■ FPへのダメージ (FPDx)\n          x：破滅ポイント\n          ルーインブレイクロール失敗時やラウンド終了時に、残っている\n          破滅ポイントに応じて発生するダメージのダイスロールを行います。(P.91,92)\n          例） FPD23\n\n        ■ FPの回復 (FPRx)\n          x：破滅ポイント\n          ルーインブレイク成功時に発生する、FPの回復量を決定するダイスロールを行います。(P.93)\n          例） FPR29\n\n        ■ 各種表\n          ・ポジティブ感情表 (PE)\n          ・ネガティブ感情表 (NE)\n          ・デウス・エクス・マキナ表 (DXM)\n          ・断罪チャート (JC)\n          ・破滅のイヤな感じ表 (RDF)\n          ・トラブルチャート／トラブル解決チャート (TC)\n          ・ドタバタアクション表 (DA)\n      MESSAGETEXT\n\n      def eval_game_system_specific_command(command)\n        case command\n        when /^RB/\n          check_roll(command)\n        when /^FPD/\n          roll_fp_damage(command)\n        when /^FPR/\n          roll_fp_recovery(command)\n        else\n          roll_tables(command, TABLES)\n        end\n      end\n\n      private\n\n      def check_roll(command)\n        m = %r{^RB(-?\\d+([+\\-*/]\\d+)*)(@(\\d+))?(#(\\d+))?$}.match(command)\n        unless m\n          return nil\n        end\n\n        success_rate = ArithmeticEvaluator.eval(m[1]).to_i\n        critical_border = m[4]&.to_i || [(success_rate / 5).to_i, 1].max\n        fumble_border = m[6]&.to_i || (success_rate < 100 ? 96 : 99)\n\n        total = @randomizer.roll_once(100)\n\n        result = Result.new\n\n        compare_result =\n          if total >= fumble_border\n            result.fumble = true\n            result.failure = true\n            'ファンブル'\n          elsif total == 1 || total <= critical_border\n            result.critical = true\n            result.success = true\n            'クリティカル'\n          elsif total <= success_rate\n            result.success = true\n            '成功'\n          else\n            result.failure = true\n            '失敗'\n          end\n\n        sequence = [\n          \"(1D100<=\#{success_rate}@\#{critical_border}#\#{fumble_border})\",\n          total,\n          compare_result\n        ]\n\n        result.text = sequence.join(\" ＞ \")\n        result\n      end\n\n      def roll_fp_damage(command)\n        m = /^FPD(\\d+)$/.match(command)\n        unless m\n          return nil\n        end\n\n        ruin_point = m[1].to_i\n        ruin_point_tens, ruin_point_ones = ruin_point.divmod(10)\n\n        dice_list = @randomizer.roll_barabara(1 + ruin_point_tens, 10)\n        total = dice_list.sum()\n        dice_str = dice_list.join(\",\")\n\n        sequence = [\n          \"((1+\#{ruin_point_tens})D10+\#{ruin_point_ones})\",\n          \"\#{total}[\#{dice_str}]+\#{ruin_point_ones}\",\n          \"\#{total + ruin_point_ones}ダメージ\"\n        ]\n\n        return sequence.join(\" ＞ \")\n      end\n\n      def roll_fp_recovery(command)\n        m = /^FPR(\\d+)$/.match(command)\n        unless m\n          return nil\n        end\n\n        ruin_point = m[1].to_i\n        dice_count = ruin_point.fdiv(10).ceil\n\n        dice_list = @randomizer.roll_barabara(dice_count, 10)\n        total = dice_list.sum()\n        dice_str = dice_list.join(\",\")\n\n        sequence = [\n          \"(\#{dice_count}D10)\",\n          \"\#{total}[\#{dice_str}]\",\n          \"\#{total}回復\"\n        ]\n\n        return sequence.join(\" ＞ \")\n      end\n\n      TABLES = {\n        \"PE\" => DiceTable::RangeTable.new(\n          \"ポジティブ感情表\",\n          \"1D100\",\n          [\n            [1..5, \"【希望】相手はまるで自分の過去、あるいは未来を見ているように感じる。\"],\n            [6..10, \"【礼儀】相手に礼を尽くすべきだとあなたは考えている。\"],\n            [11..15, \"【家族】相手とは家族のような関係となる。\"],\n            [16..20, \"【恩人】相手から助けを受けたことがある。それは大事な思い出だ。\"],\n            [21..25, \"【友人】相手とはなんとなくウマが合う。一緒にいると楽しい。\"],\n            [26..30, \"【信用】相手は信用できる人物だと思う。\"],\n            [31..35, \"【仲間】相手は同じ目的を持つ仲間だ。\"],\n            [36..40, \"【庇護】相手のことを助けてあげたいと思っている。\"],\n            [41..45, \"【尊敬】相手の行動、思考、思想などを尊敬している。\"],\n            [46..50, \"【憧れ】相手の生き方、外見、能力などになんとなく憧れている。\"],\n            [51..55, \"【好意】相手の主張、外見、生き方などに好意を抱いている。\"],\n            [56..60, \"【忠義】相手に対して真摯に忠実でありたいと思っている。\"],\n            [61..65, \"【目標】相手はあなたにとっての目標であり、理想の存在だ。\"],\n            [66..70, \"【借り】相手から助けを受けた。それはいつか返すべき、借りだ。\"],\n            [71..75, \"【貸し】相手には貸しがある。別に返してもらおうとは思っていない。\"],\n            [76..80, \"【腐れ縁】相手は昔から何かというと縁がある。この縁は今も続いている。\"],\n            [81..85, \"【相性】相手とはなんとなくうまくいく。相性がいいようだ。\"],\n            [86..90, \"【有為】相手はあなたにとって益をもたらす人物だ、そう考えている。\"],\n            [91..95, \"【秘密】相手の秘密を知っている。あるいはお互い秘密を共有している。\"],\n            [96..100, \"【好敵手】相手のことを好敵手、ライバルだと思っている。\"],\n            # [101, \"【任意】相手と相談の上で関係を設定すること。\"],\n          ]\n        ),\n        \"NE\" => DiceTable::RangeTable.new(\n          \"ネガティブ感情表\",\n          \"1D100\",\n          [\n            [1..5, \"【同族嫌悪】1日に自分の忌むべき過去、あるいは自分自身を見ているように感じる。\"],\n            [6..10, \"【侮蔑】相手を蔑む気持ちがある。どうにも、気に入らない。\"],\n            [11..15, \"【反発】相手の主張や行動などに反発を感じる。相手を受け入れることに抵抗がある。\"],\n            [16..20, \"【わだかまり】相手には言葉にしにくいもやもやとした感情を持っている。\"],\n            [21..25, \"【隔たり】相手とはなんとなくウマが合わない。一緒にいても面白くない。\"],\n            [26..30, \"【疑惑】相手は信用できない人物だと思っている。\"],\n            [31..35, \"【裏切り】相手に裏切られたという気持ちがある。\"],\n            [36..40, \"【妨害】相手のことを気に入らず、何かあれば、邪魔したいと思っている。\"],\n            [41..45, \"【侮辱】相手の行動、思考、思想などを嫌悪している。\"],\n            [46..50, \"【うらやみ】相手の生き方、外見、能力などをうらやんでいる。\"],\n            [51..55, \"【害意】相手の主張、外見、生き方などを嫌い、害を与えたいと思っている。\"],\n            [56..60, \"【不快】相手を不快な人間だと思っている。生理的に受け付けない。\"],\n            [61..65, \"【反面】相手を反面教師としている。ああはなるまい、と。\"],\n            [66..70, \"【詐欺】相手に騙されているように思う。何か嘘を吐かれているように思うのだ。\"],\n            [71..75, \"【搾取】相手に自分の何かを奪われているような怒りを感じる。\"],\n            [76..80, \"【悪縁】相手は昔から縁がある。この縁を絶ちきりたいと思っている。\"],\n            [81..85, \"【相性】相手とはなんとなくうまくいかない。残念だが相性が悪い。\"],\n            [86..90, \"【害悪】相手はあなたにとって害をもたらす、そう思っている。\"],\n            [91..95, \"【怨恨】相手に恨みを持っている。この恨みを晴らす日は来るだろうか。\"],\n            [96..100, \"【仇敵】相手のことを倒すべき相手と思っている。\"],\n            # [101, \"【任意】相手と相談の上で関係を設定すること。\"],\n          ]\n        ),\n        \"DXM\" => DiceTable::RangeTable.new(\n          \"デウス・エクス・マキナ表\",\n          \"1D10\",\n          [\n            [1..2, \"神降臨。エンディングフェイズに効果を発揮する。あなたの願いはかなう。願いの内容はGMと相談して決定すること。\"],\n            [3..4, \"逃走。状況を無視してあなた以外のキャストはシーンから退場できる。\"],\n            [5..6, \"命の雫。あなた以外のキャストのFPが3D10点だけ回復する。\"],\n            [7..8, \"天変地異。巨大な嵐や地震、雷雨などが発生し、周囲は大混乱に陥る。トループやエキストラはシーン終了まで何も行なえない(戦闘不能として扱う)。\"],\n            [9..10, \"不思議なことが起こった。あなたのFPが完全に回復する。\"],\n          ]\n        ),\n        \"JC\" => DiceTable::Table.new(\n          \"断罪チャート\",\n          \"1D10\",\n          [\n            \"【国王／女王】国レベルの代表者が現われて、あなたの主張を支持してくれる。\",\n            \"【王子／王女】王子や王女といった国で知らぬ者がないような存在が、あなたの主張を支持してくれる。\",\n            \"【高位聖職者】高位の聖職者が、あなたの主張を支持してくれる。\",\n            \"【有力貴族】有力貴族が、あなたの主張を支持してくれる。\",\n            \"【有力市民】有力市民が、あなたの主張を支持してくれる。\",\n            \"【豪商】豪商が、あなたの主張を支持してくれる。\",\n            \"【現役学生たち】アカデミーの学生たちが、あなたの主張を支持してくれる。\",\n            \"【OB、OGたち】アカデミーのOBやOGが、あなたの主張を支持してくれる。\",\n            \"【多くの人々】名も知れぬ多くの人々が、あなたの主張を支持してくれる。\",\n            \"【外国の王侯貴族】外国の代表者が現われて、あなたの主張を支持してくれる。\",\n            # \"【任意】GMと相談して後ろ盾となる人物を決定する。\",\n          ]\n        ),\n        \"RDF\" => DiceTable::RangeTable.new(\n          \"破滅のイヤな感じ表\",\n          \"1D100\",\n          [\n            [1..5, \"【水中で拘束】\\n演出：水中で長い髪の毛が全身に絡みついて動きが重くなるような感覚。\\nルーインブレイク成功：重い拘束から解き放たれたような快感。\"],\n            [6..10, \"【鈍痛】\\n演出：こめかみから長い釘を差し込まれているような感覚。\\nルーインブレイク成功：痛みが消えてなくなる安堵感。\"],\n            [11..15, \"【酸欠】\\n演出：空気が薄くなり呼吸をしても息苦しさが消えない感覚。\\nルーインブレイク成功：清浄な空気を吸った時の快感。\"],\n            [16..20, \"【ヘッドロック】\\n演出：頭を締め上げられているような感覚。\\nルーインブレイク成功：痛みから逃れられた安心感。\"],\n            [21..25, \"【悪寒】\\n演出：背中が冷やりとして悪寒が全身を突き抜けるような感覚。\\nルーインブレイク成功：悪寒が鎮まった平穏感。\"],\n            [26..30, \"【熱病】\\n演出：熱病で浮かされたように頭がぼうっとする感覚。\\nルーインブレイク成功：落ち着きを取り戻した安息感。\"],\n            [31..35, \"【高所恐怖】\\n演出：目もくらむような断崖の際に立たされたような感覚。\\nルーインブレイク成功：落下の恐怖から逃れた安堵感。\"],\n            [36..40, \"【ガラスの破片】\\n演出：砕けた散ったガラスの破片を踏み続けるような感覚。\\nルーインブレイク成功：幻の痛みが消えていく安心感。\"],\n            [41..45, \"【ジャリ感】\\n演出：口の中に砂を詰め込まれたような感覚。\\nルーインブレイク成功：口の中がすっきりしたような清浄感。\"],\n            [46..50, \"【耳鳴り】\\n演出：耳をふさいでも聞こえる耳鳴りが響き続けているような感覚。\\nルーインブレイク成功：異音が消えた平安感。\"],\n            [51..55, \"【孤独】\\n演出：虚空にただひとり浮かんでいるような孤独な感覚。\\nルーインブレイク成功：孤立から脱した安心感。\"],\n            [56..60, \"【落下感】\\n演出：高所から落ち続けているような感覚。\\nルーインブレイク成功：地に足のついた安定感。\"],\n            [61..65, \"【暗所恐怖】\\n演出：明るいはずなのに周囲が真っ暗で何も見えない不安な感覚。\\nルーインブレイク成功：周囲がハッキリ見える安息感。\"],\n            [66..70, \"【擦過】\\n演出：心の表面をザラザラとしたもので削られているような感覚。\\nルーインブレイク成功：痛みから逃れられた安楽感。\"],\n            [71..75, \"【幻聴】\\n演出：周囲に人がいて、絶えず自分の悪口を囁きあっているような感覚。\\nルーインブレイク成功：周囲への恐怖が消えた平穏感。\"],\n            [76..80, \"【異臭】\\n演出：不快な香りが漂ってくるような感覚。\\nルーインブレイク成功：異臭を感じなくなった清浄感。\"],\n            [81..85, \"【健忘感】\\n演出：何かを忘れていて、それが何かは思い出せないような感覚。\\nルーインブレイク成功：忘れごとを思い出せたときの開放感。\"],\n            [86..90, \"【杞憂】\\n演出：天が崩れていつ落ちてくるかわからない感覚。\\nルーインブレイク成功：頭上がすっきりした痛快感。\"],\n            [91..95, \"【背後恐怖】\\n演出：背後に人が立っているような感覚。\\nルーインブレイク成功：後方に憂いのない安心感。\"],\n            [96..100, \"【夢中感】\\n演出：夢の中にいるような不安な感覚。\\nルーインブレイク成功：しっかりとした現実感。\"],\n            # [101, \"【任意】\\n演出：GMあるいはプレイヤーが演出を行なう。\\nルーインブレイク成功：任意\"],\n          ]\n        ),\n        \"TC\" => DiceTable::Table.new(\n          \"トラブルチャート／トラブル解決チャート\",\n          \"1D10\",\n          [\n            \"【暴れ馬／交通事故】\\nトラブル：いきなり、暴れ馬がやってきて、キミは刎ねられた。\\n解決：時間はかかったが、事故は処理された。\",\n            \"【突然の崩落／地下遺跡へ移動】\\nトラブル：周辺ごと地面が陥没し、地下へと導かれる。\\n解決：崩落した先は謎の古代文明の遺跡であった。\",\n            \"【暗殺者の襲撃】\\nトラブル：凶刃がキャストを襲う。\\n解決：何とか暗殺者の手を逃れ、キミは生還した。\",\n            \"【拉致・誘拐】\\nトラブル：突然、キミは黒覆面の男たちに馬車に押し込まれ、誘拐される。\\n解決：何とかして、キミは誘拐組織の手を逃れた。\",\n            \"【爆発！！】\\nトラブル：爆発した！\\n解決：奇跡的にキミは無傷だ、周囲には破壊されたガレキが転がっている。\",\n            \"【行きずりの強盗】\\nトラブル：訪れていた店やレストラン、銀行などが強盗に襲われる。\\n解決：通りすがりのヒーローが強盗を倒した。あれはいったい。\",\n            \"【テロリストの襲撃／撃退】\\nトラブル：テロリストに襲われる。\\n解決：テロリストは撃退された。\",\n            \"【交通マヒ／移動変更】\\nトラブル：直接、事故に行きあったわけではない事故によって起こった交通マヒによって身動きが取れない。\\n解決：交通機関を変更して移動することになった。\",\n            \"【軍・警察の封鎖／大捕物】\\nトラブル：突如して軍や警察などの治安組織によって建物が封鎖されてしまった。\\n解決：建物内にいる犯人を巡り、大捕物が始った。\",\n            \"【任意】\\nGMと相談してトラブルの内容を決めよう。\",\n          ]\n        ),\n        \"DA\" => DiceTable::Table.new(\n          \"ドタバタアクション表\",\n          \"1D10\",\n          [\n            \"【フードファイト（野菜）】大根ソードで切りつけ、カボチャハンマーで殴り抜け\",\n            \"【ホコリの雲】ドカッ、バキ、ボカッ。キュウ。\",\n            \"【リビングルームストーム】飛び交うソーサー、ポットの中には煎れたばかりの紅茶（抽出温度28度）が入っているぞ。\",\n            \"【廊下でランナウェイ】廊下を走っては行けません。\",\n            \"【図書館バトル】敏腕司書が、図書館の静寂を乱す者を残らず静かにさせていく。\",\n            \"【パーティーファイト】優雅に踊り、紳士淑女の助けを借りて悪漢を退治しよう。\",\n            \"【フードファイト（肉と骨）】ヒトに眠る野性を解き放て。羊の骨が最古の武器として再発見される。\",\n            \"【イスと机】イスは盾であり、武器であり悪漢をけん制し、拘束する。\",\n            \"【洗濯物ファイト】シーツで敵の動きを止めて、石鹸で転ばせよう。\",\n            \"【任意】GMと相談して、イメージをふくらませよう。\",\n          ]\n        ),\n      }.freeze\n\n      register_prefix('RB', 'FP[DR]', TABLES.keys)\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:RuinBreakers>", "eval_game_system_specific_command", "command", "$ret_or_1", "check_roll", "roll_fp_damage", "roll_fp_recovery", "roll_tables", "TABLES", "private", "m", "match", "success_rate", "ArithmeticEvaluator", "eval", "[]", "1", "to_i", "critical_border", "4", "/", "5", "max", "fumble_border", "6", "<", "100", "96", "99", "total", "@randomizer", "roll_once", "result", "Result", "new", "compare_result", ">=", "fumble=", "failure=", "<=", "critical=", "success=", "sequence", "text=", "join", "ruin_point", "divmod", "10", "ruin_point_tens", "ruin_point_ones", "dice_list", "roll_barabara", "+", "sum", "dice_str", "dice_count", "fdiv", "ceil", "DiceTable::RangeTable", "DiceTable", "11", "15", "16", "20", "21", "25", "26", "30", "31", "35", "36", "40", "41", "45", "46", "50", "51", "55", "56", "60", "61", "65", "66", "70", "71", "75", "76", "80", "81", "85", "86", "90", "91", "95", "2", "3", "7", "8", "9", "DiceTable::Table", "freeze", "register_prefix", "keys", "Base"], :mappings=>"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"}}]}