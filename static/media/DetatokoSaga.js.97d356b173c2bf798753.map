{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/DetatokoSaga.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class DetatokoSaga < Base\n      # ゲームシステムの識別子\n      ID = 'DetatokoSaga'\n\n      # ゲームシステム名\n      NAME = 'でたとこサーガ'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'てたとこさあか'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・通常判定　xDS or xDSy or xDS>=t or xDSy>=t or xDS+z>=t or xDSy+z>=t\n        　(x＝スキルランク、y＝現在フラグ値(省略時0)、z＝修正値(省略時０)、t＝目標値(省略時８))\n        　例）3DS　2DS5　0DS　3DS>=10　3DS7>=12 2DS3+1 3DS2+1>=10\n        ・判定値　xJD or xJDy or xJDy+z or xJDy-z or xJDy/z\n        　(x＝スキルランク、y＝現在フラグ値(省略時0)、z＝修正値(省略時０))\n        　例）3JD　2JD5　3JD7+1　4JD/3\n        ・体力烙印表　SST (StrengthStigmaTable)\n        ・気力烙印表　WST (WillStigmaTable)\n        ・体力バッドエンド表　SBET (StrengthBadEndTable)\n        ・気力バッドエンド表　WBET (WillBadEndTable)\n      INFO_MESSAGE_TEXT\n\n      register_prefix('\\d+DS', '\\d+JD')\n\n      def initialize(command)\n        super(command)\n\n        @sort_add_dice = true\n        @d66_sort_type = D66SortType::ASC\n      end\n\n      def eval_game_system_specific_command(command)\n        debug(\"eval_game_system_specific_command begin string\", command)\n\n        result = checkRoll(command)\n        return result if result\n\n        result = checkJudgeValue(command)\n        return result if result\n\n        debug(\"各種表として処理\")\n        return roll_tables(ALIAS[command] || command, self.class::TABLES)\n      end\n\n      # 通常判定　xDS or xDSy or xDS>=z or xDSy>=z\n      def checkRoll(string)\n        debug(\"checkRoll begin string\", string)\n\n        m = %r{^(\\d+)DS(\\d+)?(([+-/])(\\d+))?(?:>=(\\d+))?$}i.match(string)\n        unless m\n          return nil\n        end\n\n        skill = m[1].to_i\n        flag = m[2].to_i\n        operator = m[4]\n        value = m[5].to_i\n        target = m[6]&.to_i || 8\n\n        result = translate(\"DetatokoSaga.DS.input_options\", skill: skill, flag: flag, target: target)\n\n        modifyText = getModifyText(operator, value)\n        result += translate(\"DetatokoSaga.DS.modifier\", modifier: modifyText) unless modifyText.empty?\n\n        total, rollText = getRollResult(skill)\n\n        result += \" ＞ \#{total}[\#{rollText}]\#{modifyText}\"\n\n        totalResult = getTotalResultValue(total, value, operator)\n        result += \" ＞ \#{totalResult}\"\n\n        unless modifyText.empty?\n          case operator\n          when \"+\"\n            total += value\n          when \"-\"\n            total -= value\n          end\n        end\n\n        success = getSuccess(total, target)\n        result += \" ＞ \#{success}\"\n\n        result += getCheckFlagResult(total, flag)\n\n        return result\n      end\n\n      def getRollResult(skill)\n        diceCount = skill + 1\n        diceCount = 3 if  skill == 0\n\n        dice = @randomizer.roll_barabara(diceCount, 6)\n        diceText = dice.join(',')\n\n        dice = dice.sort\n        dice = dice.reverse if skill != 0\n\n        total = dice[0] + dice[1]\n\n        return total, diceText\n      end\n\n      def getSuccess(check, target)\n        if check >= target\n          translate(\"DetatokoSaga.DS.success\")\n        else\n          translate(\"DetatokoSaga.DS.failure\")\n        end\n      end\n\n      def getCheckFlagResult(total, flag)\n        if total > flag\n          return \"\"\n        end\n\n        will = getDownWill(flag)\n        return translate(\"DetatokoSaga.less_than_flag\", will: will)\n      end\n\n      def getDownWill(flag)\n        if flag >= 10\n          return \"6\"\n        end\n\n        dice = @randomizer.roll_once(6)\n        return \"1D6->\#{dice}\"\n      end\n\n      # スキル判定値　xJD or xJDy or xJDy+z or xJDy-z or xJDy/z\n      def checkJudgeValue(string)\n        debug(\"checkJudgeValue begin string\", string)\n\n        m = %r{^(\\d+)JD(\\d+)?(([+-/])(\\d+))?$}i.match(string)\n        unless m\n          return nil\n        end\n\n        skill = m[1].to_i\n        flag = m[2].to_i\n        operator = m[4]\n        value = m[5].to_i\n\n        result = translate(\"DetatokoSaga.JD.input_options\", skill: skill, flag: flag)\n\n        modifyText = getModifyText(operator, value)\n        result += translate(\"DetatokoSaga.JD.modifier\", modifier: modifyText) unless modifyText.empty?\n\n        total, rollText = getRollResult(skill)\n        result += \" ＞ \#{total}[\#{rollText}]\#{modifyText}\"\n\n        totalResult = getTotalResultValue(total, value, operator)\n        result += \" ＞ \#{totalResult}\"\n\n        result += getCheckFlagResult(total, flag)\n\n        return result\n      end\n\n      def getModifyText(operator, value)\n        return '' if value == 0\n\n        operatorText =\n          case operator\n          when \"+\"\n            \"＋\"\n          when \"-\"\n            \"－\"\n          when \"/\"\n            \"÷\"\n          else\n            return \"\"\n          end\n\n        return \"\#{operatorText}\#{value}\"\n      end\n\n      def getTotalResultValue(total, value, operator)\n        case operator\n        when \"+\"\n          return \"\#{total}+\#{value} ＞ \" + translate(\"DetatokoSaga.total_value\", total: total + value)\n        when \"-\"\n          return \"\#{total}-\#{value} ＞ \" + translate(\"DetatokoSaga.total_value\", total: total - value)\n        when \"/\"\n          return getTotalResultValueWhenSlash(total, value)\n        else\n          return translate(\"DetatokoSaga.total_value\", total: total)\n        end\n      end\n\n      def getTotalResultValueWhenSlash(total, value)\n        return translate(\"DetatokoSaga.division_by_zero_error\") if value == 0\n\n        quotient = ((1.0 * total) / value).ceil\n\n        result = \"\#{total}÷\#{value} ＞ \" + translate(\"DetatokoSaga.total_value\", total: quotient)\n        return result\n      end\n\n      ALIAS = {\n        \"StrengthStigmaTable\" => \"SST\",\n        \"WillStigmaTable\" => \"WST\",\n        \"StrengthBadEndTable\" => \"SBET\",\n        \"WillBadEndTable\" => \"WBET\",\n      }.transform_keys(&:upcase).freeze\n\n      def self.translate_tables(locale)\n        {\n          \"SST\" => DiceTable::Table.from_i18n(\"DetatokoSaga.table.SST\", locale),\n          \"WST\" => DiceTable::Table.from_i18n(\"DetatokoSaga.table.WST\", locale),\n          \"SBET\" => DiceTable::Table.from_i18n(\"DetatokoSaga.table.SBET\", locale),\n          \"WBET\" => DiceTable::Table.from_i18n(\"DetatokoSaga.table.WBET\", locale),\n        }\n      end\n\n      TABLES = translate_tables(:ja_jp).freeze\n\n      register_prefix(TABLES.keys, ALIAS.keys)\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:DetatokoSaga>", "self", "register_prefix", "initialize", "command", "@sort_add_dice", "@d66_sort_type", "D66SortType::ASC", "D66SortType", "eval_game_system_specific_command", "debug", "result", "checkRoll", "checkJudgeValue", "roll_tables", "$ret_or_1", "ALIAS", "[]", "class::TABLES", "class", "string", "m", "match", "skill", "1", "to_i", "flag", "2", "operator", "4", "value", "5", "target", "6", "8", "translate", "modifyText", "getModifyText", "empty?", "+", "getRollResult", "total", "rollText", "totalResult", "getTotalResultValue", "-", "success", "getSuccess", "getCheckFlagResult", "diceCount", "0", "3", "dice", "@randomizer", "roll_barabara", "diceText", "join", "sort", "reverse", "check", ">=", ">", "will", "getDownWill", "10", "roll_once", "operatorText", "getTotalResultValueWhenSlash", "quotient", "/", "*", "ceil", "transform_keys", "to_proc", "freeze", "translate_tables", "locale", "DiceTable::Table", "DiceTable", "from_i18n", "TABLES", "keys", "Base"], :mappings=>"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"}}]}