{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/arithmetic_evaluator.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module ArithmeticEvaluator\n    class << self\n      # 四則演算を評価する\n      # @deprecated +Arithmetic.#eval+ を利用してください。\n      # @param expr [String, nil] 評価する式\n      # @param round_type [Symbol] 端数処理の種類\n      # @return [Integer] 評価結果を返す。不正な式の場合には0を返す。\n      def eval(expr, round_type: RoundType::FLOOR)\n        return 0 unless expr\n\n        Arithmetic.eval(expr, round_type) || 0\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:ArithmeticEvaluator>", "eval", "expr", "$kwargs", "RoundType::FLOOR", "RoundType", "0", "$ret_or_1", "Arithmetic", "round_type", "self"], :mappings=>"AAAAA,8CAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAA;QAAA;;QAME,OAAAC,oBAAAA,iBAASC,IAAD,EAVdC,OAUMF,GAAAA,MAAAA,IAAAA,wCAAAA;AAAAA,UAAAA;;;UAVN;;UAUqB,0CAAA,qCAAYG,IAAAC,eAAAD;UACzB,KAAA,QAAgBF,IAAhB,CAAA;YAAA,OAAOI;UAAP;UAEA,IAAA,QAAAC,CAAAA,YAAAC,gBAAUP,MAAAA,CAAMC,IAAhB,EAAsBO,UAAZR,CAAVM,CAAA,CAAA;YAAAN,OAAA;UAAA;YAAqCA,OAAAK;UAArC,EAHFL;YAAAA;YAAAA;UAAAA;QAAAA,CAAAA,IAAAA;MANF,4BAASS,IAAT;IADFV,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>40, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/format.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module Format\n    module_function\n\n    # 比較演算子を文字列表記にする\n    #\n    # @param op [Symbol]\n    # @return [String, nil]\n    def comparison_operator(op)\n      case op\n      when :==\n        \"=\"\n      when :'!='\n        \"<>\"\n      when Symbol\n        op.to_s\n      end\n    end\n\n    # 修正値を文字列表記にする\n    #\n    # @param number [Integer, nil]\n    # @return [String]\n    def modifier(number)\n      if number.nil?\n        nil\n      elsif number == 0\n        \"\"\n      elsif number > 0\n        \"+\#{number}\"\n      else\n        number.to_s\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:Format>", "self", "module_function", "comparison_operator", "op", "$ret_or_1", "Symbol", "to_s", "modifier", "number", "nil?", "0", ">"], :mappings=>"AAAAA,gCAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;;MACEC,IAAAC,iBAAAA,CAAAA;;AAMAC,MAAAA,mCAAAA,+BAAwBC,EAAxBD;AAAAA,QAAAA;;QAEE,IAAA,QAAK,IAAL,EADAE,CAAAA,YAAKD,EAALC,CACA,CAAA;UACEF,OAAAA;QADF,OAEA,IAAA,QAAK,IAAL,EAdN,SAcM,CAAA;UACEA,OAAAA;QADF,OAEA,IAAA,QAAKG,YAAL,EAhBN,SAgBM,CAAA;UACEH,OAAAC,EAAEG,MAAAA,CAAAA;QADJ;UALAJ,OAAA;QAKA;MANFA,CAAAA;MAeAH,OAAAQ,wBAAAA,oBAAaC,MAAbD;AAAAA;QACE,IAAA,QAAGC,MAAMC,SAAAA,CAAAA,CAAT,CAAA;UACEF,OAAA;QADF,OAEA,IAAA,MAAMC,MAAN,EAAgBE,CAAhB,CAAA;UACEH,OAAAA;QADF,OAEA,IAAA,QAAaI,OAAPH,MAAOG,EAAED,CAAFC,CAAb,CAAA;UACEJ,OAACA,GAAD,GAAA,CAAIC,MAAJ;QADF;UAGED,OAAAC,MAAMF,MAAAA,CAAAA;QAHR;MALFC,CAAAA;IAtBFR,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>85, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/normalize.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module Normalize\n    module_function\n\n    # 比較演算子をシンボルに正規化する\n    #\n    # @param op [String]\n    # @return [Symbol, nil]\n    def comparison_operator(op)\n      case op\n      when /<=|=</\n        :<=\n      when />=|=>/\n        :>=\n      when /<>|!=|=!/\n        :'!='\n      when /</\n        :<\n      when />/\n        :>\n      when /=/\n        :==\n      end\n    end\n\n    # 目標値を正規化する\n    #\n    # @param val [String]\n    # @return [Integer, String] 整数か'?'\n    def target_number(val)\n      if val == \"?\"\n        val\n      else\n        val.to_i\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:Normalize>", "self", "module_function", "comparison_operator", "op", "$ret_or_1", "target_number", "val", "to_i"], :mappings=>"AAAAA,mCAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;;;MACEC,IAAAC,iBAAAA,CAAAA;;AAMAC,MAAAA,mCAAAA,+BAAwBC,EAAxBD;AAAAA,QAAAA;;QAEE,IAAA,QAAK,OAAL,EADAE,CAAAA,YAAKD,EAALC,CACA,CAAA;UACEF,OAAA;QADF,OAEA,IAAA,QAAK,OAAL,EAdN,SAcM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,UAAL,EAhBN,SAgBM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,GAAL,EAlBN,SAkBM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,GAAL,EApBN,SAoBM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,GAAL,EAtBN,SAsBM,CAAA;UACEA,OAAA;QADF;UAXAA,OAAA;QAWA;MAZFA,CAAAA;MAqBAH,OAAAM,6BAAAA,yBAAkBC,GAAlBD;AAAAA;QACE,IAAA,MAAGC,GAAH,EAAUD,GAAV,CAAA;UACEA,OAAAC;QADF;UAGED,OAAAC,GAAGC,MAAAA,CAAAA;QAHL;MADFF,CAAAA;IA5BFN,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>131, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    # 表を表すクラス\n    class Table\n      # @param key [String]\n      # @param locale [Symbol]\n      # @return [Table]\n      def self.from_i18n(key, locale)\n        table = I18n.t(key, locale: locale)\n        new(table[:name], table[:type], table[:items])\n      end\n\n      # @param [String] name 表の名前\n      # @param [String] type 項目を選ぶときのダイスロールの方法 '1D6'など\n      # @param [Array<String>] items 表の項目の配列\n      def initialize(name, type, items)\n        @name = name\n        @items = items.freeze\n\n        m = /(\\d+)D(\\d+)/i.match(type)\n        unless m\n          raise ArgumentError, \"Unexpected table type: \#{type}\"\n        end\n\n        @times = m[1].to_i\n        @sides = m[2].to_i\n      end\n\n      # 表を振る\n      # @param [BCDice] bcdice ランダマイザ\n      # @return [String] 結果\n      def roll(bcdice)\n        value = bcdice.roll_sum(@times, @sides)\n        return choice(value)\n      end\n\n      def choice(value)\n        index = value - @times\n        return RollResult.new(@name, value, @items[index])\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:Table>", "from_i18n", "self", "key", "locale", "table", "I18n", "t", "new", "[]", "initialize", "name", "type", "items", "@name", "@items", "freeze", "m", "match", "raise", "ArgumentError", "@times", "1", "to_i", "@sides", "2", "roll", "bcdice", "value", "roll_sum", "choice", "index", "-", "RollResult"], :mappings=>"AAAAA,0CAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MAEEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAIEC,MAAIC,IAAJD,gBAAAA,qBAAmBE,GAAD,EAAMC,MAAxBH;AAAAA,UAAAA;;;UACEI,QAAQC,UAAIC,GAAAA,CAAGJ,GAAP,EAAY,oBAAA,UAAQC,MAAR,EAARG;UACZN,OAAAC,IAAAM,KAAAA,CAAIH,KAAKI,OAAAA,CAAC,MAADA,CAAT,EAAkBJ,KAAKI,OAAAA,CAAC,MAADA,CAAvB,EAAgCJ,KAAKI,OAAAA,CAAC,OAADA,CAArCD;QAFFP,CAAAA;;AAQAS,QAAAA,0BAAAA,sBAAeC,IAAD,EAAOC,IAAP,EAAaC,KAA3BH;AAAAA,UAAAA;;;UACEI,YAAQH;UACRI,aAASF,KAAKG,QAAAA,CAAAA;UAEdC,IAAI,cAAcC,OAAAA,CAAON,IAAPM;UAClB,KAAA,QAAOD,CAAP,CAAA;YACEf,IAAAiB,OAAAA,CAAMC,mBAAN,EAAsBV,yBAAD,GAAA,CAA0BE,IAA1B,CAArBO;UADF;UAIAE,aAASJ,CAACR,OAAAA,CAACa,CAADb,CAAGc,MAAAA,CAAAA;UACbb,OAAAc,CAAAA,aAASP,CAACR,OAAAA,CAACgB,CAADhB,CAAGc,MAAAA,CAAAA,CAAbC;QAVFd,CAAAA;;AAgBAgB,QAAAA,oBAAAA,gBAASC,MAATD;AAAAA,UAAAA;;;UACEE,QAAQD,MAAME,UAAAA,CAAUR,UAAhB,EAAwBG,UAAlBK;UACd,OAAO3B,IAAA4B,QAAAA,CAAOF,KAAPE;QAFTJ,CAAAA;QAKA1B,OAAA8B,sBAAAA,kBAAWF,KAAXE;AAAAA,UAAAA;;;UACEC,QAAcC,UAANJ,KAAMI,EAAEX,UAAFW;UACd,OAAOC,gBAAUzB,KAAAA,CAAKM,SAAf,EAAsBc,KAAtB,EAA6Bb,UAAMN,OAAAA,CAACsB,KAADtB,CAAzBD;QAFnBsB,CAAAA;MAjCF9B,GAAAA,WAAAA,EAAAA,IAAAA;IAFFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>192, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/d66_grid_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    # D66を振って6x6マスの表を参照する\n    class D66GridTable\n      # @param key [String]\n      # @param locale [Symbol]\n      # @return [D66GridTable]\n      def self.from_i18n(key, locale)\n        table = I18n.t(key, locale: locale, raise: true)\n        new(table[:name], table[:items])\n      end\n\n      # @param [String] name 表の名前\n      # @param [Array<Array<String>>] items 表の項目の配列\n      def initialize(name, items)\n        @name = name\n        @items = items.freeze\n      end\n\n      # 表を振る\n      # @param randomizer [#roll_once] ランダマイザ\n      # @return [String] 結果\n      def roll(randomizer)\n        dice1 = randomizer.roll_once(6)\n        dice2 = randomizer.roll_once(6)\n        value = dice1 * 10 + dice2\n\n        index1 = dice1 - 1\n        index2 = dice2 - 1\n        return RollResult.new(@name, value, @items[index1][index2])\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:D66GridTable>", "from_i18n", "self", "key", "locale", "table", "I18n", "t", "new", "[]", "initialize", "name", "items", "@name", "@items", "freeze", "roll", "randomizer", "dice1", "roll_once", "6", "dice2", "value", "+", "*", "10", "index1", "-", "1", "index2", "RollResult"], :mappings=>"AAAAA,mDAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MAEEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAIEC,MAAIC,IAAJD,gBAAAA,qBAAmBE,GAAD,EAAMC,MAAxBH;AAAAA,UAAAA;;;UACEI,QAAQC,UAAIC,GAAAA,CAAGJ,GAAP,EAAY,6BAAA,UAAQC,MAAR,EAAA,SAAuB,IAAvB,EAARG;UACZN,OAAAC,IAAAM,KAAAA,CAAIH,KAAKI,OAAAA,CAAC,MAADA,CAAT,EAAkBJ,KAAKI,OAAAA,CAAC,OAADA,CAAvBD;QAFFP,CAAAA;;AAOAS,QAAAA,0BAAAA,sBAAeC,IAAD,EAAOC,KAArBF;AAAAA,UAAAA;;;UACEG,YAAQF;UACRD,OAAAI,CAAAA,aAASF,KAAKG,QAAAA,CAAAA,CAAdD;QAFFJ,CAAAA;QAQAV,OAAAgB,oBAAAA,gBAASC,UAATD;AAAAA,UAAAA;;;UACEE,QAAQD,UAAUE,WAAAA,CAAWC,CAAXD;UAClBE,QAAQJ,UAAUE,WAAAA,CAAWC,CAAXD;UAClBG,QAAmBC,SAALC,UAANN,KAAMM,EAAEC,EAAFD,CAAKD,EAAEF,KAAFE;UAEnBG,SAAeC,UAANT,KAAMS,EAAEC,CAAFD;UACfE,SAAeF,UAANN,KAAMM,EAAEC,CAAFD;UACf,OAAOG,gBAAUtB,KAAAA,CAAKK,SAAf,EAAsBS,KAAtB,EAA6BR,UAAML,OAAAA,CAACiB,MAADjB,CAAQA,OAAAA,CAACoB,MAADpB,CAAjCD;QAPnBQ,CAAAA;MAnBFhB,GAAAA,WAAAA,EAAAA,IAAAA;IAFFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>243, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/BeastBindTrinity.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire 'bcdice/arithmetic_evaluator'\nrequire 'bcdice/format'\nrequire 'bcdice/normalize'\nrequire 'bcdice/dice_table/table'\nrequire 'bcdice/dice_table/d66_grid_table'\n\nmodule BCDice\n  module GameSystem\n    class BeastBindTrinity < Base\n      # ゲームシステムの識別子\n      ID = 'BeastBindTrinity'\n\n      # ゲームシステム名\n      NAME = 'ビーストバインド トリニティ'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'ひいすとはいんととりにてい'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・判定　(nBB+m%w@x#y$z&v)\n        　n個のD6を振り、出目の大きい2個から達成値を算出。修正mも可能。\n\n        　%w、@x、#y、$z、&vはすべて省略可能。\n        ＞%w：現在の人間性が w であるとして、クリティカル値(C値)を計算。\n        ・省略した場合、C値=12として達成値を算出する。\n        ＞@x：クリティカル値修正。（加減式でも入力可能）\n        ・xに直接数字を書くと、C値をその数字に上書きする。\n        　「絶対にクリティカルしない」状態は、@13など xを13以上に指定すること。\n        ・xの先頭が「+」か「-」なら、計算したC値にその値を加算。例）@-1、@+2\n        　この方法でC値をプラスする場合、上限は12となる。\n        ＞#y、#Ay：ファンブル値修正。（加減式でも入力可能）\n        ・yに直接数字を書くと、ファンブル値をその数字に設定。\n        ・yの数字の先頭が「+」か「-」なら、ファンブル値=2にその数字を加算。例）#+2\n        ・※#Ayとすると、ファンブルしても達成値を通常通り算出。　例）#A+1\n        ＞$z：ダイスの出目をzに固定して判定する。複数指定可。\n        　　　《運命歪曲》など「ダイスの１個を振り直す」効果等に使用する。\n        　例）2BB$1 →ダイスを2個振る判定で、ダイス1個の出目を1で固定\n        　例）2BB$16→ダイスを2個振る判定で、ダイスの出目を1と6で固定\n        ＞&v：出目がv未満のダイスがあれば、出目がvだったものとして達成値を計算する。\n        　例）2BB&3 →出目3未満（→出目1、2）を出目3だったものとして計算。\n\n        ・D66ダイスあり\n        ・邂逅表：EMO\n        ・暴露表：EXPO_A\n        ・魔獣化暴露表：EXPO_B\n        ・アイドル専用暴露表：EXPO_I\n        ・アイドル専用魔獣化暴露表：EXPO_J\n        ・正体判明チャートA～C：FACE_A, FACE_B, FACE_C\n      INFO_MESSAGE_TEXT\n\n      def initialize(command)\n        super(command)\n\n        @d66_sort_type = D66SortType::ASC\n      end\n\n      class BBCommand\n        def initialize(command)\n          @command = command\n          parse()\n        end\n\n        def roll(randomizer)\n          if @parse_error\n            return nil\n          end\n\n          @randomizer = randomizer\n\n          dice_list_org = roll_with_dice_pool()\n          if dice_list_org.empty?\n            return \"ERROR:振るダイスの数が0個です\"\n          end\n\n          dice_list_filtered = dice_list_org.map { |dice| [dice, @dice_value_lower_limit].max }.sort\n          @dice_total = dice_list_filtered.last(2).inject(0, :+)\n\n          total = calc_total()\n\n          dice_list_org_str = \"[\#{dice_list_org.join(',')}]\" if dice_list_filtered != dice_list_org\n\n          result = result_compare(total)\n          result.critical = critical?\n          result.fumble = fumble?\n\n          dice_status =\n            if result.fumble?\n              \"ファンブル\"\n            elsif result.critical?\n              \"クリティカル\"\n            end\n          result_str =\n            if result.success?\n              \"成功\"\n            elsif result.failure?\n              \"失敗\"\n            end\n\n          sequence = [\n            command_expr(),\n            dice_list_org_str,\n            interim_expr(dice_list_filtered),\n            dice_status,\n            total.to_s,\n            result_str\n          ].compact\n          result.text = sequence.join(\" ＞ \")\n\n          return result\n        end\n\n        private\n\n        def parse()\n          m = /^(\\d+)(?:R6|BB6?)((?:[+-]\\d+)+)?(?:%(-?\\d+))?(?:@([+\\-\\d]+))?(?:#(A)?([+\\-\\d]+))?(?:\\$([1-6]+))?(?:&([1-6]))?(?:([>=]+)(\\d+))?$/.match(@command)\n          unless m\n            @parse_error = true\n            return\n          end\n\n          @dice_num = m[1].to_i\n          @modify_number = m[2] ? ArithmeticEvaluator.eval(m[2]) : 0\n\n          @critical = parse_critical(m[3], m[4])\n\n          @keep_value_on_fumble = !m[5].nil?\n\n          @fumble = parse_fumble(m[6])\n\n          @dice_pool = m[7] ? m[7].split(\"\").map(&:to_i) : []\n          @dice_pool.pop(@dice_pool.size - @dice_num) if @dice_pool.size > @dice_num\n\n          @dice_value_lower_limit = m[8].to_i\n\n          @cmp_op = Normalize.comparison_operator(m[9])\n          @target_number = m[10]&.to_i\n\n          @parse_error = false\n        end\n\n        # @param humanity [String, nil]\n        # @param atmark [String, nil]\n        # @return [Integer]\n        def parse_critical(humanity, atmark)\n          humanity = humanity ? humanity.to_i : 99\n          atmark_value = atmark ? ArithmeticEvaluator.eval(atmark) : 0\n\n          critical =\n            if /^[+-]/.match(atmark)\n              [critical_from_humanity(humanity) + atmark_value, 12].min\n            elsif atmark\n              atmark_value\n            else\n              critical_from_humanity(humanity)\n            end\n\n          return critical\n        end\n\n        def critical_from_humanity(humanity)\n          if humanity <= 0\n            9\n          elsif humanity <= 20\n            10\n          elsif humanity <= 40\n            11\n          else\n            12\n          end\n        end\n\n        # @param sharp [String, nil]\n        # @return [Integer]\n        def parse_fumble(sharp)\n          sharp_value = sharp ? ArithmeticEvaluator.eval(sharp) : 0\n\n          if /^[+-]/.match(sharp)\n            2 + sharp_value\n          elsif sharp\n            sharp_value\n          else\n            2\n          end\n        end\n\n        def roll_with_dice_pool\n          dice_times = @dice_num - @dice_pool.size\n          dice_list = @randomizer.roll_barabara(dice_times, 6) + @dice_pool\n\n          return dice_list.sort\n        end\n\n        def command_expr\n          modifier = Format.modifier(@modify_number)\n          \"(\#{@dice_num}BB\#{modifier}@\#{@critical}\\#\#{@fumble}\#{@cmp_op}\#{@target_number})\"\n        end\n\n        def interim_expr(dice_list)\n          expr = \"\#{@dice_total}[\#{dice_list.join(',')}]\#{Format.modifier(@modify_number)}\"\n          expr += \"+20\" if critical?\n\n          return expr\n        end\n\n        def fumble?\n          @dice_total <= @fumble\n        end\n\n        def critical?\n          @dice_total >= @critical\n        end\n\n        def calc_total\n          total = @dice_total + @modify_number\n          if fumble?\n            total = 0 unless @keep_value_on_fumble\n          elsif critical?\n            total += 20\n          end\n\n          if total < 0\n            total = 0\n          end\n\n          return total\n        end\n\n        def result_compare(total)\n          if @cmp_op\n            if total.send(@cmp_op, @target_number)\n              Result.success(nil)\n            else\n              Result.failure(nil)\n            end\n          else\n            Result.new\n          end\n        end\n      end\n\n      def eval_game_system_specific_command(command)\n        if (ret = roll_tables(command, TABLES))\n          return ret\n        end\n\n        bb = BBCommand.new(command)\n        return bb.roll(@randomizer)\n      end\n\n      TABLES = {\n        'EMO' => DiceTable::D66GridTable.new(\n          '邂逅表',\n          [\n            ['家族', '家族', '信頼', '信頼', '忘却', '忘却'],\n            ['慈愛', '慈愛', '憧憬', '憧憬', '感銘', '感銘'],\n            ['同志', '同志', '幼子', '幼子', '興味', '興味'],\n            ['ビジネス', 'ビジネス', '師事', '師事', '好敵手', '好敵手'],\n            ['友情', '友情', '忠誠', '忠誠', '恐怖', '恐怖'],\n            ['執着', '執着', '軽蔑', '軽蔑', '憎悪', '憎悪'],\n          ]\n        ),\n        'EXPO_A' => DiceTable::Table.new(\n          '暴露表',\n          '1D6',\n          [\n            '噂になるがすぐ忘れられる',\n            '都市伝説として処理される',\n            'ワイドショーをにぎわす',\n            'シナリオ中［迫害状態］になる',\n            '絆の対象ひとりに正体が知られる',\n            '魔獣化暴露表へ'\n          ]\n        ),\n        'EXPO_B' => DiceTable::Table.new(\n          '魔獣化暴露表',\n          '1D6',\n          [\n            'トンデモ業界の伝説になる',\n            'シナリオ中［迫害状態］になる',\n            'シナリオ中［迫害状態］になる',\n            '絆の対象ひとりに正体が知られる',\n            '絆の対象ひとりに正体が知られる',\n            '自衛隊退魔部隊×2D6体の襲撃'\n          ]\n        ),\n        'EXPO_I' => DiceTable::Table.new(\n          'アイドル専用暴露表',\n          '1D6',\n          [\n            '愉快な伝説として人気になる',\n            'ワイドショーをにぎわす',\n            '炎上。シナリオ中［迫害状態］',\n            '所属事務所に2D6時間説教される',\n            '絆の対象ひとりに正体が知られる',\n            'アイドル専用魔獣化暴露表へ'\n          ]\n        ),\n        'EXPO_J' => DiceTable::Table.new(\n          'アイドル専用魔獣化暴露表',\n          '1D6',\n          [\n            'シナリオ中［迫害状態］になる',\n            'シナリオ中［迫害状態］になる',\n            '絆の対象ひとりに正体が知られる',\n            '事務所から契約を解除される',\n            '絆の対象ひとりに正体が知られる',\n            '1D6本のレギュラー番組を失う'\n          ]\n        ),\n        'FACE_A' => DiceTable::Table.new(\n          '正体判明チャートA',\n          '1D6',\n          [\n            'あなたを受け入れてくれる',\n            'あなたを受け入れてくれる',\n            '絆が（拒絶）に書き換わる',\n            '絆がエゴに書き換わる',\n            '気絶しその事実を忘れる',\n            '精神崩壊する'\n          ]\n        ),\n        'FACE_B' => DiceTable::Table.new(\n          '正体判明チャートB',\n          '1D6',\n          [\n            'あなたを受け入れてくれる',\n            '狂乱し攻撃してくる',\n            '退場。その場から逃亡。暴露表へ',\n            '絆がエゴに書き換わる',\n            '精神崩壊する',\n            '精神崩壊する'\n          ]\n        ),\n        'FACE_C' => DiceTable::Table.new(\n          '正体判明チャートC',\n          '1D6',\n          [\n            'あなたを受け入れてくれる',\n            '退場。その場から逃亡。暴露表へ',\n            '退場。その場から逃亡。暴露表へ',\n            '絆がエゴに書き換わる',\n            '精神崩壊する',\n            '精神崩壊する'\n          ]\n        ),\n      }.freeze\n\n      register_prefix('\\d+BB', '\\d+R6', TABLES.keys)\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:BeastBindTrinity>", "initialize", "command", "@d66_sort_type", "D66SortType::ASC", "D66SortType", "<class:BBCommand>", "@command", "parse", "roll", "randomizer", "@parse_error", "@randomizer", "dice_list_org", "roll_with_dice_pool", "empty?", "dice_list_filtered", "map", "block in roll", "dice", "block (2 levels) in roll", "@dice_value_lower_limit", "max", "sort", "@dice_total", "last", "2", "inject", "0", "total", "calc_total", "dice_list_org_str", "join", "result", "result_compare", "critical=", "critical?", "fumble=", "fumble?", "dice_status", "result_str", "success?", "failure?", "sequence", "command_expr", "interim_expr", "to_s", "compact", "text=", "private", "m", "match", "@dice_num", "[]", "1", "to_i", "@modify_number", "ArithmeticEvaluator", "eval", "@critical", "parse_critical", "3", "4", "@keep_value_on_fumble", "5", "nil?", "!", "@fumble", "parse_fumble", "6", "@dice_pool", "7", "split", "to_proc", ">", "size", "pop", "-", "8", "@cmp_op", "Normalize", "comparison_operator", "9", "@target_number", "10", "humanity", "atmark", "99", "atmark_value", "critical", "+", "critical_from_humanity", "12", "min", "<=", "20", "40", "11", "sharp", "sharp_value", "dice_times", "dice_list", "roll_barabara", "modifier", "Format", "expr", ">=", "<", "send", "Result", "success", "failure", "new", "eval_game_system_specific_command", "ret", "roll_tables", "TABLES", "bb", "BBCommand", "DiceTable::D66GridTable", "DiceTable", "DiceTable::Table", "freeze", "register_prefix", "keys", "Base"], :mappings=>"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"}}]}