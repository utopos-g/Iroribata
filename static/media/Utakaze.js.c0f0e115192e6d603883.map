{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Utakaze.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Utakaze < Base\n      # ゲームシステムの識別子\n      ID = 'Utakaze'\n\n      # ゲームシステム名\n      NAME = 'ウタカゼ'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'うたかせ'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・行為判定ロール（nUK）\n          n個のサイコロで行為判定ロール。ゾロ目の最大個数を成功レベルとして表示。nを省略すると2UK扱い。\n          例）3UK ：サイコロ3個で行為判定\n          例）UK  ：サイコロ2個で行為判定\n        ・難易度付き行為判定ロール（nUK>=t）\n          tに難易度を指定した行為判定ロール。\n          成功レベルと難易度tを比べて成否を判定します。\n          例）6UK>=3 ：サイコロ6個で行為判定して、成功レベル3が出れば成功。\n        ・クリティカルコール付き行為判定ロール（nUK@c or nUKc）\n          cに「龍のダイス目」を指定した行為判定ロール。\n          ゾロ目ではなく、cと同じ値の出目数x2が成功レベルとなります。難易度の指定も可能です。\n          例）3UK@5 ：龍のダイス「月」でクリティカルコール宣言したサイコロ3個の行為判定\n         ・対抗判定ロール(nUR[@c], nUO[@c]) n:ダイス数 c:クリティカルコール\n         　行為判定ロールと同様にロールするが、最期に成功レベルとセット数から求めたマジックナンバーが表示される。\n         　マジックナンバーの大きいものが成功、同値は引き分け。\n         　ダイスは18個まで対応。\n      MESSAGETEXT\n\n      register_prefix('\\d*U[KRO]')\n\n      def eval_game_system_specific_command(command)\n        debug('eval_game_system_specific_command command', command)\n\n        check_roll(command) ||\n          opposed_roll(command)\n      end\n\n      private\n\n      DRAGON_DICE_NAME = {\n        1 => \"風\",\n        2 => \"雨\",\n        3 => \"雲\",\n        4 => \"影\",\n        5 => \"月\",\n        6 => \"歌\"\n      }.freeze\n\n      def check_roll(command)\n        m = /^(\\d+)?UK(@?(\\d))?(>=(\\d+))?$/i.match(command)\n        return nil unless m\n\n        base = (m[1] || 2).to_i\n        crit = m[3].to_i\n        diff = m[5].to_i\n\n        base = getValue(base)\n        crit = getValue(crit)\n\n        return nil if base < 1\n\n        crit = 6 if crit > 6\n\n        dice_list = @randomizer.roll_barabara(base, 6).sort\n        result = get_roll_result(dice_list, crit, diff)\n\n        sequence = [\n          command,\n          \"(\#{base}D6)\",\n          \"[\#{dice_list.join(',')}]\",\n          result.text\n        ]\n        result.text = sequence.join(\" ＞ \")\n\n        return result\n      end\n\n      def get_roll_result(diceList, crit, diff)\n        success, maxnum, setCount = getSuccessInfo(diceList, crit)\n\n        sequence = []\n\n        if isDragonDice(crit)\n          sequence.push(\"龍のダイス「\#{DRAGON_DICE_NAME[crit]}」(\#{crit})を使用\")\n        end\n\n        if success\n          sequence.push(\"成功レベル:\#{maxnum} (\#{setCount}セット)\")\n        else\n          sequence.push(\"失敗\")\n          return Result.failure(sequence.join(\" ＞ \"))\n        end\n\n        if diff == 0\n          return Result.success(sequence.join(\" ＞ \")) # 難易度なしでも成功として扱う\n        elsif maxnum >= diff\n          sequence.push(\"成功\")\n          return Result.success(sequence.join(\" ＞ \"))\n        else\n          sequence.push(\"失敗\")\n          return Result.failure(sequence.join(\" ＞ \"))\n        end\n      end\n\n      # 対抗判定\n      def opposed_roll(command)\n        m = /^(\\d+)?U[R|O](@?(\\d))?$/i.match(command)\n        return nil unless m\n\n        base = (m[1] || 2).to_i\n        crit = m[3].to_i\n\n        base = getValue(base)\n        crit = getValue(crit)\n\n        return nil if base < 1 || base > 18\n\n        crit = 6 if crit > 6\n\n        dice_list = @randomizer.roll_barabara(base, 6).sort\n        result = get_opposed_roll_result(dice_list, crit)\n\n        sequence = [\n          command,\n          \"(\#{base}D6)\",\n          \"[\#{dice_list.join(',')}]\",\n          result.text\n        ]\n        result.text = sequence.join(\" ＞ \")\n\n        return result\n      end\n\n      def get_opposed_roll_result(diceList, crit)\n        success, maxnum, setCount = getSuccessInfo(diceList, crit)\n\n        sequence = []\n\n        if isDragonDice(crit)\n          sequence.push(\"龍のダイス「\#{DRAGON_DICE_NAME[crit]}」(\#{crit})を使用\")\n        end\n\n        if success\n          sequence.push(\"成功レベル:\#{maxnum} (\#{setCount}セット)\")\n          sequence.push(\"(\" + format(\"%#02d%#1d\", maxnum, setCount) + \")\")\n          return Result.success(sequence.join(\" ＞ \")) # 出力上は成功として扱う\n        else\n          sequence.push(\"(000)\")\n          return Result.failure(sequence.join(\" ＞ \"))\n        end\n      end\n\n      def getSuccessInfo(diceList, crit)\n        debug(\"checkSuccess diceList, crit\", diceList, crit)\n\n        diceCountHash = getDiceCountHash(diceList, crit)\n        debug(\"diceCountHash\", diceCountHash)\n\n        maxnum = 0\n        successDiceList = []\n        countThreshold = (isDragonDice(crit) ? 1 : 2)\n\n        diceCountHash.each do |dice, count|\n          maxnum = count if count > maxnum\n          successDiceList << dice if count >= countThreshold\n        end\n\n        debug(\"successDiceList\", successDiceList)\n\n        if successDiceList.size <= 0\n          # 失敗：ゾロ目無し(全部違う)\n          return false, 0, 0\n        end\n\n        # 竜のダイスの場合\n        maxnum *= 2 if isDragonDice(crit)\n\n        # 成功：ゾロ目あり\n        return true, maxnum, successDiceList.size\n      end\n\n      # 各ダイスの個数を数えてHashにする\n      def getDiceCountHash(dice_list, critical)\n        dice_list\n          .select { |dice| isNomalDice(critical) || dice == critical }\n          .group_by(&:itself)\n          .transform_values(&:size)\n      end\n\n      def isNomalDice(crit)\n        !isDragonDice(crit)\n      end\n\n      def isDragonDice(crit)\n        (crit != 0)\n      end\n\n      def getValue(number)\n        return 0 if number > 100\n\n        return number\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Utakaze>", "self", "register_prefix", "eval_game_system_specific_command", "command", "debug", "$ret_or_1", "check_roll", "opposed_roll", "private", "1", "2", "3", "4", "5", "6", "freeze", "m", "match", "base", "[]", "to_i", "crit", "diff", "getValue", "<", ">", "dice_list", "@randomizer", "roll_barabara", "sort", "result", "get_roll_result", "sequence", "join", "text", "text=", "diceList", "getSuccessInfo", "success", "maxnum", "setCount", "isDragonDice", "push", "DRAGON_DICE_NAME", "Result", "failure", "0", ">=", "18", "get_opposed_roll_result", "+", "format", "diceCountHash", "getDiceCountHash", "successDiceList", "countThreshold", "each", "block in getSuccessInfo", "dice", "count", "block (2 levels) in getSuccessInfo", "<<", "<=", "size", "*", "critical", "transform_values", "group_by", "select", "block in getDiceCountHash", "block (2 levels) in getDiceCountHash", "isNomalDice", "==", "to_proc", "!", "!=", "number", "100", "Base"], :mappings=>"AAAAA,2BAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAEE,8BAAKA,SAAL;QAGA,gCAAOA,MAAP;QAGA,oCAAWA,MAAX;QAGA,wCACNA,iBADqB,GAErBA,uDAFqB,GAGrBA,wBAHqB,GAIrBA,wBAJqB,GAKrBA,yBALqB,GAMrBA,wBANqB,GAOrBA,6BAPqB,GAQrBA,2CARqB,GASrBA,sCATqB,GAUrBA,6BAVqB,GAWrBA,iDAXqB,GAYrBA,gDAZqB,GAarBA,kDAbqB,GAcrBA,yDAdqB,GAerBA,gCAfqB,GAgBrBA,kBAhBM;QAmBAC,IAAAC,iBAAAA,CAAgBF,YAAhBE;;AAEAC,QAAAA,iDAAAA,6CAAsCC,OAAtCD;AAAAA,UAAAA;;;UACEF,IAAAI,OAAAA,CAAMF,2CAAN,EAAmDC,OAAnDC;UAEA,IAAA,QAAAC,CAAAA,YAAAL,IAAAM,YAAAA,CAAWH,OAAXG,CAAAD,CAAA,CAAA;YAAAH,OAAA;UAAA;YACEA,OAAAF,IAAAO,cAAAA,CAAaJ,OAAbI;UADF;QAHFL,CAAAA;QAOAF,IAAAQ,SAAAA,CAAAA;QAEA,4CAAmB,MACjBC,CADiB,EACZV,GADY,EAEjBW,CAFiB,EAEZX,GAFY,EAGjBY,CAHiB,EAGZZ,GAHY,EAIjBa,CAJiB,EAIZb,GAJY,EAKjBc,CALiB,EAKZd,GALY,EAMjBe,CANiB,EAMZf,GANY,CAOlBgB,QAAAA,CAAAA,CAPD;;AASAT,QAAAA,0BAAAA,sBAAeH,OAAfG;AAAAA,UAAAA;;;UACEU,IAAI,gCAAgCC,OAAAA,CAAOd,OAAPc;UACpC,KAAA,QAAkBD,CAAlB,CAAA;YAAA,OAAO;UAAP;UAEAE,OAAQ,CAAA,QAAAb,CAAAA,YAAAW,CAACG,OAAAA,CAACV,CAADU,CAADd,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAQK,CAAR,CAAA,CAAUU,MAAAA,CAAAA;UAClBC,OAAOL,CAACG,OAAAA,CAACR,CAADQ,CAAGC,MAAAA,CAAAA;UACXE,OAAON,CAACG,OAAAA,CAACN,CAADM,CAAGC,MAAAA,CAAAA;UAEXF,OAAOlB,IAAAuB,UAAAA,CAASL,IAATK;UACPF,OAAOrB,IAAAuB,UAAAA,CAASF,IAATE;UAEP,IAAA,QAAmBC,OAALN,IAAKM,EAAEf,CAAFe,CAAnB,CAAA;YAAA,OAAO;UAAP;UAEA,IAAA,QAAiBC,OAALJ,IAAKI,EAAEX,CAAFW,CAAjB,CAAA;YAAAJ,OAAOP;UAAP;UAEAY,YAAYC,eAAWC,eAAAA,CAAeV,IAA1B,EAAgCJ,CAArBc,CAAuBC,MAAAA,CAAAA;UAC9CC,SAAS9B,IAAA+B,iBAAAA,CAAgBL,SAAhB,EAA2BL,IAA3B,EAAiCC,IAAjCS;UAETC,WAAW,CACT7B,OADS,EAERG,GAAD,GAAA,CAAIY,IAAJ,CAAA,GAASZ,KAFA,EAGRA,GAAD,GAAA,CAAIoB,SAASO,MAAAA,CAAM3B,GAAN2B,CAAb,CAAA,GAAwB3B,GAHf,EAITwB,MAAMI,MAAAA,CAAAA,CAJG;UAMXJ,MAAMK,UAAAA,CAAQH,QAAQC,MAAAA,CAAM3B,KAAN2B,CAAhBE;UAEN,OAAOL;QA1BTxB,CAAAA;;AA6BAyB,QAAAA,+BAAAA,2BAAoBK,QAAD,EAAWf,IAAX,EAAiBC,IAApCS;AAAAA,UAAAA;;;UACE,KAA4B/B,IAAAqC,gBAAAA,CAAeD,QAAf,EAAyBf,IAAzBgB,CAA5B,kBAAA,EAAAC,CAAAA,UAAA,6BAAAA,CAAA,EAASC,CAAAA,SAAT,6BAASA,CAAT,EAAiBC,CAAAA,WAAjB,6BAAiBA,CAAjB;UAEAR,WAAW;UAEX,IAAA,QAAGhC,IAAAyC,cAAAA,CAAapB,IAAboB,CAAH,CAAA;YACET,QAAQU,MAAAA,CAAOX,QAAD,GAAA,CAASY,sBAAgBxB,OAAAA,CAACE,IAADF,CAAzB,CAAA,GAAgCY,IAAhC,GAAA,CAAoCV,IAApC,CAAA,GAAyCU,MAA/CW;UADV;UAIA,IAAA,QAAGJ,OAAH,CAAA;YACEN,QAAQU,MAAAA,CAAOX,QAAD,GAAA,CAASQ,MAAT,CAAA,GAAgBR,IAAhB,GAAA,CAAoBS,QAApB,CAAA,GAA6BT,MAAnCW;UADV;;YAGEV,QAAQU,MAAAA,CAAMX,IAANW;YACR,OAAOE,YAAMC,SAAAA,CAASb,QAAQC,MAAAA,CAAMF,KAANE,CAAjBY;UAJf;UAOA,IAAA,MAAGvB,IAAH,EAAWwB,CAAX,CAAA;YACE,OAAOF,YAAMN,SAAAA,CAASN,QAAQC,MAAAA,CAAMF,KAANE,CAAjBK;UADf,OAEA,IAAA,QAAaS,OAAPR,MAAOQ,EAAGzB,IAAHyB,CAAb,CAAA;;YACEf,QAAQU,MAAAA,CAAMX,IAANW;YACR,OAAOE,YAAMN,SAAAA,CAASN,QAAQC,MAAAA,CAAMF,KAANE,CAAjBK;UAFf;;YAIEN,QAAQU,MAAAA,CAAMX,IAANW;YACR,OAAOE,YAAMC,SAAAA,CAASb,QAAQC,MAAAA,CAAMF,KAANE,CAAjBY;UALf;QAlBFd,CAAAA;;AA4BAxB,QAAAA,4BAAAA,wBAAiBJ,OAAjBI;AAAAA,UAAAA;;;UACES,IAAI,0BAA0BC,OAAAA,CAAOd,OAAPc;UAC9B,KAAA,QAAkBD,CAAlB,CAAA;YAAA,OAAO;UAAP;UAEAE,OAAQ,CAAA,QAAAb,CAAAA,YAAAW,CAACG,OAAAA,CAACV,CAADU,CAADd,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAQK,CAAR,CAAA,CAAUU,MAAAA,CAAAA;UAClBC,OAAOL,CAACG,OAAAA,CAACR,CAADQ,CAAGC,MAAAA,CAAAA;UAEXF,OAAOlB,IAAAuB,UAAAA,CAASL,IAATK;UACPF,OAAOrB,IAAAuB,UAAAA,CAASF,IAATE;UAEP,IAAc,CAAA,QAAKC,OAALN,IAAKM,EAAEf,CAAFe,CAAL,CAAA,IAAA,CAAA,QAAiBC,OAALP,IAAKO,EAAEuB,EAAFvB,CAAjB,CAAA,CAAA,CAAd;YAAA,OAAO;UAAP;UAEA,IAAA,QAAiBA,OAALJ,IAAKI,EAAEX,CAAFW,CAAjB,CAAA;YAAAJ,OAAOP;UAAP;UAEAY,YAAYC,eAAWC,eAAAA,CAAeV,IAA1B,EAAgCJ,CAArBc,CAAuBC,MAAAA,CAAAA;UAC9CC,SAAS9B,IAAAiD,yBAAAA,CAAwBvB,SAAxB,EAAmCL,IAAnC4B;UAETjB,WAAW,CACT7B,OADS,EAERI,GAAD,GAAA,CAAIW,IAAJ,CAAA,GAASX,KAFA,EAGRA,GAAD,GAAA,CAAImB,SAASO,MAAAA,CAAM1B,GAAN0B,CAAb,CAAA,GAAwB1B,GAHf,EAITuB,MAAMI,MAAAA,CAAAA,CAJG;UAMXJ,MAAMK,UAAAA,CAAQH,QAAQC,MAAAA,CAAM1B,KAAN0B,CAAhBE;UAEN,OAAOL;QAzBTvB,CAAAA;;AA4BA0C,QAAAA,uCAAAA,mCAA4Bb,QAAD,EAAWf,IAAtC4B;AAAAA,UAAAA;;;UACE,KAA4BjD,IAAAqC,gBAAAA,CAAeD,QAAf,EAAyBf,IAAzBgB,CAA5B,kBAAA,EAAAC,CAAAA,UAAA,6BAAAA,CAAA,EAASC,CAAAA,SAAT,6BAASA,CAAT,EAAiBC,CAAAA,WAAjB,6BAAiBA,CAAjB;UAEAR,WAAW;UAEX,IAAA,QAAGhC,IAAAyC,cAAAA,CAAapB,IAAboB,CAAH,CAAA;YACET,QAAQU,MAAAA,CAAOO,QAAD,GAAA,CAASN,sBAAgBxB,OAAAA,CAACE,IAADF,CAAzB,CAAA,GAAgC8B,IAAhC,GAAA,CAAoC5B,IAApC,CAAA,GAAyC4B,MAA/CP;UADV;UAIA,IAAA,QAAGJ,OAAH,CAAA;;YACEN,QAAQU,MAAAA,CAAOO,QAAD,GAAA,CAASV,MAAT,CAAA,GAAgBU,IAAhB,GAAA,CAAoBT,QAApB,CAAA,GAA6BS,MAAnCP;YACRV,QAAQU,MAAAA,CAAkDQ,SAAxCA,SAAJD,GAAIC,EAAElD,IAAAmD,QAAAA,CAAOF,WAAP,EAAoBV,MAApB,EAA4BC,QAA5BW,CAAFD,CAAwCA,EAAED,GAAFC,CAAlDR;YACR,OAAOE,YAAMN,SAAAA,CAASN,QAAQC,MAAAA,CAAMgB,KAANhB,CAAjBK;UAHf;;YAKEN,QAAQU,MAAAA,CAAMO,OAANP;YACR,OAAOE,YAAMC,SAAAA,CAASb,QAAQC,MAAAA,CAAMgB,KAANhB,CAAjBY;UANf;QATFI,CAAAA;;AAmBAZ,QAAAA,8BAAAA,0BAAmBD,QAAD,EAAWf,IAA7BgB;AAAAA,UAAAA;;;UACErC,IAAAI,OAAAA,CAAMiC,6BAAN,EAAqCD,QAArC,EAA+Cf,IAA/CjB;UAEAgD,gBAAgBpD,IAAAqD,kBAAAA,CAAiBjB,QAAjB,EAA2Bf,IAA3BgC;UAChBrD,IAAAI,OAAAA,CAAMiC,eAAN,EAAuBe,aAAvBhD;UAEAmC,SAASO;UACTQ,kBAAkB;UAClBC,iBAAkB,CAAA,QAAAvD,IAAAyC,cAAAA,CAAapB,IAAboB,CAAA,CAAA,GAAA,CAAqBhC,CAArB,IAAA,CAAyBC,CAAzB,CAAA;UAEL8C,MAAbJ,aAAaI,QAAAA,EAAAA,EAAAA,EAAbC,aAAuBC,IAAD,EAAOC,KAA7BF;;YAAuB;YAAM;YAC3B,IAAA,QAAwBhC,OAANkC,KAAMlC,EAAEc,MAAFd,CAAxB,CAAA;cAAAc,SAASoB;YAAT;YACA,IAAA,QAAiCZ,OAANY,KAAMZ,EAAGQ,cAAHR,CAAjC,CAAA;cAAAa,OAAAN,eAAgBO,OAAAA,CAAGH,IAAHG;YAAhB;cA1KVD,OAAA;YA0KU,EAFFH,CAAaD;UAKbxD,IAAAI,OAAAA,CAAMiC,iBAAN,EAAyBiB,eAAzBlD;UAEA,IAAA,QAAwB0D,OAArBR,eAAeS,MAAAA,CAAAA,CAAMD,EAAGhB,CAAHgB,CAAxB,CAAA;YAEE,OAAA,CAAO,KAAP,EAAchB,CAAd,EAAiBA,CAAjB;UAFF;UAMA,IAAA,QAAe9C,IAAAyC,cAAAA,CAAapB,IAAboB,CAAf,CAAA;YAAAF,SAAOyB,UAAPzB,MAAOyB,EAAGtD,CAAHsD;UAAP;UAGA,OAAA,CAAO,IAAP,EAAazB,MAAb,EAAqBe,eAAeS,MAAAA,CAAAA,CAApC;QA1BF1B,CAAAA;;AA8BAgB,QAAAA,gCAAAA,4BAAqB3B,SAAD,EAAYuC,QAAhCZ;AAAAA,UAAAA;;UACEA,OAGEa,MADAC,MADAC,MADF1C,SACE0C,UAAAA,EAAAA,EAAAA,EADFC,aACaX,IADbW,EAAAC;;;YACa;YAAM,IAAA,QAAAjE,CAAAA,YAAAL,IAAAuE,aAAAA,CAAYN,QAAZM,CAAAlE,CAAA,CAAA;cAAAiE,OAAA;YAAA;cAAyBA,OAAAZ,IAAKc,OAAAA,CAAGP,QAAHO;YAA9B,EADnBH,CAAAA,GAAAA,SAAAA,CACED,CACAD,YAAAA,EAAAA,EAAAA,EAAW,QAADM,SAAAA,CAAAA,CAAVN,CACAD,oBAAAA,EAAAA,EAAAA,EAAmB,MAADO,SAAAA,CAAAA,CAAlBP;QAJJb,CAAAA;;AAOAkB,QAAAA,2BAAAA,uBAAgBlD,IAAhBkD;AAAAA,UAAAA;;UACEA,OAACvE,IAAAyC,cAAAA,CAAapB,IAAboB,CAADiC,MAAAA,CAAAA;QADFH,CAAAA;;AAIA9B,QAAAA,4BAAAA,wBAAiBpB,IAAjBoB;AAAAA;UACGA,OAAApB,IAAKsD,OAAAA,CAAG7B,CAAH6B;QADRlC,CAAAA;QAIA1C,OAAAwB,wBAAAA,oBAAaqD,MAAbrD;AAAAA;;UACE,IAAA,QAAmBE,OAAPmD,MAAOnD,EAAEoD,GAAFpD,CAAnB,CAAA;YAAA,OAAOqB;UAAP;UAEA,OAAO8B;QAHTrD,CAAAA;MAvMFxB,GAAAA,WAAAA,EAAgB+E,UAAhB/E;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}]}