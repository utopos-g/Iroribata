{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/EarthDawn.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class EarthDawn < Base\n      # ゲームシステムの識別子\n      ID = 'EarthDawn'\n\n      # ゲームシステム名\n      NAME = 'アースドーン'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'ああすとおん'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ステップダイス　(xEn+k)\n        ステップx、目標値n(省略可能）、カルマダイスk(D2-D20)でステップダイスをロールします。\n        振り足しも自動。\n        例）9E　10E8　10E+D12\n      INFO_MESSAGE_TEXT\n\n      register_prefix('\\d+e')\n\n      def initialize(command)\n        super(command)\n\n        @sort_add_dice = true\n      end\n\n      def eval_game_system_specific_command(command)\n        return ed_step(command)\n      end\n\n      # アースドーンステップ表\n      def ed_step(str)\n        output = getStepResult(str)\n\n        return output\n      end\n\n      def getStepResult(str)\n        return nil unless /(\\d+)E(\\d+)?(\\+)?(\\d+)?(d\\d+)?/i =~ str\n\n        stepTotal = 0\n        @isFailed = true\n\n        step = Regexp.last_match(1).to_i # ステップ\n        targetNumber = 0 # 目標値\n        hasKarmaDice = false # カルマダイスの有無\n        karmaDiceCount = 0 # カルマダイスの個数又は修正\n        karmaDiceType = 0 # カルマダイスの種類\n\n        # 空値があった時の為のばんぺいくんRX\n        if step > 40\n          step = 40\n        end\n\n        if Regexp.last_match(2)\n          targetNumber = Regexp.last_match(2).to_i\n          targetNumber = 42 if targetNumber > 43\n        end\n\n        hasKarmaDice = Regexp.last_match(3).to_i if Regexp.last_match(3)\n        karmaDiceCount = Regexp.last_match(4).to_i if Regexp.last_match(4)\n        karmaDiceType = Regexp.last_match(5) if Regexp.last_match(5)\n\n        return nil if targetNumber < 0\n\n        stable = getStepTable()\n\n        nmod = stable[0][step - 1]\n        d20step = stable[1][step - 1]\n        d12step = stable[2][step - 1]\n        d10step = stable[3][step - 1]\n        d8step = stable[4][step - 1]\n        d6step = stable[5][step - 1]\n        d4step = stable[6][step - 1]\n\n        if hasKarmaDice\n          case karmaDiceType\n          when /d20/i\n            d20step += karmaDiceCount\n          when /d12/i\n            d12step += karmaDiceCount\n          when /d10/i\n            d10step += karmaDiceCount\n          when /d8/i\n            d8step  += karmaDiceCount\n          when /d6/i\n            d6step  += karmaDiceCount\n          when /d4/i\n            d4step  += karmaDiceCount\n          else\n            nmod += karmaDiceCount\n          end\n        end\n\n        @string = \"\"\n\n        debug('d20step, d12step, d10step, d8step, d6step, d4step', d20step, d12step, d10step, d8step, d6step, d4step)\n\n        stepTotal += rollStep(20, d20step)\n        stepTotal += rollStep(12, d12step)\n        stepTotal += rollStep(10, d10step)\n        stepTotal += rollStep(8,  d8step)\n        stepTotal += rollStep(6,  d6step)\n        stepTotal += rollStep(4,  d4step)\n\n        if nmod > 0 # 修正分の適用\n          @string += \"+\"\n        end\n\n        if nmod != 0\n          @string += nmod.to_s\n          stepTotal += nmod\n        end\n\n        # ステップ判定終了\n        @string += \" ＞ \#{stepTotal}\"\n\n        output = \"ステップ\#{step} ＞ \#{@string}\"\n        return output if targetNumber == 0\n\n        # 結果判定\n        @string += ' ＞ '\n\n        excelentSuccessNumber = stable[7][targetNumber - 1]\n        superSuccessNumber = stable[8][targetNumber - 1]\n        goodSuccessNumber = stable[9][targetNumber - 1]\n        failedNumber = stable[11][targetNumber - 1]\n\n        if @isFailed\n          @string += '自動失敗'\n        elsif stepTotal >= excelentSuccessNumber\n          @string += '最良成功'\n        elsif stepTotal >= superSuccessNumber\n          @string += '優成功'\n        elsif stepTotal >= goodSuccessNumber\n          @string += '良成功'\n        elsif stepTotal >= targetNumber\n          @string += '成功'\n        elsif stepTotal < failedNumber\n          @string += '大失敗'\n        else\n          @string += '失敗'\n        end\n\n        output = \"ステップ\#{step}>=\#{targetNumber} ＞ \#{@string}\"\n\n        return output\n      end\n\n      def getStepTable\n        # 表      1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 34x 3x 4x 5x 6x 7x 8x 9x10x11x12x13x\n\n        mod = [-2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]\n        d20 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]\n        d12 = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,]\n        d10 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 2, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 3, 2, 1, 1, 1, 2, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 2, 1,]\n        d8  = [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0,]\n        d6  = [0, 0, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0,]\n        d4  = [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]\n        exsuc = [6, 8, 10, 12, 14, 17, 19, 20, 22, 24, 25, 27, 29, 32, 33, 35, 37, 38, 39, 41, 42, 44, 45, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 62, 64, 65, 67, 68, 70, 71, 72,]\n        ssuc = [4, 6, 8, 10, 11, 13, 15, 16, 18, 19, 21, 22, 24, 26, 27, 29, 30, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62,]\n        gsuc = [2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54,]\n        nsuc = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,]\n        fsuc = [0, 1, 1, 1, 1, 2, 2, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 11, 12, 13, 13, 14, 15, 16, 17, 18, 18, 18, 20, 21, 22, 23, 23, 24, 25, 26, 26, 27, 28, 29, 30,]\n\n        stable = [mod, d20, d12, d10, d8, d6, d4, exsuc, ssuc, gsuc, nsuc, fsuc]\n\n        return stable\n      end\n\n      # 41以上のステップの為の配列です。\n      # 以下のようなルールでダイスを増やしています。より正しいステップ計算法をご存知の方は、\n      # どうぞそちらに合せて調整して下さい。\n      # 　基本：　2d20+d10+d8\n      # 　これを仮にステップ34xとしています。\n      # 　一般式としては、ステップxxのダイスは、\n\n      # 　 ステップ34xのダイス\n      # + [(xx-45)/11]d20\n      # + ステップ[(xx-34)を11で割った余り+3]のダイス\n\n      def rollStep(diceType, diceCount)\n        debug('rollStep diceType, diceCount, @string', diceType, diceCount, @string)\n\n        stepTotal = 0\n        return stepTotal unless diceCount > 0\n\n        # diceぶんのステップ判定\n\n        @string += \"+\" unless @string.empty?\n        @string += \"\#{diceCount}d\#{diceType}[\"\n        debug('rollStep @string', @string)\n\n        diceCount.times do |i|\n          dice_now = @randomizer.roll_once(diceType)\n\n          if dice_now != 1\n            @isFailed = false\n          end\n\n          dice_in = dice_now\n\n          while dice_now == diceType\n            dice_now = @randomizer.roll_once(diceType)\n\n            dice_in += dice_now\n          end\n\n          stepTotal += dice_in\n\n          @string += ',' if i != 0\n          @string += dice_in.to_s\n        end\n\n        @string += \"]\"\n\n        return stepTotal\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:GameSystem>", "<class:EarthDawn>", "self", "register_prefix", "initialize", "command", "@sort_add_dice", "eval_game_system_specific_command", "ed_step", "str", "output", "getStepResult", "=~", "stepTotal", "0", "@isFailed", "step", "Regexp", "last_match", "1", "to_i", "targetNumber", "hasKarmaDice", "karmaDiceCount", "karmaDiceType", ">", "40", "2", "43", "42", "3", "4", "5", "<", "stable", "getStepTable", "nmod", "[]", "-", "d20step", "d12step", "d10step", "d8step", "d6step", "d4step", "6", "$ret_or_1", "+", "@string", "debug", "rollStep", "20", "12", "10", "8", "to_s", "excelentSuccessNumber", "7", "superSuccessNumber", "goodSuccessNumber", "9", "failedNumber", "11", ">=", "mod", "d20", "d12", "d10", "d8", "d6", "d4", "exsuc", "ssuc", "gsuc", "nsuc", "fsuc", "diceType", "diceCount", "empty?", "times", "block in rollStep", "i", "block (2 levels) in rollStep", "dice_now", "@randomizer", "roll_once", "dice_in", "Base"], :mappings=>"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"}}, {:offset=>{:line=>217, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/EarthDawn4.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire 'bcdice/game_system/EarthDawn'\n\nmodule BCDice\n  module GameSystem\n    class EarthDawn4 < EarthDawn\n      # ゲームシステムの識別子\n      ID = 'EarthDawn4'\n\n      # ゲームシステム名\n      NAME = 'アースドーン4版'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'ああすとおん4'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ステップダイス　(xEnK)\n        ステップx、目標値n(省略可能）でステップダイスをロール。\n        カルマダイス使用時は末尾にKを追加（省略可能）\n        例）ステップ10：10E\n        　　ステップ10、目標値8：10E8\n        　　ステップ10、目標値8、カルマダイス：10E8K\n      INFO_MESSAGE_TEXT\n\n      register_prefix('\\d+e')\n\n      def initialize(command)\n        super(command)\n\n        @sort_add_dice = true\n        @calcText = ''\n      end\n\n      def eval_game_system_specific_command(command)\n        return ed_step(command)\n      end\n\n      # アースドーンステップ表\n      def ed_step(str)\n        output = getStepResult(str)\n\n        return output\n      end\n\n      def getStepResult(str)\n        stepText, calcText, stepTotal, targetNumber = getStepResultInfos(str)\n\n        return nil if stepText.nil?\n\n        if targetNumber == 0\n          output = \"\#{stepText} ＞ \#{calcText} ＞ \#{stepTotal}\"\n          return output\n        end\n\n        # 結果判定\n        successText = getSuccess(targetNumber, stepTotal)\n\n        output = \"\#{stepText}>=\#{targetNumber} ＞ \#{calcText} ＞ \#{stepTotal} ＞ \#{successText}\"\n\n        return output\n      end\n\n      def getStepResultInfos(str)\n        steps = []\n        calcs = []\n        totals = []\n        target = 0\n\n        while  !str.nil? && !str.empty?\n\n          debug(\"=====>!! str\", str)\n\n          step, calc, total, value, nextText = getStepResultInfo(str)\n          debug(\"=====> step\", step)\n\n          return nil if step.nil?\n\n          steps << step\n          calcs << calc\n          totals << total\n          target = value unless value == 0\n\n          debug(\"=====> nextText\", nextText)\n          break if nextText == str\n\n          str = nextText\n        end\n\n        stepText = steps.join(\"+\")\n        calcText = calcs.join(\")+(\")\n        stepTotal = totals.inject { |sum, i| sum + i }\n\n        calcText = \"(\" + calcText + \")\" if calcs.size > 1\n        calcText += \" ＞ (\#{totals.join('+')})\" if totals.size > 1\n\n        return stepText, calcText, stepTotal, target\n      end\n\n      def getStepResultInfo(str)\n        return nil unless /^(\\d+)E(\\d+)?(K)?(\\+\\d+$)?(\\+(.*))?/i =~ str\n\n        stepTotal = 0\n        @isFailed = true\n\n        step = Regexp.last_match(1).to_i # ステップ\n        targetNumber = Regexp.last_match(2).to_i # 目標値\n        return nil if targetNumber < 0\n\n        hasKarmaDice = !Regexp.last_match(3).nil? # カルマダイスの有無\n        diceModify = Regexp.last_match(4).to_i\n        nextText = Regexp.last_match(6)\n\n        stepInfo = getStepInfo(step)\n        debug('stepInfo', stepInfo)\n\n        @calcText = \"\"\n\n        diceTypes = [20, 12, 10, 8, 6, 4]\n        diceTypes.each do |type|\n          stepTotal += rollStep(type, stepInfo.shift)\n        end\n        modify = stepInfo.shift\n\n        stepTotal += rollStep(6, 1) if hasKarmaDice\n\n        @calcText += (getModifyText(modify) + getModifyText(diceModify))\n        stepTotal += (modify + diceModify)\n\n        stepText = \"ステップ\#{step}\"\n\n        return stepText, @calcText, stepTotal, targetNumber, nextText\n      end\n\n      def getModifyText(modify)\n        string = \"\"\n        return string if  modify == 0\n\n        string += \"+\" if  modify > 0\n        string += modify.to_s\n        return string\n      end\n\n      def getBaseStepTable\n        stepTable =\n          [\n            #      dice\n            #      D20  D12  D10  D8  D6  D4  mod\n            [1, [0, 0, 0, 0, 0, 1, -2]],\n            [2,  [0,   0,   0,  0,  0,  1, -1]],\n            [3,  [0,   0,   0,  0,  0,  1,   0]],\n            [4,  [0,   0,   0,  0,  1,  0,   0]],\n            [5,  [0,   0,   0,  1,  0,  0,   0]],\n            [6,  [0,   0,   1,  0,  0,  0,   0]],\n            [7,  [0,   1,   0,  0,  0,  0,   0]],\n          ]\n\n        return stepTable\n      end\n\n      def getStepInfo(step)\n        baseStepTable = getBaseStepTable\n        baseMaxStep = baseStepTable.last.first\n\n        if step <= baseMaxStep\n          return get_table_by_number(step, baseStepTable)\n        end\n\n        #              dice\n        #                D20  D12  D10  D8  D6  D4  mod\n        overBounusStep = [1, 0, 0, 0, 0, 0, 0]\n        overStep = step - baseMaxStep - 1\n\n        stepRythm =\n          [\n            # dice\n            # D20  D12  D10  D8  D6  D4  mod\n            [0, 0, 0, 0, 2, 0, 0],\n            [0,   0,   0,  1,  1,  0,   0],\n            [0,   0,   0,  2,  0,  0,   0],\n            [0,   0,   1,  1,  0,  0,   0],\n            [0,   0,   2,  0,  0,  0,   0],\n            [0,   1,   1,  0,  0,  0,   0],\n            [0,   2,   0,  0,  0,  0,   0],\n            [0,   1,   0,  0,  2,  0,   0],\n            [0,   1,   0,  1,  1,  0,   0],\n            [0,   1,   0,  2,  0,  0,   0],\n            [0,   1,   1,  1,  0,  0,   0],\n          ]\n\n        # [  1,   0,   0,  0,  2,  0,   0],\n\n        result = [0, 0, 0, 0, 0, 0, 0]\n\n        loopCount = (overStep / stepRythm.size).to_i\n\n        loopCount.times do\n          addStepToResult(result, overBounusStep)\n        end\n\n        index = (overStep % stepRythm.size)\n        restStepInfo = stepRythm[index]\n\n        addStepToResult(result, restStepInfo)\n\n        return result\n      end\n\n      def addStepToResult(result, step)\n        result.size.times do |i|\n          result[i] += step[i]\n        end\n\n        return result\n      end\n\n      def getSuccess(targetNumber, stepTotal)\n        return '自動失敗' if @isFailed\n\n        diff = stepTotal - targetNumber\n        debug(\"diff\", diff)\n\n        if diff < 0\n          return \"失敗\"\n        end\n\n        level = (diff / 5).to_i + 1\n\n        return \"成功 レベル：\#{level}\"\n      end\n\n      def rollStep(diceType, diceCount)\n        debug('rollStep diceType, diceCount, @calcText', diceType, diceCount, @calcText)\n\n        stepTotal = 0\n        return stepTotal unless diceCount > 0\n\n        # diceぶんのステップ判定\n\n        @calcText += \"+\" unless @calcText.empty?\n        @calcText += \"\#{diceCount}d\#{diceType}[\"\n        debug('rollStep string', @calcText)\n\n        diceCount.times do |i|\n          dice_now = @randomizer.roll_once(diceType)\n\n          if dice_now != 1\n            @isFailed = false\n          end\n\n          dice_in = dice_now\n\n          while dice_now == diceType\n            dice_now = @randomizer.roll_once(diceType)\n\n            dice_in += dice_now\n          end\n\n          stepTotal += dice_in\n\n          @calcText += ',' if i != 0\n          @calcText += dice_in.to_s\n        end\n\n        @calcText += \"]\"\n\n        return stepTotal\n      end\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:EarthDawn4>", "register_prefix", "initialize", "command", "@sort_add_dice", "@calcText", "eval_game_system_specific_command", "ed_step", "str", "output", "getStepResult", "getStepResultInfos", "stepText", "calcText", "stepTotal", "targetNumber", "nil?", "0", "successText", "getSuccess", "steps", "calcs", "totals", "target", "$ret_or_1", "!", "empty?", "debug", "getStepResultInfo", "step", "calc", "total", "value", "nextText", "<<", "join", "inject", "block in getStepResultInfos", "sum", "i", "block (2 levels) in getStepResultInfos", "+", ">", "size", "1", "=~", "@isFailed", "Regexp", "last_match", "to_i", "2", "<", "hasKarmaDice", "3", "diceModify", "4", "6", "stepInfo", "getStepInfo", "diceTypes", "20", "12", "10", "8", "each", "block in getStepResultInfo", "type", "block (2 levels) in getStepResultInfo", "rollStep", "shift", "modify", "getModifyText", "string", "to_s", "getBaseStepTable", "stepTable", "-2", "-1", "5", "7", "baseStepTable", "baseMaxStep", "last", "first", "<=", "get_table_by_number", "overBounusStep", "overStep", "-", "stepRythm", "result", "loopCount", "/", "times", "block in getStepInfo", "block (2 levels) in getStepInfo", "addStepToResult", "index", "%", "restStepInfo", "[]", "block in addStepToResult", "block (2 levels) in addStepToResult", "[]=", "diff", "level", "diceType", "diceCount", "block in rollStep", "block (2 levels) in rollStep", "dice_now", "@randomizer", "roll_once", "dice_in", "EarthDawn"], :mappings=>"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"}}]}