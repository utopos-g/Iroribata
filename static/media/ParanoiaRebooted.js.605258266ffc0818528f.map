{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/ParanoiaRebooted.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class ParanoiaRebooted < Base\n      # ゲームシステムの識別子\n      ID = 'ParanoiaRebooted'\n\n      # ゲームシステム名\n      NAME = 'パラノイア リブーテッド'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'はらのいありふうてつと'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ※コマンドは入力内容の前方一致で検出しています。\n        ・通常の判定　NDx\n        　x：ノードダイスの数.マイナスも可.\n        　ノードダイスの絶対値 + 1個(コンピュータダイス)のダイスがロールされる.\n        例）ND2　ND-3\n\n        ・ミュータントパワー判定　MPx\n          x：ノードダイスの数.\n        　ノードダイスの値 + 1個(コンピュータダイス)のダイスがロールされる.\n        例）MP2\n      INFO_MESSAGE_TEXT\n\n      register_prefix('ND', 'MP')\n\n      def eval_game_system_specific_command(command)\n        case command\n        when /^ND/i\n          return get_node_dice_roll(command)\n        when /^MP/i\n          return get_mutant_power_roll(command)\n        else\n          return nil\n        end\n      end\n\n      private\n\n      def generate_roll_results(dices)\n        computer_dice_message = ''\n        results = dices.dup\n        if results[-1].to_i == 6\n          results[-1] = 'C'\n          computer_dice_message = '(Computer)'\n        end\n\n        return results, computer_dice_message\n      end\n\n      def get_node_dice_roll(command)\n        debug(\"eval_game_system_specific_command Begin\")\n\n        m = /^ND((-)?\\d+)/i.match(command)\n        unless m\n          return ''\n        end\n\n        debug(\"command\", command)\n\n        parameter_num = m[1].to_i\n        dice_count = parameter_num.abs + 1\n\n        dices = @randomizer.roll_barabara(dice_count, 6)\n\n        success_rate = dices.count { |dice| dice >= 5 }\n        success_rate -= dices.count { |dice| dice < 5 } if parameter_num < 0\n        debug(dices)\n\n        results, computer_dice_message = generate_roll_results(dices)\n\n        debug(\"eval_game_system_specific_command result\")\n\n        return \"(\#{command}) ＞ [\#{results.join(', ')}] ＞ 成功度\#{success_rate}\#{computer_dice_message}\"\n      end\n\n      def get_mutant_power_roll(command)\n        debug(\"eval_game_system_specific_command Begin\")\n\n        m = /^MP(\\d+)/i.match(command)\n        unless m\n          return ''\n        end\n\n        debug(\"command\", command)\n\n        parameter_num = m[1].to_i\n        dice_count = parameter_num.abs + 1\n\n        dices = @randomizer.roll_barabara(dice_count, 6)\n\n        failure_rate = dices.count(1)\n        message = failure_rate == 0 ? '成功' : \"失敗(\#{failure_rate})\"\n\n        results, computer_dice_message = generate_roll_results(dices)\n\n        debug(dices)\n\n        debug(\"eval_game_system_specific_command result\")\n\n        return \"(\#{command}) ＞ [\#{results.join(', ')}] ＞ \#{message}\#{computer_dice_message}\"\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:ParanoiaRebooted>", "self", "register_prefix", "eval_game_system_specific_command", "command", "$ret_or_1", "get_node_dice_roll", "get_mutant_power_roll", "private", "generate_roll_results", "dices", "computer_dice_message", "results", "dup", "[]", "-1", "to_i", "6", "[]=", "debug", "m", "match", "parameter_num", "1", "dice_count", "+", "abs", "@randomizer", "roll_barabara", "success_rate", "count", "block in get_node_dice_roll", "dice", "block (2 levels) in get_node_dice_roll", ">=", "5", "<", "0", "-", "join", "failure_rate", "message", "Base"], :mappings=>"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"}}]}