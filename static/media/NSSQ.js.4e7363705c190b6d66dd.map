{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/NSSQ.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class NSSQ < Base\n      ID = \"NSSQ\"\n      NAME = \"SRSじゃない世界樹の迷宮TRPG\"\n      SORT_KEY = \"えすああるえすしやないせかいしゆのめいきゆうTRPG\"\n\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ■ 判定 (xSQ±y>=z)\n          xD6の判定。3つ以上振ったとき、出目の高い2つを表示します。絶対成功、絶対失敗も計算します。\n          2つのサイコロを使用して出目に1があった場合は、FPの獲得も表示します。3つ以上使用した場合は表示しません。\n          ±y: yに修正値を入力。±の計算に対応。省略可能。\n          z: 目標値。省略可能。\n\n        ■ ダメージロール (xDR(C)(+)y)\n          xD6のダメージロール。クリティカルヒットの自動判定を行います。Cを付けるとクリティカルアップ状態で計算できます。+を付けるとクリティカルヒット時のダイスが8個になります。\n          x: xに振るダイス数を入力。\n          y: yに耐性を入力。\n          例) 5DR3 5DRC4 5DRC+4\n\n        ■ 回復ロール (xHRy)\n          xD6の回復ロール。クリティカルヒットが発生しません。\n          x: xに振るダイス数を入力。\n          y: yに耐性を入力。省略した場合3。\n          例) 2HR 10HR2\n\n        ■ 採集ロール (TC±z,SC±z,GC±z)\n          少しだけ(T)、そこそこ(S)、ガッツリ(G)採取採掘伐採を行います。\n          z: zに追加でロールする回数を入力。省略可能。\n          例) TC SC+1 GC-1\n      MESSAGETEXT\n\n      register_prefix('\\d+SQ[\\+\\-\\d]*', '\\d+DR(C)?(\\+)?\\d+', '[TSG]C', '\\d+HR\\d*')\n\n      def eval_game_system_specific_command(command)\n        roll_sq(command) || damage_roll(command) || heal_roll(command) || collecting_roll(command)\n      end\n\n      private\n\n      # 判定\n      def roll_sq(command)\n        m = /(\\d+)SQ([+\\-\\d]+)?(([>=]+)(\\d+))?/i.match(command)\n        return nil unless m\n\n        dice_count = m[1].to_i\n        modifier = ArithmeticEvaluator.eval(m[2])\n        target = m[5]&.to_i\n\n        dice_list = @randomizer.roll_barabara(dice_count, 6)\n        largest_two = dice_list.sort.reverse.take(2)\n        total = largest_two.sum + modifier\n        num_1 = dice_list.count(1)\n\n        additional_result =\n          if largest_two == [6, 6]\n            Result.critical(\" ＞ 絶対成功！\")\n          elsif largest_two == [1, 1]\n            Result.fumble(\" ＞ 絶対失敗！\")\n          elsif target && total >= target\n            Result.success(\" ＞ 成功\")\n          elsif target && total < target\n            Result.failure(\" ＞ 失敗\")\n          else\n            Result.new\n          end\n\n        # ダイス数が2個の場合は1の出目の数だけ【FP】を獲得できる\n        fp_result = dice_count == 2 && num_1 >= 1 ? \" (【FP】\#{num_1}獲得)\" : \"\"\n\n        sequence = [\n          \"(\#{command})\",\n          \"[\#{dice_list.join(',')}]\#{Format.modifier(modifier)}\",\n          \"\#{total}[\#{largest_two.join(',')}]\#{additional_result.text}\#{fp_result}\",\n        ]\n\n        return sequence.join(\" ＞ \")\n      end\n\n      # ダメージロール\n      def damage_roll(command)\n        m = /(\\d+)DR(C)?(\\+)?(\\d+)/i.match(command)\n        return nil unless m\n\n        dice_count = m[1].to_i\n        critical_up = !m[2].nil? # 強化効果 クリティカルアップ\n        increase_critical_dice = !m[3].nil?\n        resist = m[4].to_i\n\n        dice_list = @randomizer.roll_barabara(dice_count, 6)\n\n        result = \"(\#{command}) ＞ [\#{dice_list.join(',')}]\#{resist} ＞ \#{damage(dice_list, resist)}ダメージ\"\n\n        critical_target = critical_up ? 1 : 2\n\n        if dice_list.count(6) - dice_list.count(1) >= critical_target\n          result += \" クリティカルヒット！\\n\"\n          result += additional_damage_roll(increase_critical_dice, resist)\n        end\n\n        return result\n      end\n\n      def additional_damage_roll(increase_critical_dice, resist)\n        dice_count = increase_critical_dice ? 8 : 4\n\n        dice_list = @randomizer.roll_barabara(dice_count, 6)\n        \"(\#{dice_count}DR\#{resist}) ＞ [\#{dice_list.join(',')}]\#{resist} ＞ \#{damage(dice_list, resist)}ダメージ\"\n      end\n\n      # 回復ロール\n      def heal_roll(command)\n        m = /^(\\d+)HR(\\d+)?$/i.match(command)\n        return nil unless m\n\n        dice_count = m[1].to_i\n        resist = m[2]&.to_i || 3\n\n        dice_list = @randomizer.roll_barabara(dice_count, 6)\n\n        return \"(\#{command}) ＞ [\#{dice_list.join(',')}]\#{resist} ＞ \#{damage(dice_list, resist)}回復\"\n      end\n\n      def damage(dice_list, resist)\n        dice_list.count { |x| x > resist }\n      end\n\n      # 採取ロール\n      def collecting_roll(command)\n        m = /([TSG])C([+\\-\\d]+)?/i.match(command)\n        return nil unless m\n\n        type = m[1]\n        modifier = ArithmeticEvaluator.eval(m[2])\n\n        aatto_param =\n          case type\n          when \"T\"\n            3\n          when \"S\"\n            4\n          when \"G\"\n            5\n          end\n\n        roll_times = aatto_param - 2 + modifier\n        return nil if roll_times <= 0\n\n        results = Array.new(roll_times) do |i|\n          dice_list = @randomizer.roll_barabara(2, 6)\n          dice = dice_list.sum()\n\n          \"(\#{command}) ＞ \#{dice}[\#{dice_list.join(',')}]: \#{result_collecting(i, dice, aatto_param)}\"\n        end\n\n        results.join(\"\\n\")\n      end\n\n      def result_collecting(i, dice, aatto)\n        if (dice <= aatto) && (aatto - 2 > i)\n          \"！ああっと！\"\n        elsif aatto - 2 <= i\n          \"成功（追加分）\"\n        else\n          \"成功\"\n        end\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:NSSQ>", "self", "register_prefix", "eval_game_system_specific_command", "command", "$ret_or_1", "$ret_or_2", "$ret_or_3", "roll_sq", "damage_roll", "heal_roll", "collecting_roll", "private", "m", "match", "dice_count", "[]", "1", "to_i", "modifier", "ArithmeticEvaluator", "eval", "2", "target", "5", "dice_list", "@randomizer", "roll_barabara", "6", "largest_two", "sort", "reverse", "take", "total", "+", "sum", "num_1", "count", "additional_result", "Result", "critical", "fumble", ">=", "success", "<", "failure", "new", "fp_result", "sequence", "join", "Format", "text", "critical_up", "nil?", "!", "increase_critical_dice", "3", "resist", "4", "result", "damage", "critical_target", "-", "additional_damage_roll", "8", "block in damage", "x", "block (2 levels) in damage", ">", "type", "aatto_param", "roll_times", "<=", "0", "results", "Array", "block in collecting_roll", "i", "block (2 levels) in collecting_roll", "dice", "result_collecting", "aatto", "Base"], :mappings=>"AAAAA,2BAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QACE,8BAAKA,MAAL;QACA,gCAAOA,mBAAP;QACA,oCAAWA,4BAAX;QAEA,wCACNA,mBADqB,GAErBA,qDAFqB,GAGrBA,4DAHqB,GAIrBA,gCAJqB,GAKrBA,kBALqB,GAMrBA,IANqB,GAOrBA,0BAPqB,GAQrBA,4FARqB,GASrBA,qBATqB,GAUrBA,iBAVqB,GAWrBA,0BAXqB,GAYrBA,IAZqB,GAarBA,kBAbqB,GAcrBA,iCAdqB,GAerBA,qBAfqB,GAgBrBA,yBAhBqB,GAiBrBA,kBAjBqB,GAkBrBA,IAlBqB,GAmBrBA,4BAnBqB,GAoBrBA,yCApBqB,GAqBrBA,8BArBqB,GAsBrBA,qBAtBM;QAyBAC,IAAAC,iBAAAA,CAAgBF,oBAAhB,EAAkCA,sBAAlC,EAAuDA,QAAvD,EAAiEA,YAAjEE;;AAEAC,QAAAA,iDAAAA,6CAAsCC,OAAtCD;AAAAA,UAAAA;;UACE,IAAA,QAAAE,CAAAA,YAAA,CAAA,QAAAC,CAAAA,YAAA,CAAA,QAAAC,CAAAA,YAAAN,IAAAO,SAAAA,CAAQJ,OAARI,CAAAD,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAoBN,IAAAQ,aAAAA,CAAYL,OAAZK,CAApB,CAAA,CAAAH,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAA4CL,IAAAS,WAAAA,CAAUN,OAAVM,CAA5C,CAAA,CAAAL,CAAA,CAAA;YAAAF,OAAA;UAAA;YAAkEA,OAAAF,IAAAU,iBAAAA,CAAgBP,OAAhBO;UAAlE;QADFR,CAAAA;QAIAF,IAAAW,SAAAA,CAAAA;;AAGAJ,QAAAA,uBAAAA,mBAAYJ,OAAZI,GAAAA,MAAAA,IAAAA,wCAAAA;AAAAA,UAAAA;;;UACEK,IAAI,oCAAoCC,OAAAA,CAAOV,OAAPU;UACxC,KAAA,QAAkBD,CAAlB,CAAA;YAAA,OAAO;UAAP;UAEAE,aAAaF,CAACG,OAAAA,CAACC,CAADD,CAAGE,MAAAA,CAAAA;UACjBC,WAAWC,yBAAmBC,MAAAA,CAAMR,CAACG,OAAAA,CAACM,CAADN,CAAPK;UAC9BE,SAAS,CAAA,KAAAV,CAACG,OAAAA,CAACQ,CAADR,CAAD,qCAAA,EAAA,MAAA,CAAA,CAAA;UAETS,YAAYC,eAAWC,eAAAA,CAAeZ,UAA1B,EAAsCa,CAA3BD;UACvBE,cAAcJ,SAASK,MAAAA,CAAAA,CAAKC,SAAAA,CAAAA,CAAQC,MAAAA,CAAMV,CAANU;UACpCC,QAAwBC,SAAhBL,WAAWM,KAAAA,CAAAA,CAAKD,EAAEf,QAAFe;UACxBE,QAAQX,SAASY,OAAAA,CAAOpB,CAAPoB;UAEjBC,oBACE,CAAA,MAAGT,WAAH,EAAkB,CAACD,CAAD,EAAIA,CAAJ,CAAlB,CAAA,GAAA,CACEW,YAAMC,UAAAA,CAAUhC,UAAVgC,CADR,IAEA,CAAA,MAAMX,WAAN,EAAqB,CAACZ,CAAD,EAAIA,CAAJ,CAArB,CAAA,GAAA,CACEsB,YAAME,QAAAA,CAAQjC,UAARiC,CADR,IAEA,CAAM,CAAA,QAAAlB,MAAA,CAAA,IAAA,CAAA,QAAgBmB,OAANT,KAAMS,EAAGnB,MAAHmB,CAAhB,CAAA,CAAA,CAAN,GAAA,CACEH,YAAMI,SAAAA,CAASnC,OAATmC,CADR,IAEA,CAAM,CAAA,QAAApB,MAAA,CAAA,IAAA,CAAA,QAAgBqB,OAANX,KAAMW,EAAErB,MAAFqB,CAAhB,CAAA,CAAA,CAAN,GAAA,CACEL,YAAMM,SAAAA,CAASrC,OAATqC,CADR,IAAA,CAGEN,YAAMO,KAAAA,CAAAA,CAHR,CAAA,CAFA,CAFA,CAFA;UAaFC,YAAY,CAAA,CAAA,MAAAhC,UAAA,EAAcO,CAAd,CAAA,IAAA,CAAA,QAAyBoB,OAANN,KAAMM,EAAGzB,CAAHyB,CAAzB,CAAA,CAAA,CAAA,GAAA,CAAiClC,QAAD,GAAA,CAAS4B,KAAT,CAAA,GAAe5B,KAA/C,IAAA,CAAsDA,EAAtD,CAAA;UAEZwC,WAAW,CACRxC,GAAD,GAAA,CAAIJ,OAAJ,CAAA,GAAYI,GADH,EAERA,GAAD,GAAA,CAAIiB,SAASwB,MAAAA,CAAMzC,GAANyC,CAAb,CAAA,GAAwBzC,GAAxB,GAAA,CAA2B0C,YAAM/B,UAAAA,CAAUA,QAAVA,CAAjC,CAFS,EAGT,EAAA,GAAA,CAAGc,KAAH,CAAA,GAASzB,GAAT,GAAA,CAAYqB,WAAWoB,MAAAA,CAAMzC,GAANyC,CAAvB,CAAA,GAAkCzC,GAAlC,GAAA,CAAqC8B,iBAAiBa,MAAAA,CAAAA,CAAtD,CAAA,GAAA,CAA8DJ,SAA9D,CAHS;UAMX,OAAOC,QAAQC,MAAAA,CAAMzC,KAANyC,EAnCjBzC;YAAAA;YAAAA;UAAAA;QAAAA,CAAAA;;AAuCAC,QAAAA,2BAAAA,uBAAgBL,OAAhBK;AAAAA,UAAAA;;;UACEI,IAAI,wBAAwBC,OAAAA,CAAOV,OAAPU;UAC5B,KAAA,QAAkBD,CAAlB,CAAA;YAAA,OAAO;UAAP;UAEAE,aAAaF,CAACG,OAAAA,CAACC,CAADD,CAAGE,MAAAA,CAAAA;UACjBkC,cAAevC,CAACG,OAAAA,CAACM,CAADN,CAAGqC,SAAAA,CAAAA,CAALC,MAAAA,CAAAA;UACdC,yBAA0B1C,CAACG,OAAAA,CAACwC,CAADxC,CAAGqC,SAAAA,CAAAA,CAALC,MAAAA,CAAAA;UACzBG,SAAS5C,CAACG,OAAAA,CAAC0C,CAAD1C,CAAGE,MAAAA,CAAAA;UAEbO,YAAYC,eAAWC,eAAAA,CAAeZ,UAA1B,EAAsCa,CAA3BD;UAEvBgC,SAAUlD,GAAD,GAAA,CAAIL,OAAJ,CAAA,GAAYK,OAAZ,GAAA,CAAmBgB,SAASwB,MAAAA,CAAMxC,GAANwC,CAA5B,CAAA,GAAuCxC,GAAvC,GAAA,CAA0CgD,MAA1C,CAAA,GAAiDhD,KAAjD,GAAA,CAAsDR,IAAA2D,QAAAA,CAAOnC,SAAP,EAAkBgC,MAAlBG,CAAtD,CAAA,GAAgFnD;UAEzFoD,kBAAkB,CAAA,QAAAT,WAAA,CAAA,GAAA,CAAcnC,CAAd,IAAA,CAAkBK,CAAlB,CAAA;UAElB,IAAA,QAA2CoB,OAArBoB,UAAnBrC,SAASY,OAAAA,CAAOT,CAAPS,CAAUyB,EAAErC,SAASY,OAAAA,CAAOpB,CAAPoB,CAAXyB,CAAqBpB,EAAGmB,eAAHnB,CAA3C,CAAA;;YACEiB,SAAOzB,SAAPyB,MAAOzB,EAAGzB,eAAHyB;YACPyB,SAAOzB,SAAPyB,MAAOzB,EAAGjC,IAAA8D,wBAAAA,CAAuBR,sBAAvB,EAA+CE,MAA/CM,CAAH7B;UAFT;UAKA,OAAOyB;QApBTlD,CAAAA;;AAuBAsD,QAAAA,sCAAAA,kCAA2BR,sBAAD,EAAyBE,MAAnDM;AAAAA,UAAAA;;;UACEhD,aAAa,CAAA,QAAAwC,sBAAA,CAAA,GAAA,CAAyBS,CAAzB,IAAA,CAA6BN,CAA7B,CAAA;UAEbjC,YAAYC,eAAWC,eAAAA,CAAeZ,UAA1B,EAAsCa,CAA3BD;UACvBoC,OAACA,GAAD,GAAA,CAAIhD,UAAJ,CAAA,GAAegD,IAAf,GAAA,CAAmBN,MAAnB,CAAA,GAA0BM,OAA1B,GAAA,CAAiCtC,SAASwB,MAAAA,CAAMc,GAANd,CAA1C,CAAA,GAAqDc,GAArD,GAAA,CAAwDN,MAAxD,CAAA,GAA+DM,KAA/D,GAAA,CAAoE9D,IAAA2D,QAAAA,CAAOnC,SAAP,EAAkBgC,MAAlBG,CAApE,CAAA,GAA8FG;QAJhGA,CAAAA;;AAQArD,QAAAA,yBAAAA,qBAAcN,OAAdM;AAAAA,UAAAA;;;UACEG,IAAI,kBAAkBC,OAAAA,CAAOV,OAAPU;UACtB,KAAA,QAAkBD,CAAlB,CAAA;YAAA,OAAO;UAAP;UAEAE,aAAaF,CAACG,OAAAA,CAACC,CAADD,CAAGE,MAAAA,CAAAA;UACjBuC,SAAS,CAAA,QAAApD,CAAAA,YAAA,CAAA,KAAAQ,CAACG,OAAAA,CAACM,CAADN,CAAD,qCAAA,EAAA,MAAA,CAAA,CAAA,CAAAX,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAcmD,CAAd,CAAA;UAET/B,YAAYC,eAAWC,eAAAA,CAAeZ,UAA1B,EAAsCa,CAA3BD;UAEvB,OAAQjB,GAAD,GAAA,CAAIN,OAAJ,CAAA,GAAYM,OAAZ,GAAA,CAAmBe,SAASwB,MAAAA,CAAMvC,GAANuC,CAA5B,CAAA,GAAuCvC,GAAvC,GAAA,CAA0C+C,MAA1C,CAAA,GAAiD/C,KAAjD,GAAA,CAAsDT,IAAA2D,QAAAA,CAAOnC,SAAP,EAAkBgC,MAAlBG,CAAtD,CAAA,GAAgFlD;QATzFA,CAAAA;;AAYAkD,QAAAA,sBAAAA,kBAAWnC,SAAD,EAAYgC,MAAtBG;AAAAA;UACEA,OAASvB,MAATZ,SAASY,SAAAA,EAAAA,EAAAA,EAAT4B,aAAmBC,CAAnBD;;YAAmB;YAAGE,OAAEC,OAAFF,CAAEE,EAAEX,MAAFW,EAAxBH,CAAS5B;QADXuB,CAAAA;;AAKAjD,QAAAA,+BAAAA,2BAAoBP,OAApBO,GAAAA,MAAAA,IAAAA,wCAAAA;AAAAA,UAAAA;;;UACEE,IAAI,sBAAsBC,OAAAA,CAAOV,OAAPU;UAC1B,KAAA,QAAkBD,CAAlB,CAAA;YAAA,OAAO;UAAP;UAEAwD,OAAOxD,CAACG,OAAAA,CAACC,CAADD;UACRG,WAAWC,yBAAmBC,MAAAA,CAAMR,CAACG,OAAAA,CAACM,CAADN,CAAPK;UAE9BiD,cAEE,CAAA,QAAK3D,GAAL,EADAN,CAAAA,YAAKgE,IAALhE,CACA,CAAA,GAAA,CACEmD,CADF,IAEA,CAAA,QAAK7C,GAAL,EA7IV,SA6IU,CAAA,GAAA,CACE+C,CADF,IAEA,CAAA,QAAK/C,GAAL,EA/IV,SA+IU,CAAA,GAAA,CACEa,CADF,IAAA,CALA,GAKA,CAAA,CAFA,CAFA;UAQF+C,aAA6BrC,SAAJ4B,UAAZQ,WAAYR,EAAExC,CAAFwC,CAAI5B,EAAEf,QAAFe;UAC7B,IAAA,QAAyBsC,OAAXD,UAAWC,EAAGC,CAAHD,CAAzB,CAAA;YAAA,OAAO;UAAP;UAEAE,UAAe5B,MAAL6B,WAAK7B,OAAAA,EAAAA,CAAKyB,UAALzB,CAAAA,EAAL8B,aAA0BC,CAA1BD,EAAAE;AAAAA;;;YAA0B;YAClCrD,YAAYC,eAAWC,eAAAA,CAAeL,CAA1B,EAA6BM,CAAlBD;YACvBoD,OAAOtD,SAASU,KAAAA,CAAAA;YAEhB2C,OAACA,GAAD,GAAA,CAAI1E,OAAJ,CAAA,GAAY0E,MAAZ,GAAA,CAAkBC,IAAlB,CAAA,GAAuBD,GAAvB,GAAA,CAA0BrD,SAASwB,MAAAA,CAAM6B,GAAN7B,CAAnC,CAAA,GAA8C6B,KAA9C,GAAA,CAAmD7E,IAAA+E,mBAAAA,CAAkBH,CAAlB,EAAqBE,IAArB,EAA2BT,WAA3BU,CAAnD,EAJQJ,CAAAA,GAAAA,SAAAA,CAAK9B;UAOfnC,OAAA+D,OAAOzB,MAAAA,CAAMtC,IAANsC,EA3BTtC;YAAAA;YAAAA;UAAAA;QAAAA,CAAAA;QA8BAX,OAAAgF,iCAAAA,6BAAsBH,CAAD,EAAIE,IAAJ,EAAUE,KAA/BD;AAAAA;UACE,IAAG,CAAA,QAAMR,OAALO,IAAKP,EAAGS,KAAHT,CAAN,CAAA,IAAA,CAAA,QAA8BJ,OAAJN,UAANmB,KAAMnB,EAAExC,CAAFwC,CAAIM,EAAES,CAAFT,CAA9B,CAAA,CAAA,CAAH;YACEY,OAAAA;UADF,OAEA,IAAA,QAAgBR,OAAJV,UAANmB,KAAMnB,EAAExC,CAAFwC,CAAIU,EAAGK,CAAHL,CAAhB,CAAA;YACEQ,OAAAA;UADF;YAGEA,OAAAA;UAHF;QAHFA,CAAAA;MA5JFhF,GAAAA,WAAAA,EAAakF,UAAblF;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}]}