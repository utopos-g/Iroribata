{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/FullFace.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class FullFace < Base\n      # ゲームシステムの識別子\n      ID = 'FullFace'\n\n      # ゲームシステム名\n      NAME = 'フルフェイス'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'ふるふえいす'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGETEXT\n        ■判定　x+bFF<=a[,t][&d]   x:ヒート(省略時は3) b:判定修正 a:能力値 t:難易度(省略可) d:基本ダメージ(省略可)\n\n        例)FF<=2:     能力値2で判定し、その結果(成功数,1の目の数,6の目の数,バースト)を表示。\n           6FF<=3:    ヒート6,能力値3で戦闘判定し、その結果( 〃 )を表示。\n           8+2FF<=3:  ヒート8,判定修正+2,能力値3で戦闘判定し、その結果( 〃 )を表示。\n           FF<=2,1:   能力値2,難易度1で判定し、その結果(成功数,1の目の数,6の目の数,成功・失敗,バースト)を表示。\n           6FF<=3,2&1:ヒート6,能力値3,難易度2,基本ダメージ1で戦闘判定し、その結果(成功数,1の目の数,6の目の数,ダメージ,バースト)を表示。\n\n      INFO_MESSAGETEXT\n\n      register_prefix('([+\\d]+)*FF')\n\n      def initialize(command)\n        super(command)\n\n        @sort_barabara_dice = true # バラバラロール（Bコマンド）でソート有\n      end\n\n      def eval_game_system_specific_command(command)\n        resolute_action(command)\n      end\n\n      private\n\n      # 戦闘判定\n      # @param [String] command\n      # @return [Result]\n      def resolute_action(command)\n        m = /^(\\d*)([+\\d]+)*FF<=(\\d)(,(\\d))?(&(\\d))?$/.match(command)\n        return nil unless m\n\n        heat_level = m[1].to_i\n        heat_level = 3 if heat_level == 0\n        modify = Arithmetic.eval(\"0\#{m[2]}\", @round_type)\n        status_no = m[3].to_i\n        target_no = m[5].to_i\n        damage_no = m[7].to_i\n\n        dice_array = []\n\n        dice = @randomizer.roll_barabara(heat_level, 6).sort\n        ones = dice.count(1)\n        sixs = dice.count(6)\n        success_num = dice.count { |val| val <= status_no }\n        dice_array.push(dice.join(\",\"))\n\n        if modify > 0\n          dice = @randomizer.roll_barabara(modify, 6).sort\n          ones += dice.count(1)\n          success_num += dice.count { |val| val <= status_no }\n          dice_array.push(dice.join(\",\"))\n        end\n        ones_total = ones\n\n        while ones > 0\n          dice = @randomizer.roll_barabara(ones, 6).sort\n          ones = dice.count(1)\n          ones_total += ones\n          success_num += dice.count { |val| val <= status_no }\n          dice_array.push(dice.join(\",\"))\n        end\n\n        return Result.new.tap do |result|\n          command_out = \"(\#{heat_level}\#{Format.modifier(modify)}FF<=\#{status_no}\"\n          if sixs >= 2\n            result.fumble = true\n            result.condition = false\n          else\n            result.condition = (success_num > 0)\n            result.critical = (ones_total > 0)\n          end\n          result_txt = []\n          result_txt.push(\"成功度(\#{success_num})\")\n          result_txt.push(\"1の目(\#{ones_total})\") if ones_total > 0\n          result_txt.push(\"6の目(\#{sixs})\") if sixs > 0\n          if target_no > 0\n            command_out += \",\#{target_no}\"\n            if success_num >= target_no\n              result_txt.push(\"成功\")\n              result.condition = true\n            else\n              result_txt.push(\"失敗\")\n              result.condition = false\n            end\n          end\n          if damage_no > 0\n            command_out += \"&\#{damage_no}\"\n            damage = damage_no + ones_total\n            result_txt.push(\"ダメージ(\#{damage})\")\n          end\n          result_txt.push(\"バースト\") if result.fumble?\n          command_out += \")\"\n\n          sequence = [\n            command_out,\n            dice_array.join('+').to_s,\n            result_txt.join(',').to_s,\n          ].compact\n\n          result.text = sequence.join(\" ＞ \")\n        end\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:FullFace>", "self", "register_prefix", "initialize", "command", "@sort_barabara_dice", "eval_game_system_specific_command", "resolute_action", "private", "m", "match", "heat_level", "[]", "1", "to_i", "0", "3", "modify", "Arithmetic", "eval", "2", "@round_type", "status_no", "target_no", "5", "damage_no", "7", "dice_array", "dice", "@randomizer", "roll_barabara", "6", "sort", "ones", "count", "sixs", "success_num", "block in resolute_action", "val", "block (2 levels) in resolute_action", "<=", "push", "join", ">", "+", "ones_total", "tap", "Result", "new", "result", "command_out", "Format", "modifier", ">=", "fumble=", "condition=", "critical=", "result_txt", "damage", "fumble?", "sequence", "to_s", "compact", "text=", "Base"], :mappings=>"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"}}]}