{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/range_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    # 各項目について、Rangeを用いて出目の合計の範囲を指定する、表のクラス。\n    #\n    # このクラスを使うと、表の定義を短く書ける。\n    # このクラスを使って表を定義するときは、各項目を以下の形で書く。\n    #\n    #     [出目の合計の範囲, 内容]\n    #\n    # 「出目の合計の範囲」には、Integerを要素とするRangeか、Integerを置ける。\n    #\n    # roll メソッドで表を振ると、出目の合計値と対応する項目が選ばれる。\n    #\n    # @example 表の定義（バトルテックの致命的命中表）\n    #   CRITICAL_TABLE = RangeTable.new(\n    #     '致命的命中表',\n    #     '2D6',\n    #     [\n    #       [2..7,   '致命的命中はなかった'],\n    #       [8..9,   '1箇所の致命的命中'],\n    #       [10..11, '2箇所の致命的命中'],\n    #       [12,     'その部位が吹き飛ぶ（腕、脚、頭）または3箇所の致命的命中（胴）']\n    #     ]\n    #   )\n    #\n    # @example 表を振った結果\n    #   CRITICAL_TABLE.roll(bcdice).formatted\n    #   # 出目の合計が7の場合 ：\"致命的命中表(7) ＞ 致命的命中はなかった\"\n    #   # 出目の合計が8の場合 ：\"致命的命中表(8) ＞ 1箇所の致命的命中\"\n    #   # 出目の合計が9の場合 ：\"致命的命中表(9) ＞ 1箇所の致命的命中\"\n    #   # 出目の合計が10の場合：\"致命的命中表(10) ＞ 2箇所の致命的命中\"\n    class RangeTable\n      # 表を振った結果を表す構造体\n      # @!attribute [rw] sum\n      #   @return [Integer] 出目の合計\n      # @!attribute [rw] values\n      #   @return [Array<Integer>] 出目の配列\n      # @!attribute [rw] content\n      #   @return [Object] 選ばれた項目の内容\n      # @!attribute [rw] formatted\n      #   @return [String] 整形された結果\n      RollResult = Struct.new(:sum, :values, :content, :formatted) do\n        alias_method :to_s, :formatted\n      end\n\n      # 表の項目を表す構造体\n      # @!attribute [rw] range\n      #   @return [Range] 出目の合計の範囲\n      # @!attribute [rw] content\n      #   @return [Object] 内容\n      Item = Struct.new(:range, :content)\n\n      # 項目を選ぶときのダイスロールの方法を表す正規表現\n      DICE_ROLL_METHOD_RE = /\\A(\\d+)D(\\d+)\\z/i.freeze\n\n      # 表を振った結果の整形処理（既定の処理）\n      DEFAULT_FORMATTER = lambda do |table, result|\n        \"\#{table.name}(\#{result.sum}) ＞ \#{result.content}\"\n      end\n\n      # @return [String] 表の名前\n      attr_reader :name\n      # @return [Integer] 振るダイスの個数\n      attr_reader :num_of_dice\n      # @return [Integer] 振るダイスの面数\n      attr_reader :num_of_sides\n\n      class << self\n        def from_i18n(key, locale)\n          table = I18n.t(key, locale: locale)\n          converted_items = table[:items].map do |item|\n            [conv_string_range(item[0]), item[1]]\n          end\n          new(table[:name], table[:type], converted_items)\n        end\n\n        def conv_string_range(x)\n          case x\n          when Integer\n            return x\n          when String\n            return x.include?(\"..\") ? Range.new(*x.split(\"..\", 2).map { |n| Integer(n) }) : Integer(x)\n          end\n\n          raise(\n            TypeError,\n            \"\#{@name}: \#{x} (\#{x.class}) must be a String or an Integer\"\n          )\n        end\n      end\n\n      # 表を初期化する\n      #\n      # ブロックを与えると、独自の結果整形処理を指定できる。\n      # ブロックは振った表（+table+）と振った結果（+result+）を引数として受け取る。\n      #\n      # @param [String] name 表の名前\n      # @param [String] dice_roll_method\n      #   項目を選ぶときのダイスロールの方法（+'1D6'+ など）\n      # @param [Array<(Range, Object)>, Array<(Integer, Object)>] items\n      #   表の項目の配列。[出目の合計の範囲, 内容]\n      # @yieldparam [RangeTable] table 振った表\n      # @yieldparam [RollResult] result 表を振った結果\n      # @raise [ArgumentError] ダイスロール方法が正しい書式で指定されていなかった場合\n      # @raise [TypeError] 範囲の型が正しくなかった場合\n      # @raise [RangeError] 出目の合計の最小値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の最大値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の範囲にずれや重なりがあった場合\n      #\n      # @example 表の定義（バトルテックの致命的命中表）\n      #   CRITICAL_TABLE = RangeTable.new(\n      #     '致命的命中表',\n      #     '2D6',\n      #     [\n      #       [2..7,   '致命的命中はなかった'],\n      #       [8..9,   '1箇所の致命的命中'],\n      #       [10..11, '2箇所の致命的命中'],\n      #       [12,     'その部位が吹き飛ぶ（腕、脚、頭）または3箇所の致命的命中（胴）']\n      #     ]\n      #   )\n      #\n      # @example 独自の結果整形処理を指定する場合\n      #   CRITICAL_TABLE_WITH_FORMATTER = RangeTable.new(\n      #     '致命的命中表',\n      #     '2D6',\n      #     [\n      #       [2..7,   '致命的命中はなかった'],\n      #       [8..9,   '1箇所の致命的命中'],\n      #       [10..11, '2箇所の致命的命中'],\n      #       [12,     'その部位が吹き飛ぶ（腕、脚、頭）または3箇所の致命的命中（胴）']\n      #     ]\n      #   ) do |table, result|\n      #     \"致命的命中発生? ＞ \#{result.sum}[\#{result.values}] ＞ \#{result.content}\"\n      #   end\n      #\n      #   CRITICAL_TABLE_WITH_FORMATTER.roll(bcdice).formatted\n      #   #=> \"致命的命中発生? ＞ 11[5,6] ＞ 2箇所の致命的命中\"\n      def initialize(name, dice_roll_method, items, &formatter)\n        @name = name.freeze\n        @formatter = formatter || DEFAULT_FORMATTER\n\n        m = DICE_ROLL_METHOD_RE.match(dice_roll_method)\n        unless m\n          raise(\n            ArgumentError,\n            \"\#{@name}: invalid dice roll method: \#{dice_roll_method}\"\n          )\n        end\n\n        @num_of_dice = m[1].to_i\n        @num_of_sides = m[2].to_i\n\n        store(items)\n      end\n\n      # 指定された値に対応する項目を返す\n      # @param [Integer] value 値（出目の合計）\n      # @return [Item] 指定された値に対応する項目\n      # @raise [RangeError] 範囲外の値が指定された場合\n      def fetch(value)\n        item = @items.find { |i| i.range.include?(value) }\n        unless item\n          raise RangeError, \"\#{@name}: value is out of range: \#{value}\"\n        end\n\n        return item\n      end\n\n      # 表を振る\n      # @param randomizer [#roll_barabara] ランダマイザ\n      # @return [RollResult] 表を振った結果\n      def roll(randomizer)\n        values = randomizer.roll_barabara(@num_of_dice, @num_of_sides)\n        sum = values.sum()\n\n        result = RollResult.new(sum, values, fetch(sum).content)\n        result.formatted = @formatter[self, result]\n\n        return result\n      end\n\n      private\n\n      # 表の項目を格納する\n      # @param [Array<(Range, Object)>, Array<(Integer, Object)>] items\n      #   表の項目の配列。[出目の合計の範囲, 内容]\n      # @return [self]\n      # @raise [TypeError] 範囲の型が正しくなかった場合\n      # @raise [RangeError] 出目の合計の最小値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の最大値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の範囲にずれや重なりがあった場合\n      def store(items)\n        items_with_range = items.map { |r, c| [coerce_to_int_range(r), c] }\n        sorted_items = items_with_range.sort_by { |r, _| r.min }\n\n        assert_min_sum_is_covered(sorted_items)\n        assert_max_sum_is_covered(sorted_items)\n        assert_no_gap_or_overlap_in_ranges(sorted_items)\n\n        @items = sorted_items\n                 .map { |range, content| Item.new(range, content.freeze).freeze }\n                 .freeze\n\n        self\n      end\n\n      # 引数を強制的に整数を要素とするRangeに変換する\n      # @param [Range, Integer] x 変換対象\n      # @return [Range] 整数を要素とするRange\n      # @raise [TypeError] xの型に対応していなかった場合\n      def coerce_to_int_range(x)\n        case x\n        when Integer\n          return Range.new(x, x)\n        when Range\n          if x.begin.is_a?(Integer) && x.end.is_a?(Integer)\n            return x\n          end\n        end\n\n        raise(\n          TypeError,\n          \"\#{@name}: \#{x} (\#{x.class}) must be an Integer or a Range with Integers \"\n        )\n      end\n\n      # 出目の合計の最小値がカバーされていることを確認する\n      # @param [Array<(Range, Object)>] sorted_items\n      #   ソートされた、項目の配列\n      # @return [self]\n      # @raise [RangeError] 出目の合計の最小値がカバーされていなかった場合\n      def assert_min_sum_is_covered(sorted_items)\n        min_sum = @num_of_dice\n        range = sorted_items.first[0]\n        unless range.include?(min_sum)\n          raise(\n            RangeError,\n            \"\#{@name}: min value (\#{min_sum}) is not covered: \#{range}\"\n          )\n        end\n\n        self\n      end\n\n      # 出目の合計の最大値がカバーされていることを確認する\n      # @param [Array<(Range, Object)>] sorted_items\n      #   ソートされた、項目の配列\n      # @return [self]\n      # @raise [RangeError] 出目の合計の最大値がカバーされていなかった場合\n      def assert_max_sum_is_covered(sorted_items)\n        max_sum = @num_of_dice * @num_of_sides\n        range = sorted_items.last[0]\n        unless range.include?(max_sum)\n          raise(\n            RangeError,\n            \"\#{@name}: max value (\#{max_sum}) is not covered: \#{range}\"\n          )\n        end\n\n        self\n      end\n\n      # 出目の合計の範囲にずれや重なりがないことを確認する\n      # @param [Array<(Range, Object)>] sorted_items\n      #   ソートされた、項目の配列\n      # @return [self]\n      # @raise [RangeError] 出目の合計の範囲にずれや重なりがあった場合\n      def assert_no_gap_or_overlap_in_ranges(sorted_items)\n        sorted_items.each_cons(2) do |i1, i2|\n          r1 = i1[0]\n          r2 = i2[0]\n\n          max1 = r1.max\n          next_of_max1 = max1 + 1\n\n          if r2.include?(max1)\n            raise RangeError, \"\#{@name}: Range overlap: \#{r1} and \#{r2}\"\n          end\n\n          unless r2.include?(next_of_max1)\n            raise RangeError, \"\#{@name}: Range gap: \#{r1} and \#{r2}\"\n          end\n        end\n\n        self\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:RangeTable>", "new", "Struct", "block in <class:RangeTable>", "block (2 levels) in <class:RangeTable>", "self", "alias_method", "freeze", "lambda", "table", "result", "name", "sum", "content", "attr_reader", "from_i18n", "key", "locale", "I18n", "t", "converted_items", "map", "[]", "block in from_i18n", "item", "block (2 levels) in from_i18n", "conv_string_range", "0", "1", "x", "Integer", "$ret_or_1", "String", "include?", "Range", "split", "2", "block in conv_string_range", "n", "block (2 levels) in conv_string_range", "raise", "TypeError", "@name", "class", "initialize", "dice_roll_method", "items", "@formatter", "formatter", "DEFAULT_FORMATTER", "m", "DICE_ROLL_METHOD_RE", "match", "ArgumentError", "@num_of_dice", "to_i", "@num_of_sides", "store", "fetch", "value", "find", "@items", "block in fetch", "i", "block (2 levels) in fetch", "range", "RangeError", "roll", "randomizer", "values", "roll_barabara", "RollResult", "formatted=", "private", "items_with_range", "block in store", "r", "c", "block (2 levels) in store", "coerce_to_int_range", "sorted_items", "sort_by", "_", "min", "assert_min_sum_is_covered", "assert_max_sum_is_covered", "assert_no_gap_or_overlap_in_ranges", "Item", "begin", "is_a?", "end", "min_sum", "first", "max_sum", "*", "last", "each_cons", "block in assert_no_gap_or_overlap_in_ranges", "i1", "i2", "block (2 levels) in assert_no_gap_or_overlap_in_ranges", "r1", "r2", "max1", "max", "next_of_max1", "+"], :mappings=>"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"}}, {:offset=>{:line=>207, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/DeadlineHeroes.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire 'bcdice/dice_table/range_table'\n\nmodule BCDice\n  module GameSystem\n    class DeadlineHeroes < Base\n      # ゲームシステムの識別子\n      ID = 'DeadlineHeroes'\n\n      # ゲームシステム名\n      NAME = 'デッドラインヒーローズRPG'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'てつとらいんひいろおすRPG'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・行為判定（DLHx）\n        　x：成功率\n        　例）DLH80\n        　クリティカル、ファンブルの自動的判定を行います。\n        　「DLH50+20-30」のように加減算記述も可能。\n        　成功率は上限100％、下限０％\n        ・デスチャート(DCxY)\n        　x：チャートの種類。肉体：DCL、精神：DCS、環境：DCC\n        　Y=マイナス値\n        　例）DCL5：ライフが -5 の判定\n        　　　DCS3：サニティーが -3 の判定\n        　　　DCC0：クレジット 0 の判定\n        ・ヒーローネームチャート（HNC）\n        ・リアルネームチャート　日本（RNCJ）、海外（RNCO）\n      INFO_MESSAGE_TEXT\n\n      register_prefix(\n        'DLH',\n        'DC[LSC]',\n        'RNC[JO]',\n        'HNC'\n      )\n\n      def eval_game_system_specific_command(command)\n        case command\n        when /^DLH/i\n          resolute_action(command)\n        when /^DC\\w/i\n          roll_death_chart(command)\n        when 'HNC'\n          roll_hero_name_chart()\n        else\n          roll_tables(command, TABLES)\n        end\n      end\n\n      private\n\n      def resolute_action(command)\n        m = /^DLH(\\d+([+-]\\d+)*)$/.match(command)\n        unless m\n          return nil\n        end\n\n        success_rate = ArithmeticEvaluator.eval(m[1])\n\n        roll_result, dice10, dice01 = roll_d100\n        roll_result_text = format('%02d', roll_result)\n\n        result = action_result(roll_result, dice10, dice01, success_rate)\n\n        sequence = [\n          \"行為判定(成功率:\#{success_rate}％)\",\n          \"1D100[\#{dice10},\#{dice01}]=\#{roll_result_text}\",\n          roll_result_text.to_s,\n          result.text\n        ]\n\n        result.text = sequence.join(\" ＞ \")\n        result\n      end\n\n      SUCCESS_STR = \"成功\"\n      FAILURE_STR = \"失敗\"\n      CRITICAL_STR = (SUCCESS_STR + \" ＞ クリティカル！ パワーの代償１／２\").freeze\n      FUMBLE_STR = (FAILURE_STR + \" ＞ ファンブル！ パワーの代償２倍＆振り直し不可\").freeze\n\n      def action_result(total, tens, ones, success_rate)\n        if total == 100 || success_rate <= 0\n          Result.fumble(FUMBLE_STR)\n        elsif total <= success_rate - 100\n          Result.critical(CRITICAL_STR)\n        elsif tens == ones\n          if total <= success_rate\n            Result.critical(CRITICAL_STR)\n          else\n            Result.fumble(FUMBLE_STR)\n          end\n        elsif total <= success_rate\n          Result.success(SUCCESS_STR)\n        else\n          Result.failure(FAILURE_STR)\n        end\n      end\n\n      def roll_d100\n        dice10 = @randomizer.roll_once(10)\n        dice10 = 0 if dice10 == 10\n        dice01 = @randomizer.roll_once(10)\n        dice01 = 0 if dice01 == 10\n\n        roll_result = dice10 * 10 + dice01\n        roll_result = 100 if roll_result == 0\n\n        return roll_result, dice10, dice01\n      end\n\n      class DeathChart\n        def initialize(name, chart)\n          @name = name\n          @chart = chart.freeze\n\n          if @chart.size != 11\n            raise ArgumentError, \"unexpected chart size \#{name.inspect} (given \#{@chart.size}, expected 11)\"\n          end\n        end\n\n        # @param randomizer [Randomizer]\n        # @param minus_score [Integer]\n        # @return [String]\n        def roll(randomizer, minus_score)\n          dice = randomizer.roll_once(10)\n          key_number = dice + minus_score\n\n          key_text, chosen = at(key_number)\n\n          return \"デスチャート（\#{@name}）[マイナス値:\#{minus_score} + 1D10(->\#{dice}) = \#{key_number}] ＞ \#{key_text} ： \#{chosen}\"\n        end\n\n        private\n\n        # key_numberの10から20がindexの0から10に対応する\n        def at(key_number)\n          if key_number < 10\n            [\"10以下\", @chart.first]\n          elsif key_number > 20\n            [\"20以上\", @chart.last]\n          else\n            [key_number.to_s, @chart[key_number - 10]]\n          end\n        end\n      end\n\n      def roll_death_chart(command)\n        m = /^DC([LSC])(\\d+)$/i.match(command)\n        unless m\n          return m\n        end\n\n        chart = DEATH_CHARTS[m[1]]\n        minus_score = m[2].to_i\n\n        return chart.roll(@randomizer, minus_score)\n      end\n\n      DEATH_CHARTS = {\n        'L' => DeathChart.new(\n          '肉体',\n          [\n            \"何も無し。キミは奇跡的に一命を取り留めた。闘いは続く。\",\n            \"激痛が走る。以後、イベント終了時まで、全ての判定の成功率－10％。\",\n            \"キミは［硬直］ポイント２点を得る。［硬直］ポイントを所持している間、キミは「属性：妨害」のパワーを使用することができない。各ラウンド終了時、キミは所持している［硬直］ポイントを１点減らしてもよい。\",\n            \"渾身の一撃!!　キミは〈生存〉判定を行なう。失敗した場合、［死亡］する。\",\n            \"キミは［気絶］ポイント２点を得る。［気絶］ポイントを所持している間、キミはあらゆるパワーを使用できず、自身のターンを得ることもできない。各ラウンド終了時、キミは所持している［気絶］ポイントを１点減らしてもよい。\",\n            \"以後、イベント終了時まで、全ての判定の成功率－20％。\",\n            \"記録的一撃!!　キミは〈生存〉－20％の判定を行なう。失敗した場合、［死亡］する。\",\n            \"キミは［瀕死］ポイント２点を得る。［瀕死］ポイントを所持している間、キミはあらゆるパワーを使用できず、自身のターンを得ることもできない。各ラウンド終了時、キミは所持している［瀕死］ポイントを１点を失う。全ての［瀕死］ポイントを失う前に戦闘が終了しなかった場合、キミは［死亡］する。\",\n            \"叙事詩的一撃!!　キミは〈生存〉－30％の判定を行なう。失敗した場合、［死亡］する。\",\n            \"以後、イベント終了時まで、全ての判定の成功率－30％。\",\n            \"神話的一撃!!　キミは宙を舞って三回転ほどした後、地面に叩きつけられる。見るも無惨な姿。肉体は原型を留めていない（キミは［死亡］した）。\",\n          ]\n        ),\n        'S' => DeathChart.new(\n          '精神',\n          [\n            \"何も無し。キミは歯を食いしばってストレスに耐えた。\",\n            \"以後、イベント終了時まで、全ての判定の成功率－10％。\",\n            \"キミは［恐怖］ポイント２点を得る。［恐怖］ポイントを所持している間、キミは「属性：攻撃」のパワーを使用できない。各ラウンド終了時、キミは所持している［恐怖］ポイントを１点減らしてもよい。\",\n            \"とても傷ついた。キミは〈意志〉判定を行なう。失敗した場合、［絶望］してＮＰＣとなる。\",\n            \"キミは［気絶］ポイント２点を得る。［気絶］ポイントを所持している間、キミはあらゆるパワーを使用できず、自身のターンを得ることもできない。各ラウンド終了時、キミは所持している［気絶］ポイントを１点減らしてもよい。\",\n            \"以後、イベント終了時まで、全ての判定の成功率－20％。\",\n            \"信じるものに裏切られたような痛み。キミは〈意志〉－20％の判定を行なう。失敗した場合、［絶望］してＮＰＣとなる。\",\n            \"キミは［混乱］ポイント２点を得る。［混乱］ポイントを所持している間、キミは本来味方であったキャラクターに対して、可能な限り最大の被害を与える様、行動し続ける。各ラウンド終了時、キミは所持している［混乱］ポイントを１点減らしてもよい。\",\n            \"あまりに残酷な現実。キミは〈意志〉－30％の判定を行なう。失敗した場合、［絶望］してＮＰＣとなる。\",\n            \"以後、イベント終了時まで、全ての判定の成功率－30％。\",\n            \"宇宙開闢の理に触れるも、それは人類の認識限界を超える何かであった。キミは［絶望］し、以後ＮＰＣとなる。\",\n          ]\n        ),\n        'C' => DeathChart.new(\n          '環境',\n          [\n            \"何も無し。キミは黒い噂を握りつぶした。\",\n            \"以後、イベント終了時まで、全ての判定の成功率－10％。\",\n            \"ピンチ！　以後、イベント終了時まで、キミは《支援》を使用できない。\",\n            \"裏切り!!　キミは〈経済〉判定を行なう。失敗した場合、キミはヒーローとしての名声を失い、［汚名］を受ける。\",\n            \"以後、シナリオ終了時まで、代償にクレジットを消費するパワーを使用できない。\",\n            \"キミの悪評は大変なもののようだ。協力者からの支援が打ち切られる。以後、シナリオ終了時まで、全ての判定の成功率－20％。\",\n            \"信頼の失墜!!　キミは〈経済〉－20％の判定を行なう。失敗した場合、キミはヒーローとしての名声を失い、［汚名］を受ける。\",\n            \"以後、シナリオ終了時まで、【環境】系の技能のレベルがすべて０となる。\",\n            \"捏造報道!!　身の覚えのない犯罪への荷担が、スクープとして報道される。キミは〈経済〉－30％の判定を行なう。失敗した場合、キミはヒーローとしての名声を失い、［汚名］を受ける。\",\n            \"以後、イベント終了時まで、全ての判定の成功率－30％。\",\n            \"キミの名は史上最悪の汚点として永遠に歴史に刻まれる。もはやキミを信じる仲間はなく、キミを助ける社会もない。キミは［汚名］を受けた。\",\n          ]\n        )\n      }.freeze\n\n      class RealNameChart < DiceTable::RangeTable\n        def initialize(name, columns, chart)\n          items = chart.map { |l| mix_column(columns, l) }\n          super(name, \"1D100\", items)\n        end\n\n        private\n\n        def mix_column(columns, item)\n          range, names = item\n          if names.size == 1\n            return range, names[0]\n          end\n\n          candidate = columns.zip(names).map { |l| \"\\n\" + l.join(\": \") }.join(\"\")\n          return range, candidate\n        end\n      end\n\n      TABLES = {\n        'RNCJ' => RealNameChart.new(\n          'リアルネームチャート（日本）',\n          ['姓', '名（男）', '名（女）'],\n          [\n            [1..6, ['アイカワ／相川、愛川', 'アキラ／晶、章', 'アン／杏']],\n            [7..12, ['アマミヤ／雨宮', 'エイジ／映司、英治', 'イノリ／祈鈴、祈']],\n            [13..18, ['イブキ／伊吹', 'カズキ／和希、一輝', 'エマ／英真、恵茉']],\n            [19..24, ['オガミ／尾上', 'ギンガ／銀河', 'カノン／花音、観音']],\n            [25..30, ['カイ／甲斐', 'ケンイチロウ／健一郎', 'サラ／沙羅']],\n            [31..36, ['サカキ／榊、阪木', 'ゴウ／豪、剛', 'シズク／雫']],\n            [37..42, ['シシド／宍戸', 'ジロー／次郎、治郎', 'チズル／千鶴、千尋']],\n            [43..48, ['タチバナ／橘、立花', 'タケシ／猛、武', 'ナオミ／直美、尚美']],\n            [49..54, ['ツブラヤ／円谷', 'ツバサ／翼', 'ハル／華、波留']],\n            [55..60, ['ハヤカワ／早川', 'テツ／鉄、哲', 'ヒカル／光']],\n            [61..66, ['ハラダ／原田', 'ヒデオ／英雄', 'ベニ／紅']],\n            [67..72, ['フジカワ／藤川', 'マサムネ／正宗、政宗', 'マチ／真知、町']],\n            [73..78, ['ホシ／星', 'ヤマト／大和', 'ミア／深空、美杏']],\n            [79..84, ['ミゾグチ／溝口', 'リュウセイ／流星', 'ユリコ／由里子']],\n            [85..90, ['ヤシダ／矢志田', 'レツ／烈、裂', 'ルイ／瑠衣、涙']],\n            [91..96, ['ユウキ／結城', 'レン／連、錬', 'レナ／玲奈']],\n            [97..100, ['名無し（何らかの理由で名前を持たない、もしくは失った）']],\n          ]\n        ),\n        'RNCO' => RealNameChart.new(\n          'リアルネームチャート（海外）',\n          ['名（男）', '名（女）', '姓'],\n          [\n            [1..6, ['アルバス', 'アイリス', 'アレン']],\n            [7..12, ['クリス', 'オリーブ', 'ウォーケン']],\n            [13..18, ['サミュエル', 'カーラ', 'ウルフマン']],\n            [19..24, ['シドニー', 'キルスティン', 'オルセン']],\n            [25..30, ['スパイク', 'グウェン', 'カーター']],\n            [31..36, ['ダミアン', 'サマンサ', 'キャラダイン']],\n            [37..42, ['ディック', 'ジャスティナ', 'シーゲル']],\n            [43..48, ['デンゼル', 'タバサ', 'ジョーンズ']],\n            [49..54, ['ドン', 'ナディン', 'パーカー']],\n            [55..60, ['ニコラス', 'ノエル', 'フリーマン']],\n            [61..66, ['ネビル', 'ハーリーン', 'マーフィー']],\n            [67..72, ['バリ', 'マルセラ', 'ミラー']],\n            [73..78, ['ビリー', 'ラナ', 'ムーア']],\n            [79..84, ['ブルース', 'リンジー', 'リーヴ']],\n            [85..90, ['マーヴ', 'ロザリー', 'レイノルズ']],\n            [91..96, ['ライアン', 'ワンダ', 'ワード']],\n            [97..100, ['名無し（何らかの理由で名前を持たない、もしくは失った）']],\n          ]\n        )\n      }.freeze\n\n      def roll_hero_name_chart()\n        dice = @randomizer.roll_once(10)\n        template = HERO_NAME_TEMPLATES[dice - 1]\n\n        template_result = \"ヒーローネームチャート(\#{dice}) ＞ \#{template[:text]}\"\n        if template[:text] == \"任意\"\n          return template_result\n        end\n\n        results = [template_result]\n        elements = []\n        template[:elements].each do |type|\n          base_chart = HERO_NAME_BASE_CHARTS[type]\n          unless base_chart\n            elements.push(type)\n            next\n          end\n\n          result, element = base_chart.roll(@randomizer)\n          results.push(result)\n          elements.push(element)\n        end\n\n        hero_name = elements.join(\"\").gsub(/・{2,}/, \"・\").sub(/・$/, \"\")\n        results.push(\"ヒーローネーム ＞ \#{hero_name}\")\n\n        return results.join(\"\\n\")\n      end\n\n      HERO_NAME_TEMPLATES = [\n        {text: 'ベースＡ＋ベースＡ', elements: ['ベースＡ', 'ベースＢ']},\n        {text: 'ベースＢ', elements: ['ベースＢ']},\n        {text: 'ベースＢ×2回', elements: ['ベースＢ', 'ベースＢ']},\n        {text: 'ベースＢ＋ベースＣ', elements: ['ベースＢ', 'ベースＣ']},\n        {text: 'ベースＡ＋ベースＢ＋ベースＣ', elements: ['ベースＡ', 'ベースＢ', 'ベースＣ']},\n        {text: 'ベースＡ＋ベースＢ×2回', elements: ['ベースＡ', 'ベースＢ', 'ベースＢ']},\n        {text: 'ベースＢ×2回＋ベースＣ', elements: ['ベースＢ', 'ベースＢ', 'ベースＣ']},\n        {text: '（ベースＢ）・オブ・（ベースＢ）', elements: ['ベースＢ', '・オブ・', 'ベースＢ']},\n        {text: '（ベースＢ）・ザ・（ベースＢ）', elements: ['ベースＢ', '・ザ・', 'ベースＢ']},\n        {text: '任意', elements: ['任意']},\n      ].freeze\n\n      class HeroNameBaseChart\n        def initialize(name, items)\n          @name = name\n          @items = items\n        end\n\n        # @param randomizer [Randomizer]\n        # @return [Array<(String, String)>]\n        def roll(randomizer)\n          dice = randomizer.roll_once(10)\n          chosen = @items[dice - 1]\n\n          result = \"\#{@name}(\#{dice}) ＞ \#{chosen}\"\n          if (m = chosen.match(/^［(.+)］$/))\n            element_type = m[1]\n            element_chart = HERO_NAME_ELEMENT_CHARTS[element_type]\n\n            element_result, chosen = element_chart.roll(randomizer)\n            result = [result, element_result].join(\" ＞ \")\n          end\n\n          return result, chosen\n        end\n      end\n\n      class HeroNameElementChart\n        def initialize(name, items)\n          @name = name\n          @items = items\n        end\n\n        # @param randomizer [Randomizer]\n        # @return [Array<(String, String)>]\n        def roll(randomizer)\n          dice = randomizer.roll_once(10)\n          chosen = @items[dice - 1]\n\n          result = \"\#{@name}(\#{dice}) ＞ \#{chosen[:element]} （意味：\#{chosen[:mean]}）\"\n          return result, chosen[:element]\n        end\n      end\n\n      HERO_NAME_BASE_CHARTS = {\n        \"ベースＡ\" => HeroNameBaseChart.new(\n          \"ベースＡ\",\n          [\n            \"ザ・\",\n            \"キャプテン・\",\n            \"ミスター／ミス／ミセス・\",\n            \"ドクター／プロフェッサー・\",\n            \"ロード／バロン／ジェネラル・\",\n            \"マン・オブ・\",\n            \"［強さ］\",\n            \"［色］\",\n            \"マダム／ミドル・\",\n            \"数字（1～10）・\",\n          ]\n        ),\n        \"ベースＢ\" => HeroNameBaseChart.new(\n          \"ベースＢ\",\n          [\n            \"［神話／夢］\",\n            \"［武器］\",\n            \"［動物］\",\n            \"［鳥］\",\n            \"［虫／爬虫類］\",\n            \"［部位］\",\n            \"［光］\",\n            \"［攻撃］\",\n            \"［その他］\",\n            \"数字（1～10）・\",\n          ]\n        ),\n        \"ベースＣ\" => HeroNameBaseChart.new(\n          \"ベースＣ\",\n          [\n            \"マン／ウーマン\",\n            \"ボーイ／ガール\",\n            \"マスク／フード\",\n            \"ライダー\",\n            \"マスター\",\n            \"ファイター／ソルジャー\",\n            \"キング／クイーン\",\n            \"［色］\",\n            \"ヒーロー／スペシャル\",\n            \"ヒーロー／スペシャル\",\n          ]\n        ),\n      }.freeze\n\n      HERO_NAME_ELEMENT_CHARTS = {\n        \"部位\" => HeroNameElementChart.new(\n          \"部位\",\n          [\n            {element: \"ハート\", mean: \"心臓\"},\n            {element: \"フェイス\", mean: \"顔\"},\n            {element: \"アーム\", mean: \"腕\"},\n            {element: \"ショルダー\", mean: \"肩\"},\n            {element: \"ヘッド\", mean: \"頭\"},\n            {element: \"アイ\", mean: \"眼\"},\n            {element: \"フィスト\", mean: \"拳\"},\n            {element: \"ハンド\", mean: \"手\"},\n            {element: \"クロウ\", mean: \"爪\"},\n            {element: \"ボーン\", mean: \"骨\"},\n          ]\n        ),\n        \"武器\" => HeroNameElementChart.new(\n          \"武器\",\n          [\n            {element: \"ナイヴス\", mean: \"短剣\"},\n            {element: \"ソード\", mean: \"剣\"},\n            {element: \"ハンマー\", mean: \"鎚\"},\n            {element: \"ガン\", mean: \"銃\"},\n            {element: \"スティール\", mean: \"刃\"},\n            {element: \"タスク\", mean: \"牙\"},\n            {element: \"ニューク\", mean: \"核\"},\n            {element: \"アロー\", mean: \"矢\"},\n            {element: \"ソウ\", mean: \"ノコギリ\"},\n            {element: \"レイザー\", mean: \"剃刀\"},\n          ]\n        ),\n        \"色\" => HeroNameElementChart.new(\n          \"色\",\n          [\n            {element: \"ブラック\", mean: \"黒\"},\n            {element: \"グリーン\", mean: \"緑\"},\n            {element: \"ブルー\", mean: \"青\"},\n            {element: \"イエロー\", mean: \"黃\"},\n            {element: \"レッド\", mean: \"赤\"},\n            {element: \"バイオレット\", mean: \"紫\"},\n            {element: \"シルバー\", mean: \"銀\"},\n            {element: \"ゴールド\", mean: \"金\"},\n            {element: \"ホワイト\", mean: \"白\"},\n            {element: \"クリア\", mean: \"透明\"},\n          ]\n        ),\n        \"動物\" => HeroNameElementChart.new(\n          \"動物\",\n          [\n            {element: \"バニー\", mean: \"ウサギ\"},\n            {element: \"タイガー\", mean: \"虎\"},\n            {element: \"シャーク\", mean: \"鮫\"},\n            {element: \"キャット\", mean: \"猫\"},\n            {element: \"コング\", mean: \"ゴリラ\"},\n            {element: \"ドッグ\", mean: \"犬\"},\n            {element: \"フォックス\", mean: \"狐\"},\n            {element: \"パンサー\", mean: \"豹\"},\n            {element: \"アス\", mean: \"ロバ\"},\n            {element: \"バット\", mean: \"蝙蝠\"},\n          ]\n        ),\n        \"神話／夢\" => HeroNameElementChart.new(\n          \"神話／夢\",\n          [\n            {element: \"アポカリプス\", mean: \"黙示録\"},\n            {element: \"ウォー\", mean: \"戦争\"},\n            {element: \"エターナル\", mean: \"永遠\"},\n            {element: \"エンジェル\", mean: \"天使\"},\n            {element: \"デビル\", mean: \"悪魔\"},\n            {element: \"イモータル\", mean: \"死なない\"},\n            {element: \"デス\", mean: \"死神\"},\n            {element: \"ドリーム\", mean: \"夢\"},\n            {element: \"ゴースト\", mean: \"幽霊\"},\n            {element: \"デッド\", mean: \"死んでいる\"},\n          ]\n        ),\n        \"攻撃\" => HeroNameElementChart.new(\n          \"攻撃\",\n          [\n            {element: \"ストローク\", mean: \"一撃\"},\n            {element: \"クラッシュ\", mean: \"壊す\"},\n            {element: \"ブロウ\", mean: \"吹き飛ばす\"},\n            {element: \"ヒット\", mean: \"打つ\"},\n            {element: \"パンチ\", mean: \"殴る\"},\n            {element: \"キック\", mean: \"蹴る\"},\n            {element: \"スラッシュ\", mean: \"斬る\"},\n            {element: \"ペネトレイト\", mean: \"貫く\"},\n            {element: \"ショット\", mean: \"撃つ\"},\n            {element: \"キル\", mean: \"殺す\"},\n          ]\n        ),\n        \"その他\" => HeroNameElementChart.new(\n          \"その他\",\n          [\n            {element: \"ヒューマン\", mean: \"人間\"},\n            {element: \"エージェント\", mean: \"代理人\"},\n            {element: \"ブースター\", mean: \"泥棒\"},\n            {element: \"アイアン\", mean: \"鉄\"},\n            {element: \"サンダー\", mean: \"雷\"},\n            {element: \"ウォッチャー\", mean: \"監視者\"},\n            {element: \"プール\", mean: \"水たまり\"},\n            {element: \"マシーン\", mean: \"機械\"},\n            {element: \"コールド\", mean: \"冷たい\"},\n            {element: \"サイド\", mean: \"側面\"},\n          ]\n        ),\n        \"鳥\" => HeroNameElementChart.new(\n          \"鳥\",\n          [\n            {element: \"ホーク\", mean: \"鷹\"},\n            {element: \"ファルコン\", mean: \"隼\"},\n            {element: \"キャナリー\", mean: \"カナリア\"},\n            {element: \"ロビン\", mean: \"コマツグミ\"},\n            {element: \"イーグル\", mean: \"鷲\"},\n            {element: \"オウル\", mean: \"フクロウ\"},\n            {element: \"レイブン\", mean: \"ワタリガラス\"},\n            {element: \"ダック\", mean: \"アヒル\"},\n            {element: \"ペンギン\", mean: \"ペンギン\"},\n            {element: \"フェニックス\", mean: \"不死鳥\"},\n          ]\n        ),\n        \"光\" => HeroNameElementChart.new(\n          \"光\",\n          [\n            {element: \"ライト\", mean: \"光\"},\n            {element: \"シャドウ\", mean: \"影\"},\n            {element: \"ファイアー\", mean: \"炎\"},\n            {element: \"ダーク\", mean: \"暗い\"},\n            {element: \"ナイト\", mean: \"夜\"},\n            {element: \"ファントム\", mean: \"幻影\"},\n            {element: \"トーチ\", mean: \"灯火\"},\n            {element: \"フラッシュ\", mean: \"閃光\"},\n            {element: \"ランタン\", mean: \"手さげランプ\"},\n            {element: \"サン\", mean: \"太陽\"},\n          ]\n        ),\n        \"虫／爬虫類\" => HeroNameElementChart.new(\n          \"虫／爬虫類\",\n          [\n            {element: \"ビートル\", mean: \"甲虫\"},\n            {element: \"バタフライ／モス\", mean: \"蝶／蛾\"},\n            {element: \"スネーク／コブラ\", mean: \"蛇\"},\n            {element: \"アリゲーター\", mean: \"ワニ\"},\n            {element: \"ローカスト\", mean: \"バッタ\"},\n            {element: \"リザード\", mean: \"トカゲ\"},\n            {element: \"タートル\", mean: \"亀\"},\n            {element: \"スパイダー\", mean: \"蜘蛛\"},\n            {element: \"アント\", mean: \"アリ\"},\n            {element: \"マンティス\", mean: \"カマキリ\"},\n          ]\n        ),\n        \"強さ\" => HeroNameElementChart.new(\n          \"強さ\",\n          [\n            {element: \"スーパー／ウルトラ\", mean: \"超\"},\n            {element: \"ワンダー\", mean: \"驚異的\"},\n            {element: \"アルティメット\", mean: \"究極の\"},\n            {element: \"ファンタスティック\", mean: \"途方もない\"},\n            {element: \"マイティ\", mean: \"強い\"},\n            {element: \"インクレディブル\", mean: \"凄い\"},\n            {element: \"アメージング\", mean: \"素晴らしい\"},\n            {element: \"ワイルド\", mean: \"狂乱の\"},\n            {element: \"グレイテスト\", mean: \"至高の\"},\n            {element: \"マーベラス\", mean: \"驚くべき\"},\n          ]\n        ),\n      }.freeze\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:DeadlineHeroes>", "register_prefix", "eval_game_system_specific_command", "command", "$ret_or_1", "resolute_action", "roll_death_chart", "roll_hero_name_chart", "roll_tables", "TABLES", "private", "m", "match", "success_rate", "ArithmeticEvaluator", "eval", "[]", "1", "roll_d100", "roll_result", "dice10", "dice01", "roll_result_text", "format", "result", "action_result", "sequence", "to_s", "text", "text=", "join", "+", "SUCCESS_STR", "freeze", "FAILURE_STR", "total", "tens", "ones", "100", "<=", "0", "Result", "fumble", "FUMBLE_STR", "-", "critical", "CRITICAL_STR", "success", "failure", "@randomizer", "roll_once", "10", "*", "<class:DeathChart>", "initialize", "name", "chart", "@name", "@chart", "size", "11", "raise", "ArgumentError", "inspect", "roll", "randomizer", "minus_score", "dice", "key_number", "at", "key_text", "chosen", "<", "first", ">", "20", "last", "DEATH_CHARTS", "2", "to_i", "DeathChart", "new", "<class:RealNameChart>", "columns", "items", "map", "block in initialize", "l", "block (2 levels) in initialize", "mix_column", "item", "range", "names", "candidate", "zip", "block in mix_column", "block (2 levels) in mix_column", "DiceTable::RangeTable", "DiceTable", "RealNameChart", "6", "7", "12", "13", "18", "19", "24", "25", "30", "31", "36", "37", "42", "43", "48", "49", "54", "55", "60", "61", "66", "67", "72", "73", "78", "79", "84", "85", "90", "91", "96", "97", "template", "HERO_NAME_TEMPLATES", "template_result", "results", "elements", "each", "block in roll_hero_name_chart", "type", "block (2 levels) in roll_hero_name_chart", "base_chart", "HERO_NAME_BASE_CHARTS", "push", "element", "hero_name", "gsub", "sub", "<class:HeroNameBaseChart>", "@items", "element_type", "element_chart", "HERO_NAME_ELEMENT_CHARTS", "element_result", "<class:HeroNameElementChart>", "HeroNameBaseChart", "HeroNameElementChart", "Base"], :mappings=>"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"}}]}