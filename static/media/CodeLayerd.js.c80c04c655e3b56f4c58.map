{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/CodeLayerd.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class CodeLayerd < Base\n      # ゲームシステムの識別子\n      ID = 'CodeLayerd'\n\n      # ゲームシステム名\n      NAME = 'コード：レイヤード'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'こおとれいやあと'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・行為判定（nCL@m[c]+x または nCL+x@m[c]） クリティカル・ファンブル判定あり\n          (ダイス数)CL+(修正値)@(判定値)[(クリティカル値)]+(修正値2)\n\n          @m,[c],+xは省略可能。(@6[1]として処理)\n          n個のD10でmを判定値、cをクリティカル値とした行為判定を行う。\n          nが0以下のときはクリティカルしない1CL判定を行う。(1CL[0]と同一)\n          例）\n          7CL>=5 ：サイコロ7個で判定値6のロールを行い、目標値5に対して判定\n          4CL@7  ：サイコロ4個で判定値7のロールを行い達成値を出す\n          4CL+2@7 または 4CL@7+2  ：サイコロ4個で判定値7のロールを行い達成値を出し、修正値2を足す。\n          4CL[2] ：サイコロ4個でクリティカル値2のロールを行う。\n          0CL : 1CL[0]と同じ判定\n\n          デフォルトダイス：10面\n      MESSAGETEXT\n\n      register_prefix('[+-]?\\d*CL')\n\n      def initialize(command)\n        super(command)\n\n        @sides_implicit_d = 10\n      end\n\n      def eval_game_system_specific_command(command)\n        debug('eval_game_system_specific_command command', command)\n\n        m = /([+-]?\\d+)?CL([+-]\\d+)?(@(\\d))?(\\[(\\d+)\\])?([+-]\\d+)?(>=(\\d+))?/i.match(command)\n        return nil unless m\n\n        base = (m[1] || 1).to_i\n        modifier1 = m[2].to_i\n        target = (m[4] || 6).to_i\n        critical_target = (m[6] || 1).to_i\n        modifier2 = m[7].to_i\n        diff = m[9].to_i if m[9]\n        check_roll(command, base, target, critical_target, diff, modifier1 + modifier2)\n      end\n\n      def check_roll(command, base, target, critical_target, diff, modifier)\n        if base <= 0 # クリティカルしない1D\n          critical_target = 0\n          base = 1\n        end\n        result = Result.new\n\n        target = 10 if target > 10\n        dice_list = @randomizer.roll_barabara(base, 10).sort\n        success_count = dice_list.count { |x| x <= target }\n        critical_count = dice_list.count { |x| x <= critical_target }\n        result.critical = critical_count > 0\n        success_total = success_count + critical_count + modifier\n\n        mod_text = Format.modifier(modifier)\n\n        # (10d10+5)\n        text = \"\#{command} ＞ (\#{base}d10\#{mod_text}) ＞ [\#{dice_list.join(',')}]\#{mod_text} ＞ \"\n        text += \"判定値[\#{target}] \" unless target == 6\n        text += \"クリティカル値[\#{critical_target}] \" unless critical_target == 1\n        text += \"達成値[\#{success_count}]\"\n\n        if success_count <= 0\n          result.fumble = true\n          result.failure = true\n          result.text = \"\#{text} ＞ ファンブル！\"\n          return result\n        end\n\n        text += \"+クリティカル[\#{critical_count}]\" if result.critical?\n        text += mod_text\n        text += \"=[\#{success_total}]\" if result.critical? || modifier != 0\n\n        if diff.nil?\n          result.text = \"\#{text} ＞ \#{success_total}\"\n        elsif success_total >= diff\n          result.text = \"\#{text} ＞ 成功\"\n          result.success = true\n        else\n          result.text = \"\#{text} ＞ 失敗\"\n          result.failure = true\n        end\n        return result\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:CodeLayerd>", "self", "register_prefix", "initialize", "command", "@sides_implicit_d", "10", "eval_game_system_specific_command", "debug", "m", "match", "base", "$ret_or_1", "[]", "1", "to_i", "modifier1", "2", "target", "4", "6", "critical_target", "modifier2", "7", "9", "diff", "check_roll", "+", "modifier", "<=", "0", "result", "Result", "new", ">", "dice_list", "@randomizer", "roll_barabara", "sort", "success_count", "count", "block in check_roll", "x", "block (2 levels) in check_roll", "critical_count", "critical=", "success_total", "mod_text", "Format", "text", "join", "fumble=", "failure=", "text=", "critical?", "nil?", ">=", "success=", "Base"], :mappings=>"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"}}]}