{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/range_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    # 各項目について、Rangeを用いて出目の合計の範囲を指定する、表のクラス。\n    #\n    # このクラスを使うと、表の定義を短く書ける。\n    # このクラスを使って表を定義するときは、各項目を以下の形で書く。\n    #\n    #     [出目の合計の範囲, 内容]\n    #\n    # 「出目の合計の範囲」には、Integerを要素とするRangeか、Integerを置ける。\n    #\n    # roll メソッドで表を振ると、出目の合計値と対応する項目が選ばれる。\n    #\n    # @example 表の定義（バトルテックの致命的命中表）\n    #   CRITICAL_TABLE = RangeTable.new(\n    #     '致命的命中表',\n    #     '2D6',\n    #     [\n    #       [2..7,   '致命的命中はなかった'],\n    #       [8..9,   '1箇所の致命的命中'],\n    #       [10..11, '2箇所の致命的命中'],\n    #       [12,     'その部位が吹き飛ぶ（腕、脚、頭）または3箇所の致命的命中（胴）']\n    #     ]\n    #   )\n    #\n    # @example 表を振った結果\n    #   CRITICAL_TABLE.roll(bcdice).formatted\n    #   # 出目の合計が7の場合 ：\"致命的命中表(7) ＞ 致命的命中はなかった\"\n    #   # 出目の合計が8の場合 ：\"致命的命中表(8) ＞ 1箇所の致命的命中\"\n    #   # 出目の合計が9の場合 ：\"致命的命中表(9) ＞ 1箇所の致命的命中\"\n    #   # 出目の合計が10の場合：\"致命的命中表(10) ＞ 2箇所の致命的命中\"\n    class RangeTable\n      # 表を振った結果を表す構造体\n      # @!attribute [rw] sum\n      #   @return [Integer] 出目の合計\n      # @!attribute [rw] values\n      #   @return [Array<Integer>] 出目の配列\n      # @!attribute [rw] content\n      #   @return [Object] 選ばれた項目の内容\n      # @!attribute [rw] formatted\n      #   @return [String] 整形された結果\n      RollResult = Struct.new(:sum, :values, :content, :formatted) do\n        alias_method :to_s, :formatted\n      end\n\n      # 表の項目を表す構造体\n      # @!attribute [rw] range\n      #   @return [Range] 出目の合計の範囲\n      # @!attribute [rw] content\n      #   @return [Object] 内容\n      Item = Struct.new(:range, :content)\n\n      # 項目を選ぶときのダイスロールの方法を表す正規表現\n      DICE_ROLL_METHOD_RE = /\\A(\\d+)D(\\d+)\\z/i.freeze\n\n      # 表を振った結果の整形処理（既定の処理）\n      DEFAULT_FORMATTER = lambda do |table, result|\n        \"\#{table.name}(\#{result.sum}) ＞ \#{result.content}\"\n      end\n\n      # @return [String] 表の名前\n      attr_reader :name\n      # @return [Integer] 振るダイスの個数\n      attr_reader :num_of_dice\n      # @return [Integer] 振るダイスの面数\n      attr_reader :num_of_sides\n\n      class << self\n        def from_i18n(key, locale)\n          table = I18n.t(key, locale: locale)\n          converted_items = table[:items].map do |item|\n            [conv_string_range(item[0]), item[1]]\n          end\n          new(table[:name], table[:type], converted_items)\n        end\n\n        def conv_string_range(x)\n          case x\n          when Integer\n            return x\n          when String\n            return x.include?(\"..\") ? Range.new(*x.split(\"..\", 2).map { |n| Integer(n) }) : Integer(x)\n          end\n\n          raise(\n            TypeError,\n            \"\#{@name}: \#{x} (\#{x.class}) must be a String or an Integer\"\n          )\n        end\n      end\n\n      # 表を初期化する\n      #\n      # ブロックを与えると、独自の結果整形処理を指定できる。\n      # ブロックは振った表（+table+）と振った結果（+result+）を引数として受け取る。\n      #\n      # @param [String] name 表の名前\n      # @param [String] dice_roll_method\n      #   項目を選ぶときのダイスロールの方法（+'1D6'+ など）\n      # @param [Array<(Range, Object)>, Array<(Integer, Object)>] items\n      #   表の項目の配列。[出目の合計の範囲, 内容]\n      # @yieldparam [RangeTable] table 振った表\n      # @yieldparam [RollResult] result 表を振った結果\n      # @raise [ArgumentError] ダイスロール方法が正しい書式で指定されていなかった場合\n      # @raise [TypeError] 範囲の型が正しくなかった場合\n      # @raise [RangeError] 出目の合計の最小値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の最大値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の範囲にずれや重なりがあった場合\n      #\n      # @example 表の定義（バトルテックの致命的命中表）\n      #   CRITICAL_TABLE = RangeTable.new(\n      #     '致命的命中表',\n      #     '2D6',\n      #     [\n      #       [2..7,   '致命的命中はなかった'],\n      #       [8..9,   '1箇所の致命的命中'],\n      #       [10..11, '2箇所の致命的命中'],\n      #       [12,     'その部位が吹き飛ぶ（腕、脚、頭）または3箇所の致命的命中（胴）']\n      #     ]\n      #   )\n      #\n      # @example 独自の結果整形処理を指定する場合\n      #   CRITICAL_TABLE_WITH_FORMATTER = RangeTable.new(\n      #     '致命的命中表',\n      #     '2D6',\n      #     [\n      #       [2..7,   '致命的命中はなかった'],\n      #       [8..9,   '1箇所の致命的命中'],\n      #       [10..11, '2箇所の致命的命中'],\n      #       [12,     'その部位が吹き飛ぶ（腕、脚、頭）または3箇所の致命的命中（胴）']\n      #     ]\n      #   ) do |table, result|\n      #     \"致命的命中発生? ＞ \#{result.sum}[\#{result.values}] ＞ \#{result.content}\"\n      #   end\n      #\n      #   CRITICAL_TABLE_WITH_FORMATTER.roll(bcdice).formatted\n      #   #=> \"致命的命中発生? ＞ 11[5,6] ＞ 2箇所の致命的命中\"\n      def initialize(name, dice_roll_method, items, &formatter)\n        @name = name.freeze\n        @formatter = formatter || DEFAULT_FORMATTER\n\n        m = DICE_ROLL_METHOD_RE.match(dice_roll_method)\n        unless m\n          raise(\n            ArgumentError,\n            \"\#{@name}: invalid dice roll method: \#{dice_roll_method}\"\n          )\n        end\n\n        @num_of_dice = m[1].to_i\n        @num_of_sides = m[2].to_i\n\n        store(items)\n      end\n\n      # 指定された値に対応する項目を返す\n      # @param [Integer] value 値（出目の合計）\n      # @return [Item] 指定された値に対応する項目\n      # @raise [RangeError] 範囲外の値が指定された場合\n      def fetch(value)\n        item = @items.find { |i| i.range.include?(value) }\n        unless item\n          raise RangeError, \"\#{@name}: value is out of range: \#{value}\"\n        end\n\n        return item\n      end\n\n      # 表を振る\n      # @param randomizer [#roll_barabara] ランダマイザ\n      # @return [RollResult] 表を振った結果\n      def roll(randomizer)\n        values = randomizer.roll_barabara(@num_of_dice, @num_of_sides)\n        sum = values.sum()\n\n        result = RollResult.new(sum, values, fetch(sum).content)\n        result.formatted = @formatter[self, result]\n\n        return result\n      end\n\n      private\n\n      # 表の項目を格納する\n      # @param [Array<(Range, Object)>, Array<(Integer, Object)>] items\n      #   表の項目の配列。[出目の合計の範囲, 内容]\n      # @return [self]\n      # @raise [TypeError] 範囲の型が正しくなかった場合\n      # @raise [RangeError] 出目の合計の最小値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の最大値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の範囲にずれや重なりがあった場合\n      def store(items)\n        items_with_range = items.map { |r, c| [coerce_to_int_range(r), c] }\n        sorted_items = items_with_range.sort_by { |r, _| r.min }\n\n        assert_min_sum_is_covered(sorted_items)\n        assert_max_sum_is_covered(sorted_items)\n        assert_no_gap_or_overlap_in_ranges(sorted_items)\n\n        @items = sorted_items\n                 .map { |range, content| Item.new(range, content.freeze).freeze }\n                 .freeze\n\n        self\n      end\n\n      # 引数を強制的に整数を要素とするRangeに変換する\n      # @param [Range, Integer] x 変換対象\n      # @return [Range] 整数を要素とするRange\n      # @raise [TypeError] xの型に対応していなかった場合\n      def coerce_to_int_range(x)\n        case x\n        when Integer\n          return Range.new(x, x)\n        when Range\n          if x.begin.is_a?(Integer) && x.end.is_a?(Integer)\n            return x\n          end\n        end\n\n        raise(\n          TypeError,\n          \"\#{@name}: \#{x} (\#{x.class}) must be an Integer or a Range with Integers \"\n        )\n      end\n\n      # 出目の合計の最小値がカバーされていることを確認する\n      # @param [Array<(Range, Object)>] sorted_items\n      #   ソートされた、項目の配列\n      # @return [self]\n      # @raise [RangeError] 出目の合計の最小値がカバーされていなかった場合\n      def assert_min_sum_is_covered(sorted_items)\n        min_sum = @num_of_dice\n        range = sorted_items.first[0]\n        unless range.include?(min_sum)\n          raise(\n            RangeError,\n            \"\#{@name}: min value (\#{min_sum}) is not covered: \#{range}\"\n          )\n        end\n\n        self\n      end\n\n      # 出目の合計の最大値がカバーされていることを確認する\n      # @param [Array<(Range, Object)>] sorted_items\n      #   ソートされた、項目の配列\n      # @return [self]\n      # @raise [RangeError] 出目の合計の最大値がカバーされていなかった場合\n      def assert_max_sum_is_covered(sorted_items)\n        max_sum = @num_of_dice * @num_of_sides\n        range = sorted_items.last[0]\n        unless range.include?(max_sum)\n          raise(\n            RangeError,\n            \"\#{@name}: max value (\#{max_sum}) is not covered: \#{range}\"\n          )\n        end\n\n        self\n      end\n\n      # 出目の合計の範囲にずれや重なりがないことを確認する\n      # @param [Array<(Range, Object)>] sorted_items\n      #   ソートされた、項目の配列\n      # @return [self]\n      # @raise [RangeError] 出目の合計の範囲にずれや重なりがあった場合\n      def assert_no_gap_or_overlap_in_ranges(sorted_items)\n        sorted_items.each_cons(2) do |i1, i2|\n          r1 = i1[0]\n          r2 = i2[0]\n\n          max1 = r1.max\n          next_of_max1 = max1 + 1\n\n          if r2.include?(max1)\n            raise RangeError, \"\#{@name}: Range overlap: \#{r1} and \#{r2}\"\n          end\n\n          unless r2.include?(next_of_max1)\n            raise RangeError, \"\#{@name}: Range gap: \#{r1} and \#{r2}\"\n          end\n        end\n\n        self\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:RangeTable>", "new", "Struct", "block in <class:RangeTable>", "block (2 levels) in <class:RangeTable>", "self", "alias_method", "freeze", "lambda", "table", "result", "name", "sum", "content", "attr_reader", "from_i18n", "key", "locale", "I18n", "t", "converted_items", "map", "[]", "block in from_i18n", "item", "block (2 levels) in from_i18n", "conv_string_range", "0", "1", "x", "Integer", "$ret_or_1", "String", "include?", "Range", "split", "2", "block in conv_string_range", "n", "block (2 levels) in conv_string_range", "raise", "TypeError", "@name", "class", "initialize", "dice_roll_method", "items", "@formatter", "formatter", "DEFAULT_FORMATTER", "m", "DICE_ROLL_METHOD_RE", "match", "ArgumentError", "@num_of_dice", "to_i", "@num_of_sides", "store", "fetch", "value", "find", "@items", "block in fetch", "i", "block (2 levels) in fetch", "range", "RangeError", "roll", "randomizer", "values", "roll_barabara", "RollResult", "formatted=", "private", "items_with_range", "block in store", "r", "c", "block (2 levels) in store", "coerce_to_int_range", "sorted_items", "sort_by", "_", "min", "assert_min_sum_is_covered", "assert_max_sum_is_covered", "assert_no_gap_or_overlap_in_ranges", "Item", "begin", "is_a?", "end", "min_sum", "first", "max_sum", "*", "last", "each_cons", "block in assert_no_gap_or_overlap_in_ranges", "i1", "i2", "block (2 levels) in assert_no_gap_or_overlap_in_ranges", "r1", "r2", "max1", "max", "next_of_max1", "+"], :mappings=>"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"}}, {:offset=>{:line=>207, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/BlackJacket.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire 'bcdice/dice_table/range_table'\n\nmodule BCDice\n  module GameSystem\n    class BlackJacket < Base\n      # ゲームシステムの識別子\n      ID = 'BlackJacket'\n\n      # ゲームシステム名\n      NAME = 'ブラックジャケットRPG'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'ふらつくしあけつとRPG'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・行為判定（BJx）\n        　x：成功率\n        　例）BJ80\n        　クリティカル、ファンブルの自動的判定を行います。\n        　「BJ50+20-30」のように加減算記述も可能。\n        　成功率は上限100％、下限０％\n        ・デスチャート(DCxY)\n        　x：チャートの種類。肉体：DCL、精神：DCS、環境：DCC\n        　Y=マイナス値\n        　例）DCL5：ライフが -5 の判定\n        　　　DCS3：サニティーが -3 の判定\n        　　　DCC0：クレジット 0 の判定\n        ・チャレンジ・ペナルティ・チャート（CPC）\n        ・サイドトラック・チャート（STC）\n      INFO_MESSAGE_TEXT\n\n      def eval_game_system_specific_command(command)\n        resolute_action(command) || roll_death_chart(command) || roll_tables(command, TABLES)\n      end\n\n      private\n\n      def resolute_action(command)\n        m = /^BJ(\\d+([+-]\\d+)*)$/.match(command)\n        unless m\n          return nil\n        end\n\n        success_rate = ArithmeticEvaluator.eval(m[1])\n\n        roll_result, dice10, dice01 = roll_d100\n        roll_result_text = format('%02d', roll_result)\n\n        result = action_result(roll_result, dice10, dice01, success_rate)\n\n        sequence = [\n          \"行為判定(成功率:\#{success_rate}％)\",\n          \"1D100[\#{dice10},\#{dice01}]=\#{roll_result_text}\",\n          roll_result_text.to_s,\n          result.text\n        ]\n\n        result.text = sequence.join(\" ＞ \")\n        result\n      end\n\n      SUCCESS_STR = \"成功\"\n      FAILURE_STR = \"失敗\"\n      CRITICAL_STR = (SUCCESS_STR + \" ＞ クリティカル！ パワーの代償１／２\").freeze\n      FUMBLE_STR = (FAILURE_STR + \" ＞ ファンブル！ パワーの代償２倍＆振り直し不可\").freeze\n      MISERY_STR = (FAILURE_STR + \" ＞ ミザリー！ パワーの代償２倍＆振り直し不可\").freeze\n\n      def action_result(total, tens, ones, success_rate)\n        if total == 100\n          Result.fumble(MISERY_STR)\n        elsif success_rate <= 0\n          Result.fumble(FUMBLE_STR)\n        elsif total <= success_rate - 100\n          Result.critical(CRITICAL_STR)\n        elsif tens == ones\n          if total <= success_rate\n            Result.critical(CRITICAL_STR)\n          else\n            Result.fumble(FUMBLE_STR)\n          end\n        elsif total <= success_rate\n          Result.success(SUCCESS_STR)\n        else\n          Result.failure(FAILURE_STR)\n        end\n      end\n\n      def roll_d100\n        dice10 = @randomizer.roll_once(10)\n        dice10 = 0 if dice10 == 10\n        dice01 = @randomizer.roll_once(10)\n        dice01 = 0 if dice01 == 10\n\n        roll_result = dice10 * 10 + dice01\n        roll_result = 100 if roll_result == 0\n\n        return roll_result, dice10, dice01\n      end\n\n      class DeathChart\n        def initialize(name, chart)\n          @name = name\n          @chart = chart.freeze\n\n          if @chart.size != 11\n            raise ArgumentError, \"unexpected chart size \#{name.inspect} (given \#{@chart.size}, expected 11)\"\n          end\n        end\n\n        # @param randomizer [Randomizer]\n        # @param minus_score [Integer]\n        # @return [String]\n        def roll(randomizer, minus_score)\n          dice = randomizer.roll_once(10)\n          key_number = dice + minus_score\n\n          key_text, chosen = at(key_number)\n\n          return \"デスチャート（\#{@name}）[マイナス値:\#{minus_score} + 1D10(->\#{dice}) = \#{key_number}] ＞ \#{key_text} ： \#{chosen}\"\n        end\n\n        private\n\n        # key_numberの10から20がindexの0から10に対応する\n        def at(key_number)\n          if key_number < 10\n            [\"10以下\", @chart.first]\n          elsif key_number > 20\n            [\"20以上\", @chart.last]\n          else\n            [key_number.to_s, @chart[key_number - 10]]\n          end\n        end\n      end\n\n      def roll_death_chart(command)\n        m = /^DC([LSC])(\\d+)$/i.match(command)\n        unless m\n          return m\n        end\n\n        chart = DEATH_CHARTS[m[1]]\n        minus_score = m[2].to_i\n\n        return chart.roll(@randomizer, minus_score)\n      end\n\n      DEATH_CHARTS = {\n        'L' => DeathChart.new(\n          '肉体',\n          [\n            \"何も無し。キミは奇跡的に一命を取り留めた。闘いは続く。\",\n            \"激痛が走る。以後、イベント終了時まで、全ての判定の成功率－10％。\",\n            \"もう、体が動かない……。キミは［硬直２］を受ける。\",\n            \"渾身の一撃!!　キミは〈生存〉判定を行なう。失敗した場合、［死亡］する。\",\n            \"突然、目の前が真っ暗になった。キミは［気絶２］を受ける。\",\n            \"以後、イベント終了時まで、全ての判定の成功率－20％。\",\n            \"記録的一撃!!　キミは〈生存〉－20％の判定を行なう。失敗した場合、［死亡］する。\",\n            \"生きているのか死んでいるのか。キミは［瀕死２］を受ける。\",\n            \"叙事詩的一撃!!　キミは〈生存〉－30％の判定を行なう。失敗した場合、［死亡］する。\",\n            \"以後、イベント終了時まで、全ての判定の成功率－30％。\",\n            \"神話的一撃!!　キミは宙を舞って三回転ほどした後、地面に叩きつけられる。見るも無惨な姿。肉体は原型を留めていない（キミは［死亡］した）。\",\n          ]\n        ),\n        'S' => DeathChart.new(\n          '精神',\n          [\n            \"何も無し。キミは歯を食いしばってストレスに耐えた。\",\n            \"以後、イベント終了時まで、全ての判定の成功率－10％。\",\n            \"云い知れぬ恐怖がキミを襲う。キミは［恐怖２］を受ける。\",\n            \"とても傷ついた。キミは〈意思〉判定を行なう。失敗した場合、［絶望］してNPCとなる。\",\n            \"キミは意識を失った。キミは［気絶２］を受ける。\",\n            \"以後、イベント終了時まで、全ての判定の成功率－20％。\",\n            \"信じる者にだまされたような痛み。キミは〈意思〉－20％の判定を行なう。失敗した場合、［絶望］してＮＰＣとなる。\",\n            \"仲間に裏切られたのかも知れない。キミは［混乱２］を受ける。\",\n            \"あまりに残酷な現実。キミは〈意思〉－30％の判定を行なう。失敗した場合、［絶望］してＮＰＣとなる。\",\n            \"以後、イベント終了時まで、全ての判定の成功率－30％。\",\n            \"宇宙開闢の理に触れるも、それは人類の認識限界を超える何かであった。キミは［絶望］し、以後ＮＰＣとなる。\",\n          ]\n        ),\n        'C' => DeathChart.new(\n          '環境',\n          [\n            \"何も無し。キミは黒い噂を握りつぶした。\",\n            \"以後、イベント終了時まで、全ての判定の成功率－10％。\",\n            \"ピンチ！　以後、ラウンド終了時まで、キミはカルマを使用できない。\",\n            \"悪い噂が流れる。キミは〈交渉〉判定を行なう。失敗した場合、キミは仲間からの信頼を失って［無縁］され、ＮＰＣとなる。\",\n            \"以後、イベント終了時まで、代償にクレジットを消費するパワーを使用できない。\",\n            \"キミの悪評が世間に知れ渡る。協力者からの支援が打ち切られる。以後、シナリオ終了時まで、全ての判定の成功率－20％。\",\n            \"裏切り!!　キミは〈経済〉－20％の判定を行なう。失敗した場合、キミは周囲からの信頼を失い、［無縁］され、ＮＰＣとなる。\",\n            \"以後、シナリオ終了時まで、【環境】系の技能のレベルがすべて０となる。\",\n            \"捏造報道？　身に覚えのない背信行為がスクープとして報道される。キミは〈心理〉－30％の判定を行なう。失敗した場合、キミは人としての尊厳を失い、［無縁］を受ける。\",\n            \"以後、イベント終了時まで、全ての判定の成功率－30％。\",\n            \"キミの名は史上最悪の汚点として歴史に刻まれる。もはらキミを信じる仲間はなく、キミを助ける社会もない。キミは［無縁］され、以後ＮＰＣとなる。\",\n          ]\n        )\n      }.freeze\n\n      TABLES = {\n        \"CPC\" => DiceTable::Table.new(\n          \"チャレンジ・ペナルティ・チャート\",\n          \"1D10\",\n          [\n            \"逝去\\n助けるべきＮＰＣ（ヒロインなど）が死亡する。\",\n            \"黒星\\n敵が目的を成就し、事件はPCの敗北で終了する。そのまま余韻フェイズへ。\",\n            \"活性\\n敵のボスのライフを２倍にしたうえで決戦フェイズを開始する。\",\n            \"攻勢\\n敵ボスの与ダメージに＋２D6の修正を与えたうえで決戦フェイズを開始する。\",\n            \"大挙\\n敵の数（ボス以外）を２倍にしたうえで決戦フェイズを開始する。\",\n            \"暗黒\\nすべてのエリアを［暗闇］にしたうえで決戦フェイズを開始する。\",\n            \"猛火\\n２つの戦場エリアを［ダメージゾーン２］にして、決戦フェイズを開始する。\",\n            \"伏兵\\n敵の半分をエリア１とエリア２に移動させた状態で決戦フェイズを開始する。\",\n            \"満腹\\nボス以外の敵のライフをすべて２倍にしたうえで決戦フェイズを開始する。\",\n            \"封印\\n決戦フェイズの間、PCはカルマを使用できない。決戦フェイズを開始する。\"\n          ]\n        ),\n        \"STC\" => DiceTable::Table.new(\n          \"サイドトラック・チャート\",\n          \"1D10\",\n          [\n            \"邂逅\\n偶然、ＮＰＣと出会う。どのＮＰＣが現れるかはGMが決定すること。\",\n            \"事故\\n交通事故に出くわす。周囲ではパニックが起きているかも知れない。\",\n            \"午睡\\n強烈な睡魔に襲われる。まさか、新手のヴィランの能力か？\",\n            \"告白\\nＮＰＣのひとりから、今まで秘めていた思いを吐露される。\",\n            \"設定\\n新たな設定が明かされる。実はＮＰＣの父だったとか、生来目が見えん、とか。\",\n            \"刺客\\n何者かから攻撃を受ける。第３勢力か？\",\n            \"会敵\\n偶然、仇敵のひとりと出くわす。追うべきか？　無視すべきか？\",\n            \"不審\\n怪しい人物を見かける。追うべきか？　無視すべきか？\",\n            \"遭遇\\nシナリオと関係のないヴィラン組織と遭遇する。\",\n            \"平和\\n特に何も起きなかった。\",\n          ]\n        ),\n      }.freeze\n\n      register_prefix(\n        'BJ',\n        'DC[LSC]',\n        TABLES.keys\n      )\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:BlackJacket>", "eval_game_system_specific_command", "command", "$ret_or_1", "$ret_or_2", "resolute_action", "roll_death_chart", "roll_tables", "TABLES", "private", "m", "match", "success_rate", "ArithmeticEvaluator", "eval", "[]", "1", "roll_d100", "roll_result", "dice10", "dice01", "roll_result_text", "format", "result", "action_result", "sequence", "to_s", "text", "text=", "join", "+", "SUCCESS_STR", "freeze", "FAILURE_STR", "total", "tens", "ones", "100", "Result", "fumble", "MISERY_STR", "<=", "0", "FUMBLE_STR", "-", "critical", "CRITICAL_STR", "success", "failure", "@randomizer", "roll_once", "10", "*", "<class:DeathChart>", "initialize", "name", "chart", "@name", "@chart", "size", "11", "raise", "ArgumentError", "inspect", "roll", "randomizer", "minus_score", "dice", "key_number", "at", "key_text", "chosen", "<", "first", ">", "20", "last", "DEATH_CHARTS", "2", "to_i", "DeathChart", "new", "DiceTable::Table", "DiceTable", "register_prefix", "keys", "Base"], :mappings=>"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"}}]}