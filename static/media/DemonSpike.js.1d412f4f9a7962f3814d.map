{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/DemonSpike.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class DemonSpike < Base\n      # ゲームシステムの識別子\n      ID = 'DemonSpike'\n\n      # ゲームシステム名\n      NAME = 'デモンスパイク'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'てもんすはいく'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・行為判定 xDS+y\n        　行為判定を行い、達成値、成否、成功度を出力する。\n        　x: ダイス数（省略：2）\n        　y: 能力値やスパイク能力による達成値の修正（省略可）\n      INFO_MESSAGE_TEXT\n\n      register_prefix('\\d*DS')\n\n      def eval_game_system_specific_command(command)\n        roll_action(command)\n      end\n\n      private\n\n      def roll_action(command)\n        parser = Command::Parser.new(\"DS\", round_type: @round_type)\n                                .enable_prefix_number\n                                .restrict_cmp_op_to(nil)\n        parsed = parser.parse(command)\n        unless parsed\n          return nil\n        end\n\n        parsed.prefix_number ||= 2\n        if parsed.prefix_number < 2\n          return nil\n        end\n\n        step = roll_step(parsed.prefix_number)\n        step_list = [step]\n        while step[:dice_sum] == 10\n          step = roll_step(parsed.prefix_number)\n          step_list.push(step)\n        end\n\n        is_fumble = step_list[0][:dice_sum] == 2\n        total = is_fumble ? 0 : step_list.sum { |s| s[:dice_sum] } + parsed.modify_number\n        success_level = (total / 10).floor\n        is_success = total >= 10\n\n        res =\n          if is_success\n            \"成功, 成功度\#{success_level}\"\n          elsif is_fumble\n            \"自動的失敗\"\n          else\n            \"失敗\"\n          end\n\n        sequence = [\n          \"(\#{parsed})\",\n          step_list.map { |s| \"\#{s[:dice_sum]}[\#{s[:dice_list].join(',')}]\" },\n          total,\n          res,\n        ].flatten\n\n        return Result.new.tap do |r|\n          r.condition = is_success\n          r.critical = step_list.length > 1\n          r.fumble = is_fumble\n          r.text = sequence.join(\" ＞ \")\n        end\n      end\n\n      def roll_step(times)\n        dice_list = @randomizer.roll_barabara(times, 6).sort.reverse\n        dice_sum = (dice_list[0] + dice_list[1]).clamp(2, 10)\n\n        return {dice_list: dice_list, dice_sum: dice_sum}\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:DemonSpike>", "self", "register_prefix", "eval_game_system_specific_command", "command", "roll_action", "private", "parser", "Command::Parser", "Command", "new", "@round_type", "enable_prefix_number", "restrict_cmp_op_to", "parsed", "parse", "$ret_or_1", "prefix_number", "prefix_number=", "2", "<", "step", "roll_step", "step_list", "[]", "10", "push", "is_fumble", "0", "==", "total", "+", "sum", "block in roll_action", "s", "block (2 levels) in roll_action", "modify_number", "success_level", "/", "floor", "is_success", ">=", "res", "sequence", "map", "join", "flatten", "tap", "Result", "r", "condition=", "critical=", ">", "length", "1", "fumble=", "text=", "times", "dice_list", "@randomizer", "roll_barabara", "6", "sort", "reverse", "dice_sum", "clamp", "Base"], :mappings=>"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"}}]}