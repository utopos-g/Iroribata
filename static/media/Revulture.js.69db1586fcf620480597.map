{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Revulture.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Revulture < Base\n      # ゲームシステムの識別子\n      ID = 'Revulture'\n\n      # ゲームシステム名\n      NAME = '光砕のリヴァルチャー'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'こうさいのりうあるちやあ'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~HELP\n        ■アタック判定（ xAT, xATK, xATTACK ）\n        x: ダイス数（加算 + と除算 / を使用可能）\n        例） 3AT, 4ATK, 5+6ATTACK, 15/2AT\n\n        □アタック判定　目標値つき（ xAT<=y, xATK<=y, xATTACK<=y ）\n        x: ダイス数（加算 + と除算 / を使用可能）\n        y: 目標値（ 1 以上 6 以下。加算 + を使用可能）\n        例） 3AT<=4, 3AT<=2+1\n\n        □アタック判定　目標値＆追加ダメージつき（ xAT<=y[>=a:+b], xATK<=y[>=a:+b], xATTACK<=y[z] ）\n        x: ダイス数（加算 + と除算 / を使用可能）\n        y: 目標値（ 1 以上 6 以下。加算 + を使用可能）\n        z: 追加ダメージの規則（詳細は後述）（※複数同時に指定可能）\n\n        ▽追加ダメージの規則 [a:+b]\n        a: ヒット数が a なら\n        　=a　（ヒット数が a に等しい）\n        　>=a　（ヒット数が a 以上）\n        b: ダメージを b 点追加\n\n        例） 3AT<=4[>=2:+3] #ルールブックp056「グレングラントAR」\n        例） 2AT<=4[=1:+5][>=2:+8] #ルールブックp067「ファーボル・ドラゴンブレス」\n      HELP\n\n      ATTACK_ROLL_REG = %r{^(\\d+([+/]\\d+)*)?AT(TACK|K)?(<=([1-6](\\+\\d)*))?((\\[>?=\\d+:\\+\\d+\\])+)?}i.freeze\n      register_prefix('\\d+([+\\/]\\d+)*AT')\n\n      def eval_game_system_specific_command(command)\n        if (m = ATTACK_ROLL_REG.match(command))\n          roll_attack(m[1], m[5], m[7])\n        end\n      end\n\n      private\n\n      def roll_attack(dice_count_expression, border_expression, additional_damage_rules)\n        dice_count = Arithmetic.eval(dice_count_expression, RoundType::FLOOR)\n        border = Arithmetic.eval(border_expression, RoundType::FLOOR).clamp(1, 6) if border_expression\n\n        command = make_command_text(dice_count, border, additional_damage_rules)\n\n        if dice_count <= 0\n          return \"\#{command} ＞ ダイス数が 0 です\"\n        elsif border.nil? && additional_damage_rules\n          return \"\#{command} ＞ 目標値が指定されていないため、追加ダメージを算出できません\"\n        end\n\n        dices = @randomizer.roll_barabara(dice_count, 6).sort\n\n        critical_hit_count = dices.count(1)\n        hit_count = dices.count { |dice| dice <= border } + critical_hit_count if border\n        damage = calc_damage(hit_count, additional_damage_rules)\n\n        message_elements = []\n        message_elements << command\n        message_elements << dices.join(',')\n        message_elements << \"クリティカル \#{critical_hit_count}\" if critical_hit_count > 0\n        message_elements << \"ヒット数 \#{hit_count}\" if hit_count\n        message_elements << \"ダメージ \#{damage}\" if damage\n\n        Result.new(message_elements.join(' ＞ ')).tap do |r|\n          r.condition = hit_count > 0 if hit_count\n          r.critical = critical_hit_count > 0\n        end\n      end\n\n      def make_command_text(dice_count, border, additional_damage_rules)\n        command = \"\#{dice_count}attack\"\n        command += \"<=\#{border}\" if border\n        command += additional_damage_rules if additional_damage_rules\n\n        \"(\#{command})\"\n      end\n\n      def calc_damage(hit_count, additional_damage_rules)\n        return nil unless additional_damage_rules\n\n        damage = hit_count\n        parse_additional_damage_rules(additional_damage_rules).each do |rule|\n          if rule[:condition].call(hit_count)\n            damage += rule[:additinal_damage]\n          end\n        end\n\n        damage\n      end\n\n      def parse_additional_damage_rules(source)\n        source.scan(/\\[(>?=)(\\d+):\\+(\\d+)\\]/).map do |matched|\n          {\n            condition: make_additional_damage_condition(matched[0], matched[1].to_i),\n            additinal_damage: matched[2].to_i,\n          }\n        end\n      end\n\n      def make_additional_damage_condition(comparer, comparing_target)\n        case comparer\n        when '='\n          lambda { |hit_count| hit_count == comparing_target }\n        when '>='\n          lambda { |hit_count| hit_count >= comparing_target }\n        end\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Revulture>", "freeze", "self", "register_prefix", "eval_game_system_specific_command", "command", "m", "ATTACK_ROLL_REG", "match", "roll_attack", "[]", "1", "5", "7", "private", "dice_count_expression", "border_expression", "additional_damage_rules", "dice_count", "Arithmetic", "eval", "RoundType::FLOOR", "RoundType", "border", "clamp", "6", "make_command_text", "<=", "0", "nil?", "dices", "@randomizer", "roll_barabara", "sort", "critical_hit_count", "count", "hit_count", "+", "block in roll_attack", "dice", "block (2 levels) in roll_attack", "damage", "calc_damage", "message_elements", "<<", "join", ">", "tap", "Result", "new", "r", "condition=", "critical=", "each", "parse_additional_damage_rules", "block in calc_damage", "rule", "call", "block (2 levels) in calc_damage", "source", "map", "scan", "block in parse_additional_damage_rules", "matched", "block (2 levels) in parse_additional_damage_rules", "make_additional_damage_condition", "to_i", "2", "comparer", "comparing_target", "lambda", "block in make_additional_damage_condition", "block (2 levels) in make_additional_damage_condition", "==", ">=", "Base"], :mappings=>"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"}}]}