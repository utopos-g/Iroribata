{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Kutulu.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Kutulu < Base\n      # ゲームシステムの識別子\n      ID = 'Kutulu'\n\n      # ゲームシステム名\n      NAME = 'Kutulu'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'くとうるう'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGETEXT\n        ■判定　nKU        n: ダイス数\n\n        例)3KU: ダイスを3個振って、その結果を表示(ギリギリでの成功も表示)\n\n        ■対抗判定　nKR        n: ダイス数\n\n        例)2KR: ダイスを2個振って、その結果を表示。対抗判定用の3桁の数字も出力。(大きい方が勝利)\n      INFO_MESSAGETEXT\n\n      register_prefix('\\dK[UR]')\n\n      def initialize(command)\n        super(command)\n\n        @sort_barabara_dice = true # バラバラロール（Bコマンド）でソート有\n      end\n\n      def eval_game_system_specific_command(command)\n        resolute_action(command) || resolute_competition(command)\n      end\n\n      private\n\n      # アクティヴ能力の判定\n      # @param [String] command\n      # @return [Result]\n      def resolute_action(command)\n        m = /(\\d)KU/.match(command)\n        return nil unless m\n\n        num_dices = m[1].to_i\n\n        dices = @randomizer.roll_barabara(num_dices, 6).sort\n        dice_text = dices.join(\",\")\n\n        output = \"(\#{num_dices}KU) ＞ \#{dice_text}\"\n\n        success_num = dices.count { |val| val >= 4 }\n        counts_4 = dices.count(4)\n        if success_num > 0\n          output += \" ＞ 成功数\#{success_num}\"\n          if success_num == 1 && counts_4 == 1\n            output += \" ＞ *ギリギリでの成功\"\n          end\n          return Result.success(output)\n        else\n          output += \" ＞ 失敗\"\n          return Result.failure(output)\n        end\n      end\n\n      # 対抗判定用出力\n      # @param [String] command\n      # @return [Result]\n      def resolute_competition(command)\n        m = /(\\d)KR/.match(command)\n        return nil unless m\n\n        num_dices = m[1].to_i\n\n        dices = @randomizer.roll_barabara(num_dices, 6).sort\n        dice_text = dices.join(\",\")\n\n        counts_6 = dices.count(6)\n        counts_5 = dices.count(5)\n        success_num = dices.count { |val| val >= 4 }\n        com_text = format(\"(%d%d%d)\", success_num, counts_6, counts_5)\n\n        output = \"(\#{num_dices}KR) ＞ \#{dice_text} ＞ \#{com_text}\"\n\n        if success_num > 0\n          return Result.success(output)\n        else\n          return Result.failure(output)\n        end\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Kutulu>", "self", "register_prefix", "initialize", "command", "@sort_barabara_dice", "eval_game_system_specific_command", "$ret_or_1", "resolute_action", "resolute_competition", "private", "m", "match", "num_dices", "[]", "1", "to_i", "dices", "@randomizer", "roll_barabara", "6", "sort", "dice_text", "join", "output", "success_num", "count", "block in resolute_action", "val", "block (2 levels) in resolute_action", ">=", "4", "counts_4", ">", "0", "+", "Result", "success", "failure", "counts_6", "counts_5", "5", "block in resolute_competition", "block (2 levels) in resolute_competition", "com_text", "format", "Base"], :mappings=>"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"}}]}