{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/AFF2e.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class AFF2e < Base\n      # ゲームシステムの識別子\n      ID = 'AFF2e'\n\n      # ゲームシステム名\n      NAME = 'ADVANCED FIGHTING FANTASY 2nd Edition'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'あとはんすとふあいていんくふあんたしい2'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        対抗なしロール\\tFF{目標値}+{補正}\n        対抗ロール\\tFR{能力値}+{補正}\n        武器ロール\\tFD[2,3,3,3,3,3,4]+{補正}\n        防具ロール\\tFD[0,0,0,0,1+1,1+1,2+2]+{補正}\n      MESSAGETEXT\n\n      # ダイスボットで使用するコマンドを配列で列挙する\n      register_prefix('FF.+', 'FR.+', 'FD.+')\n\n      def explicit_sign(i)\n        format('%+d', i)\n      end\n\n      def eval_term(term)\n        value = 0\n        term.scan(/[+-]?\\d+/) do |fact|\n          value += fact.to_i\n        end\n        value\n      end\n\n      def parentheses(str)\n        '(' + str + ')'\n      end\n\n      def successful_or_failed(total, diff)\n        case total\n        when  2\n          diff <=  1 ? '成功（大成功ではない）' : '大成功！'\n        when 12\n          diff >= 12 ? '失敗（大失敗ではない）' : '大失敗！'\n        else\n          total <= diff ? '成功' : '失敗'\n        end\n      end\n\n      def critical(total)\n        case total\n        when  2\n          'ファンブル！'\n        when 12\n          '強打！'\n        end\n      end\n\n      def clamp(i, min, max)\n        if i < min\n          min\n        elsif i > max\n          max\n        else\n          i\n        end\n      end\n\n      def eval_game_system_specific_command(command)\n        case command\n        when /\\AFF/\n          # 対抗なしロール\n          # '成功' or '失敗' を出力する\n          #\n          md = Regexp.last_match\n          term = md.post_match\n\n          # 目標値\n          diff = eval_term(term)\n\n          dice_command = \"2D6<=\#{diff}\"\n          dice_list = @randomizer.roll_barabara(2, 6)\n          total = dice_list.sum()\n          dice_str = dice_list.join(\",\")\n          expr = \"\#{total}[\#{dice_str}]\"\n          succ = successful_or_failed(total, diff)\n          sequence = [parentheses(dice_command), expr, succ]\n        when /\\AFR/\n          # 対抗ロール\n          # 値を出力する\n          #\n          md = Regexp.last_match\n          term = md.post_match\n\n          # 補正値\n          corr = eval_term(term)\n\n          dice_command = \"2D6\#{explicit_sign corr}\"\n          dice_list = @randomizer.roll_barabara(2, 6)\n          total = dice_list.sum()\n          dice_str = dice_list.join(\",\")\n          expr = \"\#{total}[\#{dice_str}]\#{explicit_sign corr}\"\n          crit = critical(total)\n          sequence = [parentheses(dice_command), expr, crit, total + corr].compact\n        when /\\AFD/\n          # 武器防具ロール\n          # ダメージを出力する\n          #\n          md = Regexp.last_match\n          term = md.post_match\n          md = /\\A\\[(.+)\\]/.match(term)\n          unless md\n            return 'ダメージスロットは必須です。'\n          end\n\n          term = md.post_match\n          damage_slots = md[1].split(',').map { |t| eval_term(t) }\n          if damage_slots.size != 7\n            return 'ダメージスロットの長さに誤りがあります。'\n          end\n\n          # 補正値\n          corr = eval_term(term)\n\n          dice_command = \"1D6\#{explicit_sign corr}\"\n          total = @randomizer.roll_once(6)\n          expr = \"\#{total}\#{explicit_sign corr}\"\n          slot_number = clamp(total + corr, 1, 7)\n          damage = damage_slots[slot_number - 1]\n          sequence = [parentheses(dice_command), expr, total + corr, \"\#{damage}ダメージ\"]\n        end\n\n        result = sequence.join(' ＞ ')\n        return result\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:AFF2e>", "self", "register_prefix", "explicit_sign", "i", "format", "eval_term", "term", "value", "0", "scan", "block in eval_term", "fact", "block (2 levels) in eval_term", "+", "to_i", "parentheses", "str", "successful_or_failed", "total", "diff", "2", "<=", "1", "12", ">=", "critical", "clamp", "min", "max", "<", ">", "eval_game_system_specific_command", "command", "$ret_or_1", "md", "Regexp", "last_match", "post_match", "dice_command", "dice_list", "@randomizer", "roll_barabara", "6", "sum", "dice_str", "join", "expr", "succ", "sequence", "corr", "crit", "compact", "match", "damage_slots", "map", "[]", "split", "block in eval_game_system_specific_command", "t", "block (2 levels) in eval_game_system_specific_command", "size", "7", "roll_once", "slot_number", "damage", "-", "result", "Base"], :mappings=>"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"}}]}