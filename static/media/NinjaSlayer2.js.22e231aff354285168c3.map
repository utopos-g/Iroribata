{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/NinjaSlayer2.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class NinjaSlayer2 < Base\n      # ゲームシステムの識別子\n      ID = \"NinjaSlayer2\"\n\n      # ゲームシステム名\n      NAME = \"ニンジャスレイヤーTRPG 2版\"\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = \"にんしやすれいやあTRPG2\"\n\n      HELP_MESSAGE = <<~TEXT\n        - K{x1},{x2},...,{xn}\n        難易度K([K]ids)の成功判定({x1}B6>=2)を、ダイス{x1}個({x2}～を指定した場合はそれぞれ個々に)で実行します。\n        先頭の文字を変えることで、難易度E([E]asy),N([N]ormal),H([H]ard),U([U]ltra-hard)もしくはUH([U]ltra-[H]ard)でも実行可能です。(以下も同様)\n\n        - K{x1},{x2},...,{xn}[>={y}]\n        K{x1}のロールの結果を使って、[]内で指定された条件を満たすダイスの個数を追加で出力します。\n        判定式は「>=」の他に「>」「<=」「<」「=」「!=」が利用可能です。\n        [=5][=6]のように複数記述することで、それぞれで追加判定が可能です。\n\n        - K{x1},{x2},...,{xn}[S] or K{x1},{x2},...,{xn}[S{y}]\n        - K{x1},{x2},...,{xn}[C] or K{x1},{x2},...,{xn}[C{y}]\n        いずれもK{x1},{x2},...,{xn}[>={y}]のショートカットです。({y}省略時は固定値6で処理します。)\n        出力時のテキストが、Sの場合は「サツバツ！」に、Cの場合は「クリティカル！」になります。\n        こちらも複数記述することで、それぞれで追加判定が可能です。\n\n        - SB or SB@{x}\n        {x}(1-6/省略時はd6)に対応したサツバツ([S]atz-[B]atz)・クリティカル表の内容を返します。\n\n        - WS{x}\n        {x}(1-12/省略不可)に対応する[W]as[s]hoi!判定(2d6<={x})を行います\n\n        - WSE or WSE@{x}\n        {x}(1-6/省略時はd6)に対応する死神のエントリー決定表([W]as[s]hoi! [E]ntry)の内容を返します。\n\n        - NRS_E{x} or NRS_E{x}@{y} or NRS@{y}\n        ダイス{x}個で難易度[E]asy(>=3)のNRS判定({x}省略時はスキップ)を行い、失敗した場合は{y}(1～7/省略時は難易度に応じたダイス目)に対応するNRS発狂表を返します。\n        「_E」部分を変更することで、難易度N,H,U,UHでも利用可能です。(Kはありません)\n      TEXT\n\n      # Base::eval_game_system_specific_commandの実装\n      # @param command [String]\n      # @return [String, nil]\n      def eval_game_system_specific_command(command)\n        # @debug = true\n        debug(\"input: \#{command}\")\n\n        begin\n          case command\n          when RE_JUDGE_DICEROLL\n            # 2版用のダイス判定\n            proc_result = proc_dice_2nd(Regexp.last_match)\n\n            # 結果は文字列と達成値という形で受け取る\n            if proc_result[1] > 0\n              return Result.success(proc_result[0])\n            else\n              return Result.failure(proc_result[0])\n            end\n          else\n            # ダイスでなければ定型文処理\n            return proc_text(command)\n          end\n        rescue StandardError => e\n          # 解析できずにエラーが出たら構文ミスと皆してnilを返す\n          debug(\"\#{e.message} \\n\#{e.backtrace}\")\n          return nil\n        end\n      end\n\n      private\n\n      # 文字列stringを数値化する。nilの場合はdefaultで指定された値を返す\n      # @param string [String]\n      # @param default [Integer]\n      # @return [Integer]\n      def s_to_i(string, default)\n        return string.nil? ? default : string.to_i\n      end\n\n      # 判定結果の出力テキストと成功数のカウントを返す。\n      # @param dice_array [Array<Integer>]\n      # @param difficulty [Integer]\n      # @param cmp_op [String]\n      # @param title_text [String]\n      # @return [String, Integer]\n      def check_difficulty(dice_array, difficulty, cmp_op, title_text)\n        success_num = 0\n        success_dice = []\n        dice_array.each do |dice_value|\n          if dice_value.send(Normalize.comparison_operator(cmp_op), difficulty)\n            success_num += 1\n            success_dice.push(dice_value)\n          end\n        end\n\n        success_dice_s = success_dice.empty? ? \"\" : \"[\#{success_dice.sort.reverse.join(',')}]\"\n        return \"\#{title_text}:\#{success_num}\#{success_dice_s}\", success_num\n      end\n\n      # ダイス処理(2版用)\n      # @param command [String]\n      # @return [String, Integer]\n      def proc_dice_2nd(match)\n        output_text = ''\n        total_success_num = 0\n\n        difficulty = DIFFICULTY_SYMBOL_TO_INTEGER.fetch(match[1])\n        appendix = match[3]\n\n        match[2].split(\",\").each do |sub_command|\n          dice_num = sub_command.to_i\n\n          # D6バラバラロール\n          roll_command = \"\#{dice_num}B6>=\#{difficulty}\"\n          roll_result = BCDice::CommonCommand::BarabaraDice.eval(roll_command, self, @randomizer)\n\n          output_text += \"(\#{roll_command}) ＞ \#{roll_result.last_dice_list.join(',')} ＞ 成功数:\#{roll_result.success_num}\"\n          success_num = roll_result.success_num\n\n          # Appendix部分の処理\n          unless appendix.nil?\n            debug(\"---- appendix: [\#{appendix}]\")\n            ap_command_array = appendix.split(\"\\]\\[\")\n            ap_command_array.each do |ap_command|\n              debug(\"----- ap_command: \#{ap_command}\")\n              case ap_command\n              when RE_COUNT_SATZ_BATZ\n                # サツバツ！カウント\n                check_result = check_difficulty(roll_result.last_dice_list, s_to_i(Regexp.last_match[1], 6), \">=\", \"サツバツ！\")\n                output_text += \", \#{check_result[0]}\"\n                success_num += check_result[1]\n              when RE_COUNT_CRITICAL\n                # クリティカル！カウント\n                check_result = check_difficulty(roll_result.last_dice_list, s_to_i(Regexp.last_match[1], 6), \">=\", \"クリティカル！\")\n                output_text += \", \#{check_result[0]}\"\n                success_num += check_result[1]\n              when RE_COUNT_JUDGE\n                # 追加判定カウント\n                check_result = check_difficulty(roll_result.last_dice_list, Regexp.last_match[2].to_i, Regexp.last_match[1], \"追加判定\")\n                output_text += \", \#{check_result[0]}\"\n                success_num += check_result[1]\n              end\n            end\n          end\n          output_text += \" \\n\"\n\n          total_success_num += success_num\n        end\n\n        return output_text, total_success_num\n      end\n\n      # サツバツ！の処理を実行する\n      # @param type [Integer]\n      # @return [Result]\n      def proc_satz_batz(type)\n        # サツバツ判定(d6)\n        if type > 0\n          return \"サツバツ!!(\#{type}) ＞ \#{translate('NinjaSlayer2.table.SATSUBATSU.items')[type - 1]}\"\n        else\n          return DiceTable::Table.from_i18n(\"NinjaSlayer2.table.SATSUBATSU\", @locale).roll(@randomizer)\n        end\n      end\n\n      # Wasshoi！判定の処理を実行する\n      # @param dkk [Integer]\n      # @return [Result]\n      def proc_wasshoi(dkk)\n        dice_array = @randomizer.roll_barabara(2, 6)\n        output_text = \"Wasshoi!判定(2D6) ＞ (\#{dice_array.join('+')}) ＞ \#{dice_array.sum()}\"\n\n        if dice_array.sum() > dkk\n          output_text += \"(>\#{dkk}) 判定失敗\"\n          return Result.success(output_text)\n        else\n          output_text += \"(<=\#{dkk}) 判定成功!! \\nニンジャスレイヤー=サンのエントリーだ!!\"\n          return Result.failure(output_text)\n        end\n      end\n\n      # Wasshoi！の処理を実行する\n      # @param type [Integer]\n      # @return [Result]\n      def proc_wasshoi_entry(type)\n        # Wasshoi!判定\n        output_text = \"\"\n        if type > 0\n          output_text += \"ニンジャスレイヤー=サンのエントリー!!(\#{type}) ＞ \#{translate('NinjaSlayer2.table.WASSHOI.items')[type - 1]}\"\n        else\n          # DKKの指定無し、もしくはロール結果がDKKを超えたら死神のエントリー決定表(d6)\n          table = DiceTable::Table.from_i18n(\"NinjaSlayer2.table.WASSHOI\", @locale)\n          output_text += table.roll(@randomizer).to_s\n        end\n        return output_text\n      end\n\n      # NRS判定の処理を実行する\n      # @param dice_num [Integer]\n      # @param dificulty_s [String]\n      # @param type [Integer]\n      # @return [Result]\n      def proc_nrs(dice_num, dificulty_s, type)\n        # 難易度も乱数表の番号も指定が無ければコマンドミス\n        dificulty_i = dificulty_s.nil? ? 0 : DIFFICULTY_SYMBOL_TO_INTEGER.fetch(dificulty_s)\n        if dificulty_i == 0 && type == 0\n          return nil\n        end\n\n        # NRS判定\n        output_text = \"\"\n        if dificulty_i > 0\n          roll_command = \"\#{dice_num}B6>=\#{dificulty_i}\"\n          roll_result = BCDice::CommonCommand::BarabaraDice.eval(roll_command, self, @randomizer)\n          output_text += \"NRS判定(\#{roll_command}) ＞ \#{roll_result.last_dice_list.join(',')} ＞ 成功数:\#{roll_result.success_num}\"\n          if roll_result.success_num > 0\n            output_text += \" NRS克服!!\"\n            return Result.success(output_text)\n          else\n            output_text += \" NRS発症!! \\n\"\n          end\n        end\n\n        # NRS発狂表の決定\n        dice_face = 0\n        additional = 0\n        if type == 0\n          case dificulty_s\n          when \"E\"\n            dice_face = 3\n          when \"N\"\n            dice_face = 6\n          when \"H\", \"U\"\n            dice_face = 6\n            additional = 1\n          end\n          type = @randomizer.roll_once(dice_face) + additional\n        end\n        roll_command = \"1D\#{dice_face}\#{additional > 0 ? '+' + additional.to_s : ''}\"\n        output_text += \"NRS発狂\#{dice_face > 0 ? \"(\#{roll_command}) ＞ \" : ''}(\#{type}) ＞ \#{translate('NinjaSlayer2.table.NRS.items')[type - 1]}\"\n        return Result.failure(output_text)\n      end\n\n      # テキスト系処理\n      # @param command [String]\n      # @return [String, Integer]\n      def proc_text(command)\n        debug(\"text: \#{command}\")\n        case command\n        when RE_JUDGE_SATZ_BATZ\n          # サツバツ判定(d6)\n          return proc_satz_batz(Regexp.last_match[1].to_i)\n        when RE_JUDGE_WASSHOI\n          # Wasshoi!判定\n          return proc_wasshoi(Regexp.last_match[1].to_i)\n        when RE_JUDGE_WASSHOI_ENTRY\n          # Wasshoi!判定\n          return proc_wasshoi_entry(Regexp.last_match[1].to_i)\n        when RE_JUDGE_NRS\n          # NRS判定\n          return proc_nrs(Regexp.last_match[2].to_i, Regexp.last_match[1], Regexp.last_match[3].to_i)\n        end\n      end\n\n      RE_COUNT_SATZ_BATZ = /S([1-6])?/i.freeze\n      RE_COUNT_CRITICAL = /C([1-6])?/i.freeze\n      RE_COUNT_JUDGE = /(=|!=|>=|>|<=|<)([1-6])/.freeze\n\n      RE_JUDGE_DICEROLL = /^(UH|[KENHU])([\\d,]+)(?:\\[((?:(?:S([1-6])?|C([1-6])?|(=|!=|>=|>|<=|<)([1-6]))(?:\\]\\[)?)+)\\])?$/i.freeze\n      RE_JUDGE_SATZ_BATZ = /^SB(?:@([1-6]))?$/i.freeze\n      RE_JUDGE_WASSHOI = /^WS([1-9]|10|11|12)$/i.freeze\n      RE_JUDGE_WASSHOI_ENTRY = /^WSE(?:@([1-6]))?$/i.freeze\n      RE_JUDGE_NRS = /^NRS(?:_(E|N|H|U|UH)(\\d+))?(?:@([1-7]))?$/i.freeze\n\n      # 難易度の文字表現から整数値への対応\n      DIFFICULTY_SYMBOL_TO_INTEGER = {\n        'K' => 2,\n        'E' => 3,\n        'N' => 4,\n        'H' => 5,\n        'U' => 6,\n        'UH' => 6\n      }.freeze\n\n      register_prefix(\n        \"UH\",\n        \"[KENHU]\",\n        \"SB\",\n        \"WS\",\n        \"WSE\",\n        \"NRS\"\n      )\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:NinjaSlayer2>", "eval_game_system_specific_command", "command", "self", "debug", "RE_JUDGE_DICEROLL", "$ret_or_1", "proc_result", "proc_dice_2nd", "Regexp", "last_match", ">", "[]", "1", "0", "Result", "success", "failure", "proc_text", "StandardError", "e", "message", "backtrace", "private", "s_to_i", "string", "default$", "nil?", "to_i", "check_difficulty", "dice_array", "difficulty", "cmp_op", "title_text", "success_num", "success_dice", "each", "block in check_difficulty", "dice_value", "send", "Normalize", "comparison_operator", "+", "block (2 levels) in check_difficulty", "push", "success_dice_s", "empty?", "sort", "reverse", "join", "match", "output_text", "total_success_num", "DIFFICULTY_SYMBOL_TO_INTEGER", "fetch", "appendix", "3", "2", "split", "block in proc_dice_2nd", "sub_command", "block (2 levels) in proc_dice_2nd", "dice_num", "roll_command", "roll_result", "BCDice::CommonCommand::BarabaraDice", "BCDice::CommonCommand", "BCDice", "eval", "@randomizer", "last_dice_list", "ap_command_array", "ap_command", "block (3 levels) in proc_dice_2nd", "RE_COUNT_SATZ_BATZ", "check_result", "6", "RE_COUNT_CRITICAL", "RE_COUNT_JUDGE", "proc_satz_batz", "type", "translate", "-", "DiceTable::Table", "DiceTable", "from_i18n", "@locale", "roll", "proc_wasshoi", "dkk", "roll_barabara", "sum", "proc_wasshoi_entry", "table", "to_s", "proc_nrs", "dificulty_s", "dificulty_i", "dice_face", "additional", "roll_once", "RE_JUDGE_SATZ_BATZ", "RE_JUDGE_WASSHOI", "RE_JUDGE_WASSHOI_ENTRY", "RE_JUDGE_NRS", "freeze", "4", "5", "register_prefix", "Base"], :mappings=>"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"}}]}