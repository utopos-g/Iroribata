{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/FinalFantasyXIV.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class FinalFantasyXIV < Base\n      # ゲームシステムの識別子\n      ID = \"FinalFantasyXIV\"\n\n      # ゲームシステム名\n      NAME = \"FINAL FANTSY XIV TTRPG\"\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = \"ふあいなるふあんたしい14TTRPG\"\n\n      HELP_MESSAGE = <<~TEXT\n        ・アビリティ判定 nAB+m>=x\n          d20のアビリティ判定を行う。ダイス数が指定された場合、大きい出目1個を採用する。\n          n: ダイス数（省略時 1）\n          m: 修正値（省略可）\n          x: 目標値（省略可）\n          基本効果のみ、ダイレクトヒット、クリティカルを自動判定。\n          例）AB, AB+5, AB+5>=14, 2AB+5>=14\n        ・行為判定 nDC+m>=x\n          アビリティ判定と同様。\n          失敗、成功を自動判定。\n      TEXT\n\n      register_prefix('\\d*AB', '\\d*DC')\n\n      def eval_game_system_specific_command(command)\n        return abirity_roll(command) || action_roll(command)\n      end\n\n      private\n\n      def abirity_roll(command)\n        parser = Command::Parser.new(\"AB\", round_type: round_type)\n                                .enable_prefix_number()\n                                .restrict_cmp_op_to(:>=, nil)\n        cmd = parser.parse(command)\n        return nil unless cmd\n\n        times = cmd.prefix_number || 1\n\n        dice_list_full = @randomizer.roll_barabara(times, 20).sort\n        dice_list_full_str = \"[\#{dice_list_full.join(',')}]\" if times > 1\n\n        dice_list = dice_list_full[-1, 1]\n        dice_result = dice_list[0]\n\n        total = dice_result + cmd.modify_number\n\n        result =\n          if dice_result == 20\n            Result.critical(translate(\"critical\"))\n          elsif cmd.cmp_op.nil?\n            Result.new\n          elsif total >= cmd.target_number\n            Result.success(translate(\"FinalFantasyXIV.directhit\"))\n          else\n            Result.failure(translate(\"FinalFantasyXIV.normalhit\"))\n          end\n\n        sequence = [\n          \"(\#{cmd.to_s(:after_modify_number)})\",\n          dice_list_full_str,\n          \"\#{dice_result}[\#{dice_list.join(',')}]\#{Format.modifier(cmd.modify_number)}\",\n          total,\n          result.text\n        ].compact\n\n        result.text = sequence.join(\" ＞ \")\n        result\n      end\n\n      def action_roll(command)\n        parser = Command::Parser.new(\"DC\", round_type: round_type)\n                                .enable_prefix_number()\n                                .restrict_cmp_op_to(:>=, nil)\n        cmd = parser.parse(command)\n        return nil unless cmd\n\n        times = cmd.prefix_number || 1\n\n        dice_list_full = @randomizer.roll_barabara(times, 20).sort\n        dice_list_full_str = \"[\#{dice_list_full.join(',')}]\" if times > 1\n\n        dice_list = dice_list_full[-1, 1]\n        dice_result = dice_list[0]\n\n        total = dice_result + cmd.modify_number\n\n        result =\n          if cmd.cmp_op.nil?\n            Result.new\n          elsif total >= cmd.target_number\n            Result.success(translate(\"success\"))\n          else\n            Result.failure(translate(\"failure\"))\n          end\n\n        sequence = [\n          \"(\#{cmd.to_s(:after_modify_number)})\",\n          dice_list_full_str,\n          \"\#{dice_result}[\#{dice_list.join(',')}]\#{Format.modifier(cmd.modify_number)}\",\n          total,\n          result.text\n        ].compact\n\n        result.text = sequence.join(\" ＞ \")\n        result\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:FinalFantasyXIV>", "self", "register_prefix", "eval_game_system_specific_command", "command", "$ret_or_1", "abirity_roll", "action_roll", "private", "parser", "Command::Parser", "Command", "new", "round_type", "enable_prefix_number", "restrict_cmp_op_to", "cmd", "parse", "times", "prefix_number", "1", "dice_list_full", "@randomizer", "roll_barabara", "20", "sort", ">", "dice_list_full_str", "join", "dice_list", "[]", "-1", "dice_result", "0", "total", "+", "modify_number", "result", "Result", "critical", "translate", "cmp_op", "nil?", ">=", "target_number", "success", "failure", "sequence", "to_s", "Format", "modifier", "text", "compact", "text=", "Base"], :mappings=>"AAAAA,2BAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAEE,8BAAKA,iBAAL;QAGA,gCAAOA,wBAAP;QAGA,oCAAWA,oBAAX;QAEA,wCACNA,qBADqB,GAErBA,+CAFqB,GAGrBA,oBAHqB,GAIrBA,iBAJqB,GAKrBA,iBALqB,GAMrBA,kCANqB,GAOrBA,qCAPqB,GAQrBA,kBARqB,GASrBA,iBATqB,GAUrBA,iBAVM;QAaAC,IAAAC,iBAAAA,CAAgBF,QAAhB,EAAyBA,QAAzBE;;AAEAC,QAAAA,iDAAAA,6CAAsCC,OAAtCD;AAAAA,UAAAA;;UACE,OAAO,CAAA,QAAAE,CAAAA,YAAAJ,IAAAK,cAAAA,CAAaF,OAAbE,CAAAD,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAyBJ,IAAAM,aAAAA,CAAYH,OAAZG,CAAzB,CAAA;QADTJ,CAAAA;QAIAF,IAAAO,SAAAA,CAAAA;;AAEAF,QAAAA,4BAAAA,wBAAiBF,OAAjBE;AAAAA,UAAAA;;;UACEG,SAASC,IAAAC,aAAAD,WAAeE,KAAAA,CAAKN,IAApB,EAA0B,wBAAA,cAAYL,IAAAY,YAAAA,CAAAA,CAAZ,EAAXD,CACAE,sBAAAA,CAAAA,CACAC,oBAAAA,CAAoB,IAFnC,EAEwC,GAAzBA;UACxBC,MAAMP,MAAMQ,OAAAA,CAAOb,OAAPa;UACZ,KAAA,QAAkBD,GAAlB,CAAA;YAAA,OAAO;UAAP;UAEAE,QAAQ,CAAA,QAAAb,CAAAA,YAAAW,GAAGG,eAAAA,CAAAA,CAAHd,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAqBe,CAArB,CAAA;UAERC,iBAAiBC,eAAWC,eAAAA,CAAeL,KAA1B,EAAiCM,EAAtBD,CAAyBE,MAAAA,CAAAA;UACrD,IAAA,QAA8DC,OAANR,KAAMQ,EAAEN,CAAFM,CAA9D,CAAA;YAAAC,qBAAsBrB,GAAD,GAAA,CAAIe,cAAcO,MAAAA,CAAMtB,GAANsB,CAAlB,CAAA,GAA6BtB;UAAlD;UAEAuB,YAAYR,cAAcS,OAAAA,CAACC,EAAf,EAAmBX,CAALU;UAC1BE,cAAcH,SAASC,OAAAA,CAACG,CAADH;UAEvBI,QAAoBC,SAAZH,WAAYG,EAAEnB,GAAGoB,eAAAA,CAAAA,CAALD;UAEpBE,SACE,CAAA,MAAGL,WAAH,EAAkBR,EAAlB,CAAA,GAAA,CACEc,YAAMC,UAAAA,CAAUtC,IAAAuC,WAAAA,CAAUlC,UAAVkC,CAAVD,CADR,IAEA,CAAA,QAAMvB,GAAGyB,QAAAA,CAAAA,CAAOC,SAAAA,CAAAA,CAAhB,CAAA,GAAA,CACEJ,YAAM1B,KAAAA,CAAAA,CADR,IAEA,CAAA,QAAY+B,OAANT,KAAMS,EAAG3B,GAAG4B,eAAAA,CAAAA,CAAND,CAAZ,CAAA,GAAA,CACEL,YAAMO,SAAAA,CAAS5C,IAAAuC,WAAAA,CAAUlC,2BAAVkC,CAATK,CADR,IAAA,CAGEP,YAAMQ,SAAAA,CAAS7C,IAAAuC,WAAAA,CAAUlC,2BAAVkC,CAATM,CAHR,CAAA,CAFA,CAFA;UAUFC,WAAW,CACRzC,GAAD,GAAA,CAAIU,GAAGgC,MAAAA,CAAM,qBAANA,CAAP,CAAA,GAAmC1C,GAD1B,EAETqB,kBAFS,EAGT,EAAA,GAAA,CAAGK,WAAH,CAAA,GAAe1B,GAAf,GAAA,CAAkBuB,SAASD,MAAAA,CAAMtB,GAANsB,CAA3B,CAAA,GAAsCtB,GAAtC,GAAA,CAAyC2C,YAAMC,UAAAA,CAAUlC,GAAGoB,eAAAA,CAAAA,CAAbc,CAA/C,CAHS,EAIThB,KAJS,EAKTG,MAAMc,MAAAA,CAAAA,CALG,CAMVC,SAAAA,CAAAA;UAEDf,MAAMgB,UAAAA,CAAQN,QAAQnB,MAAAA,CAAMtB,KAANsB,CAAhByB;UACN/C,OAAA+B;QArCF/B,CAAAA;QAwCAN,OAAAO,2BAAAA,uBAAgBH,OAAhBG;AAAAA,UAAAA;;;UACEE,SAASC,IAAAC,aAAAD,WAAeE,KAAAA,CAAKL,IAApB,EAA0B,wBAAA,cAAYN,IAAAY,YAAAA,CAAAA,CAAZ,EAAXD,CACAE,sBAAAA,CAAAA,CACAC,oBAAAA,CAAoB,IAFnC,EAEwC,GAAzBA;UACxBC,MAAMP,MAAMQ,OAAAA,CAAOb,OAAPa;UACZ,KAAA,QAAkBD,GAAlB,CAAA;YAAA,OAAO;UAAP;UAEAE,QAAQ,CAAA,QAAAb,CAAAA,YAAAW,GAAGG,eAAAA,CAAAA,CAAHd,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAqBe,CAArB,CAAA;UAERC,iBAAiBC,eAAWC,eAAAA,CAAeL,KAA1B,EAAiCM,EAAtBD,CAAyBE,MAAAA,CAAAA;UACrD,IAAA,QAA8DC,OAANR,KAAMQ,EAAEN,CAAFM,CAA9D,CAAA;YAAAC,qBAAsBpB,GAAD,GAAA,CAAIc,cAAcO,MAAAA,CAAMrB,GAANqB,CAAlB,CAAA,GAA6BrB;UAAlD;UAEAsB,YAAYR,cAAcS,OAAAA,CAACC,EAAf,EAAmBX,CAALU;UAC1BE,cAAcH,SAASC,OAAAA,CAACG,CAADH;UAEvBI,QAAoBC,SAAZH,WAAYG,EAAEnB,GAAGoB,eAAAA,CAAAA,CAALD;UAEpBE,SACE,CAAA,QAAGrB,GAAGyB,QAAAA,CAAAA,CAAOC,SAAAA,CAAAA,CAAb,CAAA,GAAA,CACEJ,YAAM1B,KAAAA,CAAAA,CADR,IAEA,CAAA,QAAY+B,OAANT,KAAMS,EAAG3B,GAAG4B,eAAAA,CAAAA,CAAND,CAAZ,CAAA,GAAA,CACEL,YAAMO,SAAAA,CAAS5C,IAAAuC,WAAAA,CAAUjC,SAAViC,CAATK,CADR,IAAA,CAGEP,YAAMQ,SAAAA,CAAS7C,IAAAuC,WAAAA,CAAUjC,SAAViC,CAATM,CAHR,CAAA,CAFA;UAQFC,WAAW,CACRxC,GAAD,GAAA,CAAIS,GAAGgC,MAAAA,CAAM,qBAANA,CAAP,CAAA,GAAmCzC,GAD1B,EAEToB,kBAFS,EAGT,EAAA,GAAA,CAAGK,WAAH,CAAA,GAAezB,GAAf,GAAA,CAAkBsB,SAASD,MAAAA,CAAMrB,GAANqB,CAA3B,CAAA,GAAsCrB,GAAtC,GAAA,CAAyC0C,YAAMC,UAAAA,CAAUlC,GAAGoB,eAAAA,CAAAA,CAAbc,CAA/C,CAHS,EAIThB,KAJS,EAKTG,MAAMc,MAAAA,CAAAA,CALG,CAMVC,SAAAA,CAAAA;UAEDf,MAAMgB,UAAAA,CAAQN,QAAQnB,MAAAA,CAAMrB,KAANqB,CAAhByB;UACN9C,OAAA8B;QAnCF9B,CAAAA;MAvEFP,GAAAA,WAAAA,EAAwBsD,UAAxBtD;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}]}