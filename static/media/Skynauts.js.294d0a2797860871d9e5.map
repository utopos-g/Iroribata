{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Skynauts.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Skynauts < Base\n      # ゲームシステムの識別子\n      ID = 'Skynauts'\n\n      # ゲームシステム名\n      NAME = '歯車の塔の探空士（六畳間幻想空間）'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'はくるまのとうのすかいのおつ'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ◆判定　(SNn)、(2D6<=n)　n:目標値（省略時:7）\n        　例）SN5　SN5　SN(3+2)\n        ◆航行チェック　(NV+n)　n:修正値（省略時:0）\n        　例）NV　NV+1\n        ◆ダメージチェック　(Dx/y@m)　x:ダメージ左側の値、y:ダメージ右側の値\n        　m:《弾道学》（省略可）上:8、下:2、左:4、右:6\n        　飛空艇シート外の座標は()が付きます。\n        　例） D/4　D19/2　D/3@8　D[大揺れ]/2\n        ◆砲撃判定+ダメージチェック　(BOMn/Dx/y@m)　n:目標値（省略時:7）\n        　x:ダメージ左側の値、y:ダメージ右側の値\n        　m:《弾道学》（省略可）上:8、下:2、左:4、右:6\n        　例） BOM/D/4　BOM9/D19/2@4\n        ◆《回避運動》　(AVOn@mXX)　n:目標値（省略時:7）\n        　m:回避方向。上:8、下:2、左:4、右:6、XX：ダメージチェック結果\n        　例）\n        　AVO9@8[縦1,横4],[縦2,横6],[縦3,横8]　AVO@2[縦6,横4],[縦2,横6]\n      MESSAGETEXT\n\n      register_prefix('D', '2D6<=', 'SN', 'NV', 'AVO', 'BOM')\n\n      def initialize(command)\n        super(command)\n        @round_type = RoundType::FLOOR # 端数切り捨て\n      end\n\n      def eval_game_system_specific_command(command)\n        debug(\"\\n=======================================\\n\")\n        debug(\"eval_game_system_specific_command command\", command)\n\n        return get_judge_result(command) || navigation_result(command) || get_fire_result(command) ||\n               get_bomb_result(command) || get_avoid_result(command)\n      end\n\n      private\n\n      def get_judge_result(command)\n        return nil unless (m = /^2D6<=(\\d)$/i.match(command) || /^SN(\\d*)$/i.match(command))\n\n        debug(\"====get_judge_result====\")\n\n        target = m[1].empty? ? 7 : m[1].to_i # 目標値。省略時は7\n        debug(\"目標値\", target)\n\n        dice_list = @randomizer.roll_barabara(2, 6)\n        total = dice_list.sum()\n        text = \"(2D6<=\#{target}) ＞ \#{total}[\#{dice_list.join(',')}] ＞ \#{total}\"\n        if total <= 2\n          Result.fumble(text + \" ＞ ファンブル\")\n        elsif total <= target\n          Result.success(text + \" ＞ 成功\")\n        else\n          Result.failure(text + \" ＞ 失敗\")\n        end\n      end\n\n      def navigation_result(command)\n        return nil unless (m = /^NV(\\+(\\d+))?$/.match(command))\n\n        debug(\"====navigation_result====\")\n\n        bonus = m[2].to_i # 〈操舵室〉の修正。GMの任意修正にも対応できるように(マイナスは無視)\n        debug(\"移動修正\", bonus)\n\n        total = @randomizer.roll_once(6)\n        move_point_base = (total / 2).to_i <= 0 ? 1 : (total / 2).to_i\n        movePoint = move_point_base + bonus\n        debug(\"移動エリア数\", movePoint)\n\n        Result.new(\"航行チェック(最低1)　(1D6/2+\#{bonus}) ＞ \#{total} /2+\#{bonus} ＞ \#{move_point_base}+\#{bonus} ＞ \#{movePoint}エリア進む\")\n      end\n\n      DIRECTION_INFOS = {\n        1 => {name: \"左下\", position_diff: {x: -1, y: +1}},\n        2 => {name: \"下\", position_diff: {x: 0, y: +1}},\n        3 => {name: \"右下\", position_diff: {x: +1, y: +1}},\n        4 => {name: \"左\",   position_diff: {x: -1, y: 0}},\n        # 5 は中央。算出する意味がないので対象外\n        6 => {name: \"右\",   position_diff: {x: +1, y: 0}},\n        7 => {name: \"左上\", position_diff: {x: -1, y: -1}},\n        8 => {name: \"上\", position_diff: {x: 0, y: -1}},\n        9 => {name: \"右上\", position_diff: {x: +1, y: -1}},\n      }.freeze\n\n      def get_direction_info(direction, key, default_value = nil)\n        info = DIRECTION_INFOS[direction.to_i]\n        return default_value if info.nil?\n\n        return info[key]\n      end\n\n      def get_fire_result(command)\n        return nil unless (m = %r{^D([12346789]*)(\\[.+\\])*/(\\d{1,2})(@([2468]))?$}.match(command))\n\n        debug(\"====get_fire_result====\")\n\n        fire_count = m[3].to_i # 砲撃回数\n        fire_range = m[1].to_s # 砲撃範囲\n        ballistics = m[5].to_i # 《弾道学》\n        debug(\"fire_count\", fire_count)\n        debug(\"fire_range\", fire_range)\n        debug(\"ballistics\", ballistics)\n\n        fire_point = get_fire_point(fire_range, fire_count) # 着弾座標取得（3次元配列）\n        result = [command, get_fire_point_text(fire_point, fire_count).text] # 表示用文字列作成\n\n        if ballistics != 0 # 《弾道学》有\n          result << \"《弾道学》:\#{get_direction_info(ballistics, :name, '')}\\n\"\n          result << get_fire_point_text(fire_point, fire_count, ballistics).text\n        end\n        Result.new(result.join(\" ＞ \"))\n      end\n\n      def get_fire_point(fire_range, fire_count)\n        debug(\"====get_fire_point====\")\n\n        fire_point = []\n\n        fire_count.times do |count|\n          debug(\"\\n砲撃回数\", count + 1)\n\n          fire_point << []\n\n          y_pos = @randomizer.roll_once(6) # 縦\n          x_pos = @randomizer.roll_sum(2, 6) # 横\n          position = [x_pos, y_pos]\n\n          fire_point[-1] << position\n\n          debug(\"着弾点\", fire_point)\n\n          fire_range.chars do |range_text|\n            debug(\"範囲\", range_text)\n\n            position_diff = get_direction_info(range_text, :position_diff, {})\n            position = [x_pos + position_diff[:x].to_i, y_pos + position_diff[:y].to_i]\n\n            fire_point[-1] << position\n            debug(\"着弾点:範囲\", fire_point)\n          end\n        end\n\n        debug(\"\\n最終着弾点\", fire_point)\n\n        return fire_point\n      end\n\n      def get_fire_point_text(fire_point, _fire_count, direction = 0)\n        debug(\"====get_fire_point_text====\")\n\n        fire_text_list = []\n        fire_point.each do |point|\n          text = \"\"\n          point.each do |x, y|\n            # 《弾道学》《回避運動》などによる座標移動\n            x, y = get_move_point(x, y, direction)\n\n            # マップ外の座標は括弧を付ける\n            text += in_map_position?(x, y) ? \"[縦\#{y},横\#{x}]\" : \"([縦\#{y},横\#{x}])\"\n            debug(\"着弾点テキスト\", text)\n          end\n\n          fire_text_list << text\n        end\n\n        Result.new(fire_text_list.join(\",\"))\n      end\n\n      def in_map_position?(x, y)\n        ((1 <= y) && (y <= 6)) && ((2 <= x) && (x <= 12))\n      end\n\n      def get_move_point(x, y, direction)\n        debug(\"====get_move_point====\")\n        debug(\"方向\", direction)\n        debug(\"座標移動前(x,y)\", x, y)\n\n        position_diff = get_direction_info(direction, :position_diff, {})\n        x += position_diff[:x].to_i\n        y += position_diff[:y].to_i\n\n        debug(\"\\n座標移動後(x,y)\", x, y)\n        return x, y\n      end\n\n      def get_bomb_result(command)\n        return nil unless (m = %r{^BOM(\\d*)?/D([12346789]*)(\\[.+\\])*/(\\d+)(@([2468]))?$}i.match(command))\n\n        debug(\"====get_bomb_result====\", command)\n\n        target = m[1].to_s\n        direction = m[6].to_i\n        debug(\"弾道学方向\", direction)\n\n        sn = get_judge_result(\"SN\" + target) # 砲撃判定\n\n        if sn.failure?\n          sn.text = \"\#{command} ＞ \#{sn.text}\"\n          return sn\n        end\n\n        # ダメージチェック部分\n        fire_command = command.slice(%r{D([12346789]*)(\\[.+\\])*/(\\d+)(@([2468]))?})\n        sn.text = \"\#{command} ＞ \#{sn.text}\\n ＞ \#{get_fire_result(fire_command).text}\"\n        sn\n      end\n\n      def get_avoid_result(command)\n        return nil unless (m = /^AVO(\\d*)?(@([2468]))(\\(?\\[縦\\d+,横\\d+\\]\\)?,?)+$/.match(command))\n\n        debug(\"====get_avoid_result====\", command)\n\n        direction = m[3].to_i\n        debug(\"回避方向\", direction)\n\n        judge_command = command.slice(/^AVO(\\d*)?(@([2468]))/) # 判定部分\n        sn = get_judge_result(\"SN\" + Regexp.last_match(1).to_s)\n\n        if sn.failure?\n          sn.text = \"\#{judge_command} ＞ 《回避運動》\#{sn.text}\"\n          return sn\n        end\n        point_command = command.slice(/(\\(?\\[縦\\d+,横\\d+\\]\\)?,?)+/) # 砲撃座標\n\n        fire_point = scan_fire_point(point_command)\n        fire_count = fire_point.size\n        Result.success([\n          judge_command,\n          \"《回避運動》\#{sn.text}\\n\",\n          point_command,\n          \"《回避運動》:\" + get_direction_info(direction, :name, \"\") + \"\\n\",\n          get_fire_point_text(fire_point, fire_count, direction).text\n        ].compact.join(\" ＞ \"))\n      end\n\n      def scan_fire_point(command)\n        debug(\"====scan_fire_point====\", command)\n\n        command = command.gsub(/\\(|\\)/, \"\") # 正規表現が大変なので最初に括弧を外しておく\n\n        fire_point = []\n\n        # 一組ずつに分ける(\"[縦y,横xの単位)\n        command.split(/\\],/).each do |point_text|\n          debug(\"point_text\", point_text)\n\n          fire_point << []\n\n          # D以外の砲撃範囲がある時に必要\n          point_text.split(/\\]/).each do |point|\n            debug(\"point\", point)\n\n            fire_point[-1] << []\n\n            next unless point =~ /[^\\d]*(\\d+),[^\\d]*(\\d+)/\n\n            y = Regexp.last_match(1).to_i\n            x = Regexp.last_match(2).to_i\n\n            fire_point[-1][-1] = [x, y]\n\n            debug(\"着弾点\", fire_point)\n          end\n        end\n\n        return fire_point\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Skynauts>", "self", "register_prefix", "initialize", "command", "@round_type", "RoundType::FLOOR", "RoundType", "eval_game_system_specific_command", "debug", "$ret_or_1", "$ret_or_2", "$ret_or_3", "$ret_or_4", "get_judge_result", "navigation_result", "get_fire_result", "get_bomb_result", "get_avoid_result", "private", "m", "match", "target", "[]", "1", "empty?", "7", "to_i", "dice_list", "@randomizer", "roll_barabara", "2", "6", "total", "sum", "text", "join", "<=", "Result", "fumble", "+", "success", "failure", "bonus", "roll_once", "move_point_base", "/", "0", "movePoint", "new", "-1", "3", "4", "8", "9", "freeze", "get_direction_info", "direction", "key", "default_value", "info", "DIRECTION_INFOS", "nil?", "fire_count", "fire_range", "to_s", "ballistics", "5", "fire_point", "get_fire_point", "result", "get_fire_point_text", "<<", "times", "block in get_fire_point", "count", "block (2 levels) in get_fire_point", "y_pos", "x_pos", "roll_sum", "position", "chars", "range_text", "block (3 levels) in get_fire_point", "position_diff", "_fire_count", "fire_text_list", "each", "block in get_fire_point_text", "point", "block (2 levels) in get_fire_point_text", "x", "y", "block (3 levels) in get_fire_point_text", "get_move_point", "in_map_position?", "12", "sn", "failure?", "text=", "fire_command", "slice", "judge_command", "Regexp", "last_match", "point_command", "scan_fire_point", "size", "compact", "gsub", "split", "block in scan_fire_point", "point_text", "block (2 levels) in scan_fire_point", "block (3 levels) in scan_fire_point", "=~", "[]=", "Base"], :mappings=>"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"}}]}