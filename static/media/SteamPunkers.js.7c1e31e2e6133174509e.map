{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["i18n/backend/fallbacks.rb"], :sourcesContent=>["# frozen_string_literal: true\n\n# I18n locale fallbacks are useful when you want your application to use\n# translations from other locales when translations for the current locale are\n# missing. E.g. you might want to use :en translations when translations in\n# your applications main locale :de are missing.\n#\n# To enable locale fallbacks you can simply include the Fallbacks module to\n# the Simple backend - or whatever other backend you are using:\n#\n#   I18n::Backend::Simple.include(I18n::Backend::Fallbacks)\nmodule I18n\n  @@fallbacks = nil\n\n  class << self\n    # Returns the current fallbacks implementation. Defaults to +I18n::Locale::Fallbacks+.\n    def fallbacks\n      @@fallbacks ||= I18n::Locale::Fallbacks.new\n      Thread.current[:i18n_fallbacks] || @@fallbacks\n    end\n\n    # Sets the current fallbacks implementation. Use this to set a different fallbacks implementation.\n    def fallbacks=(fallbacks)\n      @@fallbacks = fallbacks.is_a?(Array) ? I18n::Locale::Fallbacks.new(fallbacks) : fallbacks\n      Thread.current[:i18n_fallbacks] = @@fallbacks\n    end\n  end\n\n  module Backend\n    module Fallbacks\n      # Overwrites the Base backend translate method so that it will try each\n      # locale given by I18n.fallbacks for the given locale. E.g. for the\n      # locale :\"de-DE\" it might try the locales :\"de-DE\", :de and :en\n      # (depends on the fallbacks implementation) until it finds a result with\n      # the given options. If it does not find any result for any of the\n      # locales it will then throw MissingTranslation as usual.\n      #\n      # The default option takes precedence over fallback locales only when\n      # it's a Symbol. When the default contains a String, Proc or Hash\n      # it is evaluated last after all the fallback locales have been tried.\n      def translate(locale, key, options = EMPTY_HASH)\n        return super unless options.fetch(:fallback, true)\n        return super if options[:fallback_in_progress]\n        default = extract_non_symbol_default!(options) if options[:default]\n\n        fallback_options = options.merge(:fallback_in_progress => true)\n        I18n.fallbacks[locale].each do |fallback|\n          begin\n            catch(:exception) do\n              result = super(fallback, key, fallback_options)\n              unless result.nil?\n                on_fallback(locale, fallback, key, options) if locale.to_s != fallback.to_s\n                return result\n              end\n            end\n          rescue I18n::InvalidLocale\n            # we do nothing when the locale is invalid, as this is a fallback anyways.\n          end\n        end\n\n        return if options.key?(:default) && options[:default].nil?\n\n        return super(locale, nil, options.merge(:default => default)) if default\n        throw(:exception, I18n::MissingTranslation.new(locale, key, options))\n      end\n\n      def extract_non_symbol_default!(options)\n        defaults = [options[:default]].flatten\n        first_non_symbol_default = defaults.detect{|default| !default.is_a?(Symbol)}\n        if first_non_symbol_default\n          options[:default] = defaults[0, defaults.index(first_non_symbol_default)]\n        end\n        return first_non_symbol_default\n      end\n\n      def exists?(locale, key, options = EMPTY_HASH)\n        return super unless options.fetch(:fallback, true)\n        I18n.fallbacks[locale].each do |fallback|\n          begin\n            return true if super(fallback, key)\n          rescue I18n::InvalidLocale\n            # we do nothing when the locale is invalid, as this is a fallback anyways.\n          end\n        end\n\n        false\n      end\n\n      private\n\n        # Overwrite on_fallback to add specified logic when the fallback succeeds.\n        def on_fallback(_original_locale, _fallback_locale, _key, _optoins)\n          nil\n        end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:I18n>", "@@fallbacks", "fallbacks", "$ret_or_1", "I18n::Locale::Fallbacks", "I18n::Locale", "I18n", "new", "Thread", "current", "[]", "fallbacks=", "is_a?", "Array", "[]=", "self", "<module:Backend>", "<module:Fallbacks>", "translate", "locale", "key", "options", "EMPTY_HASH", "fetch", "default$", "extract_non_symbol_default!", "fallback_options", "merge", "each", "block in translate", "fallback", "block (2 levels) in translate", "catch", "block (3 levels) in translate", "result", "nil?", "to_s", "on_fallback", "I18n::InvalidLocale", "key?", "throw", "I18n::MissingTranslation", "defaults", "flatten", "first_non_symbol_default", "detect", "block in extract_non_symbol_default!", "block (2 levels) in extract_non_symbol_default!", "Symbol", "!", "0", "index", "exists?", "block in exists?", "block (2 levels) in exists?", "private"], :mappings=>"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"}}, {:offset=>{:line=>152, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/randomizer.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  # 乱数生成器\n  class Randomizer\n    UPPER_LIMIT_DICE_TIMES = 200\n    UPPER_LIMIT_DICE_SIDES = 10000\n\n    UPPER_LIMIT_RANDS = 10000\n\n    def initialize\n      @rand_results = []\n      @detailed_rand_results = []\n    end\n\n    # @return [Array<Array<(Integer, Integer)>>] ダイスの出目一覧\n    attr_reader :rand_results\n\n    # @return [Array<DetailedRandResult>]\n    attr_reader :detailed_rand_results\n\n    # 実行したダイスロールの詳細\n    # @!attribute [rw] kind\n    #   @return [Symbol]\n    # @!attribute [rw] sides\n    #   @return [Integer] ダイスロールしたダイスの面数\n    # @!attribute [rw] value\n    #   @return [Integer] 値\n    DetailedRandResult = Struct.new(:kind, :sides, :value)\n\n    # 複数個のダイスを振る\n    #\n    # @param times [Integer] 振るダイスの個数\n    # @param sides [Integer] ダイスの面数\n    # @return [Array<Integer>] ダイスの出目一覧\n    def roll_barabara(times, sides)\n      if @rand_results.size + times > UPPER_LIMIT_RANDS\n        raise TooManyRandsError\n      end\n\n      if times <= 0 || times > UPPER_LIMIT_DICE_TIMES\n        return []\n      end\n\n      Array.new(times) { roll_once(sides) }\n    end\n\n    # 複数個のダイスを振って、その合計を求める\n    #\n    # @param times [Integer] 振るダイスの個数\n    # @param sides [Integer] ダイスの面数\n    # @return [Integer] 出目の合計\n    def roll_sum(times, sides)\n      roll_barabara(times, sides).sum()\n    end\n\n    # 1回だけダイスロールを行う\n    #\n    # @param sides [Integer] ダイスの面数\n    # @return [Integer] 1以上 *sides* 以下の値のいずれか\n    def roll_once(sides)\n      if sides <= 0 || sides > UPPER_LIMIT_DICE_SIDES\n        return 0\n      end\n\n      dice = rand_inner(sides)\n      push_to_detail(:normal, sides, dice)\n\n      return dice\n    end\n\n    # ダイス表などでindexを参照する用のダイスロール\n    # @param sides [Integer]\n    # @return [Integer] 0以上 *sides* 未満の整数\n    def roll_index(sides)\n      roll_once(sides) - 1\n    end\n\n    # 十の位をd10を使って決定するためのダイスロール\n    # @return [Integer] 0以上90以下で10の倍数となる整数\n    def roll_tens_d10()\n      # rand_innerの戻り値を10倍すればすむ話なのだが、既存のテストとの互換性の為に処理をする\n      dice = rand_inner(10)\n      if dice == 10\n        dice = 0\n      end\n\n      ret = dice * 10\n\n      push_to_detail(:tens_d10, 10, ret)\n      return ret\n    end\n\n    # d10を0~9として扱うダイスロール\n    # @return [Integer] 0以上9以下の整数\n    def roll_d9()\n      dice = rand_inner(10) - 1\n\n      push_to_detail(:d9, 10, dice)\n      return dice\n    end\n\n    # D66のダイスロールを行う\n    # @param sort_type [Symbol] BCDice::D66SortType\n    # @return [Integer]\n    def roll_d66(sort_type)\n      dice_list = Array.new(2) { roll_once(6) }\n\n      case sort_type\n      when D66SortType::ASC\n        dice_list.sort!\n      when D66SortType::DESC\n        dice_list.sort!.reverse!\n      end\n\n      return dice_list[0] * 10 + dice_list[1]\n    end\n\n    private\n\n    # @param sides [Integer]\n    # @return [Integer] 1以上sides以下の整数\n    def rand_inner(sides)\n      if @rand_results.size >= UPPER_LIMIT_RANDS\n        raise TooManyRandsError\n      end\n\n      dice = random(sides)\n\n      @rand_results << [dice, sides]\n      return dice\n    end\n\n    # モックで上書きする用\n    # @param sides [Integer]\n    # @return [Integer] 1以上sides以下の整数\n    def random(sides)\n      Kernel.rand(sides) + 1\n    end\n\n    # @param [Symbol] kind\n    # @param [Integer] sides\n    # @param [Integer] value\n    def push_to_detail(kind, sides, value)\n      detail = DetailedRandResult.new(kind, sides, value)\n      @detailed_rand_results.push(detail)\n    end\n  end\n\n  class TooManyRandsError < StandardError; end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<class:Randomizer>", "200", "10000", "initialize", "@rand_results", "@detailed_rand_results", "self", "attr_reader", "Struct", "new", "roll_barabara", "times", "sides", ">", "+", "size", "UPPER_LIMIT_RANDS", "raise", "TooManyRandsError", "<=", "0", "UPPER_LIMIT_DICE_TIMES", "Array", "block in roll_barabara", "block (2 levels) in roll_barabara", "roll_once", "roll_sum", "sum", "UPPER_LIMIT_DICE_SIDES", "dice", "rand_inner", "push_to_detail", "roll_index", "-", "1", "roll_tens_d10", "10", "ret", "*", "roll_d9", "roll_d66", "sort_type", "dice_list", "2", "block in roll_d66", "block (2 levels) in roll_d66", "6", "D66SortType::ASC", "D66SortType", "$ret_or_1", "sort!", "D66SortType::DESC", "reverse!", "[]", "private", ">=", "random", "<<", "Kernel", "rand", "kind", "value", "detail", "DetailedRandResult", "push", "<class:TooManyRandsError>", "StandardError"], :mappings=>"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"}}, {:offset=>{:line=>290, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/roll_result.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    class RollResult\n      # @param table_name [String]\n      # @param value [Integer]\n      # @param body [String, RollResult]\n      def initialize(table_name, value, body)\n        @table_name = table_name\n        @value = value\n        @body = body\n      end\n\n      # @return [String]\n      attr_reader :table_name\n\n      # @return [Integer]\n      attr_reader :value\n\n      # @return [String, RollResult]\n      attr_reader :body\n\n      # @return [String]\n      def to_s\n        \"\#{@table_name}(\#{@value}) ＞ \#{@body}\"\n      end\n\n      # @return [String]\n      def last_body\n        if @body.is_a?(RollResult)\n          @body.last_body\n        else\n          @body\n        end\n      end\n\n      # 一部のゲームシステムが String#empty? を想定してチェックしているため\n      # @return [false]\n      def empty?\n        false\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:RollResult>", "initialize", "table_name", "value", "body", "@table_name", "@value", "@body", "self", "attr_reader", "to_s", "last_body", "is_a?", "RollResult", "empty?"], :mappings=>"AAAAA,gDAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;;AAIEC,QAAAA,0BAAAA,sBAAeC,UAAD,EAAaC,KAAb,EAAoBC,IAAlCH;AAAAA,UAAAA;;;UACEI,kBAAcH;UACdI,aAASH;UACTF,OAAAM,CAAAA,YAAQH,IAARG;QAHFN,CAAAA;QAOAO,IAAAC,aAAAA,CAAY,YAAZA;QAGAD,IAAAC,aAAAA,CAAY,OAAZA;QAGAD,IAAAC,aAAAA,CAAY,MAAZA;;AAGAC,QAAAA,oBAAAA,gBAAAA;AAAAA,UAAAA;;UACEA,OAAA,EAAA,GAAA,CAAGL,eAAH,CAAA,GAAeK,GAAf,GAAA,CAAkBJ,UAAlB,CAAA,GAAyBI,MAAzB,GAAA,CAA+BH,SAA/B;QADFG,CAAAA;;AAKAC,QAAAA,yBAAAA,qBAAAA;AAAAA,UAAAA;;UACE,IAAA,QAAGJ,SAAKK,UAAAA,CAAOC,gBAAPD,CAAR,CAAA;YACED,OAAAJ,SAAKI,WAAAA,CAAAA;UADP;YAGEA,OAAAJ;UAHF;QADFI,CAAAA;QAUAX,OAAAc,sBAAAA,YACE,KADFA,CAAAA;MAnCFd,GAAAA,WAAAA,EAAAA,IAAAA;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>344, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/chain_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    class ChainTable\n      # @param [String] name 表の名前\n      # @param [String] type 項目を選ぶときのダイスロールの方法 '1D6'など\n      # @param [Array<String, #roll>] items 表の項目の配列\n      def initialize(name, type, items)\n        @name = name\n        @items = items.freeze\n\n        m = /(\\d+)D(\\d+)/i.match(type)\n        unless m\n          raise ArgumentError, \"Unexpected table type: \#{type}\"\n        end\n\n        @times = m[1].to_i\n        @sides = m[2].to_i\n      end\n\n      # 表を振る\n      # @param randomizer [#roll_sum] ランダマイザ\n      # @return [String] 結果\n      def roll(randomizer)\n        value = randomizer.roll_sum(@times, @sides)\n        index = value - @times\n        chosen = @items[index]\n        chosen = chosen.roll(randomizer) if chosen.respond_to?(:roll)\n\n        return RollResult.new(@name, value, chosen)\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:ChainTable>", "initialize", "name", "type", "items", "@name", "@items", "freeze", "m", "match", "self", "raise", "ArgumentError", "@times", "[]", "1", "to_i", "@sides", "2", "roll", "randomizer", "value", "roll_sum", "index", "-", "chosen", "respond_to?", "RollResult", "new"], :mappings=>"AAAAA,gDAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;;AAIEC,QAAAA,0BAAAA,sBAAeC,IAAD,EAAOC,IAAP,EAAaC,KAA3BH;AAAAA,UAAAA;;;UACEI,YAAQH;UACRI,aAASF,KAAKG,QAAAA,CAAAA;UAEdC,IAAI,cAAcC,OAAAA,CAAON,IAAPM;UAClB,KAAA,QAAOD,CAAP,CAAA;YACEE,IAAAC,OAAAA,CAAMC,mBAAN,EAAsBX,yBAAD,GAAA,CAA0BE,IAA1B,CAArBQ;UADF;UAIAE,aAASL,CAACM,OAAAA,CAACC,CAADD,CAAGE,MAAAA,CAAAA;UACbf,OAAAgB,CAAAA,aAAST,CAACM,OAAAA,CAACI,CAADJ,CAAGE,MAAAA,CAAAA,CAAbC;QAVFhB,CAAAA;QAgBAD,OAAAmB,oBAAAA,gBAASC,UAATD;AAAAA,UAAAA;;;UACEE,QAAQD,UAAUE,UAAAA,CAAUT,UAApB,EAA4BI,UAAlBK;UAClBC,QAAcC,UAANH,KAAMG,EAAEX,UAAFW;UACdC,SAASnB,UAAMQ,OAAAA,CAACS,KAADT;UACf,IAAA,QAAoCW,MAAMC,gBAAAA,CAAa,MAAbA,CAA1C,CAAA;YAAAD,SAASA,MAAMN,MAAAA,CAAMC,UAAND;UAAf;UAEA,OAAOQ,gBAAUC,KAAAA,CAAKvB,SAAf,EAAsBgB,KAAtB,EAA6BI,MAAnBG;QANnBT,CAAAA;MApBFnB,GAAAA,WAAAA,EAAAA,IAAAA;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>395, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/d66_grid_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    # D66を振って6x6マスの表を参照する\n    class D66GridTable\n      # @param key [String]\n      # @param locale [Symbol]\n      # @return [D66GridTable]\n      def self.from_i18n(key, locale)\n        table = I18n.t(key, locale: locale, raise: true)\n        new(table[:name], table[:items])\n      end\n\n      # @param [String] name 表の名前\n      # @param [Array<Array<String>>] items 表の項目の配列\n      def initialize(name, items)\n        @name = name\n        @items = items.freeze\n      end\n\n      # 表を振る\n      # @param randomizer [#roll_once] ランダマイザ\n      # @return [String] 結果\n      def roll(randomizer)\n        dice1 = randomizer.roll_once(6)\n        dice2 = randomizer.roll_once(6)\n        value = dice1 * 10 + dice2\n\n        index1 = dice1 - 1\n        index2 = dice2 - 1\n        return RollResult.new(@name, value, @items[index1][index2])\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:D66GridTable>", "from_i18n", "self", "key", "locale", "table", "I18n", "t", "new", "[]", "initialize", "name", "items", "@name", "@items", "freeze", "roll", "randomizer", "dice1", "roll_once", "6", "dice2", "value", "+", "*", "10", "index1", "-", "1", "index2", "RollResult"], :mappings=>"AAAAA,mDAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MAEEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAIEC,MAAIC,IAAJD,gBAAAA,qBAAmBE,GAAD,EAAMC,MAAxBH;AAAAA,UAAAA;;;UACEI,QAAQC,UAAIC,GAAAA,CAAGJ,GAAP,EAAY,6BAAA,UAAQC,MAAR,EAAA,SAAuB,IAAvB,EAARG;UACZN,OAAAC,IAAAM,KAAAA,CAAIH,KAAKI,OAAAA,CAAC,MAADA,CAAT,EAAkBJ,KAAKI,OAAAA,CAAC,OAADA,CAAvBD;QAFFP,CAAAA;;AAOAS,QAAAA,0BAAAA,sBAAeC,IAAD,EAAOC,KAArBF;AAAAA,UAAAA;;;UACEG,YAAQF;UACRD,OAAAI,CAAAA,aAASF,KAAKG,QAAAA,CAAAA,CAAdD;QAFFJ,CAAAA;QAQAV,OAAAgB,oBAAAA,gBAASC,UAATD;AAAAA,UAAAA;;;UACEE,QAAQD,UAAUE,WAAAA,CAAWC,CAAXD;UAClBE,QAAQJ,UAAUE,WAAAA,CAAWC,CAAXD;UAClBG,QAAmBC,SAALC,UAANN,KAAMM,EAAEC,EAAFD,CAAKD,EAAEF,KAAFE;UAEnBG,SAAeC,UAANT,KAAMS,EAAEC,CAAFD;UACfE,SAAeF,UAANN,KAAMM,EAAEC,CAAFD;UACf,OAAOG,gBAAUtB,KAAAA,CAAKK,SAAf,EAAsBS,KAAtB,EAA6BR,UAAML,OAAAA,CAACiB,MAADjB,CAAQA,OAAAA,CAACoB,MAADpB,CAAjCD;QAPnBQ,CAAAA;MAnBFhB,GAAAA,WAAAA,EAAAA,IAAAA;IAFFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>446, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/d66_half_grid_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/dice_table/d66_grid_table\"\n\nmodule BCDice\n  module DiceTable\n    # D66を振って6x6マスの表を参照する\n    class D66HalfGridTable < D66GridTable\n      # @param key [String]\n      # @param locale [Symbol]\n      # @return [D66HalfGridTable]\n      def self.from_i18n(key, locale)\n        table = I18n.t(key, locale: locale, raise: true)\n        new(table[:name], table[:items_1_2_3], table[:items_4_5_6])\n      end\n\n      # @param [String] name 表の名前\n      # @param [Array<String>] items_1_2_3\n      # @param [Array<String>] items_4_5_6\n      def initialize(name, items_1_2_3, items_4_5_6)\n        @name = name\n        @items = [\n          items_1_2_3,\n          items_1_2_3,\n          items_1_2_3,\n          items_4_5_6,\n          items_4_5_6,\n          items_4_5_6,\n        ].freeze\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "self", "require", "<module:BCDice>", "<module:DiceTable>", "<class:D66HalfGridTable>", "from_i18n", "key", "locale", "table", "I18n", "t", "new", "[]", "initialize", "name", "items_1_2_3", "items_4_5_6", "@name", "@items", "freeze", "D66GridTable"], :mappings=>"AAAAA,wDAAAA,gBAAAA;EAAAA;;;EAEAC,IAAAC,SAAAA,CAAQF,kCAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MAEEA,OAAAC;MAAAA;;QAAAA;;;QAIEC,MAAIL,IAAJK,gBAAAA,qBAAmBC,GAAD,EAAMC,MAAxBF;AAAAA,UAAAA;;;UACEG,QAAQC,UAAIC,GAAAA,CAAGJ,GAAP,EAAY,6BAAA,UAAQC,MAAR,EAAA,SAAuB,IAAvB,EAARG;UACZL,OAAAL,IAAAW,KAAAA,CAAIH,KAAKI,OAAAA,CAAC,MAADA,CAAT,EAAkBJ,KAAKI,OAAAA,CAAC,aAADA,CAAvB,EAAuCJ,KAAKI,OAAAA,CAAC,aAADA,CAA5CD;QAFFN,CAAAA;QAQAD,OAAAS,0BAAAA,sBAAeC,IAAD,EAAOC,WAAP,EAAoBC,WAAlCH;AAAAA,UAAAA;;;UACEI,YAAQH;UACRD,OAAAK,CAAAA,aAAS,CACPH,WADO,EAEPA,WAFO,EAGPA,WAHO,EAIPC,WAJO,EAKPA,WALO,EAMPA,WANO,CAORG,QAAAA,CAAAA,CAPDD;QAFFL,CAAAA;MAZFT,GAAAA,WAAAA,EAAyBgB,kBAAzBhB;IAFFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAJAH;"}}, {:offset=>{:line=>486, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/d66_one_third_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/dice_table/d66_grid_table\"\n\nmodule BCDice\n  module DiceTable\n    # D66を振って6x6マスの表を参照する\n    class D66OneThirdTable < D66GridTable\n      # @param key [String]\n      # @param locale [Symbol]\n      # @return [D66OneThirdTable]\n      def self.from_i18n(key, locale)\n        table = I18n.t(key, locale: locale, raise: true)\n        new(table[:name], table[:items_1_2], table[:items_3_4], table[:items_5_6])\n      end\n\n      # @param [String] name 表の名前\n      # @param [Array<String>] items_1_2\n      # @param [Array<String>] items_3_4\n      # @param [Array<String>] items_5_6\n      def initialize(name, items_1_2, items_3_4, items_5_6)\n        @name = name\n        @items = [\n          items_1_2,\n          items_1_2,\n          items_3_4,\n          items_3_4,\n          items_5_6,\n          items_5_6,\n        ].freeze\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "self", "require", "<module:BCDice>", "<module:DiceTable>", "<class:D66OneThirdTable>", "from_i18n", "key", "locale", "table", "I18n", "t", "new", "[]", "initialize", "name", "items_1_2", "items_3_4", "items_5_6", "@name", "@items", "freeze", "D66GridTable"], :mappings=>"AAAAA,wDAAAA,gBAAAA;EAAAA;;;EAEAC,IAAAC,SAAAA,CAAQF,kCAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MAEEA,OAAAC;MAAAA;;QAAAA;;;QAIEC,MAAIL,IAAJK,gBAAAA,qBAAmBC,GAAD,EAAMC,MAAxBF;AAAAA,UAAAA;;;UACEG,QAAQC,UAAIC,GAAAA,CAAGJ,GAAP,EAAY,6BAAA,UAAQC,MAAR,EAAA,SAAuB,IAAvB,EAARG;UACZL,OAAAL,IAAAW,KAAAA,CAAIH,KAAKI,OAAAA,CAAC,MAADA,CAAT,EAAkBJ,KAAKI,OAAAA,CAAC,WAADA,CAAvB,EAAqCJ,KAAKI,OAAAA,CAAC,WAADA,CAA1C,EAAwDJ,KAAKI,OAAAA,CAAC,WAADA,CAA7DD;QAFFN,CAAAA;QASAD,OAAAS,0BAAAA,sBAAeC,IAAD,EAAOC,SAAP,EAAkBC,SAAlB,EAA6BC,SAA3CJ;AAAAA,UAAAA;;;UACEK,YAAQJ;UACRD,OAAAM,CAAAA,aAAS,CACPJ,SADO,EAEPA,SAFO,EAGPC,SAHO,EAIPA,SAJO,EAKPC,SALO,EAMPA,SANO,CAORG,QAAAA,CAAAA,CAPDD;QAFFN,CAAAA;MAbFT,GAAAA,WAAAA,EAAyBiB,kBAAzBjB;IAFFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAJAH;"}}, {:offset=>{:line=>526, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/d66_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    # D66を振って出目を昇順/降順にして表を参照する\n    class D66Table\n      # @param key [String]\n      # @param locale [Symbol]\n      # @return [D66Table]\n      def self.from_i18n(key, locale)\n        table = I18n.t(key, locale: locale)\n        sort_type = D66SortType.const_get(table[:d66_sort_type])\n\n        new(table[:name], sort_type, table[:items])\n      end\n\n      # @param [String] name 表の名前\n      # @param [Symbol] sort_type 出目入れ替えの方式 BCDice::D66SortType\n      # @param [Hash] items 表の項目 Key は数値\n      def initialize(name, sort_type, items)\n        @name = name\n        @sort_type = sort_type\n        @items = items.freeze\n      end\n\n      # 表を振る\n      # @param randomizer [#roll_barabara] ランダマイザ\n      # @return [String] 結果\n      def roll(randomizer)\n        dice = randomizer.roll_barabara(2, 6)\n\n        case @sort_type\n        when D66SortType::ASC\n          dice.sort!\n        when D66SortType::DESC\n          dice.sort!.reverse!\n        end\n\n        key = dice[0] * 10 + dice[1]\n        chosen = @items[key] || @items[key.to_s]\n        chosen = chosen.roll(randomizer) if chosen.respond_to?(:roll)\n        RollResult.new(@name, key, chosen)\n      end\n\n      def choice(key)\n        RollResult.new(@name, key, @items[key])\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:D66Table>", "from_i18n", "self", "key", "locale", "table", "I18n", "t", "sort_type", "D66SortType", "const_get", "[]", "new", "initialize", "name", "items", "@name", "@sort_type", "@items", "freeze", "roll", "randomizer", "dice", "roll_barabara", "2", "6", "D66SortType::ASC", "$ret_or_1", "sort!", "D66SortType::DESC", "reverse!", "+", "*", "0", "10", "1", "chosen", "to_s", "respond_to?", "RollResult", "choice"], :mappings=>"AAAAA,8CAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MAEEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAIEC,MAAIC,IAAJD,gBAAAA,qBAAmBE,GAAD,EAAMC,MAAxBH;AAAAA,UAAAA;;;UACEI,QAAQC,UAAIC,GAAAA,CAAGJ,GAAP,EAAY,oBAAA,UAAQC,MAAR,EAARG;UACZC,YAAYC,iBAAWC,WAAAA,CAAWL,KAAKM,OAAAA,CAAC,eAADA,CAAhBD;UAEvBT,OAAAC,IAAAU,KAAAA,CAAIP,KAAKM,OAAAA,CAAC,MAADA,CAAT,EAAkBH,SAAlB,EAA6BH,KAAKM,OAAAA,CAAC,OAADA,CAAlCC;QAJFX,CAAAA;;AAUAY,QAAAA,0BAAAA,sBAAeC,IAAD,EAAON,SAAP,EAAkBO,KAAhCF;AAAAA,UAAAA;;;UACEG,YAAQF;UACRG,iBAAaT;UACbK,OAAAK,CAAAA,aAASH,KAAKI,QAAAA,CAAAA,CAAdD;QAHFL,CAAAA;;AASAO,QAAAA,oBAAAA,gBAASC,UAATD;AAAAA,UAAAA;;;UACEE,OAAOD,UAAUE,eAAAA,CAAeC,CAAzB,EAA4BC,CAAlBF;UAGjB,IAAA,QAAKG,IAAAjB,iBAAAiB,QAAL,EADAC,CAAAA,YAAKV,cAALU,CACA,CAAA;YACEL,IAAIM,UAAAA,CAAAA;UADN,OAEA,IAAA,QAAKC,IAAApB,iBAAAoB,SAAL,EAlCR,SAkCQ,CAAA;YACEP,IAAIM,UAAAA,CAAAA,CAAME,aAAAA,CAAAA;UADZ;YAHA;UAGA;UAIA3B,MAAmB4B,SAALC,UAARV,IAAIX,OAAAA,CAACsB,CAADtB,CAAIqB,EAAEE,EAAFF,CAAKD,EAAET,IAAIX,OAAAA,CAACwB,CAADxB,CAANoB;UACnBK,SAAS,CAAA,QAAAT,CAAAA,YAAAT,UAAMP,OAAAA,CAACR,GAADQ,CAANgB,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAeT,UAAMP,OAAAA,CAACR,GAAGkC,MAAAA,CAAAA,CAAJ1B,CAArB,CAAA;UACT,IAAA,QAAoCyB,MAAME,gBAAAA,CAAa,MAAbA,CAA1C,CAAA;YAAAF,SAASA,MAAMhB,MAAAA,CAAMC,UAAND;UAAf;UACAA,OAAAmB,gBAAU3B,KAAAA,CAAKI,SAAf,EAAsBb,GAAtB,EAA2BiC,MAAjBxB;QAbZQ,CAAAA;QAgBApB,OAAAwC,sBAAAA,kBAAWrC,GAAXqC;AAAAA,UAAAA;;UACEA,OAAAD,gBAAU3B,KAAAA,CAAKI,SAAf,EAAsBb,GAAtB,EAA2Be,UAAMP,OAAAA,CAACR,GAADQ,CAAvBC;QADZ4B,CAAAA;MAvCFxC,GAAAA,WAAAA,EAAAA,IAAAA;IAFFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>593, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/d66_left_range_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/dice_table/d66_table\"\n\nmodule BCDice\n  module DiceTable\n    # 左側（十の位）のみ Range を用いる D66 表\n    class D66LeftRangeTable < D66Table\n      # @param name [String] 表の名前\n      # @param sort_type [Symbol] 出目入れ替えの方式 BCDice::D66SortType\n      # @param items [Array<(Range, Array<String>)>] 表の項目の配列\n      def initialize(name, sort_type, items)\n        expanded_items = {}\n        items.each do |item|\n          range, right_items = item\n\n          range.each do |left_value|\n            right_items.each_with_index do |right_item, right_value|\n              key = left_value * 10 + (right_value + 1)\n              expanded_items[key] = right_item\n            end\n          end\n        end\n\n        super(name, sort_type, expanded_items)\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "self", "require", "<module:BCDice>", "<module:DiceTable>", "<class:D66LeftRangeTable>", "initialize", "name", "sort_type", "items", "expanded_items", "each", "block in initialize", "item", "block (2 levels) in initialize", "range", "right_items", "left_value", "block (3 levels) in initialize", "each_with_index", "right_item", "right_value", "block (4 levels) in initialize", "key", "+", "*", "10", "1", "[]=", "D66Table"], :mappings=>"AAAAA,yDAAAA,gBAAAA;EAAAA;;;EAEAC,IAAAC,SAAAA,CAAQF,6BAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MAEEA,OAAAC;MAAAA;;;QAIEA,OAAAC,0BAAAA,sBAAeC,IAAD,EAAOC,SAAP,EAAkBC,KAAhCH;AAAAA,UAAAA;;UAAAA;;UACEI,iBAAiB,YAAA;UACZC,MAALF,KAAKE,QAAAA,EAAAA,EAAAA,EAALC,aAAeC,IAAfD,EAAAE;;;YAAe;YACb,KAAqBD,IAArB,kBAAA,EAAAE,CAAAA,QAAA,6BAAAA,CAAA,EAAOC,CAAAA,cAAP,6BAAOA,CAAP;YAEAF,OAAKH,MAALI,KAAKJ,QAAAA,EAAAA,EAAAA,EAALG,aAAeG,UAAfH;;cAAe;cACbI,OAAWC,MAAXH,WAAWG,mBAAAA,EAAAA,EAAAA,EAAXD,aAAgCE,UAAD,EAAaC,WAA5CH,EAAAI;;;gBAAgC;gBAAY;gBAC1CC,MAAsBC,SAALC,UAAXR,UAAWQ,EAAEC,EAAFD,CAAKD,EAAeA,SAAZH,WAAYG,EAAEG,CAAFH,CAAfA;gBACtBF,OAAcM,MAAAA,CAACL,GAAf,EAAsBH,UAARQ,CAAAA,EAAAA,MAAdlB,cAAckB,OAAAA,EAAAA,EAAAA,CAAAA,EAAAA,mBAFhBV,CAAWC,EADbL,CAAKH,EAHPC,CAAKD;UAWLL,OAAA,OAAAL,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAMM,IAAN,EAAYC,SAAZ,EAAuBE,cAAvB,CAAA,EAAA,IAAA;QAbFJ,CAAAA;MAJFD,GAAAA,WAAAA,EAA0BwB,cAA1BxB;IAFFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAJAH;"}}, {:offset=>{:line=>640, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/d66_parity_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    # 出目の偶奇による場合分け機能をもつD66表\n    class D66ParityTable\n      # @param key [String]\n      # @param locale [Symbol]\n      # @return [D66ParityTable]\n      def self.from_i18n(key, locale)\n        table = I18n.t(key, locale: locale, raise: true)\n        new(table[:name], table[:odd], table[:even])\n      end\n\n      # @param name [String] 表の名前\n      # @param odd [Array<String>] 左ダイスが奇数だったときの次層テーブル（サイズ６）\n      # @param even [Array<String>] 左ダイスが偶数だったときの次層テーブル（サイズ６）\n      def initialize(name, odd, even)\n        @name = name\n        @odd = odd.freeze\n        @even = even.freeze\n      end\n\n      # 表を振る\n      # @param randomizer [#roll_once] ランダマイザ\n      # @return [String] 結果\n      def roll(randomizer)\n        dice1 = randomizer.roll_once(6)\n        dice2 = randomizer.roll_once(6)\n\n        if dice1.odd?\n          second_table = @odd\n        else\n          second_table = @even\n        end\n\n        result = second_table[dice2 - 1]\n        key = dice1 * 10 + dice2\n\n        return RollResult.new(@name, key, result)\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:D66ParityTable>", "from_i18n", "self", "key", "locale", "table", "I18n", "t", "new", "[]", "initialize", "name", "odd", "even", "@name", "@odd", "freeze", "@even", "roll", "randomizer", "dice1", "roll_once", "6", "dice2", "odd?", "second_table", "result", "-", "1", "+", "*", "10", "RollResult"], :mappings=>"AAAAA,qDAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MAEEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAIEC,MAAIC,IAAJD,gBAAAA,qBAAmBE,GAAD,EAAMC,MAAxBH;AAAAA,UAAAA;;;UACEI,QAAQC,UAAIC,GAAAA,CAAGJ,GAAP,EAAY,6BAAA,UAAQC,MAAR,EAAA,SAAuB,IAAvB,EAARG;UACZN,OAAAC,IAAAM,KAAAA,CAAIH,KAAKI,OAAAA,CAAC,MAADA,CAAT,EAAkBJ,KAAKI,OAAAA,CAAC,KAADA,CAAvB,EAA+BJ,KAAKI,OAAAA,CAAC,MAADA,CAApCD;QAFFP,CAAAA;;AAQAS,QAAAA,0BAAAA,sBAAeC,IAAD,EAAOC,GAAP,EAAYC,IAA1BH;AAAAA,UAAAA;;;UACEI,YAAQH;UACRI,WAAOH,GAAGI,QAAAA,CAAAA;UACVN,OAAAO,CAAAA,YAAQJ,IAAIG,QAAAA,CAAAA,CAAZC;QAHFP,CAAAA;QASAV,OAAAkB,oBAAAA,gBAASC,UAATD;AAAAA,UAAAA;;;UACEE,QAAQD,UAAUE,WAAAA,CAAWC,CAAXD;UAClBE,QAAQJ,UAAUE,WAAAA,CAAWC,CAAXD;UAElB,IAAA,QAAGD,KAAKI,SAAAA,CAAAA,CAAR,CAAA;YACEC,eAAeV;UADjB;YAGEU,eAAeR;UAHjB;UAMAS,SAASD,YAAYhB,OAAAA,CAAOkB,UAANJ,KAAMI,EAAEC,CAAFD,CAAPlB;UACrBN,MAAiB0B,SAALC,UAANV,KAAMU,EAAEC,EAAFD,CAAKD,EAAEN,KAAFM;UAEjB,OAAOG,gBAAUxB,KAAAA,CAAKM,SAAf,EAAsBX,GAAtB,EAA2BuB,MAAjBlB;QAbnBU,CAAAA;MArBFlB,GAAAA,WAAAA,EAAAA,IAAAA;IAFFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>696, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/d66_range_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    # 項目をRangeを用いて参照するD66表\n    class D66RangeTable\n      # @param name [String] 表の名前\n      # @param items [Array<(Range, String)>] 表の項目の配列\n      def initialize(name, items)\n        @name = name\n        @items = items.freeze\n      end\n\n      # 表を振る\n      # @param randomizer [#roll_once] ランダマイザ\n      # @return [String] 結果\n      def roll(randomizer)\n        dice1 = randomizer.roll_once(6)\n        dice2 = randomizer.roll_once(6)\n\n        key = dice1 * 10 + dice2\n\n        chosen = @items.find { |row| row[0].include?(key) }\n        return RollResult.new(@name, key, chosen[1])\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:D66RangeTable>", "initialize", "name", "items", "@name", "@items", "freeze", "roll", "randomizer", "dice1", "roll_once", "6", "dice2", "key", "+", "*", "10", "chosen", "find", "block in roll", "row", "block (2 levels) in roll", "[]", "0", "include?", "RollResult", "new", "1"], :mappings=>"AAAAA,oDAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MAEEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;;AAGEC,QAAAA,0BAAAA,sBAAeC,IAAD,EAAOC,KAArBF;AAAAA,UAAAA;;;UACEG,YAAQF;UACRD,OAAAI,CAAAA,aAASF,KAAKG,QAAAA,CAAAA,CAAdD;QAFFJ,CAAAA;QAQAD,OAAAO,oBAAAA,gBAASC,UAATD;AAAAA,UAAAA;;;UACEE,QAAQD,UAAUE,WAAAA,CAAWC,CAAXD;UAClBE,QAAQJ,UAAUE,WAAAA,CAAWC,CAAXD;UAElBG,MAAiBC,SAALC,UAANN,KAAMM,EAAEC,EAAFD,CAAKD,EAAEF,KAAFE;UAEjBG,SAAeC,MAANb,UAAMa,QAAAA,EAAAA,EAAAA,EAANC,aAAeC,GAAfD;;YAAe;YAAKE,OAAAD,GAAGE,OAAAA,CAACC,CAADD,CAAGE,aAAAA,CAAUX,GAAVW,EAA1BL,CAAMD;UACf,OAAOO,gBAAUC,KAAAA,CAAKtB,SAAf,EAAsBS,GAAtB,EAA2BI,MAAMK,OAAAA,CAACK,CAADL,CAAvBI;QAPnBnB,CAAAA;MAXFP,GAAAA,WAAAA,EAAAA,IAAAA;IAFFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>742, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/range_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    # 各項目について、Rangeを用いて出目の合計の範囲を指定する、表のクラス。\n    #\n    # このクラスを使うと、表の定義を短く書ける。\n    # このクラスを使って表を定義するときは、各項目を以下の形で書く。\n    #\n    #     [出目の合計の範囲, 内容]\n    #\n    # 「出目の合計の範囲」には、Integerを要素とするRangeか、Integerを置ける。\n    #\n    # roll メソッドで表を振ると、出目の合計値と対応する項目が選ばれる。\n    #\n    # @example 表の定義（バトルテックの致命的命中表）\n    #   CRITICAL_TABLE = RangeTable.new(\n    #     '致命的命中表',\n    #     '2D6',\n    #     [\n    #       [2..7,   '致命的命中はなかった'],\n    #       [8..9,   '1箇所の致命的命中'],\n    #       [10..11, '2箇所の致命的命中'],\n    #       [12,     'その部位が吹き飛ぶ（腕、脚、頭）または3箇所の致命的命中（胴）']\n    #     ]\n    #   )\n    #\n    # @example 表を振った結果\n    #   CRITICAL_TABLE.roll(bcdice).formatted\n    #   # 出目の合計が7の場合 ：\"致命的命中表(7) ＞ 致命的命中はなかった\"\n    #   # 出目の合計が8の場合 ：\"致命的命中表(8) ＞ 1箇所の致命的命中\"\n    #   # 出目の合計が9の場合 ：\"致命的命中表(9) ＞ 1箇所の致命的命中\"\n    #   # 出目の合計が10の場合：\"致命的命中表(10) ＞ 2箇所の致命的命中\"\n    class RangeTable\n      # 表を振った結果を表す構造体\n      # @!attribute [rw] sum\n      #   @return [Integer] 出目の合計\n      # @!attribute [rw] values\n      #   @return [Array<Integer>] 出目の配列\n      # @!attribute [rw] content\n      #   @return [Object] 選ばれた項目の内容\n      # @!attribute [rw] formatted\n      #   @return [String] 整形された結果\n      RollResult = Struct.new(:sum, :values, :content, :formatted) do\n        alias_method :to_s, :formatted\n      end\n\n      # 表の項目を表す構造体\n      # @!attribute [rw] range\n      #   @return [Range] 出目の合計の範囲\n      # @!attribute [rw] content\n      #   @return [Object] 内容\n      Item = Struct.new(:range, :content)\n\n      # 項目を選ぶときのダイスロールの方法を表す正規表現\n      DICE_ROLL_METHOD_RE = /\\A(\\d+)D(\\d+)\\z/i.freeze\n\n      # 表を振った結果の整形処理（既定の処理）\n      DEFAULT_FORMATTER = lambda do |table, result|\n        \"\#{table.name}(\#{result.sum}) ＞ \#{result.content}\"\n      end\n\n      # @return [String] 表の名前\n      attr_reader :name\n      # @return [Integer] 振るダイスの個数\n      attr_reader :num_of_dice\n      # @return [Integer] 振るダイスの面数\n      attr_reader :num_of_sides\n\n      class << self\n        def from_i18n(key, locale)\n          table = I18n.t(key, locale: locale)\n          converted_items = table[:items].map do |item|\n            [conv_string_range(item[0]), item[1]]\n          end\n          new(table[:name], table[:type], converted_items)\n        end\n\n        def conv_string_range(x)\n          case x\n          when Integer\n            return x\n          when String\n            return x.include?(\"..\") ? Range.new(*x.split(\"..\", 2).map { |n| Integer(n) }) : Integer(x)\n          end\n\n          raise(\n            TypeError,\n            \"\#{@name}: \#{x} (\#{x.class}) must be a String or an Integer\"\n          )\n        end\n      end\n\n      # 表を初期化する\n      #\n      # ブロックを与えると、独自の結果整形処理を指定できる。\n      # ブロックは振った表（+table+）と振った結果（+result+）を引数として受け取る。\n      #\n      # @param [String] name 表の名前\n      # @param [String] dice_roll_method\n      #   項目を選ぶときのダイスロールの方法（+'1D6'+ など）\n      # @param [Array<(Range, Object)>, Array<(Integer, Object)>] items\n      #   表の項目の配列。[出目の合計の範囲, 内容]\n      # @yieldparam [RangeTable] table 振った表\n      # @yieldparam [RollResult] result 表を振った結果\n      # @raise [ArgumentError] ダイスロール方法が正しい書式で指定されていなかった場合\n      # @raise [TypeError] 範囲の型が正しくなかった場合\n      # @raise [RangeError] 出目の合計の最小値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の最大値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の範囲にずれや重なりがあった場合\n      #\n      # @example 表の定義（バトルテックの致命的命中表）\n      #   CRITICAL_TABLE = RangeTable.new(\n      #     '致命的命中表',\n      #     '2D6',\n      #     [\n      #       [2..7,   '致命的命中はなかった'],\n      #       [8..9,   '1箇所の致命的命中'],\n      #       [10..11, '2箇所の致命的命中'],\n      #       [12,     'その部位が吹き飛ぶ（腕、脚、頭）または3箇所の致命的命中（胴）']\n      #     ]\n      #   )\n      #\n      # @example 独自の結果整形処理を指定する場合\n      #   CRITICAL_TABLE_WITH_FORMATTER = RangeTable.new(\n      #     '致命的命中表',\n      #     '2D6',\n      #     [\n      #       [2..7,   '致命的命中はなかった'],\n      #       [8..9,   '1箇所の致命的命中'],\n      #       [10..11, '2箇所の致命的命中'],\n      #       [12,     'その部位が吹き飛ぶ（腕、脚、頭）または3箇所の致命的命中（胴）']\n      #     ]\n      #   ) do |table, result|\n      #     \"致命的命中発生? ＞ \#{result.sum}[\#{result.values}] ＞ \#{result.content}\"\n      #   end\n      #\n      #   CRITICAL_TABLE_WITH_FORMATTER.roll(bcdice).formatted\n      #   #=> \"致命的命中発生? ＞ 11[5,6] ＞ 2箇所の致命的命中\"\n      def initialize(name, dice_roll_method, items, &formatter)\n        @name = name.freeze\n        @formatter = formatter || DEFAULT_FORMATTER\n\n        m = DICE_ROLL_METHOD_RE.match(dice_roll_method)\n        unless m\n          raise(\n            ArgumentError,\n            \"\#{@name}: invalid dice roll method: \#{dice_roll_method}\"\n          )\n        end\n\n        @num_of_dice = m[1].to_i\n        @num_of_sides = m[2].to_i\n\n        store(items)\n      end\n\n      # 指定された値に対応する項目を返す\n      # @param [Integer] value 値（出目の合計）\n      # @return [Item] 指定された値に対応する項目\n      # @raise [RangeError] 範囲外の値が指定された場合\n      def fetch(value)\n        item = @items.find { |i| i.range.include?(value) }\n        unless item\n          raise RangeError, \"\#{@name}: value is out of range: \#{value}\"\n        end\n\n        return item\n      end\n\n      # 表を振る\n      # @param randomizer [#roll_barabara] ランダマイザ\n      # @return [RollResult] 表を振った結果\n      def roll(randomizer)\n        values = randomizer.roll_barabara(@num_of_dice, @num_of_sides)\n        sum = values.sum()\n\n        result = RollResult.new(sum, values, fetch(sum).content)\n        result.formatted = @formatter[self, result]\n\n        return result\n      end\n\n      private\n\n      # 表の項目を格納する\n      # @param [Array<(Range, Object)>, Array<(Integer, Object)>] items\n      #   表の項目の配列。[出目の合計の範囲, 内容]\n      # @return [self]\n      # @raise [TypeError] 範囲の型が正しくなかった場合\n      # @raise [RangeError] 出目の合計の最小値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の最大値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の範囲にずれや重なりがあった場合\n      def store(items)\n        items_with_range = items.map { |r, c| [coerce_to_int_range(r), c] }\n        sorted_items = items_with_range.sort_by { |r, _| r.min }\n\n        assert_min_sum_is_covered(sorted_items)\n        assert_max_sum_is_covered(sorted_items)\n        assert_no_gap_or_overlap_in_ranges(sorted_items)\n\n        @items = sorted_items\n                 .map { |range, content| Item.new(range, content.freeze).freeze }\n                 .freeze\n\n        self\n      end\n\n      # 引数を強制的に整数を要素とするRangeに変換する\n      # @param [Range, Integer] x 変換対象\n      # @return [Range] 整数を要素とするRange\n      # @raise [TypeError] xの型に対応していなかった場合\n      def coerce_to_int_range(x)\n        case x\n        when Integer\n          return Range.new(x, x)\n        when Range\n          if x.begin.is_a?(Integer) && x.end.is_a?(Integer)\n            return x\n          end\n        end\n\n        raise(\n          TypeError,\n          \"\#{@name}: \#{x} (\#{x.class}) must be an Integer or a Range with Integers \"\n        )\n      end\n\n      # 出目の合計の最小値がカバーされていることを確認する\n      # @param [Array<(Range, Object)>] sorted_items\n      #   ソートされた、項目の配列\n      # @return [self]\n      # @raise [RangeError] 出目の合計の最小値がカバーされていなかった場合\n      def assert_min_sum_is_covered(sorted_items)\n        min_sum = @num_of_dice\n        range = sorted_items.first[0]\n        unless range.include?(min_sum)\n          raise(\n            RangeError,\n            \"\#{@name}: min value (\#{min_sum}) is not covered: \#{range}\"\n          )\n        end\n\n        self\n      end\n\n      # 出目の合計の最大値がカバーされていることを確認する\n      # @param [Array<(Range, Object)>] sorted_items\n      #   ソートされた、項目の配列\n      # @return [self]\n      # @raise [RangeError] 出目の合計の最大値がカバーされていなかった場合\n      def assert_max_sum_is_covered(sorted_items)\n        max_sum = @num_of_dice * @num_of_sides\n        range = sorted_items.last[0]\n        unless range.include?(max_sum)\n          raise(\n            RangeError,\n            \"\#{@name}: max value (\#{max_sum}) is not covered: \#{range}\"\n          )\n        end\n\n        self\n      end\n\n      # 出目の合計の範囲にずれや重なりがないことを確認する\n      # @param [Array<(Range, Object)>] sorted_items\n      #   ソートされた、項目の配列\n      # @return [self]\n      # @raise [RangeError] 出目の合計の範囲にずれや重なりがあった場合\n      def assert_no_gap_or_overlap_in_ranges(sorted_items)\n        sorted_items.each_cons(2) do |i1, i2|\n          r1 = i1[0]\n          r2 = i2[0]\n\n          max1 = r1.max\n          next_of_max1 = max1 + 1\n\n          if r2.include?(max1)\n            raise RangeError, \"\#{@name}: Range overlap: \#{r1} and \#{r2}\"\n          end\n\n          unless r2.include?(next_of_max1)\n            raise RangeError, \"\#{@name}: Range gap: \#{r1} and \#{r2}\"\n          end\n        end\n\n        self\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:RangeTable>", "new", "Struct", "block in <class:RangeTable>", "block (2 levels) in <class:RangeTable>", "self", "alias_method", "freeze", "lambda", "table", "result", "name", "sum", "content", "attr_reader", "from_i18n", "key", "locale", "I18n", "t", "converted_items", "map", "[]", "block in from_i18n", "item", "block (2 levels) in from_i18n", "conv_string_range", "0", "1", "x", "Integer", "$ret_or_1", "String", "include?", "Range", "split", "2", "block in conv_string_range", "n", "block (2 levels) in conv_string_range", "raise", "TypeError", "@name", "class", "initialize", "dice_roll_method", "items", "@formatter", "formatter", "DEFAULT_FORMATTER", "m", "DICE_ROLL_METHOD_RE", "match", "ArgumentError", "@num_of_dice", "to_i", "@num_of_sides", "store", "fetch", "value", "find", "@items", "block in fetch", "i", "block (2 levels) in fetch", "range", "RangeError", "roll", "randomizer", "values", "roll_barabara", "RollResult", "formatted=", "private", "items_with_range", "block in store", "r", "c", "block (2 levels) in store", "coerce_to_int_range", "sorted_items", "sort_by", "_", "min", "assert_min_sum_is_covered", "assert_max_sum_is_covered", "assert_no_gap_or_overlap_in_ranges", "Item", "begin", "is_a?", "end", "min_sum", "first", "max_sum", "*", "last", "each_cons", "block in assert_no_gap_or_overlap_in_ranges", "i1", "i2", "block (2 levels) in assert_no_gap_or_overlap_in_ranges", "r1", "r2", "max1", "max", "next_of_max1", "+"], :mappings=>"AAAAA,gDAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MA8BEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAUE,sCAAmBC,MAANC,YAAMD,OAAAA,EAAAA,CAAK,KAAX,EAAiB,QAAjB,EAA0B,SAA1B,EAAoC,WAA9BA,CAAAA,EAANE,uBAAAA,EAAAC;;UACXA,OAAAC,IAAAC,cAAAA,CAAa,MAAb,EAAoB,WAApBA,CADWH,CAAAA,GAAAA,SAAAA,CAAMF,CAAnB;QASA,gCAAOC,YAAMD,KAAAA,CAAK,OAAX,EAAmB,SAAbA,CAAb;QAGA,+CAAsB,gBAAkBM,QAAAA,CAAAA,CAAxC;QAGA,6CAAoBC,MAAAH,IAAAG,UAAAA,EAAAA,EAAAA,EAAAL,uBAAWM,KAAD,EAAQC,MAAlBP;;UAAW;UAAO;UACpCC,OAAA,EAAA,GAAA,CAAGK,KAAKE,MAAAA,CAAAA,CAAR,CAAA,GAAcP,GAAd,GAAA,CAAiBM,MAAME,KAAAA,CAAAA,CAAvB,CAAA,GAA4BR,MAA5B,GAAA,CAAkCM,MAAMG,SAAAA,CAAAA,CAAxC,EADkBV,CAAAK,CAApB;QAKAH,IAAAS,aAAAA,CAAY,MAAZA;QAEAT,IAAAS,aAAAA,CAAY,aAAZA;QAEAT,IAAAS,aAAAA,CAAY,cAAZA;QAEA;UAAA;;;;AACEC,UAAAA,yBAAAA,qBAAcC,GAAD,EAAMC,MAAnBF;AAAAA,YAAAA;;;YACEN,QAAQS,UAAIC,GAAAA,CAAGH,GAAP,EAAY,oBAAA,UAAQC,MAAR,EAARE;YACZC,kBAA+BC,MAAbZ,KAAKa,OAAAA,CAAC,OAADA,CAAQD,OAAAA,EAAAA,EAAAA,EAAbE,aAAsBC,IAAtBD,EAAAE;;;cAAsB;cACtCA,OAAA,CAACpB,IAAAqB,mBAAAA,CAAkBF,IAAIF,OAAAA,CAACK,CAADL,CAAtBI,CAAD,EAA6BF,IAAIF,OAAAA,CAACM,CAADN,CAAjC,EADgBC,CAAAA,GAAAA,SAAAA,CAAaF;YAG/BN,OAAAV,IAAAJ,KAAAA,CAAIQ,KAAKa,OAAAA,CAAC,MAADA,CAAT,EAAkBb,KAAKa,OAAAA,CAAC,MAADA,CAAvB,EAAgCF,eAAhCnB;UALFc,CAAAA;UAQA,OAAAW,iCAAAA,6BAAsBG,CAAtBH;AAAAA,YAAAA;AAAAA;;;YAEE,IAAA,QAAKI,aAAL,EADAC,CAAAA,YAAKF,CAALE,CACA,CAAA;cACE,OAAOF;YADT,OAEA,IAAA,QAAKG,YAAL,EAlFV,SAkFU,CAAA;cACE,OAAO,CAAA,QAAAH,CAACI,aAAAA,CAAUP,IAAVO,CAAD,CAAA,GAAA,CAAwBhC,MAALiC,WAAKjC,OAAAA,EAAK,MAAiBoB,MAAhBQ,CAACM,OAAAA,CAAOT,IAAR,EAAcU,CAAbD,CAAed,OAAAA,EAAAA,EAAAA,EAAhBgB,aAAwBC,CAAxBD,EAAAE;;;gBAAwB;gBAAGA,OAAAlC,IAAAyB,SAAAA,CAAQQ,CAARR,EAA3BO,CAAAA,GAAAA,SAAAA,CAAgBhB,CAAjB,CAALpB,CAAxB,IAAA,CAAyEI,IAAAyB,SAAAA,CAAQD,CAARC,CAAzE,CAAA;YADT;cAHA;YAGA;YAIAJ,OAAArB,IAAAmC,OAAAA,CACEC,eADF,EAEE,EAAA,GAAA,CAAGC,SAAH,CAAA,GAAShB,IAAT,GAAA,CAAaG,CAAb,CAAA,GAAeH,IAAf,GAAA,CAAmBG,CAACc,OAAAA,CAAAA,CAApB,CAAA,GAA2BjB,kCAF7Bc;UARFd,CAAAA;QATF,4BAASrB,IAAT;;AAsEAuC,QAAAA,0BAAAA,sBAAejC,IAAD,EAAOkC,gBAAP,EAAyBC,KAAvCF;AAAAA,UAAAA;;UAAAA;;;UACEF,YAAQ/B,IAAIJ,QAAAA,CAAAA;UACZwC,iBAAa,CAAA,QAAAhB,CAAAA,YAAAiB,SAAAjB,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAakB,uBAAb,CAAA;UAEbC,IAAIC,yBAAmBC,OAAAA,CAAOP,gBAAPO;UACvB,KAAA,QAAOF,CAAP,CAAA;YACE7C,IAAAmC,OAAAA,CACEa,mBADF,EAEE,EAAA,GAAA,CAAGX,SAAH,CAAA,GAASE,8BAAT,GAAA,CAAuCC,gBAAvC,CAFFL;UADF;UAOAc,mBAAeJ,CAAC5B,OAAAA,CAACM,CAADN,CAAGiC,MAAAA,CAAAA;UACnBC,oBAAgBN,CAAC5B,OAAAA,CAACc,CAADd,CAAGiC,MAAAA,CAAAA;UAEpBX,OAAAvC,IAAAoD,OAAAA,CAAMX,KAANW;QAfFb,CAAAA;;AAsBAc,QAAAA,qBAAAA,iBAAUC,KAAVD;AAAAA,UAAAA;;;UACElC,OAAaoC,MAANC,UAAMD,QAAAA,EAAAA,EAAAA,EAANE,aAAeC,CAAfD;;YAAe;YAAGE,OAAAD,CAACE,OAAAA,CAAAA,CAAMhC,aAAAA,CAAU0B,KAAV1B,EAAzB6B,CAAMF;UACb,KAAA,QAAOpC,IAAP,CAAA;YACEnB,IAAAmC,OAAAA,CAAM0B,gBAAN,EAAkB,EAAA,GAAA,CAAGxB,SAAH,CAAA,GAASgB,2BAAT,GAAA,CAAoCC,KAApC,CAAlBnB;UADF;UAIA,OAAOhB;QANTkC,CAAAA;;AAYAS,QAAAA,oBAAAA,gBAASC,UAATD;AAAAA,UAAAA;;;UACEE,SAASD,UAAUE,eAAAA,CAAehB,gBAAzB,EAAuCE,iBAA7Bc;UACnB1D,MAAMyD,MAAMzD,KAAAA,CAAAA;UAEZF,SAAS6D,gBAAUtE,KAAAA,CAAKW,GAAf,EAAoByD,MAApB,EAA4BhE,IAAAqD,OAAAA,CAAM9C,GAAN8C,CAAU7C,SAAAA,CAAAA,CAA5BZ;UACnBS,MAAM8D,eAAAA,CAAazB,cAAUzB,OAAAA,CAACjB,IAAX,EAAiBK,MAAPY,CAAvBkD;UAEN,OAAO9D;QAPTyD,CAAAA;QAUA9D,IAAAoE,SAAAA,CAAAA;;AAUAhB,QAAAA,qBAAAA,iBAAUX,KAAVW;AAAAA,UAAAA;;;UACEiB,mBAAwBrD,MAALyB,KAAKzB,OAAAA,EAAAA,EAAAA,EAALsD,aAAaC,CAAD,EAAIC,CAAhBF,EAAAG;;;YAAa;YAAG;YAAGA,OAAA,CAACzE,IAAA0E,qBAAAA,CAAoBH,CAApBG,CAAD,EAAyBF,CAAzB,EAAnBF,CAAAA,GAAAA,SAAAA,CAAKtD;UACxB2D,eAA+BC,MAAhBP,gBAAgBO,WAAAA,EAAAA,EAAAA,EAAhBN,aAA4BC,CAAD,EAAIM,CAA/BP;;YAA4B;YAAG;YAAGG,OAAAF,CAACO,KAAAA,CAAAA,EAAnCR,CAAgBM;UAE/B5E,IAAA+E,2BAAAA,CAA0BJ,YAA1BI;UACA/E,IAAAgF,2BAAAA,CAA0BL,YAA1BK;UACAhF,IAAAiF,oCAAAA,CAAmCN,YAAnCM;UAEAzB,aACSxC,MADA2D,YACA3D,OAAAA,EAAAA,EAAAA,EADAsD,aACQV,KAAD,EAAQpD,OADf8D;;YACQ;YAAO;YAASG,OAAAS,UAAItF,KAAAA,CAAKgE,KAAT,EAAgBpD,OAAON,QAAAA,CAAAA,CAAnBN,CAA2BM,QAAAA,CAAAA,EADvDoE,CACAtD,CACAd,QAAAA,CAAAA;UAETkD,OAAApD;QAZFoD,CAAAA;;AAmBAsB,QAAAA,mCAAAA,+BAAwBlD,CAAxBkD;AAAAA,UAAAA;;;UAEE,IAAA,QAAKjD,aAAL,EADAC,CAAAA,YAAKF,CAALE,CACA,CAAA;YACE,OAAOG,WAAKjC,KAAAA,CAAK4B,CAAV,EAAaA,CAAR5B;UADd,OAEA,IAAA,QAAKiC,WAAL,EAxNR,SAwNQ,CAAA;YACE,IAAG,CAAA,QAAAL,CAAC2D,OAAAA,CAAAA,CAAMC,UAAAA,CAAO3D,aAAP2D,CAAP,CAAA,IAAA,CAAA,QAA0B5D,CAAC6D,KAAAA,CAAAA,CAAID,UAAAA,CAAO3D,aAAP2D,CAA/B,CAAA,CAAA,CAAH;cACE,OAAO5D;YADT;UADF;YAHA;UAGA;UAMAkD,OAAA1E,IAAAmC,OAAAA,CACEC,eADF,EAEE,EAAA,GAAA,CAAGC,SAAH,CAAA,GAASqC,IAAT,GAAA,CAAalD,CAAb,CAAA,GAAekD,IAAf,GAAA,CAAmBlD,CAACc,OAAAA,CAAAA,CAApB,CAAA,GAA2BoC,gDAF7BvC;QAVFuC,CAAAA;;AAqBAK,QAAAA,yCAAAA,qCAA8BJ,YAA9BI;AAAAA,UAAAA;;;UACEO,UAAUrC;UACVW,QAAQe,YAAYY,OAAAA,CAAAA,CAAMtE,OAAAA,CAACK,CAADL;UAC1B,KAAA,QAAO2C,KAAKhC,aAAAA,CAAU0D,OAAV1D,CAAZ,CAAA;YACE5B,IAAAmC,OAAAA,CACE0B,gBADF,EAEE,EAAA,GAAA,CAAGxB,SAAH,CAAA,GAAS0C,eAAT,GAAA,CAAwBO,OAAxB,CAAA,GAAgCP,oBAAhC,GAAA,CAAoDnB,KAApD,CAFFzB;UADF;UAOA4C,OAAA/E;QAVF+E,CAAAA;;AAkBAC,QAAAA,yCAAAA,qCAA8BL,YAA9BK;AAAAA,UAAAA;;;UACEQ,UAAuBC,UAAbxC,gBAAawC,EAAEtC,iBAAFsC;UACvB7B,QAAQe,YAAYe,MAAAA,CAAAA,CAAKzE,OAAAA,CAACK,CAADL;UACzB,KAAA,QAAO2C,KAAKhC,aAAAA,CAAU4D,OAAV5D,CAAZ,CAAA;YACE5B,IAAAmC,OAAAA,CACE0B,gBADF,EAEE,EAAA,GAAA,CAAGxB,SAAH,CAAA,GAAS2C,eAAT,GAAA,CAAwBQ,OAAxB,CAAA,GAAgCR,oBAAhC,GAAA,CAAoDpB,KAApD,CAFFzB;UADF;UAOA6C,OAAAhF;QAVFgF,CAAAA;QAkBArF,OAAAsF,kDAAAA,8CAAuCN,YAAvCM;AAAAA,UAAAA;;;UACcU,MAAZhB,YAAYgB,aAAAA,EAAAA,CAAW5D,CAAX4D,CAAAA,EAAZC,aAA8BC,EAAD,EAAKC,EAAlCF,EAAAG;AAAAA;;;YAA8B;YAAI;YAChCC,KAAKH,EAAE5E,OAAAA,CAACK,CAADL;YACPgF,KAAKH,EAAE7E,OAAAA,CAACK,CAADL;YAEPiF,OAAOF,EAAEG,KAAAA,CAAAA;YACTC,eAAoBC,SAALH,IAAKG,EAAE9E,CAAF8E;YAEpB,IAAA,QAAGJ,EAAErE,aAAAA,CAAUsE,IAAVtE,CAAL,CAAA;cACE5B,IAAAmC,OAAAA,CAAM0B,gBAAN,EAAkB,EAAA,GAAA,CAAGxB,SAAH,CAAA,GAAS0D,mBAAT,GAAA,CAA4BC,EAA5B,CAAA,GAA+BD,OAA/B,GAAA,CAAsCE,EAAtC,CAAlB9D;YADF;YAIA,IAAA,QAAO8D,EAAErE,aAAAA,CAAUwE,YAAVxE,CAAT,CAAA;cAzRVmE,OAAA;YAyRU;cACEA,OAAA/F,IAAAmC,OAAAA,CAAM0B,gBAAN,EAAkB,EAAA,GAAA,CAAGxB,SAAH,CAAA,GAAS0D,eAAT,GAAA,CAAwBC,EAAxB,CAAA,GAA2BD,OAA3B,GAAA,CAAkCE,EAAlC,CAAlB9D;YADF,EAXFyD,CAAAA,GAAAA,SAAAA,CAAYD;UAgBZV,OAAAjF;QAjBFiF,CAAAA;MA5OFtF,GAAAA,WAAAA,EAAAA,IAAAA;IA9BFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>949, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/sai_fic_skill_table/category.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    class SaiFicSkillTable\n      class Category\n        def initialize(name, skills, dice, s_format)\n          @name = name\n          @skills = skills.map.with_index(2) { |s, index| SaiFicSkillTable::Skill.new(name, s, dice, index, s_format) }\n          @dice = dice\n        end\n\n        def roll(randomizer)\n          skills[randomizer.roll_sum(2, 6) - 2]\n        end\n\n        def to_s\n          @name\n        end\n\n        attr_reader :name, :dice, :skills\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:SaiFicSkillTable>", "<class:Category>", "initialize", "name", "skills", "dice", "s_format", "@name", "@skills", "with_index", "map", "2", "block in initialize", "s", "index", "block (2 levels) in initialize", "SaiFicSkillTable::Skill", "SaiFicSkillTable", "new", "@dice", "roll", "randomizer", "self", "[]", "-", "roll_sum", "6", "to_s", "attr_reader"], :mappings=>"AAAAA,iEAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;QACEA,OAAAC;QAAAA;;UAAAA;;;;AACEC,UAAAA,0BAAAA,sBAAeC,IAAD,EAAOC,MAAP,EAAeC,IAAf,EAAqBC,QAAnCJ;AAAAA,YAAAA;;;YACEK,YAAQJ;YACRK,cAAoBC,MAAVL,MAAMM,KAAAA,CAAAA,CAAID,cAAAA,EAAAA,CAAYE,CAAZF,CAAAA,EAAVG,aAA4BC,CAAD,EAAIC,KAA/BF;;cAA4B;cAAG;cAAOG,OAAAC,IAAAC,sBAAAD,UAAuBE,KAAAA,CAAKf,IAA5B,EAAkCU,CAAlC,EAAqCR,IAArC,EAA2CS,KAA3C,EAAkDR,QAA3BY,EAA7DN,CAAUH;YACpBP,OAAAiB,CAAAA,YAAQd,IAARc;UAHFjB,CAAAA;;AAMAkB,UAAAA,oBAAAA,gBAASC,UAATD;AAAAA,YAAAA;;YACEA,OAAAE,IAAAlB,QAAAA,CAAAA,CAAMmB,OAAAA,CAA2BC,UAA1BH,UAAUI,UAAAA,CAAUd,CAApB,EAAuBe,CAAbD,CAAgBD,EAAEb,CAAFa,CAA3BD;UADRH,CAAAA;;AAIAO,UAAAA,oBAAAA,aACE,MADFA,CAAAA;UAIA1B,OAAAqB,IAAAM,aAAAA,CAAY,MAAZ,EAAmB,MAAnB,EAA0B,QAA1BA;QAfF3B,GAAAA,WAAAA,EAAAA,IAAAA;MADFD,GAAAA,WAAAA,EAAAA,IAAAA;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>1001, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/sai_fic_skill_table/skill.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    class SaiFicSkillTable\n      class Skill\n        def initialize(category_name, skill_name, category_dice, row_dice, s_format)\n          @category_name = category_name\n          @name = skill_name\n          @category_dice = category_dice\n          @row_dice = row_dice\n          @s_format = s_format\n        end\n\n        def to_s\n          format(@s_format, category_dice: @category_dice, row_dice: @row_dice, category_name: @category_name, skill_name: @name)\n        end\n\n        attr_reader :category_name, :name, :category_dice, :row_dice\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:SaiFicSkillTable>", "<class:Skill>", "initialize", "category_name", "skill_name", "category_dice", "row_dice", "s_format", "@category_name", "@name", "@category_dice", "@row_dice", "@s_format", "to_s", "self", "format", "attr_reader"], :mappings=>"AAAAA,8DAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;QACEA,OAAAC;QAAAA;;UAAAA;;AAAAA;;;AACEC,UAAAA,0BAAAA,sBAAeC,aAAD,EAAgBC,UAAhB,EAA4BC,aAA5B,EAA2CC,QAA3C,EAAqDC,QAAnEL;AAAAA,YAAAA;;;YACEM,qBAAiBL;YACjBM,YAAQL;YACRM,qBAAiBL;YACjBM,gBAAYL;YACZJ,OAAAU,CAAAA,gBAAYL,QAAZK;UALFV,CAAAA;;AAQAW,UAAAA,oBAAAA,gBAAAA;AAAAA,YAAAA;;YACEA,OAAAC,IAAAC,QAAAA,CAAOH,aAAP,EAAkB,sEAAA,iBAAeF,kBAAf,EAAA,YAAyCC,aAAzC,EAAA,iBAAmEH,kBAAnE,EAAA,cAA+FC,SAA/F,EAAlBM;UADFF,CAAAA;UAIAZ,OAAAa,IAAAE,aAAAA,CAAY,eAAZ,EAA4B,MAA5B,EAAmC,eAAnC,EAAmD,UAAnDA;QAbFf,GAAAA,WAAAA,EAAAA,IAAAA;MADFD,GAAAA,WAAAA,EAAAA,IAAAA;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>1050, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/sai_fic_skill_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/dice_table/sai_fic_skill_table/category\"\nrequire \"bcdice/dice_table/sai_fic_skill_table/skill\"\n\nmodule BCDice\n  module DiceTable\n    class SaiFicSkillTable\n      # @param key    [String]\n      # @param locale [Symbol]\n      # @param rtt    [String] RTTに相当するコマンド\n      # @param rct    [String] RCTに相当するコマンド\n      # @param rttn   [Array]  RTT1～6に相当するコマンドの配列\n      # @return [SaiFicSkillTable]\n      def self.from_i18n(key, locale, rtt: nil, rct: nil, rttn: nil)\n        global = I18n.t(\"RTT\", locale: locale, raise: false, default: {})\n        table = global.merge(I18n.t(key, locale: locale, raise: true))\n        items = table[:items]\n        table = table.select { |k, _| [:rtt_format, :rttn_format, :rct_format, :s_format].include?(k) }\n        new(items, **table, rtt: rtt, rct: rct, rttn: rttn)\n      end\n\n      DEFAULT_RTT = \"ランダム特技表(%<category_dice>d,%<row_dice>d) ＞ %<text>s\"\n      DEFAULT_RCT = \"ランダム分野表(%<category_dice>d) ＞ %<category_name>s\"\n      DEFAULT_RTTN = \"%<category_name>s分野ランダム特技表(%<row_dice>d) ＞ %<text>s\"\n      DEFAULT_S = \"《%<skill_name>s／%<category_name>s%<row_dice>d》\"\n\n      # サイコロ・フィクション用ダイステーブルを初期化する。\n      # 既存の実装の互換性維持とルールブックの記載に準拠するために、コマンドと書式文字列を指定できる。\n      # @param items [Array] 特技リスト\n      # @param rtt          [String] RTTに相当するコマンド\n      # @param rct          [String] RCTに相当するコマンド\n      # @param rttn         [Array]  RTT1～6に相当するコマンドの配列\n      # @param rtt_format   [String] RTTコマンドの出力用の書式文字列\n      # @param rct_format   [String] RCTコマンドの出力用の書式文字列\n      # @param rttn_format  [String] RTTNコマンドの出力用の書式文字列\n      # @param s_format     [String] Skill#to_s出力用の書式文字列\n      def initialize(items, rtt: nil, rct: nil, rttn: nil, rtt_format: DEFAULT_RTT, rct_format: DEFAULT_RCT, rttn_format: DEFAULT_RTTN, s_format: DEFAULT_S)\n        @categories = items.map.with_index(1) do |(name, skills), index|\n          SaiFicSkillTable::Category.new(name, skills, index, s_format)\n        end\n        @rtt = rtt\n        @rct = rct\n        @rttn = rttn.to_a\n        @rtt_format = rtt_format\n        @rct_format = rct_format\n        @rttn_format = rttn_format\n      end\n\n      RTTN = [\"RTT1\", \"RTT2\", \"RTT3\", \"RTT4\", \"RTT5\", \"RTT6\"].freeze\n      attr_reader :categories\n\n      # コマンドを解釈し、結果を取得する\n      # return [String]\n      def roll_command(randomizer, command)\n        c = command\n        if [\"RTT\", @rtt].include?(c)\n          format_skill(@rtt_format, roll_skill(randomizer))\n        elsif [\"RCT\", @rct].include?(c)\n          cat = roll_category(randomizer)\n          format(@rct_format, category_dice: cat.dice, category_name: cat.name)\n        elsif (index = RTTN.index(c)) || (index = @rttn.index(c))\n          format_skill(@rttn_format, @categories[index].roll(randomizer))\n        end\n      end\n\n      # 1D6を振り、ランダムで分野を決定する\n      # @return [SaiFicSkillTable::Category]\n      def roll_category(randomizer)\n        @categories[randomizer.roll_once(6) - 1]\n      end\n\n      # 1D6と2D6を振り、ランダムで特技を決定する\n      # @return [SaiFicSkillTable::Skill]\n      def roll_skill(randomizer)\n        roll_category(randomizer).roll(randomizer)\n      end\n\n      def prefixes\n        ([\"RTT[1-6]?\", \"RCT\", @rtt, @rct] + @rttn).compact\n      end\n\n      private\n\n      def format_skill(format_string, skill)\n        format(format_string, category_dice: skill.category_dice, row_dice: skill.row_dice, category_name: skill.category_name, skill_name: skill.name, text: skill.to_s)\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "self", "require", "<module:BCDice>", "<module:DiceTable>", "<class:SaiFicSkillTable>", "from_i18n", "key", "locale", "$kwargs", "global", "I18n", "t", "table", "merge", "items", "[]", "select", "block in from_i18n", "k", "_", "block (2 levels) in from_i18n", "include?", "new", "rtt", "rct", "rttn", "initialize", "DEFAULT_RTT", "DEFAULT_RCT", "DEFAULT_RTTN", "DEFAULT_S", "@categories", "with_index", "map", "1", "block in initialize", "$mlhs_tmp1", "index", "block (2 levels) in initialize", "name", "skills", "SaiFicSkillTable::Category", "SaiFicSkillTable", "s_format", "@rtt", "@rct", "@rttn", "to_a", "@rtt_format", "rtt_format", "@rct_format", "rct_format", "@rttn_format", "rttn_format", "freeze", "attr_reader", "roll_command", "randomizer", "command", "c", "format_skill", "roll_skill", "cat", "roll_category", "format", "dice", "RTTN", "roll", "-", "roll_once", "6", "prefixes", "+", "compact", "private", "format_string", "skill", "category_dice", "row_dice", "category_name", "to_s"], :mappings=>"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"}}, {:offset=>{:line=>1181, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    # 表を表すクラス\n    class Table\n      # @param key [String]\n      # @param locale [Symbol]\n      # @return [Table]\n      def self.from_i18n(key, locale)\n        table = I18n.t(key, locale: locale)\n        new(table[:name], table[:type], table[:items])\n      end\n\n      # @param [String] name 表の名前\n      # @param [String] type 項目を選ぶときのダイスロールの方法 '1D6'など\n      # @param [Array<String>] items 表の項目の配列\n      def initialize(name, type, items)\n        @name = name\n        @items = items.freeze\n\n        m = /(\\d+)D(\\d+)/i.match(type)\n        unless m\n          raise ArgumentError, \"Unexpected table type: \#{type}\"\n        end\n\n        @times = m[1].to_i\n        @sides = m[2].to_i\n      end\n\n      # 表を振る\n      # @param [BCDice] bcdice ランダマイザ\n      # @return [String] 結果\n      def roll(bcdice)\n        value = bcdice.roll_sum(@times, @sides)\n        return choice(value)\n      end\n\n      def choice(value)\n        index = value - @times\n        return RollResult.new(@name, value, @items[index])\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:Table>", "from_i18n", "self", "key", "locale", "table", "I18n", "t", "new", "[]", "initialize", "name", "type", "items", "@name", "@items", "freeze", "m", "match", "raise", "ArgumentError", "@times", "1", "to_i", "@sides", "2", "roll", "bcdice", "value", "roll_sum", "choice", "index", "-", "RollResult"], :mappings=>"AAAAA,0CAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MAEEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAIEC,MAAIC,IAAJD,gBAAAA,qBAAmBE,GAAD,EAAMC,MAAxBH;AAAAA,UAAAA;;;UACEI,QAAQC,UAAIC,GAAAA,CAAGJ,GAAP,EAAY,oBAAA,UAAQC,MAAR,EAARG;UACZN,OAAAC,IAAAM,KAAAA,CAAIH,KAAKI,OAAAA,CAAC,MAADA,CAAT,EAAkBJ,KAAKI,OAAAA,CAAC,MAADA,CAAvB,EAAgCJ,KAAKI,OAAAA,CAAC,OAADA,CAArCD;QAFFP,CAAAA;;AAQAS,QAAAA,0BAAAA,sBAAeC,IAAD,EAAOC,IAAP,EAAaC,KAA3BH;AAAAA,UAAAA;;;UACEI,YAAQH;UACRI,aAASF,KAAKG,QAAAA,CAAAA;UAEdC,IAAI,cAAcC,OAAAA,CAAON,IAAPM;UAClB,KAAA,QAAOD,CAAP,CAAA;YACEf,IAAAiB,OAAAA,CAAMC,mBAAN,EAAsBV,yBAAD,GAAA,CAA0BE,IAA1B,CAArBO;UADF;UAIAE,aAASJ,CAACR,OAAAA,CAACa,CAADb,CAAGc,MAAAA,CAAAA;UACbb,OAAAc,CAAAA,aAASP,CAACR,OAAAA,CAACgB,CAADhB,CAAGc,MAAAA,CAAAA,CAAbC;QAVFd,CAAAA;;AAgBAgB,QAAAA,oBAAAA,gBAASC,MAATD;AAAAA,UAAAA;;;UACEE,QAAQD,MAAME,UAAAA,CAAUR,UAAhB,EAAwBG,UAAlBK;UACd,OAAO3B,IAAA4B,QAAAA,CAAOF,KAAPE;QAFTJ,CAAAA;QAKA1B,OAAA8B,sBAAAA,kBAAWF,KAAXE;AAAAA,UAAAA;;;UACEC,QAAcC,UAANJ,KAAMI,EAAEX,UAAFW;UACd,OAAOC,gBAAUzB,KAAAA,CAAKM,SAAf,EAAsBc,KAAtB,EAA6Bb,UAAMN,OAAAA,CAACsB,KAADtB,CAAzBD;QAFnBsB,CAAAA;MAjCF9B,GAAAA,WAAAA,EAAAA,IAAAA;IAFFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>1242, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/dice_table/roll_result\"\nrequire \"bcdice/dice_table/chain_table\"\nrequire \"bcdice/dice_table/d66_grid_table\"\nrequire \"bcdice/dice_table/d66_half_grid_table\"\nrequire \"bcdice/dice_table/d66_one_third_table\"\nrequire \"bcdice/dice_table/d66_left_range_table\"\nrequire \"bcdice/dice_table/d66_parity_table\"\nrequire \"bcdice/dice_table/d66_range_table\"\nrequire \"bcdice/dice_table/d66_table\"\nrequire \"bcdice/dice_table/range_table\"\nrequire \"bcdice/dice_table/sai_fic_skill_table\"\nrequire \"bcdice/dice_table/table\"\n"], :names=>["<top (required)>", "self", "require"], :mappings=>"AAAAA,oCAAAA,gBAAAA;EAAAA;;;EAEAC,IAAAC,SAAAA,CAAQF,+BAARE;EACAD,IAAAC,SAAAA,CAAQF,+BAARE;EACAD,IAAAC,SAAAA,CAAQF,kCAARE;EACAD,IAAAC,SAAAA,CAAQF,uCAARE;EACAD,IAAAC,SAAAA,CAAQF,uCAARE;EACAD,IAAAC,SAAAA,CAAQF,wCAARE;EACAD,IAAAC,SAAAA,CAAQF,oCAARE;EACAD,IAAAC,SAAAA,CAAQF,mCAARE;EACAD,IAAAC,SAAAA,CAAQF,6BAARE;EACAD,IAAAC,SAAAA,CAAQF,+BAARE;EACAD,IAAAC,SAAAA,CAAQF,uCAARE;EACAF,OAAAC,IAAAC,SAAAA,CAAQF,yBAARE;AAbAF;"}}, {:offset=>{:line=>1260, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/enum.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  # D66のダイス入れ替え\n  module D66SortType\n    NO_SORT = :no_sort # 入れ替えない\n    ASC = :asc # 一の位が大きな出目になるよう、昇順にソートする\n    DESC = :desc # 一の位が小さな出目になるよう、降順にソートする\n  end\n\n  # 割り算をした後の端数の扱い\n  module RoundType\n    CEIL = :ceil # 切り上げ\n    FLOOR = :floor # 切り捨て\n    ROUND = :round # 四捨五入\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:D66SortType>", "<module:RoundType>"], :mappings=>"AAAAA,8BAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;;IAEEC;IAAAA;;MAAAA;;;MACE,mCAAU,SAAV;MACA,+BAAM,KAAN;MACAA,OAAA,gCAAO,MAAP;IAHFA,GAAAA,WAAAA;IAOAD,OAAAE;IAAAA;;MAAAA;;;MACE,gCAAO,MAAP;MACA,iCAAQ,OAAR;MACAA,OAAA,iCAAQ,OAAR;IAHFA,GAAAA,WAAAA;EATFF,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>1292, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/translate.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  # i18n用のモジュール\n  module Translate\n    # i18n用の翻訳メソッド\n    # @param key [String]\n    # @return [Object]\n    def translate(key, **options)\n      I18n.translate(key, locale: @locale, raise: true, **options)\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:Translate>", "translate", "key", "$kwargs", "I18n", "@locale", "options"], :mappings=>"AAAAA,mCAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IAEEA,OAAAC;IAAAA;;MAAAA;;MAIEA,OAAAC,yBAAAA,qBAAcC,GAAD,EARjBC,OAQIF;AAAAA,QAAAA;AAAAA;;;QARJ;QAQuB;QACjBA,OAAAG,UAAIH,WAAAA,CAAWC,GAAf,EAAoB,6BAAA,UAAQG,WAAR,EAAA,SAAwB,IAAxB,EAAA,QAA8B,aAAEC,OAAF,CAA9B,CAAhBL;MADNA,CAAAA,IAAAA;IAJFD,GAAAA,WAAAA;EAFFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>1318, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/result.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  # ダイスロールの結果を表すクラス\n  #\n  # コマンドの結果の文字列や、成功／失敗／クリティカル／ファンブルの情報を保持する。\n  # 成功／失敗は同時に発生しないこととする。\n  # 成功／失敗のペアとクリティカル、ファンブルの三者は独立した要素とし、\n  # 「クリティカルだが失敗」や「ファンブルだが成功でも失敗でもない」を許容する。\n  class Result\n    class << self\n      # +success+ が設定された +Result+ を作成する\n      #\n      # @param text [String]\n      # @return [Result]\n      def success(text)\n        new.tap do |r|\n          r.text = text\n          r.success = true\n        end\n      end\n\n      # +failure+ が設定された +Result+ を作成する\n      #\n      # @param text [String]\n      # @return [Result]\n      def failure(text)\n        new.tap do |r|\n          r.text = text\n          r.failure = true\n        end\n      end\n\n      # +success+ と +critical+ が設定された +Result+ を作成する\n      #\n      # @param text [String]\n      # @return [Result]\n      def critical(text)\n        new.tap do |r|\n          r.text = text\n          r.critical = true\n          r.success = true\n        end\n      end\n\n      # +failure+ と +fumble+ が設定された +Result+ を作成する\n      #\n      # @param text [String]\n      # @return [Result]\n      def fumble(text)\n        new.tap do |r|\n          r.text = text\n          r.fumble = true\n          r.failure = true\n        end\n      end\n\n      # その後の判定で何もすることがないことを示すために利用する\n      #\n      # @return [:nothing]\n      def nothing\n        :nothing\n      end\n    end\n\n    # @param text [String | nil]\n    def initialize(text = nil)\n      @text = text\n      @rands = nil\n      @detailed_rands = nil\n      @secret = false\n      @success = false\n      @failure = false\n      @critical = false\n      @fumble = false\n    end\n\n    attr_accessor :text, :rands, :detailed_rands\n    attr_writer :secret, :success, :failure, :critical, :fumble\n\n    # @return [Boolean]\n    def secret?\n      @secret\n    end\n\n    # @return [Boolean]\n    def success?\n      @success\n    end\n\n    # @return [Boolean]\n    def failure?\n      @failure\n    end\n\n    # @return [Boolean]\n    def critical?\n      @critical\n    end\n\n    # @return [Boolean]\n    def fumble?\n      @fumble\n    end\n\n    # @param condition [Boolean]\n    # @return [void]\n    def condition=(condition)\n      @success = condition\n      @failure = !condition\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<class:Result>", "success", "text", "tap", "self", "new", "block in success", "r", "block (2 levels) in success", "text=", "success=", "failure", "block in failure", "block (2 levels) in failure", "failure=", "critical", "block in critical", "block (2 levels) in critical", "critical=", "fumble", "block in fumble", "block (2 levels) in fumble", "fumble=", "nothing", "initialize", "@text", "@rands", "@detailed_rands", "@secret", "@success", "@failure", "@critical", "@fumble", "attr_accessor", "attr_writer", "secret?", "success?", "failure?", "critical?", "fumble?", "condition=", "condition", "!"], :mappings=>"AAAAA,gCAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IAOEA,OAAAC;IAAAA;;MAAAA;;;MACE;;;;AAKEC,QAAAA,uBAAAA,mBAAYC,IAAZD;AAAAA,UAAAA;;UACEA,OAAGE,MAAHC,IAAAC,KAAAA,CAAAA,CAAGF,OAAAA,EAAAA,EAAAA,EAAHG,aAAYC,CAAZD,EAAAE;;;YAAY;YACVD,CAACE,UAAAA,CAAQP,IAARO;YACDD,OAACE,MAAAA,CAAW,IAAXA,CAAAA,EAAAA,MAADH,CAACG,YAAAA,EAAAA,EAAAA,CAAAA,EAAAA,mBAFHJ,CAAGH;QADLF,CAAAA;;AAWAU,QAAAA,uBAAAA,mBAAYT,IAAZS;AAAAA,UAAAA;;UACEA,OAAGR,MAAHC,IAAAC,KAAAA,CAAAA,CAAGF,OAAAA,EAAAA,EAAAA,EAAHS,aAAYL,CAAZK,EAAAC;;;YAAY;YACVN,CAACE,UAAAA,CAAQP,IAARO;YACDI,OAACC,MAAAA,CAAW,IAAXA,CAAAA,EAAAA,MAADP,CAACO,YAAAA,EAAAA,EAAAA,CAAAA,EAAAA,mBAFHF,CAAGT;QADLQ,CAAAA;;AAWAI,QAAAA,wBAAAA,oBAAab,IAAba;AAAAA,UAAAA;;UACEA,OAAGZ,MAAHC,IAAAC,KAAAA,CAAAA,CAAGF,OAAAA,EAAAA,EAAAA,EAAHa,aAAYT,CAAZS,EAAAC;;;YAAY;YACVV,CAACE,UAAAA,CAAQP,IAARO;YACDF,CAACW,cAAAA,CAAY,IAAZA;YACDD,OAACP,MAAAA,CAAW,IAAXA,CAAAA,EAAAA,MAADH,CAACG,YAAAA,EAAAA,EAAAA,CAAAA,EAAAA,mBAHHM,CAAGb;QADLY,CAAAA;;AAYAI,QAAAA,sBAAAA,kBAAWjB,IAAXiB;AAAAA,UAAAA;;UACEA,OAAGhB,MAAHC,IAAAC,KAAAA,CAAAA,CAAGF,OAAAA,EAAAA,EAAAA,EAAHiB,aAAYb,CAAZa,EAAAC;;;YAAY;YACVd,CAACE,UAAAA,CAAQP,IAARO;YACDF,CAACe,YAAAA,CAAU,IAAVA;YACDD,OAACP,MAAAA,CAAW,IAAXA,CAAAA,EAAAA,MAADP,CAACO,YAAAA,EAAAA,EAAAA,CAAAA,EAAAA,mBAHHM,CAAGjB;QADLgB,CAAAA;QAWA,OAAAI,uBAAAA,YACE,SADFA,CAAAA;MAlDF,4BAASnB,IAAT;;AAwDAoB,MAAAA,0BAAAA,sBAAetB,IAAfsB;AAAAA,QAAAA;;;QAAe,yBAAO;QACpBC,YAAQvB;QACRwB,aAAS;QACTC,sBAAkB;QAClBC,cAAU;QACVC,eAAW;QACXC,eAAW;QACXC,gBAAY;QACZP,OAAAQ,CAAAA,cAAU,KAAVA;MARFR,CAAAA,IAAAA;MAWApB,IAAA6B,eAAAA,CAAc,MAAd,EAAqB,OAArB,EAA6B,gBAA7BA;MACA7B,IAAA8B,aAAAA,CAAY,QAAZ,EAAqB,SAArB,EAA+B,SAA/B,EAAyC,UAAzC,EAAoD,QAApDA;;AAGAC,MAAAA,uBAAAA,aACE,QADFA,CAAAA;;AAKAC,MAAAA,wBAAAA,aACE,SADFA,CAAAA;;AAKAC,MAAAA,wBAAAA,aACE,SADFA,CAAAA;;AAKAC,MAAAA,yBAAAA,aACE,UADFA,CAAAA;;AAKAC,MAAAA,uBAAAA,aACE,QADFA,CAAAA;MAMAvC,OAAAwC,0BAAAA,gCAAeC,SAAfD;AAAAA,QAAAA;;;QACEX,eAAWY;QACXD,OAAAV,CAAAA,eAAYW,SAADC,MAAAA,CAAAA,CAAXZ;MAFFU,CAAAA;IAlGFxC,GAAAA,WAAAA,EAAAA,IAAAA;EAPFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>1421, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["racc/parser.rb"], :sourcesContent=>["# Opal port of racc/parser.rb.\n#\n# Original license:\n#\n# frozen_string_literal: false\n#--\n# $originalId: parser.rb,v 1.8 2006/07/06 11:42:07 aamine Exp $\n#\n# Copyright (c) 1999-2006 Minero Aoki\n#\n# This program is free software.\n# You can distribute/modify this program under the same terms of ruby.\n#\n# As a special exception, when this code is copied by Racc\n# into a Racc output file, you may use that output file\n# without restriction.\n#++\n\nmodule Racc\n  class ParseError < StandardError; end\nend\nunless defined?(::ParseError)\n  ParseError = Racc::ParseError\nend\n\n# Racc is a LALR(1) parser generator.\n# It is written in Ruby itself, and generates Ruby programs.\n#\n# == Command-line Reference\n#\n#     racc [-o<var>filename</var>] [--output-file=<var>filename</var>]\n#          [-e<var>rubypath</var>] [--embedded=<var>rubypath</var>]\n#          [-v] [--verbose]\n#          [-O<var>filename</var>] [--log-file=<var>filename</var>]\n#          [-g] [--debug]\n#          [-E] [--embedded]\n#          [-l] [--no-line-convert]\n#          [-c] [--line-convert-all]\n#          [-a] [--no-omit-actions]\n#          [-C] [--check-only]\n#          [-S] [--output-status]\n#          [--version] [--copyright] [--help] <var>grammarfile</var>\n#\n# [+filename+]\n#   Racc grammar file. Any extension is permitted.\n# [-o+outfile+, --output-file=+outfile+]\n#   A filename for output. default is <+filename+>.tab.rb\n# [-O+filename+, --log-file=+filename+]\n#   Place logging output in file +filename+.\n#   Default log file name is <+filename+>.output.\n# [-e+rubypath+, --executable=+rubypath+]\n#   output executable file(mode 755). where +path+ is the Ruby interpreter.\n# [-v, --verbose]\n#   verbose mode. create +filename+.output file, like yacc's y.output file.\n# [-g, --debug]\n#   add debug code to parser class. To display debugging information,\n#   use this '-g' option and set @yydebug true in parser class.\n# [-E, --embedded]\n#   Output parser which doesn't need runtime files (racc/parser.rb).\n# [-C, --check-only]\n#   Check syntax of racc grammar file and quit.\n# [-S, --output-status]\n#   Print messages time to time while compiling.\n# [-l, --no-line-convert]\n#   turns off line number converting.\n# [-c, --line-convert-all]\n#   Convert line number of actions, inner, header and footer.\n# [-a, --no-omit-actions]\n#   Call all actions, even if an action is empty.\n# [--version]\n#   print Racc version and quit.\n# [--copyright]\n#   Print copyright and quit.\n# [--help]\n#   Print usage and quit.\n#\n# == Generating Parser Using Racc\n#\n# To compile Racc grammar file, simply type:\n#\n#   $ racc parse.y\n#\n# This creates Ruby script file \"parse.tab.y\". The -o option can change the output filename.\n#\n# == Writing A Racc Grammar File\n#\n# If you want your own parser, you have to write a grammar file.\n# A grammar file contains the name of your parser class, grammar for the parser,\n# user code, and anything else.\n# When writing a grammar file, yacc's knowledge is helpful.\n# If you have not used yacc before, Racc is not too difficult.\n#\n# Here's an example Racc grammar file.\n#\n#   class Calcparser\n#   rule\n#     target: exp { print val[0] }\n#\n#     exp: exp '+' exp\n#        | exp '*' exp\n#        | '(' exp ')'\n#        | NUMBER\n#   end\n#\n# Racc grammar files resemble yacc files.\n# But (of course), this is Ruby code.\n# yacc's $$ is the 'result', $0, $1... is\n# an array called 'val', and $-1, $-2... is an array called '_values'.\n#\n# See the {Grammar File Reference}[rdoc-ref:lib/racc/rdoc/grammar.en.rdoc] for\n# more information on grammar files.\n#\n# == Parser\n#\n# Then you must prepare the parse entry method. There are two types of\n# parse methods in Racc, Racc::Parser#do_parse and Racc::Parser#yyparse\n#\n# Racc::Parser#do_parse is simple.\n#\n# It's yyparse() of yacc, and Racc::Parser#next_token is yylex().\n# This method must returns an array like [TOKENSYMBOL, ITS_VALUE].\n# EOF is [false, false].\n# (TOKENSYMBOL is a Ruby symbol (taken from String#intern) by default.\n# If you want to change this, see the grammar reference.\n#\n# Racc::Parser#yyparse is little complicated, but useful.\n# It does not use Racc::Parser#next_token, instead it gets tokens from any iterator.\n#\n# For example, <code>yyparse(obj, :scan)</code> causes\n# calling +obj#scan+, and you can return tokens by yielding them from +obj#scan+.\n#\n# == Debugging\n#\n# When debugging, \"-v\" or/and the \"-g\" option is helpful.\n#\n# \"-v\" creates verbose log file (.output).\n# \"-g\" creates a \"Verbose Parser\".\n# Verbose Parser prints the internal status when parsing.\n# But it's _not_ automatic.\n# You must use -g option and set +@yydebug+ to +true+ in order to get output.\n# -g option only creates the verbose parser.\n#\n# === Racc reported syntax error.\n#\n# Isn't there too many \"end\"?\n# grammar of racc file is changed in v0.10.\n#\n# Racc does not use '%' mark, while yacc uses huge number of '%' marks..\n#\n# === Racc reported \"XXXX conflicts\".\n#\n# Try \"racc -v xxxx.y\".\n# It causes producing racc's internal log file, xxxx.output.\n#\n# === Generated parsers does not work correctly\n#\n# Try \"racc -g xxxx.y\".\n# This command let racc generate \"debugging parser\".\n# Then set @yydebug=true in your parser.\n# It produces a working log of your parser.\n#\n# == Re-distributing Racc runtime\n#\n# A parser, which is created by Racc, requires the Racc runtime module;\n# racc/parser.rb.\n#\n# Ruby 1.8.x comes with Racc runtime module,\n# you need NOT distribute Racc runtime files.\n#\n# If you want to include the Racc runtime module with your parser.\n# This can be done by using '-E' option:\n#\n#   $ racc -E -omyparser.rb myparser.y\n#\n# This command creates myparser.rb which `includes' Racc runtime.\n# Only you must do is to distribute your parser file (myparser.rb).\n#\n# Note: parser.rb is LGPL, but your parser is not.\n# Your own parser is completely yours.\nmodule Racc\n\n  unless defined?(Racc_No_Extensions)\n    Racc_No_Extensions = false # :nodoc:\n  end\n\n  class Parser\n\n    Racc_Runtime_Version = '1.4.6'\n    Racc_Runtime_Revision = %w$originalRevision: 1.8 $[1]\n\n    Racc_Runtime_Core_Version_R = '1.4.6'\n    Racc_Runtime_Core_Revision_R = %w$originalRevision: 1.8 $[1]\n    # DISABLED: opal has no racc/cparse\n    # begin\n    #   require 'racc/cparse'\n    # # Racc_Runtime_Core_Version_C  = (defined in extension)\n    #   Racc_Runtime_Core_Revision_C = Racc_Runtime_Core_Id_C.split[2]\n    #   unless new.respond_to?(:_racc_do_parse_c, true)\n    #     raise LoadError, 'old cparse.so'\n    #   end\n    #   if Racc_No_Extensions\n    #     raise LoadError, 'selecting ruby version of racc runtime core'\n    #   end\n    #\n    #   Racc_Main_Parsing_Routine    = :_racc_do_parse_c # :nodoc:\n    #   Racc_YY_Parse_Method         = :_racc_yyparse_c # :nodoc:\n    #   Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C # :nodoc:\n    #   Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_C # :nodoc:\n    #   Racc_Runtime_Type            = 'c' # :nodoc:\n    # rescue LoadError\n      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb\n      Racc_YY_Parse_Method         = :_racc_yyparse_rb\n      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R\n      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_R\n      Racc_Runtime_Type            = 'ruby'\n    # end\n\n    def Parser.racc_runtime_type # :nodoc:\n      Racc_Runtime_Type\n    end\n\n    def _racc_setup\n      @yydebug = false unless self.class::Racc_debug_parser\n      @yydebug = false unless defined?(@yydebug)\n      if @yydebug\n        @racc_debug_out = $stderr unless defined?(@racc_debug_out)\n        @racc_debug_out ||= $stderr\n      end\n      arg = self.class::Racc_arg\n      arg[13] = true if arg.size < 14\n      arg\n    end\n\n    def _racc_init_sysvars\n      @racc_state  = [0]\n      @racc_tstack = []\n      @racc_vstack = []\n\n      @racc_t = nil\n      @racc_val = nil\n\n      @racc_read_next = true\n\n      @racc_user_yyerror = false\n      @racc_error_status = 0\n    end\n\n    # The entry point of the parser. This method is used with #next_token.\n    # If Racc wants to get token (and its value), calls next_token.\n    #\n    # Example:\n    #     def parse\n    #       @q = [[1,1],\n    #             [2,2],\n    #             [3,3],\n    #             [false, '$']]\n    #       do_parse\n    #     end\n    #\n    #     def next_token\n    #       @q.shift\n    #     end\n    def do_parse\n      __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)\n    end\n\n    # The method to fetch next token.\n    # If you use #do_parse method, you must implement #next_token.\n    #\n    # The format of return value is [TOKEN_SYMBOL, VALUE].\n    # +token-symbol+ is represented by Ruby's symbol by default, e.g. :IDENT\n    # for 'IDENT'.  \";\" (String) for ';'.\n    #\n    # The final symbol (End of file) must be false.\n    def next_token\n      raise NotImplementedError, \"\#{self.class}\\#next_token is not defined\"\n    end\n\n    def _racc_do_parse_rb(arg, in_debug)\n      action_table, action_check, action_default, action_pointer,\n      _,            _,            _,              _,\n      _,            _,            token_table,    _,\n      _,            _,            * = arg\n\n      _racc_init_sysvars\n      tok = act = i = nil\n\n      catch(:racc_end_parse) {\n        while true\n          if i = action_pointer[@racc_state[-1]]\n            if @racc_read_next\n              if @racc_t != 0   # not EOF\n                tok, @racc_val = next_token()\n                unless tok      # EOF\n                  @racc_t = 0\n                else\n                  @racc_t = (token_table[tok] or 1)   # error token\n                end\n                racc_read_token(@racc_t, tok, @racc_val) if @yydebug\n                @racc_read_next = false\n              end\n            end\n            i += @racc_t\n            unless i >= 0 and\n                   act = action_table[i] and\n                   action_check[i] == @racc_state[-1]\n              act = action_default[@racc_state[-1]]\n            end\n          else\n            act = action_default[@racc_state[-1]]\n          end\n          while act = _racc_evalact(act, arg)\n            ;\n          end\n        end\n      }\n    end\n\n    # Another entry point for the parser.\n    # If you use this method, you must implement RECEIVER#METHOD_ID method.\n    #\n    # RECEIVER#METHOD_ID is a method to get next token.\n    # It must 'yield' the token, which format is [TOKEN-SYMBOL, VALUE].\n    def yyparse(recv, mid)\n      __send__(Racc_YY_Parse_Method, recv, mid, _racc_setup(), true)\n    end\n\n    def _racc_yyparse_rb(recv, mid, arg, c_debug)\n      action_table, action_check, action_default, action_pointer,\n      _,             _,            _,              _,\n      _,            _,            token_table,    _,\n      _,            _,            * = arg\n\n      _racc_init_sysvars\n      act = nil\n      i = nil\n\n      catch(:racc_end_parse) {\n        until i = action_pointer[@racc_state[-1]]\n          while act = _racc_evalact(action_default[@racc_state[-1]], arg)\n            ;\n          end\n        end\n        recv.__send__(mid) do |tok, val|\n          unless tok\n            @racc_t = 0\n          else\n            @racc_t = (token_table[tok] or 1)   # error token\n          end\n          @racc_val = val\n          @racc_read_next = false\n\n          i += @racc_t\n          unless i >= 0 and\n                 act = action_table[i] and\n                 action_check[i] == @racc_state[-1]\n            act = action_default[@racc_state[-1]]\n          end\n          while act = _racc_evalact(act, arg)\n            ;\n          end\n\n          while not(i = action_pointer[@racc_state[-1]]) or\n                not @racc_read_next or\n                @racc_t == 0   # $\n            unless i and i += @racc_t and\n                   i >= 0 and\n                   act = action_table[i] and\n                   action_check[i] == @racc_state[-1]\n              act = action_default[@racc_state[-1]]\n            end\n            while act = _racc_evalact(act, arg)\n              ;\n            end\n          end\n        end\n      }\n    end\n\n    ###\n    ### common\n    ###\n\n    def _racc_evalact(act, arg)\n      action_table, action_check, _, action_pointer,\n      _,   _, _, _,\n      _,   _, _, shift_n,  reduce_n,\n      _,   _, * = arg\n\n      if act > 0 and act < shift_n\n        #\n        # shift\n        #\n        if @racc_error_status > 0\n          @racc_error_status -= 1 unless @racc_t == 1   # error token\n        end\n        @racc_vstack.push @racc_val\n        @racc_state.push act\n        @racc_read_next = true\n        if @yydebug\n          @racc_tstack.push @racc_t\n          racc_shift @racc_t, @racc_tstack, @racc_vstack\n        end\n\n      elsif act < 0 and act > -reduce_n\n        #\n        # reduce\n        #\n        code = catch(:racc_jump) {\n          @racc_state.push _racc_do_reduce(arg, act)\n          false\n        }\n        if code\n          case code\n          when 1 # yyerror\n            @racc_user_yyerror = true   # user_yyerror\n            return -reduce_n\n          when 2 # yyaccept\n            return shift_n\n          else\n            raise '[Racc Bug] unknown jump code'\n          end\n        end\n\n      elsif act == shift_n\n        #\n        # accept\n        #\n        racc_accept if @yydebug\n        throw :racc_end_parse, @racc_vstack[0]\n\n      elsif act == -reduce_n\n        #\n        # error\n        #\n        case @racc_error_status\n        when 0\n          unless arg[21]    # user_yyerror\n            on_error @racc_t, @racc_val, @racc_vstack\n          end\n        when 3\n          if @racc_t == 0   # is $\n            throw :racc_end_parse, nil\n          end\n          @racc_read_next = true\n        end\n        @racc_user_yyerror = false\n        @racc_error_status = 3\n        while true\n          if i = action_pointer[@racc_state[-1]]\n            i += 1   # error token\n            if  i >= 0 and\n                (act = action_table[i]) and\n                action_check[i] == @racc_state[-1]\n              break\n            end\n          end\n          throw :racc_end_parse, nil if @racc_state.size <= 1\n          @racc_state.pop\n          @racc_vstack.pop\n          if @yydebug\n            @racc_tstack.pop\n            racc_e_pop @racc_state, @racc_tstack, @racc_vstack\n          end\n        end\n        return act\n\n      else\n        raise \"[Racc Bug] unknown action \#{act.inspect}\"\n      end\n\n      racc_next_state(@racc_state[-1], @racc_state) if @yydebug\n\n      nil\n    end\n\n    def _racc_do_reduce(arg, act)\n      _, _, _, _,\n      goto_table,   goto_check,   goto_default,   goto_pointer,\n      nt_base,      reduce_table, _,    _,\n      _,     use_result,   * = arg\n      state = @racc_state\n      vstack = @racc_vstack\n      tstack = @racc_tstack\n\n      i = act * -3\n      len       = reduce_table[i]\n      reduce_to = reduce_table[i+1]\n      method_id = reduce_table[i+2]\n      void_array = []\n\n      tmp_t = tstack[-len, len] if @yydebug\n      tmp_v = vstack[-len, len]\n      tstack[-len, len] = void_array if @yydebug\n      vstack[-len, len] = void_array\n      state[-len, len]  = void_array\n\n      # tstack must be updated AFTER method call\n      if use_result\n        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])\n      else\n        vstack.push __send__(method_id, tmp_v, vstack)\n      end\n      tstack.push reduce_to\n\n      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug\n\n      k1 = reduce_to - nt_base\n      if i = goto_pointer[k1]\n        i += state[-1]\n        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1\n          return curstate\n        end\n      end\n      goto_default[k1]\n    end\n\n    # This method is called when a parse error is found.\n    #\n    # ERROR_TOKEN_ID is an internal ID of token which caused error.\n    # You can get string representation of this ID by calling\n    # #token_to_str.\n    #\n    # ERROR_VALUE is a value of error token.\n    #\n    # value_stack is a stack of symbol values.\n    # DO NOT MODIFY this object.\n    #\n    # This method raises ParseError by default.\n    #\n    # If this method returns, parsers enter \"error recovering mode\".\n    def on_error(t, val, vstack)\n      raise ParseError, sprintf(\"\\nparse error on value %s (%s)\",\n                                val.inspect, token_to_str(t) || '?')\n    end\n\n    # Enter error recovering mode.\n    # This method does not call #on_error.\n    def yyerror\n      throw :racc_jump, 1\n    end\n\n    # Exit parser.\n    # Return value is Symbol_Value_Stack[0].\n    def yyaccept\n      throw :racc_jump, 2\n    end\n\n    # Leave error recovering mode.\n    def yyerrok\n      @racc_error_status = 0\n    end\n\n    # For debugging output\n    def racc_read_token(t, tok, val)\n      @racc_debug_out.print 'read    '\n      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '\n      @racc_debug_out.puts val.inspect\n      @racc_debug_out.puts\n    end\n\n    def racc_shift(tok, tstack, vstack)\n      @racc_debug_out.puts \"shift   \#{racc_token2str tok}\"\n      racc_print_stacks tstack, vstack\n      @racc_debug_out.puts\n    end\n\n    def racc_reduce(toks, sim, tstack, vstack)\n      out = @racc_debug_out\n      out.print 'reduce '\n      if toks.empty?\n        out.print ' <none>'\n      else\n        toks.each {|t| out.print ' ', racc_token2str(t) }\n      end\n      out.puts \" --> \#{racc_token2str(sim)}\"\n\n      racc_print_stacks tstack, vstack\n      @racc_debug_out.puts\n    end\n\n    def racc_accept\n      @racc_debug_out.puts 'accept'\n      @racc_debug_out.puts\n    end\n\n    def racc_e_pop(state, tstack, vstack)\n      @racc_debug_out.puts 'error recovering mode: pop token'\n      racc_print_states state\n      racc_print_stacks tstack, vstack\n      @racc_debug_out.puts\n    end\n\n    def racc_next_state(curstate, state)\n      @racc_debug_out.puts  \"goto    \#{curstate}\"\n      racc_print_states state\n      @racc_debug_out.puts\n    end\n\n    def racc_print_stacks(t, v)\n      out = @racc_debug_out\n      out.print '        ['\n      t.each_index do |i|\n        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'\n      end\n      out.puts ' ]'\n    end\n\n    def racc_print_states(s)\n      out = @racc_debug_out\n      out.print '        ['\n      s.each {|st| out.print ' ', st }\n      out.puts ' ]'\n    end\n\n    def racc_token2str(tok)\n      self.class::Racc_token_to_s_table[tok] or\n          raise \"[Racc Bug] can't convert token \#{tok} to string\"\n    end\n\n    # Convert internal ID of token symbol to the string.\n    def token_to_str(t)\n      self.class::Racc_token_to_s_table[t]\n    end\n\n  end\n\nend\n"], :names=>["<top (required)>", "<module:Racc>", "<class:ParseError>", "StandardError", "Racc::ParseError", "Racc", "<class:Parser>", "[]", "1", "Racc_Runtime_Core_Version_R", "Racc_Runtime_Core_Revision_R", "racc_runtime_type", "Parser", "Racc_Runtime_Type", "_racc_setup", "class::Racc_debug_parser", "self", "class", "@yydebug", "@racc_debug_out", "$stderr", "$ret_or_1", "arg", "class::Racc_arg", "<", "size", "14", "[]=", "13", "_racc_init_sysvars", "@racc_state", "0", "@racc_tstack", "@racc_vstack", "@racc_t", "@racc_val", "@racc_read_next", "@racc_user_yyerror", "@racc_error_status", "do_parse", "__send__", "Racc_Main_Parsing_Routine", "next_token", "raise", "NotImplementedError", "_racc_do_parse_rb", "in_debug", "action_table", "action_check", "action_default", "action_pointer", "_", "token_table", "tok", "act", "i", "catch", "block in _racc_do_parse_rb", "block (2 levels) in _racc_do_parse_rb", "-1", "racc_read_token", "+", ">=", "_racc_evalact", "yyparse", "recv", "mid", "Racc_YY_Parse_Method", "_racc_yyparse_rb", "c_debug", "block in _racc_yyparse_rb", "block (2 levels) in _racc_yyparse_rb", "val", "block (3 levels) in _racc_yyparse_rb", "$ret_or_2", "!", "==", "shift_n", "reduce_n", ">", "-", "push", "racc_shift", "-@", "code", "block in _racc_evalact", "block (2 levels) in _racc_evalact", "_racc_do_reduce", "2", "racc_accept", "throw", "21", "on_error", "3", "<=", "pop", "racc_e_pop", "inspect", "racc_next_state", "goto_table", "goto_check", "goto_default", "goto_pointer", "nt_base", "reduce_table", "use_result", "state", "vstack", "tstack", "*", "-3", "len", "reduce_to", "method_id", "void_array", "tmp_t", "tmp_v", "racc_reduce", "k1", "curstate", "t", "ParseError", "sprintf", "token_to_str", "yyerror", "yyaccept", "yyerrok", "print", "racc_token2str", "puts", "racc_print_stacks", "toks", "sim", "out", "empty?", "each", "block in racc_reduce", "block (2 levels) in racc_reduce", "racc_print_states", "v", "each_index", "block in racc_print_stacks", "block (2 levels) in racc_print_stacks", "s", "block in racc_print_states", "st", "block (2 levels) in racc_print_states", "class::Racc_token_to_s_table"], :mappings=>"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"}}, {:offset=>{:line=>1889, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/arithmetic/node.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module Arithmetic\n    module Node\n      class BinaryOp\n        def initialize(lhs, op, rhs)\n          @lhs = lhs\n          @op = op\n          @rhs = rhs\n        end\n\n        def eval(round_type)\n          l = @lhs.eval(round_type)\n          r = @rhs.eval(round_type)\n          l.send(@op, r)\n        end\n\n        # @return [String] メッセージへの出力\n        def output\n          \"\#{@lhs.output}\#{@op}\#{@rhs.output}\"\n        end\n\n        # @return [String] ノードのS式\n        def s_exp\n          \"(\#{op_for_s_exp} \#{@lhs.s_exp} \#{@rhs.s_exp})\"\n        end\n\n        # @return [String] S式で使う演算子の表現\n        def op_for_s_exp\n          @op\n        end\n      end\n\n      # 除算ノードの基底クラス\n      #\n      # 定数 +ROUNDING_METHOD+ で端数処理方法を示す記号\n      # ( +'U'+, +'R'+, +''+ ) を定義すること。\n      # また、除算および端数処理を行う +divide_and_round+ メソッドを実装すること。\n      class DivideBase < BinaryOp\n        # ノードを初期化する\n        # @param [Object] lhs 左のオペランドのノード\n        # @param [Object] rhs 右のオペランドのノード\n        def initialize(lhs, rhs)\n          super(lhs, :/, rhs)\n        end\n\n        def eval(round_type)\n          l = @lhs.eval(round_type)\n          r = @rhs.eval(round_type)\n\n          raise ZeroDivisionError if r == 0\n          divide_and_round(l, r, round_type)\n        end\n\n        # メッセージへの出力を返す\n        #\n        # 通常の結果の末尾に、端数処理方法を示す記号を付加する。\n        #\n        # @return [String]\n        def output\n          \"\#{super}\#{rounding_method}\"\n        end\n\n        private\n\n        # 端数処理方法を示す記号を返す\n        # @return [String]\n        def rounding_method\n          self.class::ROUNDING_METHOD\n        end\n\n        # S式で使う演算子の表現を返す\n        # @return [String]\n        def op_for_s_exp\n          \"\#{@op}\#{rounding_method}\"\n        end\n\n        # 除算および端数処理を行う\n        # @param [Integer] _dividend 被除数\n        # @param [Integer] _divisor 除数（0以外）\n        # @param [Symbol] _round_type ゲームシステムの端数処理設定\n        # @return [Integer]\n        def divide_and_round(_dividend, _divisor, _round_type)\n          raise NotImplementedError\n        end\n      end\n\n      # 除算（端数処理はゲームシステム依存）のノード\n      class DivideWithGameSystemDefault < DivideBase\n        # 端数処理方法を示す記号\n        ROUNDING_METHOD = \"\"\n\n        private\n\n        # 除算および端数処理を行う\n        # @param [Integer] dividend 被除数\n        # @param [Integer] divisor 除数（0以外）\n        # @param [Symbol] round_type ゲームシステムの端数処理設定\n        # @return [Integer]\n        def divide_and_round(dividend, divisor, round_type)\n          case round_type\n          when RoundType::CEIL\n            (dividend.to_f / divisor).ceil\n          when RoundType::ROUND\n            x = dividend.to_f / divisor\n            x.negative? ? -(x.abs.round) : x.round\n          else # RoundType::FLOOR\n            (dividend / divisor).floor\n          end\n        end\n      end\n\n      # 除算（切り上げ）のノード\n      class DivideWithCeil < DivideBase\n        # 端数処理方法を示す記号\n        ROUNDING_METHOD = \"C\"\n\n        private\n\n        # 除算および端数処理を行う\n        # @param [Integer] dividend 被除数\n        # @param [Integer] divisor 除数（0以外）\n        # @param [Symbol] _round_type ゲームシステムの端数処理設定\n        # @return [Integer]\n        def divide_and_round(dividend, divisor, _round_type)\n          (dividend.to_f / divisor).ceil\n        end\n      end\n\n      # 除算（四捨五入）のノード\n      class DivideWithRound < DivideBase\n        # 端数処理方法を示す記号\n        ROUNDING_METHOD = \"R\"\n\n        private\n\n        # 除算および端数処理を行う\n        # @param [Integer] dividend 被除数\n        # @param [Integer] divisor 除数（0以外）\n        # @param [Symbol] _round_type ゲームシステムの端数処理設定\n        # @return [Integer]\n        def divide_and_round(dividend, divisor, _round_type)\n          x = dividend.to_f / divisor\n          x.negative? ? -(x.abs.round) : x.round\n        end\n      end\n\n      # 除算（切り捨て）のノード\n      class DivideWithFloor < DivideBase\n        # 端数処理方法を示す記号\n        ROUNDING_METHOD = \"F\"\n\n        private\n\n        # 除算および端数処理を行う\n        # @param [Integer] dividend 被除数\n        # @param [Integer] divisor 除数（0以外）\n        # @param [Symbol] _round_type ゲームシステムの端数処理設定\n        # @return [Integer]\n        def divide_and_round(dividend, divisor, _round_type)\n          (dividend / divisor).floor\n        end\n      end\n\n      class Negative\n        def initialize(body)\n          @body = body\n        end\n\n        def eval(round_type)\n          -@body.eval(round_type)\n        end\n\n        # @return [String] メッセージへの出力\n        def output\n          \"-\#{@body.output}\"\n        end\n\n        def s_exp\n          \"(- \#{@body.s_exp})\"\n        end\n      end\n\n      # カッコで式をまとめるノード\n      class Parenthesis\n        # @param expr [Object] カッコ内のノード\n        def initialize(expr)\n          @expr = expr\n        end\n\n        # @param round_type [Symbol] 端数処理方法\n        # @return [Integer] 評価結果\n        def eval(round_type)\n          @expr.eval(round_type)\n        end\n\n        # @return [String] メッセージへの出力\n        def output\n          \"(\#{@expr.output})\"\n        end\n\n        # @return [String] S式\n        def s_exp\n          \"(Parenthesis \#{@expr.s_exp})\"\n        end\n      end\n\n      class Number\n        def initialize(value)\n          @value = value\n        end\n\n        def eval(_round_type)\n          @value\n        end\n\n        # @return [String] メッセージへの出力\n        def output\n          @value.to_s\n        end\n\n        alias s_exp output\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:Arithmetic>", "<module:Node>", "<class:BinaryOp>", "initialize", "lhs", "op", "rhs", "@lhs", "@op", "@rhs", "eval", "round_type", "l", "r", "send", "output", "s_exp", "self", "op_for_s_exp", "<class:DivideBase>", "0", "raise", "ZeroDivisionError", "divide_and_round", "rounding_method", "private", "class::ROUNDING_METHOD", "class", "_dividend", "_divisor", "_round_type", "NotImplementedError", "BinaryOp", "<class:DivideWithGameSystemDefault>", "dividend", "divisor", "RoundType::CEIL", "RoundType", "$ret_or_1", "/", "to_f", "ceil", "RoundType::ROUND", "x", "negative?", "abs", "round", "-@", "floor", "DivideBase", "<class:DivideWithCeil>", "<class:DivideWithRound>", "<class:DivideWithFloor>", "<class:Negative>", "@body", "<class:Parenthesis>", "@expr", "<class:Number>", "@value", "to_s"], :mappings=>"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"}}, {:offset=>{:line=>2161, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["./strscan.rb"], :sourcesContent=>["class StringScanner\n  attr_reader :pos, :matched\n\n  def initialize(string)\n    @string  = string\n    @pos     = 0\n    @matched = nil\n    @working = string\n    @match   = []\n  end\n\n  attr_reader :string\n\n  def beginning_of_line?\n    `\#{@pos} === 0 || \#{@string}.charAt(\#{@pos} - 1) === \"\\n\"`\n  end\n\n  def scan(pattern)\n    pattern = anchor(pattern)\n\n    %x{\n      var result = pattern.exec(\#{@working});\n\n      if (result == null) {\n        return \#{@matched} = nil;\n      }\n      \#{@prev_pos} = \#{@pos};\n      \#{@pos}     += result[0].length;\n      \#{@working}  = \#{@working}.substring(result[0].length);\n      \#{@matched}  = result[0];\n      \#{@match}    = result;\n\n      return result[0];\n    }\n  end\n\n  def scan_until(pattern)\n    pattern = anchor(pattern)\n\n    %x{\n      var working = \#{@working}\n\n      for(var i = 0; working.length != i; ++i) {\n        var result  = pattern.exec(working.substr(i));\n        if (result !== null) {\n          var matched_size = i + result[0].length\n          var matched = working.substr(0, matched_size)\n\n          \#{@matched}  = result[0]\n          \#{@match}  = result\n          \#{@prev_pos} = \#{@pos} + i; // Position of first character of matched\n          \#{@pos} += matched_size // Position one after last character of matched\n          \#{@working} = working.substr(matched_size)\n\n          return matched\n        }\n      }\n      return \#{@matched} = nil;\n    }\n  end\n\n  def [](idx)\n    if @match.empty?\n      return nil\n    end\n    case idx\n    when Symbol\n      idx = idx.to_s\n    when String\n      # noop\n    else\n      idx = ::Opal.coerce_to!(idx, Integer, :to_int)\n    end\n    %x{\n      var match = \#{@match};\n\n      if (idx < 0) {\n        idx += match.length;\n      }\n\n      if (idx < 0 || idx >= match.length) {\n        return nil;\n      }\n\n      if (match[idx] == null) {\n        return nil;\n      }\n\n      return match[idx];\n    }\n  end\n\n  def check(pattern)\n    pattern = anchor(pattern)\n\n    %x{\n      var result = pattern.exec(\#{@working});\n\n      if (result == null) {\n        return \#{@matched} = nil;\n      }\n\n      return \#{@matched} = result[0];\n    }\n  end\n\n  def check_until(pattern)\n    %x{\n      var old_prev_pos = \#{@prev_pos};\n      var old_pos      = \#{@pos};\n      var old_working  = \#{@working};\n\n      var result = \#{scan_until(pattern)};\n\n      \#{@prev_pos} = old_prev_pos;\n      \#{@pos}      = old_pos;\n      \#{@working}  = old_working;\n\n      return result;\n    }\n  end\n\n  def peek(length)\n    `\#{@working}.substring(0, length)`\n  end\n\n  def eos?\n    `\#{@working}.length === 0`\n  end\n\n  def exist?(pattern)\n    %x{\n      var result = pattern.exec(\#{@working});\n\n      if (result == null) {\n        return nil;\n      }\n      else if (result.index == 0) {\n        return 0;\n      }\n      else {\n        return result.index + 1;\n      }\n    }\n  end\n\n  def skip(pattern)\n    pattern = anchor(pattern)\n\n    %x{\n      var result = pattern.exec(\#{@working});\n\n      if (result == null) {\n        \#{@match} = [];\n        return \#{@matched} = nil;\n      }\n      else {\n        var match_str = result[0];\n        var match_len = match_str.length;\n\n        \#{@matched}   = match_str;\n        \#{@match}     = result;\n        \#{@prev_pos}  = \#{@pos};\n        \#{@pos}      += match_len;\n        \#{@working}   = \#{@working}.substring(match_len);\n\n        return match_len;\n      }\n    }\n  end\n\n  def skip_until(pattern)\n    %x{\n      var result = \#{scan_until(pattern)};\n\n      if (result === nil) {\n        return nil;\n      }\n      else {\n        \#{@matched} = result.substr(-1);\n\n        return result.length;\n      }\n    }\n  end\n\n  def get_byte\n    %x{\n      var result = nil;\n\n      if (\#{@pos} < \#{@string}.length) {\n        \#{@prev_pos}  = \#{@pos};\n        \#{@pos}      += 1;\n        result      = \#{@matched} = \#{@working}.substring(0, 1);\n        \#{@working}   = \#{@working}.substring(1);\n      }\n      else {\n        \#{@matched} = nil;\n      }\n\n      return result;\n    }\n  end\n\n  def match?(pattern)\n    pattern = anchor(pattern)\n\n    %x{\n      var result = pattern.exec(\#{@working});\n\n      if (result == null) {\n        return nil;\n      }\n      else {\n        \#{@prev_pos} = \#{@pos};\n\n        return result[0].length;\n      }\n    }\n  end\n\n  def pos=(pos)\n    %x{\n      if (pos < 0) {\n        pos += \#{@string.length};\n      }\n    }\n\n    @pos     = pos\n    @working = `\#{@string}.slice(pos)`\n  end\n\n  def matched_size\n    %x{\n      if (\#{@matched} === nil) {\n        return nil;\n      }\n\n      return \#{@matched}.length\n    }\n  end\n\n  def post_match\n    %x{\n      if (\#{@matched} === nil) {\n        return nil;\n      }\n\n      return \#{@string}.substr(\#{@pos});\n    }\n  end\n\n  def pre_match\n    %x{\n      if (\#{@matched} === nil) {\n        return nil;\n      }\n\n      return \#{@string}.substr(0, \#{@prev_pos});\n    }\n  end\n\n  def reset\n    @working = @string\n    @matched = nil\n    @pos     = 0\n  end\n\n  def rest\n    @working\n  end\n\n  def rest?\n    `\#{@working}.length !== 0`\n  end\n\n  def rest_size\n    rest.size\n  end\n\n  def terminate\n    @match = nil\n    self.pos = @string.length\n  end\n\n  def unscan\n    @pos      = @prev_pos\n    @prev_pos = nil\n    @match    = nil\n\n    self\n  end\n\n  alias bol? beginning_of_line?\n  alias getch get_byte # not exactly the same, but for now...\n\n  private\n\n  def anchor(pattern)\n    %x{\n      var flags = pattern.toString().match(/\\/([^\\/]+)$/);\n      flags = flags ? flags[1] : undefined;\n      return new RegExp('^(?:' + pattern.source + ')', flags);\n    }\n  end\nend\n"], :names=>["<top (required)>", "<class:StringScanner>", "self", "attr_reader", "initialize", "string", "@string", "@pos", "0", "@matched", "@working", "@match", "beginning_of_line?", "scan", "pattern", "anchor", "@prev_pos", "scan_until", "[]", "idx", "empty?", "Symbol", "$ret_or_1", "to_s", "String", "Opal", "coerce_to!", "Integer", "check", "check_until", "peek", "length", "eos?", "exist?", "skip", "skip_until", "get_byte", "match?", "pos=", "pos", "matched_size", "post_match", "pre_match", "reset", "rest", "rest?", "rest_size", "size", "terminate", "unscan", "private"], :mappings=>"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"}}, {:offset=>{:line=>2520, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/normalize.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module Normalize\n    module_function\n\n    # 比較演算子をシンボルに正規化する\n    #\n    # @param op [String]\n    # @return [Symbol, nil]\n    def comparison_operator(op)\n      case op\n      when /<=|=</\n        :<=\n      when />=|=>/\n        :>=\n      when /<>|!=|=!/\n        :'!='\n      when /</\n        :<\n      when />/\n        :>\n      when /=/\n        :==\n      end\n    end\n\n    # 目標値を正規化する\n    #\n    # @param val [String]\n    # @return [Integer, String] 整数か'?'\n    def target_number(val)\n      if val == \"?\"\n        val\n      else\n        val.to_i\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:Normalize>", "self", "module_function", "comparison_operator", "op", "$ret_or_1", "target_number", "val", "to_i"], :mappings=>"AAAAA,mCAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;;;MACEC,IAAAC,iBAAAA,CAAAA;;AAMAC,MAAAA,mCAAAA,+BAAwBC,EAAxBD;AAAAA,QAAAA;;QAEE,IAAA,QAAK,OAAL,EADAE,CAAAA,YAAKD,EAALC,CACA,CAAA;UACEF,OAAA;QADF,OAEA,IAAA,QAAK,OAAL,EAdN,SAcM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,UAAL,EAhBN,SAgBM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,GAAL,EAlBN,SAkBM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,GAAL,EApBN,SAoBM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,GAAL,EAtBN,SAsBM,CAAA;UACEA,OAAA;QADF;UAXAA,OAAA;QAWA;MAZFA,CAAAA;MAqBAH,OAAAM,6BAAAA,yBAAkBC,GAAlBD;AAAAA;QACE,IAAA,MAAGC,GAAH,EAAUD,GAAV,CAAA;UACEA,OAAAC;QADF;UAGED,OAAAC,GAAGC,MAAAA,CAAAA;QAHL;MADFF,CAAAA;IA5BFN,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>2566, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/command/lexer.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"strscan\"\nrequire \"bcdice/normalize\"\n\nmodule BCDice\n  module Command\n    class Lexer\n      SYMBOLS = {\n        \"+\" => :PLUS,\n        \"-\" => :MINUS,\n        \"*\" => :ASTERISK,\n        \"/\" => :SLASH,\n        \"(\" => :PARENL,\n        \")\" => :PARENR,\n        \"?\" => :QUESTION,\n        \"@\" => :AT,\n        \"#\" => :SHARP,\n        \"$\" => :DOLLAR,\n      }.freeze\n\n      def initialize(source, notations)\n        # sourceが空文字だとString#splitが空になる\n        source = source&.split(\" \", 2)&.first || \"\"\n        @scanner = StringScanner.new(source)\n        @notations = notations.map do |n|\n          n.is_a?(String) ? Regexp.new(n) : n\n        end\n      end\n\n      def next_token\n        return [false, \"$\"] if @scanner.eos?\n\n        @notations.each do |n|\n          token = @scanner.scan(n)\n          return [:NOTATION, token] if token\n        end\n\n        if (number = @scanner.scan(/\\d+/))\n          [:NUMBER, number.to_i]\n        elsif (cmp_op = @scanner.scan(/[<>!=]+/))\n          cmp_op = Normalize.comparison_operator(cmp_op)\n          type = cmp_op ? :CMP_OP : :ILLEGAL\n          [type, cmp_op]\n        else\n          char = @scanner.getch.upcase\n          type = SYMBOLS[char] || char.to_sym\n          [type, char]\n        end\n      end\n\n      def source\n        @scanner.string\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "self", "require", "<module:BCDice>", "<module:Command>", "<class:Lexer>", "freeze", "initialize", "source", "notations", "$ret_or_1", "2", "@scanner", "StringScanner", "new", "@notations", "map", "block in initialize", "n", "is_a?", "String", "block (2 levels) in initialize", "Regexp", "next_token", "eos?", "each", "block in next_token", "block (2 levels) in next_token", "token", "scan", "number", "to_i", "cmp_op", "Normalize", "comparison_operator", "type", "char$", "getch", "upcase", "SYMBOLS", "[]", "to_sym", "string"], :mappings=>"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"}}, {:offset=>{:line=>2652, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/command/parsed.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module Command\n    class Parsed\n      # @return [String]\n      attr_accessor :command\n\n      # @return [Integer, nil]\n      attr_accessor :prefix_number\n\n      # @return [Integer, nil]\n      attr_accessor :suffix_number\n\n      # @return [Integer, nil]\n      attr_accessor :critical\n\n      # @return [Integer, nil]\n      attr_accessor :fumble\n\n      # @return [Integer, nil]\n      attr_accessor :dollar\n\n      # @return [Integer]\n      attr_accessor :modify_number\n\n      # @return [Symbol, nil]\n      attr_accessor :cmp_op\n\n      # @return [Integer, nil]\n      attr_accessor :target_number\n\n      # @param value [Boolean]\n      # @return [Boolean]\n      attr_writer :question_target\n\n      def initialize\n        @prefix_number = nil\n        @suffix_number = nil\n        @critical = nil\n        @fumble = nil\n        @dollar = nil\n        @cmp_op = nil\n        @target_number = nil\n        @question_target = false\n      end\n\n      # @return [Boolean]\n      def question_target?\n        @question_target\n      end\n\n      # @param suffix_position [Symbol] クリティカルなどの表示位置\n      # @return [String]\n      def to_s(suffix_position = :after_command)\n        c = @critical ? \"@\#{@critical}\" : nil\n        f = @fumble ? \"#\#{@fumble}\" : nil\n        d = @dollar ? \"$\#{@dollar}\" : nil\n        m = Format.modifier(@modify_number)\n        target = @question_target ? \"?\" : @target_number\n\n        case suffix_position\n        when :after_command\n          [@prefix_number, @command, @suffix_number, c, f, d, m, @cmp_op, target].join()\n        when :after_modify_number\n          [@prefix_number, @command, @suffix_number, m, c, f, d, @cmp_op, target].join()\n        when :after_target_number\n          [@prefix_number, @command, @suffix_number, m, @cmp_op, target, c, f, d].join()\n        end\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:Command>", "<class:Parsed>", "self", "attr_accessor", "attr_writer", "initialize", "@prefix_number", "@suffix_number", "@critical", "@fumble", "@dollar", "@cmp_op", "@target_number", "@question_target", "question_target?", "to_s", "suffix_position", "c", "f", "d", "m", "Format", "modifier", "@modify_number", "target", "@command", "join"], :mappings=>"AAAAA,wCAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAEEC,IAAAC,eAAAA,CAAc,SAAdA;QAGAD,IAAAC,eAAAA,CAAc,eAAdA;QAGAD,IAAAC,eAAAA,CAAc,eAAdA;QAGAD,IAAAC,eAAAA,CAAc,UAAdA;QAGAD,IAAAC,eAAAA,CAAc,QAAdA;QAGAD,IAAAC,eAAAA,CAAc,QAAdA;QAGAD,IAAAC,eAAAA,CAAc,eAAdA;QAGAD,IAAAC,eAAAA,CAAc,QAAdA;QAGAD,IAAAC,eAAAA,CAAc,eAAdA;QAIAD,IAAAE,aAAAA,CAAY,iBAAZA;;AAEAC,QAAAA,0BAAAA,sBAAAA;AAAAA,UAAAA;;;UACEC,qBAAiB;UACjBC,qBAAiB;UACjBC,gBAAY;UACZC,cAAU;UACVC,cAAU;UACVC,cAAU;UACVC,qBAAiB;UACjBP,OAAAQ,CAAAA,uBAAmB,KAAnBA;QARFR,CAAAA;;AAYAS,QAAAA,gCAAAA,aACE,iBADFA,CAAAA;QAMAb,OAAAc,oBAAAA,gBAASC,eAATD;AAAAA,UAAAA;;;UAAS,+CAAkB;UACzBE,IAAI,CAAA,QAAAT,aAAA,CAAA,GAAA,CAAaO,GAAD,GAAA,CAAIP,aAAJ,CAAZ,IAAA,CAA8B,GAA9B,CAAA;UACJU,IAAI,CAAA,QAAAT,WAAA,CAAA,GAAA,CAAWM,GAAD,GAAA,CAAIN,WAAJ,CAAV,IAAA,CAA0B,GAA1B,CAAA;UACJU,IAAI,CAAA,QAAAT,WAAA,CAAA,GAAA,CAAWK,GAAD,GAAA,CAAIL,WAAJ,CAAV,IAAA,CAA0B,GAA1B,CAAA;UACJU,IAAIC,YAAMC,UAAAA,CAAUC,kBAAVD;UACVE,SAAS,CAAA,QAAAX,oBAAA,CAAA,GAAA,CAAmBE,GAAnB,IAAA,CAAyBH,kBAAzB,CAAA;;UAGT,QADKI,eACL;YAAA,KAAK,eAAL;cACED,OAAA,CAACT,kBAAD,EAAiBmB,YAAjB,EAA2BlB,kBAA3B,EAA2CU,CAA3C,EAA8CC,CAA9C,EAAiDC,CAAjD,EAAoDC,CAApD,EAAuDT,WAAvD,EAAgEa,MAAhE,CAAuEE,MAAAA,CAAAA;YACzE,KAAK,qBAAL;cACEX,OAAA,CAACT,kBAAD,EAAiBmB,YAAjB,EAA2BlB,kBAA3B,EAA2Ca,CAA3C,EAA8CH,CAA9C,EAAiDC,CAAjD,EAAoDC,CAApD,EAAuDR,WAAvD,EAAgEa,MAAhE,CAAuEE,MAAAA,CAAAA;YACzE,KAAK,qBAAL;cACEX,OAAA,CAACT,kBAAD,EAAiBmB,YAAjB,EAA2BlB,kBAA3B,EAA2Ca,CAA3C,EAA8CT,WAA9C,EAAuDa,MAAvD,EAA+DP,CAA/D,EAAkEC,CAAlE,EAAqEC,CAArE,CAAuEO,MAAAA,CAAAA;YADzE;cALAX,OAAA;UACA;QARFA,CAAAA,IAAAA;MAlDFd,GAAAA,WAAAA,EAAAA,IAAAA;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>2725, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/command/parser.rb"], :sourcesContent=>["#\n# DO NOT MODIFY!!!!\n# This file is automatically generated by Racc 1.7.3\n# from Racc grammar file \"parser.y\".\n#\n\nrequire 'racc/parser.rb'\n\n\nrequire \"bcdice/arithmetic/node\"\nrequire \"bcdice/command/lexer\"\nrequire \"bcdice/command/parsed\"\n\n# よくある形式のコマンドのパースを補助するクラス\n#\n# @example Literal by String\n#   parser = Command::Parser.new(\"MC\", round_type: BCDice::RoundType::FLOOR)\n#                           .enable_critical\n#   parsed = parser.parse(\"MC+2*3@30<=10/2-3\") #=> <Command::Parsed>\n#\n#   parsed.command #=> \"MC\"\n#   parsed.modify_number #=> 6\n#   parsed.critical #=> 30\n#   parsed.cmp_op #=> #>=\n#   parsed.target_number #=> 2\n#\n# @example Literal by Regexp\n#   parser = Command::Parser.new(/RE\\d+/)\n#   parsed = parser.parse(\"RE44+20\") #=> <Command::Parsed>\n#\n#   parsed.command #=> \"RE44\"\n#   parsed.modify_number #=> 20\nclass BCDice::Command::Parser < Racc::Parser; end\n\nmodule BCDice\n  module Command\n    class Parser < Racc::Parser\n\n\n# @param notations [Array<String, Regexp>] 反応するコマンドの表記\n# @param round_type [Symbol] 除算での端数の扱い\ndef initialize(*notations, round_type:)\n  super()\n  @notations = notations\n  @round_type = round_type\n  @prefix_number = false\n  @suffix_number = false\n  @need_prefix_number = false\n  @need_suffix_number = false\n  @modifier = true\n  @critical = false\n  @fumble = false\n  @dollar = false\n  @allowed_cmp_op = [nil, :>=, :>, :<=, :<, :==, :!=]\n  @question_target = false\nend\n\n# 修正値は受け付けないようにする\n# @return [BCDice::Command::Parser]\ndef disable_modifier\n  @modifier = false\n  self\nend\n\n# リテラルの前に数値を許可する\n# @return [BCDice::Command::Parser]\ndef enable_prefix_number\n  @prefix_number = true\n  self\nend\n\n# リテラルの後ろに数値を許可する\n# @return [BCDice::Command::Parser]\ndef enable_suffix_number\n  @suffix_number = true\n  self\nend\n\n# リテラルの前に数値が必要であると設定する\n# @return [BCDice::Command::Parser]\ndef has_prefix_number\n  @prefix_number = true\n  @need_prefix_number = true\n  self\nend\n\n# リテラルの後ろに数値が必要であると設定する\n# @return [BCDice::Command::Parser]\ndef has_suffix_number\n  @suffix_number = true\n  @need_suffix_number = true\n  self\nend\n\n# +@+によるクリティカル値の指定を許可する\n# @return [BCDice::Command::Parser]\ndef enable_critical\n  @critical = true\n  self\nend\n\n# +#+によるファンブル値の指定を許可する\n# @return [BCDice::Command::Parser]\ndef enable_fumble\n  @fumble = true\n  self\nend\n\n# +$+による値の指定を許可する\n# @return [BCDice::Command::Parser]\ndef enable_dollar\n  @dollar = true\n  self\nend\n\n# 使用できる比較演算子を制限する。\n# 目標値未入力を許可する場合には+nil+を指定する。\n# @param ops [Array<nil, Symbol>] 許可する比較演算子の一覧\n# @return [BCDice::Command::Parser]\ndef restrict_cmp_op_to(*ops)\n  @allowed_cmp_op = ops\n  self\nend\n\n# 目標値\"?\"の指定を許可する\n# @return [BCDice::Command::Parser]\ndef enable_question_target\n  @question_target = true\n  self\nend\n\n# @param source [String]\n# @return [BCDice::Command::Parsed, nil]\ndef parse(source)\n  @lexer = Lexer.new(source, @notations)\n  do_parse()\nrescue ParseError, ZeroDivisionError\n  nil\nend\n\nprivate\n\ndef parsed(notation, option, modifier, target)\n  Parsed.new.tap do |p|\n    p.command = notation[:command]\n    p.prefix_number = notation[:prefix]&.eval(@round_type)\n    p.suffix_number = notation[:suffix]&.eval(@round_type)\n    p.critical = option[:critical]&.eval(@round_type)\n    p.fumble = option[:fumble]&.eval(@round_type)\n    p.dollar = option[:dollar]&.eval(@round_type)\n    p.modify_number = modifier.eval(@round_type)\n    p.cmp_op = target[:cmp_op]\n    if target[:target] == \"?\"\n      p.question_target = true\n      p.target_number = 0\n    else\n      p.question_target = false\n      p.target_number = target[:target]&.eval(@round_type)\n    end\n  end\nend\n\ndef next_token\n  @lexer.next_token\nend\n##### State transition tables begin ###\n\nracc_action_table = [\n     6,     6,     6,     6,     7,    28,    29,    17,    18,     5,\n     5,     5,     5,     6,    26,    12,     4,    45,    17,    18,\n    10,    11,     5,    10,    11,     6,    23,    24,    25,    26,\n    17,    18,     6,    20,     5,    33,    34,    17,    18,     6,\n    35,     5,    28,    29,    17,    18,     6,   nil,     5,    36,\n    37,    17,    18,     6,   nil,     5,    36,    37,    17,    18,\n     6,   nil,     5,    36,    37,    17,    18,     6,   nil,     5,\n    33,    34,    17,    18,     6,   nil,     5,    36,    37,    17,\n    18,     6,   nil,     5,    36,    37,    17,    18,     6,   nil,\n     5,    36,    37,    17,    18,     6,   nil,     5,    36,    37,\n    17,    18,     6,   nil,     5,   nil,   nil,    17,    18,     6,\n   nil,     5,   nil,   nil,    17,    18,   nil,   nil,     5,    23,\n    24,    25,    26,    56,    54,    55,    57 ]\n\nracc_action_check = [\n     0,     4,    26,    12,     1,    21,    21,    26,    26,     0,\n     4,    26,    12,     5,    21,     3,     0,    26,     5,     5,\n     8,     8,     5,     2,     2,    10,     8,     8,     8,     8,\n    10,    10,    11,     7,    10,    14,    14,    11,    11,    17,\n    14,    11,     9,     9,    17,    17,    18,   nil,    17,    15,\n    15,    18,    18,    23,   nil,    18,    30,    30,    23,    23,\n    24,   nil,    23,    31,    31,    24,    24,    25,   nil,    24,\n    44,    44,    25,    25,    28,   nil,    25,    47,    47,    28,\n    28,    29,   nil,    28,    48,    48,    29,    29,    33,   nil,\n    29,    49,    49,    33,    33,    34,   nil,    33,    50,    50,\n    34,    34,    36,   nil,    34,   nil,   nil,    36,    36,    37,\n   nil,    36,   nil,   nil,    37,    37,   nil,   nil,    37,    27,\n    27,    27,    27,    52,    52,    52,    52 ]\n\nracc_action_pointer = [\n    -2,     4,    16,    -3,    -1,    11,   nil,    33,    13,    35,\n    23,    30,     1,   nil,    28,    40,   nil,    37,    44,   nil,\n   nil,    -2,   nil,    51,    58,    65,     0,   106,    72,    79,\n    47,    54,   nil,    86,    93,   nil,   100,   107,   nil,   nil,\n   nil,   nil,   nil,   nil,    63,   nil,   nil,    68,    75,    82,\n    89,   nil,   120,   nil,   nil,   nil,   nil,   nil ]\n\nracc_action_default = [\n   -35,   -35,    -8,   -35,    -7,   -35,   -34,   -35,   -16,    -8,\n   -35,   -35,    -5,    -6,   -35,   -21,   -24,   -35,   -35,   -32,\n    58,   -16,    -3,   -35,   -35,   -35,   -35,   -16,   -35,   -35,\n   -12,   -13,    -4,   -35,   -35,   -33,   -35,   -35,   -30,   -31,\n    -1,    -9,   -10,   -11,   -17,   -18,    -2,   -14,   -15,   -19,\n   -20,   -22,   -25,   -23,   -26,   -27,   -28,   -29 ]\n\nracc_goto_table = [\n    30,    31,    38,    39,    14,     8,     1,    22,    41,    42,\n    43,     9,    27,     2,    53,   nil,   nil,    21,    47,    48,\n    40,    51,    52,    49,    50,    44,    46,     3,   nil,   nil,\n   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32 ]\n\nracc_goto_check = [\n     8,     8,     7,     7,     9,     3,     1,     5,     7,     7,\n     7,     4,     3,     2,    10,   nil,   nil,     4,     8,     8,\n     5,     7,     7,     8,     8,     9,     5,     6,   nil,   nil,\n   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6 ]\n\nracc_goto_pointer = [\n   nil,     6,    13,     3,     9,    -1,    27,   -15,   -10,    -1,\n   -38 ]\n\nracc_goto_default = [\n   nil,   nil,   nil,   nil,   nil,   nil,    19,    16,    15,   nil,\n   nil ]\n\nracc_reduce_table = [\n  0, 0, :racc_error,\n  4, 20, :_reduce_1,\n  4, 20, :_reduce_2,\n  3, 20, :_reduce_3,\n  3, 21, :_reduce_4,\n  2, 21, :_reduce_5,\n  2, 21, :_reduce_6,\n  1, 21, :_reduce_7,\n  0, 22, :_reduce_8,\n  3, 22, :_reduce_9,\n  3, 22, :_reduce_10,\n  3, 22, :_reduce_11,\n  2, 23, :_reduce_12,\n  2, 23, :_reduce_13,\n  3, 23, :_reduce_14,\n  3, 23, :_reduce_15,\n  0, 24, :_reduce_16,\n  2, 24, :_reduce_17,\n  2, 24, :_reduce_18,\n  3, 28, :_reduce_19,\n  3, 28, :_reduce_20,\n  1, 28, :_reduce_none,\n  3, 27, :_reduce_22,\n  4, 27, :_reduce_23,\n  1, 27, :_reduce_none,\n  0, 29, :_reduce_25,\n  1, 29, :_reduce_26,\n  1, 29, :_reduce_27,\n  1, 29, :_reduce_28,\n  1, 29, :_reduce_29,\n  2, 26, :_reduce_30,\n  2, 26, :_reduce_31,\n  1, 26, :_reduce_none,\n  3, 25, :_reduce_33,\n  1, 25, :_reduce_34 ]\n\nracc_reduce_n = 35\n\nracc_shift_n = 58\n\nracc_token_table = {\n  false => 0,\n  :error => 1,\n  :NUMBER => 2,\n  :R => 3,\n  :U => 4,\n  :C => 5,\n  :F => 6,\n  :PLUS => 7,\n  :MINUS => 8,\n  :ASTERISK => 9,\n  :SLASH => 10,\n  :PARENL => 11,\n  :PARENR => 12,\n  :AT => 13,\n  :SHARP => 14,\n  :DOLLAR => 15,\n  :CMP_OP => 16,\n  :QUESTION => 17,\n  :NOTATION => 18 }\n\nracc_nt_base = 19\n\nracc_use_result_var = true\n\nRacc_arg = [\n  racc_action_table,\n  racc_action_check,\n  racc_action_default,\n  racc_action_pointer,\n  racc_goto_table,\n  racc_goto_check,\n  racc_goto_default,\n  racc_goto_pointer,\n  racc_nt_base,\n  racc_reduce_table,\n  racc_token_table,\n  racc_shift_n,\n  racc_reduce_n,\n  racc_use_result_var ]\nRactor.make_shareable(Racc_arg) if defined?(Ractor)\n\nRacc_token_to_s_table = [\n  \"$end\",\n  \"error\",\n  \"NUMBER\",\n  \"R\",\n  \"U\",\n  \"C\",\n  \"F\",\n  \"PLUS\",\n  \"MINUS\",\n  \"ASTERISK\",\n  \"SLASH\",\n  \"PARENL\",\n  \"PARENR\",\n  \"AT\",\n  \"SHARP\",\n  \"DOLLAR\",\n  \"CMP_OP\",\n  \"QUESTION\",\n  \"NOTATION\",\n  \"$start\",\n  \"expr\",\n  \"notation\",\n  \"option\",\n  \"modifier\",\n  \"target\",\n  \"term\",\n  \"unary\",\n  \"mul\",\n  \"add\",\n  \"round_type\" ]\nRactor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)\n\nRacc_debug_parser = false\n\n##### State transition tables end #####\n\n# reduce 0 omitted\n\ndef _reduce_1(val, _values, result)\n          raise ParseError unless @modifier\n          notation, option, modifier, target = val\n          result = parsed(notation, option, modifier, target)\n\n    result\nend\n\ndef _reduce_2(val, _values, result)\n          raise ParseError unless @modifier\n          notation, modifier, option, target = val\n          result = parsed(notation, option, modifier, target)\n\n    result\nend\n\ndef _reduce_3(val, _values, result)\n          notation, option, target = val\n          result = parsed(notation, option,  Arithmetic::Node::Number.new(0), target)\n\n    result\nend\n\ndef _reduce_4(val, _values, result)\n              raise ParseError unless @prefix_number && @suffix_number\n              result = { command: val[1], prefix: val[0], suffix: val[2] }\n\n    result\nend\n\ndef _reduce_5(val, _values, result)\n              raise ParseError unless @prefix_number\n              raise ParseError if @need_suffix_number\n              result = { command: val[1], prefix: val[0] }\n\n    result\nend\n\ndef _reduce_6(val, _values, result)\n              raise ParseError unless @suffix_number\n              raise ParseError if @need_prefix_number\n              result = { command: val[0], suffix: val[1] }\n\n    result\nend\n\ndef _reduce_7(val, _values, result)\n              raise ParseError if @need_prefix_number || @need_suffix_number\n              result = { command: val[0] }\n\n    result\nend\n\ndef _reduce_8(val, _values, result)\n            result = {}\n\n    result\nend\n\ndef _reduce_9(val, _values, result)\n            option, _, term = val\n            raise ParseError unless @critical && option[:critical].nil?\n\n            option[:critical] = term\n            result = option\n\n    result\nend\n\ndef _reduce_10(val, _values, result)\n            option, _, term = val\n            raise ParseError unless @fumble && option[:fumble].nil?\n\n            option[:fumble] = term\n            result = option\n\n    result\nend\n\ndef _reduce_11(val, _values, result)\n            option, _, term = val\n            raise ParseError unless @dollar && option[:dollar].nil?\n\n            option[:dollar] = term\n            result = option\n\n    result\nend\n\ndef _reduce_12(val, _values, result)\n result = val[1]\n    result\nend\n\ndef _reduce_13(val, _values, result)\n result = Arithmetic::Node::Negative.new(val[1])\n    result\nend\n\ndef _reduce_14(val, _values, result)\n result = Arithmetic::Node::BinaryOp.new(val[0], :+, val[2])\n    result\nend\n\ndef _reduce_15(val, _values, result)\n result = Arithmetic::Node::BinaryOp.new(val[0], :-, val[2])\n    result\nend\n\ndef _reduce_16(val, _values, result)\n            raise ParseError unless @allowed_cmp_op.include?(nil)\n            result = {}\n\n    result\nend\n\ndef _reduce_17(val, _values, result)\n            cmp_op, target = val\n            raise ParseError unless @allowed_cmp_op.include?(cmp_op)\n\n            result = {cmp_op: cmp_op, target: target}\n\n    result\nend\n\ndef _reduce_18(val, _values, result)\n            cmp_op = val[0]\n            raise ParseError unless @question_target\n            raise ParseError unless @allowed_cmp_op.include?(cmp_op)\n\n            result = {cmp_op: cmp_op, target: \"?\"}\n\n    result\nend\n\ndef _reduce_19(val, _values, result)\n result = Arithmetic::Node::BinaryOp.new(val[0], :+, val[2])\n    result\nend\n\ndef _reduce_20(val, _values, result)\n result = Arithmetic::Node::BinaryOp.new(val[0], :-, val[2])\n    result\nend\n\n# reduce 21 omitted\n\ndef _reduce_22(val, _values, result)\n result = Arithmetic::Node::BinaryOp.new(val[0], :*, val[2])\n    result\nend\n\ndef _reduce_23(val, _values, result)\n         divied_class = val[3]\n         result = divied_class.new(val[0], val[2])\n\n    result\nend\n\n# reduce 24 omitted\n\ndef _reduce_25(val, _values, result)\n result = Arithmetic::Node::DivideWithGameSystemDefault\n    result\nend\n\ndef _reduce_26(val, _values, result)\n result = Arithmetic::Node::DivideWithCeil\n    result\nend\n\ndef _reduce_27(val, _values, result)\n result = Arithmetic::Node::DivideWithCeil\n    result\nend\n\ndef _reduce_28(val, _values, result)\n result = Arithmetic::Node::DivideWithRound\n    result\nend\n\ndef _reduce_29(val, _values, result)\n result = Arithmetic::Node::DivideWithFloor\n    result\nend\n\ndef _reduce_30(val, _values, result)\n result = val[1]\n    result\nend\n\ndef _reduce_31(val, _values, result)\n result = Arithmetic::Node::Negative.new(val[1])\n    result\nend\n\n# reduce 32 omitted\n\ndef _reduce_33(val, _values, result)\n result = val[1]\n    result\nend\n\ndef _reduce_34(val, _values, result)\n result = Arithmetic::Node::Number.new(val[0])\n    result\nend\n\ndef _reduce_none(val, _values, result)\n  val[0]\nend\n\n    end   # class Parser\n  end   # module Command\nend   # module BCDice\n"], :names=>["<top (required)>", "self", "require", "<class:BCDice::Command::Parser>", "BCDice::Command", "BCDice", "Racc::Parser", "Racc", "<module:BCDice>", "<module:Command>", "<class:Parser>", "initialize", "@notations", "notations", "@round_type", "round_type", "@prefix_number", "@suffix_number", "@need_prefix_number", "@need_suffix_number", "@modifier", "@critical", "@fumble", "@dollar", "@allowed_cmp_op", "@question_target", "disable_modifier", "enable_prefix_number", "enable_suffix_number", "has_prefix_number", "has_suffix_number", "enable_critical", "enable_fumble", "enable_dollar", "restrict_cmp_op_to", "ops", "enable_question_target", "parse", "source", "@lexer", "Lexer", "new", "do_parse", "ParseError", "ZeroDivisionError", "private", "parsed", "notation", "option", "modifier", "target", "tap", "Parsed", "block in parsed", "p", "block (2 levels) in parsed", "command=", "[]", "prefix_number=", "suffix_number=", "critical=", "fumble=", "dollar=", "modify_number=", "eval", "cmp_op=", "question_target=", "target_number=", "0", "next_token", "racc_action_table", "racc_action_check", "racc_action_pointer", "racc_action_default", "racc_goto_table", "racc_goto_check", "racc_goto_pointer", "6", "13", "3", "9", "-1", "27", "-15", "-10", "-38", "racc_goto_default", "19", "16", "15", "racc_reduce_table", "racc_reduce_n", "35", "racc_shift_n", "58", "racc_token_table", "1", "2", "4", "5", "7", "8", "10", "11", "12", "14", "17", "18", "racc_nt_base", "racc_use_result_var", "Ractor", "make_shareable", "Racc_arg", "Racc_token_to_s_table", "_reduce_1", "val", "_values", "result", "raise", "_reduce_2", "_reduce_3", "Arithmetic::Node::Number", "Arithmetic::Node", "Arithmetic", "_reduce_4", "_reduce_5", "_reduce_6", "_reduce_7", "_reduce_8", "_reduce_9", "_", "term", "nil?", "[]=", "_reduce_10", "_reduce_11", "_reduce_12", "_reduce_13", "Arithmetic::Node::Negative", "_reduce_14", "Arithmetic::Node::BinaryOp", "_reduce_15", "_reduce_16", "include?", "_reduce_17", "cmp_op", "_reduce_18", "_reduce_19", "_reduce_20", "_reduce_22", "_reduce_23", "divied_class", "_reduce_25", "Arithmetic::Node::DivideWithGameSystemDefault", "_reduce_26", "Arithmetic::Node::DivideWithCeil", "_reduce_27", "_reduce_28", "Arithmetic::Node::DivideWithRound", "_reduce_29", "Arithmetic::Node::DivideWithFloor", "_reduce_30", "_reduce_31", "_reduce_33", "_reduce_34", "_reduce_none"], :mappings=>"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"}}, {:offset=>{:line=>3185, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/deprecated/checker.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module Deprecated\n    # 2D6などの特定の加算ダイスの結果をゲームシステムごとにカスタマイズするための\n    # @deprecated Base#result_2d6 等を利用してください\n    module Checker\n      private\n\n      # @param total [Integer] コマンド合計値\n      # @param rand_results [Array<CommonCommand::AddDice::Randomizer::RandResult>] ダイスの一覧\n      # @param cmp_op [Symbol] 比較演算子\n      # @param target [Integer, String] 目標値の整数か'?'\n      # @return [Result, nil]\n      def check_result_legacy(total, rand_results, cmp_op, target)\n        sides_list = rand_results.map(&:sides)\n        value_list = rand_results.map(&:value)\n        dice_total = value_list.sum()\n\n        ret =\n          case sides_list\n          when [100]\n            check_1D100(total, dice_total, cmp_op, target)\n          when [20]\n            check_1D20(total, dice_total, cmp_op, target)\n          when [6, 6]\n            check_2D6(total, dice_total, value_list, cmp_op, target)\n          end\n\n        return Result.new(ret.delete_prefix(\" ＞ \")) unless ret.nil? || ret.empty?\n\n        ret =\n          case sides_list.uniq\n          when [10]\n            check_nD10(total, dice_total, value_list, cmp_op, target)\n          when [6]\n            check_nD6(total, dice_total, value_list, cmp_op, target)\n          end\n\n        return Result.new(ret.delete_prefix(\" ＞ \")) unless ret.nil? || ret.empty?\n\n        return nil\n      end\n\n      # @param total [Integer]\n      # @param dice_total [Integer]\n      # @param cmp_op [Symbol]\n      # @param target\n      # @return [String, nil]\n      # @deprecated Base#result_1d100 を使ってください\n      def check_1D100(total, dice_total, cmp_op, target); end\n\n      # @param (see #check_1D100)\n      # @return [String, nil]\n      # @deprecated Base#result_1d20 を使ってください\n      def check_1D20(total, dice_total, cmp_op, target); end\n\n      # @param total [Integer]\n      # @param dice_total [Integer]\n      # @param dice_list [Array<Integer>]\n      # @param cmp_op [Symbol]\n      # @param target\n      # @return [String, nil]\n      # @deprecated Base#result_nd10 を使ってください\n      def check_nD10(total, dice_total, dice_list, cmp_op, target); end\n\n      # @param (see #check_nD10)\n      # @return [String, nil]\n      # @deprecated Base#result_2d6 を使ってください\n      def check_2D6(total, dice_total, dice_list, cmp_op, target); end\n\n      # @param (see #check_nD10)\n      # @return [String, nil]\n      # @deprecated Base#result_nd6 を使ってください\n      def check_nD6(total, dice_total, dice_list, cmp_op, target); end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:Deprecated>", "<module:Checker>", "self", "private", "check_result_legacy", "total", "rand_results", "cmp_op", "target", "sides_list", "map", "to_proc", "value_list", "dice_total", "sum", "ret", "100", "$ret_or_1", "check_1D100", "20", "check_1D20", "6", "check_2D6", "nil?", "empty?", "Result", "new", "delete_prefix", "10", "uniq", "check_nD10", "check_nD6"], :mappings=>"AAAAA,4CAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MAGEA,OAAAC;MAAAA;;QAAAA;;;QACEC,IAAAC,SAAAA,CAAAA;;AAOAC,QAAAA,mCAAAA,+BAAwBC,KAAD,EAAQC,YAAR,EAAsBC,MAAtB,EAA8BC,MAArDJ;AAAAA,UAAAA;;;UACEK,aAAyBC,MAAZJ,YAAYI,OAAAA,EAAAA,EAAAA,EAAM,OAADC,SAAAA,CAAAA,CAALD;UACzBE,aAAyBF,MAAZJ,YAAYI,OAAAA,EAAAA,EAAAA,EAAM,OAADC,SAAAA,CAAAA,CAALD;UACzBG,aAAaD,UAAUE,KAAAA,CAAAA;UAEvBC,MAEE,CAAA,QAAK,CAACC,GAAD,CAAL,EADAC,CAAAA,YAAKR,UAALQ,CACA,CAAA,GAAA,CACEf,IAAAgB,aAAAA,CAAYb,KAAZ,EAAmBQ,UAAnB,EAA+BN,MAA/B,EAAuCC,MAAvCU,CADF,IAEA,CAAA,QAAK,CAACC,EAAD,CAAL,EAvBV,SAuBU,CAAA,GAAA,CACEjB,IAAAkB,YAAAA,CAAWf,KAAX,EAAkBQ,UAAlB,EAA8BN,MAA9B,EAAsCC,MAAtCY,CADF,IAEA,CAAA,QAAK,CAACC,CAAD,EAAIA,CAAJ,CAAL,EAzBV,SAyBU,CAAA,GAAA,CACEnB,IAAAoB,WAAAA,CAAUjB,KAAV,EAAiBQ,UAAjB,EAA6BD,UAA7B,EAAyCL,MAAzC,EAAiDC,MAAjDc,CADF,IAAA,CALA,GAKA,CAAA,CAFA,CAFA;UAQF,KAAmD,CAAA,QAAAP,GAAGQ,SAAAA,CAAAA,CAAH,CAAA,IAAA,CAAA,QAAYR,GAAGS,WAAAA,CAAAA,CAAf,CAAA,CAAA,CAAnD;YAAA,OAAOC,YAAMC,KAAAA,CAAKX,GAAGY,eAAAA,CAAevB,KAAfuB,CAARD;UAAb;UAEAX,MAEE,CAAA,QAAK,CAACa,EAAD,CAAL,EADAX,CAAAA,YAAKR,UAAUoB,MAAAA,CAAAA,CAAfZ,CACA,CAAA,GAAA,CACEf,IAAA4B,YAAAA,CAAWzB,KAAX,EAAkBQ,UAAlB,EAA8BD,UAA9B,EAA0CL,MAA1C,EAAkDC,MAAlDsB,CADF,IAEA,CAAA,QAAK,CAACT,CAAD,CAAL,EAnCV,SAmCU,CAAA,GAAA,CACEnB,IAAA6B,WAAAA,CAAU1B,KAAV,EAAiBQ,UAAjB,EAA6BD,UAA7B,EAAyCL,MAAzC,EAAiDC,MAAjDuB,CADF,IAAA,CAHA,GAGA,CAAA,CAFA;UAMF,KAAmD,CAAA,QAAAhB,GAAGQ,SAAAA,CAAAA,CAAH,CAAA,IAAA,CAAA,QAAYR,GAAGS,WAAAA,CAAAA,CAAf,CAAA,CAAA,CAAnD;YAAA,OAAOC,YAAMC,KAAAA,CAAKX,GAAGY,eAAAA,CAAevB,KAAfuB,CAARD;UAAb;UAEA,OAAO;QA3BTtB,CAAAA;;AAoCAc,QAAAA,2BAAAA,YAlDN,GAkDMA,CAAAA;;AAKAE,QAAAA,0BAAAA,YAvDN,GAuDMA,CAAAA;;AASAU,QAAAA,0BAAAA,YAhEN,GAgEMA,CAAAA;;AAKAR,QAAAA,yBAAAA,YArEN,GAqEMA,CAAAA;QAKArB,OAAA8B,yBAAAA,YA1EN,GA0EMA,CAAAA;MApEF9B,GAAAA,WAAAA;IAHFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>3237, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/base.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"i18n\"\nrequire \"i18n/backend/fallbacks\"\nrequire \"bcdice/randomizer\"\nrequire \"bcdice/dice_table\"\nrequire \"bcdice/enum\"\nrequire \"bcdice/translate\"\nrequire \"bcdice/result\"\nrequire \"bcdice/command/parser\"\nrequire \"bcdice/deprecated/checker\"\n\nmodule BCDice\n  class Base\n    class << self\n      # 接頭辞（反応するコマンド）の配列を返す\n      # @return [Array<String>]\n      attr_reader :prefixes\n\n      # 応答するコマンドのprefixを登録する\n      # @param prefixes [Array<String>]\n      def register_prefix(*prefixes)\n        @prefixes = (@prefixes || []) + prefixes.flatten\n      end\n\n      def register_prefix_from_super_class\n        register_prefix(superclass.prefixes)\n      end\n\n      # ゲームシステム固有のコマンドにマッチする正規表現を返す\n      # 正規表現を一度生成したら、以後コマンドの登録はできないようにする\n      #\n      # @return [Regexp]\n      def prefixes_pattern\n        @prefixes_pattern ||= nil\n        return @prefixes_pattern if @prefixes_pattern\n\n        @prefixes ||= []\n        @prefixes.freeze\n        @prefixes_pattern =\n          if @prefixes.empty?\n            /(?!)/ # 何にもマッチしない正規表現\n          else\n            /^(S)?(\#{@prefixes.join('|')})/i\n          end.freeze\n      end\n\n      # 応答するコマンド全てにマッチする正規表現を返す\n      # 正規表現を一度生成したら、以後コマンドの登録はできないようにする\n      #\n      # @return [Regexp]\n      def command_pattern\n        @command_pattern ||= nil\n        return @command_pattern if @command_pattern\n\n        @prefixes ||= []\n        @prefixes.freeze\n        pattarns = CommonCommand::COMMANDS.map { |c| c::PREFIX_PATTERN.source } + @prefixes\n\n        @command_pattern = /^S?(\#{pattarns.join('|')})/i.freeze\n      end\n\n      # @param command [String]\n      # @return [Result]\n      def eval(command)\n        new(command).eval\n      end\n    end\n\n    include Translate\n    include Deprecated::Checker\n\n    def initialize(command)\n      @raw_input = command\n\n      @sort_add_dice = false # 加算ダイスでダイス目をソートするかどうか\n      @sort_barabara_dice = false # バラバラダイスでダイス目をソートするかどうか\n\n      @d66_sort_type = D66SortType::NO_SORT # 入れ替えの種類 詳しくはBCDice::D66SortTypeを参照すること\n\n      @enabled_d9 = false # D9ダイスを有効にするか（ガンドッグ）で使用\n\n      @round_type = RoundType::FLOOR # 割り算をした時の端数の扱い (FLOOR: 切り捨て, CEIL: 切り上げ, ROUND: 四捨五入)\n\n      @sides_implicit_d = 6 # 1D のようにダイスの面数が指定されていない場合に何面ダイスにするか\n\n      @upper_dice_reroll_threshold = nil # UpperDiceで振り足しをする出目の閾値 nilの場合デフォルト設定なし\n      @reroll_dice_reroll_threshold = nil # RerollDiceで振り足しをする出目の閾値 nilの場合デフォルト設定なし\n\n      @default_cmp_op = nil # 目標値が空欄の場合の比較演算子をシンボルで指定する (:>, :>= :<, :<=, :==, :!=)\n      @default_target_number = nil # 目標値が空欄の場合の目標値 こちらだけnilにするのは想定していないので注意\n\n      @enabled_upcase_input = true # 入力を String#upcase するかどうか\n\n      @locale = :ja_jp # i18n用の言語設定\n\n      @randomizer = BCDice::Randomizer.new\n      @debug = false\n    end\n\n    attr_accessor :randomizer\n\n    # D66のダイス入れ替えの種類\n    #\n    # @return [Symbol]\n    attr_reader :d66_sort_type\n\n    # 端数処理の種類\n    #\n    # @return [Symbol]\n    attr_reader :round_type\n\n    # ダイスの面数が指定されていない場合に何面ダイスにするか\n    #\n    # @return [Integer]\n    attr_reader :sides_implicit_d\n\n    # UpperDiceで振り足しをする出目の閾値\n    #\n    # @return [Integer, nil]\n    attr_reader :upper_dice_reroll_threshold\n\n    # RerollDiceで振り足しをする出目の閾値\n    #\n    # @return [Integer, nil]\n    attr_reader :reroll_dice_reroll_threshold\n\n    # デフォルトの比較演算子\n    #\n    # @return [Symbol, nil]\n    attr_reader :default_cmp_op\n\n    # デフォルトの目標値\n    #\n    # @return [Integer, nil]\n    attr_reader :default_target_number\n\n    # 加算ダイスでダイス目をソートするかどうか\n    #\n    # @return [Boolean]\n    def sort_add_dice?\n      @sort_add_dice\n    end\n\n    # バラバラダイスでダイス目をソートするかどうか\n    #\n    # @return [Boolean]\n    def sort_barabara_dice?\n      @sort_barabara_dice\n    end\n\n    # D9ダイスが有効か\n    #\n    # @return [Boolean]\n    def enabled_d9?\n      @enabled_d9\n    end\n\n    # デバッグを有用にする\n    def enable_debug\n      @debug = true\n    end\n\n    # コマンドを評価する\n    # @return [Result, nil] コマンド実行結果。コマンドが実行できなかった場合はnilを返す\n    def eval\n      command = BCDice::Preprocessor.process(@raw_input, self)\n\n      result = dice_command(command) || eval_common_command(@raw_input)\n      return nil unless result\n\n      result.rands = @randomizer.rand_results\n      result.detailed_rands = @randomizer.detailed_rand_results\n\n      return result\n    end\n\n    # ゲームシステムごとの入力コマンドの前処理\n    # @deprecated これを使わずに +eval_common_command+ 内でパースすることを推奨する\n    # @param string [String]\n    # @return [String]\n    def change_text(string)\n      string\n    end\n\n    # @param total [Integer] コマンド合計値\n    # @param rand_results [Array<CommonCommand::AddDice::Randomizer::RandResult>] ダイスの一覧\n    # @param cmp_op [Symbol] 比較演算子\n    # @param target [Integer, String] 目標値の整数か'?'\n    # @return [Result, nil]\n    def check_result(total, rand_results, cmp_op, target)\n      ret = check_result_legacy(total, rand_results, cmp_op, target)\n      return ret if ret\n\n      sides_list = rand_results.map(&:sides)\n      value_list = rand_results.map(&:value)\n      dice_total = value_list.sum()\n\n      ret =\n        case sides_list\n        when [100]\n          result_1d100(total, dice_total, cmp_op, target)\n        when [20]\n          result_1d20(total, dice_total, cmp_op, target)\n        when [6, 6]\n          result_2d6(total, dice_total, value_list, cmp_op, target)\n        end\n\n      return nil if ret == Result.nothing\n      return ret if ret\n\n      ret =\n        case sides_list.uniq\n        when [10]\n          result_nd10(total, dice_total, value_list, cmp_op, target)\n        when [6]\n          result_nd6(total, dice_total, value_list, cmp_op, target)\n        end\n\n      return nil if ret == Result.nothing\n      return ret if ret\n\n      return result_ndx(total, cmp_op, target)\n    end\n\n    # シャドウラン用グリッチ判定\n    # @param count_one [Integer] 出目1の数\n    # @param dice_total_count [Integer] ダイスロールしたダイスの数\n    # @param count_success [Integer] 成功数\n    # @return [String, nil]\n    def grich_text(count_one, dice_total_count, count_success); end\n\n    private\n\n    def eval_common_command(command)\n      command = change_text(command)\n      CommonCommand::COMMANDS.each do |klass|\n        result = klass.eval(command, self, @randomizer)\n        return result if result\n      end\n\n      return nil\n    end\n\n    def dice_command(command)\n      command = command.upcase if @enabled_upcase_input\n\n      m = self.class.prefixes_pattern.match(command)\n      unless m\n        return nil\n      end\n\n      secret = !m[1].nil?\n      command = command[1..-1] if secret # 先頭の 'S' をとる\n\n      output = eval_game_system_specific_command(command)\n\n      if output.is_a?(Result)\n        output.secret = output.secret? || secret\n        return output\n      elsif output.nil? || output.empty? || output == \"1\"\n        return nil\n      else\n        return Result.new.tap do |r|\n          r.text = output.to_s\n          r.secret = secret\n        end\n      end\n    end\n\n    # @param command [String]\n    # @return [String, nil]\n    def eval_game_system_specific_command(command); end\n\n    # 成功か失敗か返す\n    #\n    # @param total [Integer]\n    # @param cmp_op [Symbol]\n    # @param target [Number]\n    # @return [Result]\n    def result_ndx(total, cmp_op, target)\n      if target.is_a?(String)\n        nil\n      elsif total.send(cmp_op, target)\n        Result.success(translate(\"success\"))\n      else\n        Result.failure(translate(\"failure\"))\n      end\n    end\n\n    def result_1d100(total, dice_total, cmp_op, target); end\n\n    def result_1d20(total, dice_total, cmp_op, target); end\n\n    def result_nd10(total, dice_total, value_list, cmp_op, target); end\n\n    def result_2d6(total, dice_total, value_list, cmp_op, target); end\n\n    def result_nd6(total, dice_total, value_list, cmp_op, target); end\n\n    def get_table_by_2d6(table)\n      get_table_by_nD6(table, 2)\n    end\n\n    def get_table_by_1d6(table)\n      get_table_by_nD6(table, 1)\n    end\n\n    def get_table_by_nD6(table, count)\n      get_table_by_nDx(table, count, 6)\n    end\n\n    def get_table_by_nDx(table, count, diceType)\n      num = @randomizer.roll_sum(count, diceType)\n\n      text = get_table_value(table[num - count])\n\n      return \"1\", 0 if text.nil?\n\n      return text, num\n    end\n\n    def get_table_by_1d3(table)\n      debug(\"get_table_by_1d3\")\n\n      count = 1\n      num = @randomizer.roll_sum(count, 6)\n      debug(\"num\", num)\n\n      index = ((num - 1) / 2).to_i\n      debug(\"index\", index)\n\n      text = table[index]\n\n      return \"1\", 0 if text.nil?\n\n      return text, num\n    end\n\n    # D66 ロール用（スワップ、たとえば出目が【６，４】なら「６４」ではなく「４６」とする\n    def get_table_by_d66_swap(table)\n      number = @randomizer.roll_d66(D66SortType::ASC)\n      return get_table_by_number(number, table), number\n    end\n\n    # D66 ロール用\n    def get_table_by_d66(table)\n      dice1 = @randomizer.roll_once(6)\n      dice2 = @randomizer.roll_once(6)\n\n      num = (dice1 - 1) * 6 + (dice2 - 1)\n\n      text = table[num]\n\n      indexText = \"\#{dice1}\#{dice2}\"\n\n      return \"1\", indexText if text.nil?\n\n      return text, indexText\n    end\n\n    # ** 汎用表サブルーチン\n    def get_table_by_number(index, table, default = \"1\")\n      table.each do |item|\n        number = item[0]\n        if number >= index\n          return get_table_value(item[1])\n        end\n      end\n\n      return get_table_value(default)\n    end\n\n    def get_table_value(data)\n      if data.is_a?(Proc)\n        return data.call()\n      end\n\n      return data\n    end\n\n    def roll_tables(command, tables)\n      table = tables[command]\n      unless table\n        return nil\n      end\n\n      return table.roll(@randomizer).to_s\n    end\n\n    # デバッグ出力を行う\n    # @param [Object] target 対象項目\n    # @param [Object] values 値\n    def debug(target, *values)\n      return unless @debug\n\n      targetStr = target.is_a?(String) ? target : target.inspect\n\n      if values.empty?\n        warn targetStr\n      else\n        valueStrs = values.map do |value|\n          value.is_a?(String) ? %(\"\#{value}\") : value.inspect\n        end\n\n        warn \"\#{targetStr}: \#{valueStrs.join(', ')}\"\n      end\n    end\n  end\nend\n\nI18n::Backend::Simple.include(I18n::Backend::Fallbacks)\nI18n.load_path << Dir[File.join(__dir__, \"../../i18n/**/*.yml\")]\nI18n.default_locale = :ja_jp\nI18n.fallbacks.defaults = [:ja_jp]\n"], :names=>["<top (required)>", "self", "require", "<module:BCDice>", "<class:Base>", "attr_reader", "register_prefix", "@prefixes", "+", "$ret_or_1", "prefixes", "flatten", "register_prefix_from_super_class", "superclass", "prefixes_pattern", "@prefixes_pattern", "freeze", "empty?", "join", "command_pattern", "@command_pattern", "pattarns", "map", "CommonCommand::COMMANDS", "CommonCommand", "block in command_pattern", "c", "block (2 levels) in command_pattern", "c::PREFIX_PATTERN", "source", "eval", "command", "new", "include", "Translate", "Deprecated::Checker", "Deprecated", "initialize", "@raw_input", "@sort_add_dice", "@sort_barabara_dice", "@d66_sort_type", "D66SortType::NO_SORT", "D66SortType", "@enabled_d9", "@round_type", "RoundType::FLOOR", "RoundType", "@sides_implicit_d", "6", "@upper_dice_reroll_threshold", "@reroll_dice_reroll_threshold", "@default_cmp_op", "@default_target_number", "@enabled_upcase_input", "@locale", "@randomizer", "BCDice::Randomizer", "BCDice", "@debug", "attr_accessor", "sort_add_dice?", "sort_barabara_dice?", "enabled_d9?", "enable_debug", "BCDice::Preprocessor", "process", "result", "dice_command", "eval_common_command", "rands=", "rand_results", "detailed_rands=", "detailed_rand_results", "change_text", "string", "check_result", "total", "cmp_op", "target", "ret", "check_result_legacy", "sides_list", "to_proc", "value_list", "dice_total", "sum", "100", "result_1d100", "20", "result_1d20", "result_2d6", "Result", "nothing", "10", "uniq", "result_nd10", "result_nd6", "result_ndx", "grich_text", "private", "each", "block in eval_common_command", "klass", "block (2 levels) in eval_common_command", "upcase", "m", "class", "match", "secret", "[]", "1", "nil?", "!", "-1", "output", "eval_game_system_specific_command", "is_a?", "secret=", "secret?", "tap", "block in dice_command", "r", "block (2 levels) in dice_command", "text=", "to_s", "String", "send", "success", "translate", "failure", "get_table_by_2d6", "table", "get_table_by_nD6", "2", "get_table_by_1d6", "count", "get_table_by_nDx", "diceType", "num", "roll_sum", "text", "get_table_value", "-", "0", "get_table_by_1d3", "debug", "index", "/", "to_i", "get_table_by_d66_swap", "number", "roll_d66", "D66SortType::ASC", "get_table_by_number", "get_table_by_d66", "dice1", "roll_once", "dice2", "*", "indexText", "default$", "block in get_table_by_number", "item", "block (2 levels) in get_table_by_number", ">=", "data", "Proc", "call", "roll_tables", "tables", "roll", "targetStr", "inspect", "values", "warn", "valueStrs", "block in debug", "value", "block (2 levels) in debug", "I18n::Backend::Simple", "I18n::Backend", "I18n", "I18n::Backend::Fallbacks", "load_path", "<<", "Dir", "File", "__dir__", "default_locale=", "defaults=", "fallbacks"], :mappings=>"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"}}, {:offset=>{:line=>3638, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/SteamPunkers.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire 'bcdice/base'\nrequire 'bcdice/dice_table/d66_range_table'\n\nmodule BCDice\n  module GameSystem\n    class SteamPunkers < Base\n      ID = 'SteamPunkers'\n      NAME = 'スチームパンカーズ'\n      SORT_KEY = 'すちいむはんかあす'\n\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・判定コマンド (SPn)\n          SP(判定ダイス数)>=(目標値)\n          SP4>=3のように入力し、5が出たらヒット数1，6が出たらヒット数2として成功数を数えます。\n          ≪スチームパンク！≫による振り直しのため、出力には失敗ダイス数を表示します。\n          目標値は省略可能です。\n          例：(SP4>=3) ＞ [3,4,1,6] ＞ 成功数:2, 失敗数:3 ＞ 失敗\n          例：(SP4) ＞ [3,4,1,6] ＞ 成功数:2, 失敗数:3\n        ・表\n          ・プロフ(Profile)：年齢表 PAT, 性別表 PST, 国籍表 PCT\n          ・名前表(Name)：イギリス NIT, アメリカ NAT, フランス NFT, ドイツ NGT, ソビエト NST, 日本表 NJT\n          ・過去表(Past)：トゥルース PTT, ガーディアン PGT, ノーブル PNT, デヴォート PDT, エセティック PET, チャレンジ PACT\n          ・経緯表(Background)：ギガントアームズ BGT, アーマードリム BAT, エッジモービル BET, クロノウェポン BCT, スパイテック BST, スチームウェア BWT\n          ・特徴表(Feature)：特徴表S FST, 特徴表P FPT\n          ・関係性表(Relationship)：関係性表S RST, 関係性表P RPT\n          ・感情表(Emotion)：感情表S EST, 感情表P EPT\n          ・その他(Other)；災厄表 ODT, 場面表 OST, 交流表 OIT, 激憤表 OFT\n      MESSAGETEXT\n\n      def eval_game_system_specific_command(command)\n        result = roll_tables(command, TABLES)\n        return result if result\n\n        return roll_sp(command)\n      end\n\n      def roll_sp(command)\n        m = /^SP(\\d+)(?:>=(\\d+))?$/i.match(command)\n        unless m\n          return nil\n        end\n\n        dice_count = m[1].to_i\n        target_number = m[2]&.to_i\n\n        dice_list = @randomizer.roll_barabara(dice_count, 6)\n        dice_list_text = dice_list.join(',')\n\n        successes = dice_list.count(6) * 2 + dice_list.count(5)\n        failures = dice_list.count { |x| x <= 4 }\n\n        result =\n          if dice_list.all? { |x| x == 1 }\n            Result.fumble(\"ファンブル\")\n          elsif target_number\n            successes >= target_number ? Result.success(\"成功\") : Result.failure(\"失敗\")\n          else\n            Result.new\n          end\n\n        result.text = [\n          \"(\#{command})\",\n          \"[\#{dice_list_text}]\",\n          \"成功数:\#{successes}, 失敗数:\#{failures}\",\n          result.text\n        ].compact.join(\" ＞ \")\n\n        result.critical = dice_list.include?(6)\n\n        return result\n      end\n\n      # スチームパンカーズ用のテーブル\n      class SPTable < DiceTable::D66RangeTable\n        # @param name [String]\n        # @param items [Array<String>]\n        def initialize(name, items)\n          if items.size != RANGE.size\n            raise UnexpectedTableSize.new(name, items.size)\n          end\n\n          items_with_range = RANGE.zip(items)\n\n          super(name, items_with_range)\n        end\n\n        # 23..32 と 61..66 が6パターン分\n        # その他が4パターン分\n        RANGE = [11..14, 15..22, 23..32, 33..36, 41..44, 45..52, 53..56, 61..66].freeze\n      end\n\n      class UnexpectedTableSize < StandardError; end\n\n      TABLES = {\n        \"PAT\" => SPTable.new(\n          \"年齢表\",\n          [\n            \"【14~15歳】 まだまだ、子ども扱い。また、過去の内容は父か母のことを指している。\",\n            \"【16~17歳】 そろそろ成人として扱われる。また、過去の内容は父か母のことを指している。\",\n            \"【18~19歳】 職場では修行期間中である。また、過去の内容は両親のことか、あなた自身のことだ。\",\n            \"【20~21歳】 ようやく一人前の年齢である。また、過去の内容は両親のことか、あなた自身のことだ\",\n            \"【22~23歳】 働き盛りである。また、過去の内容はあなた自身のことだ。\",\n            \"【24~25歳】 働き盛りである。また、過去の内容はあなた自身のことだ。\",\n            \"【26~27歳】 かつて、従軍した可能性がある。また、過去の内容はあなた自身のことだ。\",\n            \"【28~30歳】 蒸気大戦末期をよく知っている。また、過去の内容はあなた自身のことだ。\"\n          ]\n        ),\n        \"PST\" => SPTable.new(\n          \"性別表\",\n          [\n            \"【男性】 背が高く、がっしりしている。\",\n            \"【女性】 蠱惑的な身体をしている。\",\n            \"【男性】 平均的な中肉中背である。\",\n            \"【女性】 女性らしい体形をしている。\",\n            \"【男性】 近世の取れた肉体をしている。\",\n            \"【女性】 彫刻のように美しい体形である。\",\n            \"【男性】 一見すると細身に見える。\",\n            \"【女性】 スリムな体形をしている。\"\n          ]\n        ),\n        \"PCT\" => SPTable.new(\n          \"国籍表\",\n          [\n            \"【日本皇国】 あなたは日本人である。\",\n            \"【フランス共和国】 あなたはフランス人である。\",\n            \"【アメリカ合衆国】 あなたはアメリカ人である。\",\n            \"【イギリス王国】 あなたはイギリス人である。\",\n            \"【イギリス王国】 あなたはイギリス人である。\",\n            \"【イギリス王国】 あなたはイギリス人である。\",\n            \"【ドイツ帝国】 あなたはドイツ人である。\",\n            \"【ソビエト連邦】 あなたはソビエト人である。\"\n          ]\n        ),\n        \"NIT\" => SPTable.new(\n          \"名前表・イギリス(男性名/女性名/名字)\",\n          [\n            \"アーロン/アビゲイル/アダム\",\n            \"カラム/オーレリア/バーナード\",\n            \"クライヴ/ブレンダ/ビーチャム\",\n            \"カーティス/キャロライン/ビリンガム\",\n            \"ダンカン/クリス/ボイド\",\n            \"アイオン/イーニッド/クロムウェル\",\n            \"ネイサン/グレイス/エアハート\",\n            \"ウィリアム/ローレンシア/ハックワース\"\n          ]\n        ),\n        \"NAT\" => SPTable.new(\n          \"名前表・アメリカ(男性名/女性名/名字)\",\n          [\n            \"ジェラルド/デイジー/キャンベル\",\n            \"クラーク/ベアトリス/ベックフォード\",\n            \"ヴィクター/ケイト/ガードナー\",\n            \"ザック/ルシール/キンケイド\",\n            \"ヘクター/エレイン/コールリッジ\",\n            \"アーサー/アンジェリカ/アレクサンダー\",\n            \"アドニス/アルダ/オースティン\",\n            \"ランバート/イヴ/デビットソン\"\n          ]\n        ),\n        \"NFT\" => SPTable.new(\n          \"名前表・フランス(男性名/女性名/名字)\",\n          [\n            \"ベルナール/ベアトリス/バシュラール\",\n            \"セドリック/セシリア/ベルモンド\",\n            \"エルネスト/コレット/ボニツェール\",\n            \"フレデリック/エルザ/ボワイエ\",\n            \"ロランド/リュクレース/ディノワール\",\n            \"イアサント/アンリエット/シャルトー\",\n            \"バスティアン/ブリジット/オードラン\",\n            \"ルイ/リリアーヌ/ドラクランジュ\"\n          ]\n        ),\n        \"NGT\" => SPTable.new(\n          \"名前表・ドイツ(男性名/女性名/名字)\",\n          [\n            \"アルベルト/アデーレ/アッカーマン\",\n            \"バシリウス/アルマ/バルツァー\",\n            \"ブルーノ/クリステル/ビットナー\",\n            \"エトムント/エルネスタ/コルネリウス\",\n            \"ゴッツ/クラリッサ/アイヒマン\",\n            \"ヨハン/モニカ/フリードリヒ\",\n            \"レオンハルト/オクタヴィア/ハイセルタ\",\n            \"ブルクハルト/クロジンデ/ビンデバルト\"\n          ]\n        ),\n        \"NST\" => SPTable.new(\n          \"名前表・ソビエト(男性名/女性名/名字)\",\n          [\n            \"イリイチ/バルバラ/バビチェフ\",\n            \"ミハイル/ジナイーダ/ボブロフ\",\n            \"セルゲイ/クラーラ/ヴォルコフ\",\n            \"イヴァン/レイラ/ガボエフ\",\n            \"アラン/オルガ/ジェミチェフ\",\n            \"ボリス/ナタリヤ/ドミトリエフ\",\n            \"ウラジミル/ソフィア/エルマコフ\",\n            \"アレクセイ/マルタ/ダンチェンコ\"\n          ]\n        ),\n        \"NJT\" => SPTable.new(\n          \"名前表・日本(男性名/女性名/名字)\",\n          [\n            \"タキジ/タキ/トウドウ\",\n            \"シンヤ/アヤ/マツモト\",\n            \"レイジ/カオルコ/サガラ\",\n            \"コウタロウ/セン/オオシマ\",\n            \"ヒロシ/チサ/クジョウ\",\n            \"ジロウ/カナ/ヤマガタ\",\n            \"マサヒト/マイ/イトウ\",\n            \"ショウジ/アヤメ/シンドウ\"\n          ]\n        ),\n        \"PTT\" => SPTable.new(\n          \"過去表『トゥルース』\",\n          [\n            \"【決着】 あなたは怨敵である蒸気事件の犯人を追っている。いつの日か、そいつとは決着をつけるつもりだ。\",\n            \"【陰謀】 とある陰謀により、あなたは故郷、あるいはかつての地位を失ってしまった。\",\n            \"【後悔】 ある蒸気事件を解決できなかった。結果、あなたは大切な人を失ってしまった。\",\n            \"【失踪】 かつて、あなたが愛した人は不自然な失踪を遂げてしまった。あの人はいったいどこへ……？\",\n            \"【冤罪】 ある陰謀により、あなたは冤罪をかけられ、かつての地位を追われてしまった。\",\n            \"【裏切り】 とある蒸気事件の際に無二の親友があなたを裏切り、理由も告げぬまま消え去った。\",\n            \"【誓い】 とある陰謀により、あなたは大切な何かを失った。いつか陰謀を暴く……それがあなたの誓いだ。\",\n            \"【喪失】 とある蒸気事件の際、あなたの家族は何者かの手により惨殺された。犯人は今も見つかっていない。\"\n          ]\n        ),\n        \"PGT\" => SPTable.new(\n          \"過去表『ガーディアン』\",\n          [\n            \"【後悔】 ある蒸気事件を解決できなかった。結果、あなたは大切な人を失ってしまった。\",\n            \"【贖罪】 あなたは過去に罪なき人々の虐殺を強制させられた。だから、贖罪のために人々を護っている。\",\n            \"【無力】 かつて、あなたは無力だった。そして、無力ゆえに大切な人を護ることができなかった。\",\n            \"【憧れ】 あなたの憧れた人は、いつだって弱者の味方だった。そして、あなたはあの人の背中を追い続けている。\",\n            \"【使命】 弱き者たちの盾となる。それが生まれたときから、あなたに課せられ唯一の使命だった。\",\n            \"【見殺し】 あなたはやむを得ない事情により、仲間を見殺しにしてしまった。だから、次は絶対見殺しにしない。\",\n            \"【死別】 とある事件の際、あなたは家族を護りきれず失ってしまった。だから……今度こそ護ってみせる。\",\n            \"【庇護】 現在、あなたには護るべき人、護るべき場所がある。それらの日常を護るべく、あなたは戦ったいる。\"\n          ]\n        ),\n        \"PNT\" => SPTable.new(\n          \"過去表『ノーブル』\",\n          [\n            \"【復讐】 あなたの家族は蒸気事件の犠牲となった。ゆえに、あなたは家族の仇を討つべく犯人を捜している。\",\n            \"【理不尽】 あなたは幼少期に、心優しかった使用人が理不尽な虐待の末に殺害される場面を目撃してしまった。\",\n            \"【反発】 あなたの親は悪徳を重ねる権力者だった。そんな親が嫌いで、あなたは常に反発していた。\",\n            \"【高貴】 あなたは生来から高貴な信念の持ち主だ。それゆえ弱者を救い、導くことに疑問はない。\",\n            \"【偽物】 あなたは貴族の影武者を務める元平民だ。しかし、演じるうちに、あなたは真の高貴を身に着けた。\",\n            \"【悲恋】 あなたは、下層市民と身分違いの恋をした。だが、愛する人は蒸気事件の犠牲者となった。\",\n            \"【権謀】 あなたの両親は、とある権力闘争に巻き込まれた際、不自然な蒸気事件に遭遇して命を落とした。\",\n            \"【慈愛】 あなたは、真の貴族であった両親から他者を慈しむことは当然だと教育された。\"\n          ]\n        ),\n        \"PDT\" => SPTable.new(\n          \"過去表『デヴォート』\",\n          [\n            \"【忠義】 あなたは、忠義の大切さを教えられて育ってきた。それゆえ、あなたは主に忠誠をささげるのだ。\",\n            \"【忠臣】 あなたは国や組織に仕える忠臣だった。だが、権力闘争によって追われ、今は市井に身を潜めている。\",\n            \"【恩義】 あなたは現在の主たる人物、または組織に救われた。いつの日か、この恩に報いなければ。\",\n            \"【無心】 あなたは生来より、主や組織に仕える教育を受けてきた。ゆえに、忠義を尽くすことに疑問はない。\",\n            \"【心酔】 あなたは現在の主や組織に心酔している。だから、主や組織のために蒸気事件に立ち向かう\",\n            \"【復習】 あなたの主は邪悪な蒸気事件の犠牲となった。以後、あなたは主の仇を討つべく犯人を捜している。\",\n            \"【約束】 あなたの主は蒸気事件の犠牲者だ。主を看取る際、あなたは世界から蒸気事件を一掃すると約束した。\",\n            \"【犠牲】 あなたには尊敬に値する主がいた。だが、その主はあなたを庇って、邪悪な陰謀の犠牲となった。\"\n          ]\n        ),\n        \"PET\" => SPTable.new(\n          \"過去表『エセティック』\",\n          [\n            \"【研究】 あなたは蒸気犯罪で用いられるスチームギアを撲滅するために、常に研究を続けている。\",\n            \"【悪用】 あなたは過去に自らが製造した、あるいは所有するスチームギアが悪用され、憤慨したことがある。\",\n            \"【仁義】 あなた、仁義の大切さを教えられて育ってきた。それゆえ、あなたは虐げられる物たちを救うのだ。\",\n            \"【美意識】 あなたは、スチームギアが犯罪に用いられる場面を目撃した際、吐き気がするほど醜いと感じた。\",\n            \"【正義】 あなたは蒸気事件の元犠牲者だ。あなたは、自らの正義を成すために今も蒸気事件に挑み続けている。\",\n            \"【正論】 あなたは昔から、スチームギアが正しい方法で利用されないことが我慢ならない。\",\n            \"【天誅】 あなたは蒸気事件によって、全てを失ってしまった。だから、蒸気事件を起こす黒幕が許せない。\",\n            \"【報復】 あなたの恩師は過去に蒸気事件で犠牲となっている。あなたはいつか、その犯人に報復するつもりだ。\"\n          ]\n        ),\n        \"PACT\" => SPTable.new(\n          \"過去表『チャレンジ』\",\n          [\n            \"【誓い】 とある陰謀により、あなたは大切な何かを失った。いつか陰謀を暴く……それがあなたの誓いだ。\",\n            \"【研究】 あなたは蒸気犯罪で用いられるスチームギアを撲滅するために、常に研究を続けている。\",\n            \"【反抗】 あなたは夢や努力を嘲笑されて育った。そのせいか、人々を虐げる蒸気事件が我慢ならない。\",\n            \"【克服】 あなたは恐ろしい蒸気事件に遭遇した過去がある。その恐怖を克服するため、蒸気事件に挑むのだ。\",\n            \"【修練】 あなたは修練により、己を高める術を知っている。そして修練のため、蒸気事件に挑むのだ。\",\n            \"【挑戦】 あなたは幼少時から困難に立ち向かい続けてきた。ゆえに、蒸気事件であろうと立ち向かうのだ。\",\n            \"【決着】 あなたは怨敵である蒸気事件の犯人を追っている。いつの日か、そいつとは決着をつけるつもりだ。\",\n            \"【異質】 あなたは困難に立ち向かうことでしか高揚できない。そして、蒸気事件以上の困難など存在しないのだ。\"\n          ]\n        ),\n        \"BGT\" => SPTable.new(\n          \"経緯表『ギガントアームズ』\",\n          [\n            \"【元近衛兵】 あなたは上層部の警護を任されていた元近衛兵で、スチームギアは大戦時に入手したものである。\",\n            \"【反逆者の子】 スチームギアは、スチームパンカーだったあなたの亡父が使っていた形見である。\",\n            \"【元殺し屋】 あなたは、かつて殺し屋だった。このスチームギアは以前の仕事の報酬として受け取ったものだ。\",\n            \"【元傭兵】 あなたは蒸気大戦で荒稼ぎしていた元傭兵で、このスチームギアは大戦時に入手したものだ。\",\n            \"【元英雄】 あなたは蒸気大戦の英雄だ。あなたは戦線に赴く際、上層部から新世代スチームギアを支給されたのだ。\",\n            \"【元軍人】 あなたは蒸気大戦にも従軍した元軍人で、大戦時にスチームギアを入手した。\",\n            \"【元特殊部隊】 あなたは蒸気大戦で活躍した元特殊部隊員で、大戦時にスチームギアを入手した。\",\n            \"【戦場帰り】 あなたは蒸気大戦に従軍した経験を持つ戦場帰りで、大戦時にスチームギアを入手した。\"\n          ]\n        ),\n        \"BAT\" => SPTable.new(\n          \"経緯表『アーマードリム』\",\n          [\n            \"【試験操縦士】 あなたは軍や企業で試験操縦士を務めており、その折に、スチームギアを密かに入手した。\",\n            \"【闇取引】 あなたは闇取引のコネクションがあり、そのコネを利用してスチームギアを入手した。\",\n            \"【貴族出身】 あなたは貴族、あるいは元貴族だ。スチームギアは、屋敷の倉にあった品を改造したものである。\",\n            \"【元研究者】 あなたはスチームギアの元研究者で、自らの肉体を防護するためにスチームギアを開発した。\",\n            \"【戦場帰り】 あなたは蒸気大戦に従軍した経験を持つ戦場帰りで、大戦時にスチームギアを入手した。\",\n            \"【謎の協力者】 あなたが蒸気事件に立ち向かおうとした際、謎の協力者が現れ、スチームギアを与えてくれた。\",\n            \"【元修理屋】 あなたは元修理屋だ。スチームギアはジャンク置き場で偶然見かけたものをレストアしたものだ。\",\n            \"【簒奪者】 あなたは蒸気事件に巻き込まれた際、偶然と幸運が重なり、相手のスチームギアを奪取できた。\"\n          ]\n        ),\n        \"BET\" => SPTable.new(\n          \"経緯表『エッジモービル』\",\n          [\n            \"【車泥棒】 あなたは元車泥棒だ。このスチームギアは出所不明のものをちょろまかしたものだ。\",\n            \"【元機関工】 あなたは優れた技術を持つ元機関工で、出所不明のスチームギアを偶然にも入手した。\",\n            \"【元エース】 あなたは蒸気大戦時に英雄と呼ばれた元操縦士で、大戦時にスチームギアを入手した。\",\n            \"【元輸送兵】 あなたは蒸気大戦に従軍した経験を持つ元輸送兵で、大戦時にスチームギアを入手した。\",\n            \"【蒸気工の子】 あなたは蒸気工、あるいは蒸気技術者の子供だった。スチームギアは、両親が所有していたものである。\",\n            \"【元レーサー】 あなたは蒸気車両のレースに出場していたレーサーで、スチームギアは偶然にも入手したものだ。\",\n            \"【違法改造屋】 あなたはかつて、違法で改造を施すモグリの機関工だった。スチームギアは、その際に入手したものだ。\",\n            \"【逃亡兵】 あなたは、戦場から逃げ出した逃亡兵だ。スチームギアは戦場に赴く際に支給された試作機である。\"\n          ]\n        ),\n        \"BCT\" => SPTable.new(\n          \"経緯表『クロノウェポン』\",\n          [\n            \"【元武器商人】 あなたは蒸気大戦時にスチームギアを販売していた元武器商人、あるいはその護衛だ。\",\n            \"【元製造者】 あなたは蒸気大戦時にスチームギアを製造していた。そして、身を護るために自身の手で製造したのだ。\",\n            \"【反逆者の子】 スチームギアは、スチームパンカーだったあなたの亡父が使っていた形見である。\",\n            \"【元近衛兵】 あなたは上層部の警護を任されていた元近衛兵で、スチームギアは大戦時に入手したものである。\",\n            \"【元特殊部隊】 あなたは蒸気大戦で活躍した元特殊部隊員で、大戦時にスチームギアを入手した。\",\n            \"【元傭兵】 あなたは蒸気大戦で荒稼ぎしていた元傭兵で、このスチームギアは大戦時に入手したものだ。\",\n            \"【裏稼業】 あなたはかつて裏稼業に手を染めていた荒事屋で、スチームギアは、かつての仕事の報酬である。\",\n            \"【元英雄】 あなたは蒸気大戦の英雄だ。あなたは戦線に赴く際、上層部から新世代スチームギアを支給されたのだ。\"\n          ]\n        ),\n        \"BST\" => SPTable.new(\n          \"経緯表『スパイテック』\",\n          [\n            \"【元刑事】 あなたは、蒸気事件ばかりを追っていた元刑事だ。スチームギアは犯罪者から奪い取ったものである。\",\n            \"【元結社の一員】 あなたは邪悪な秘密結社に所属していた元工作員だ。スチームギアはその頃に支給されたものである。\",\n            \"【研究者の肉親】 あなたの肉親が軍の研究者で、彼らが試作機として制作したものを偶然入手した。\",\n            \"【元工作員】 あなたは、蒸気大戦の裏側で活躍した元工作員で、大戦終結と同時に、そのスチームギアを入手した。\",\n            \"【元諜報員】 あなたは蒸気大戦の際に活躍した元スパイで、当時支給されたスチームギアを私物化している。\",\n            \"【後援者】 あなたが行なう蒸気事件の調査を援助する者がいる。彼は、このスチームギアを制作した人物である。\",\n            \"【元暗殺部隊】 あなたは、蒸気大戦時に暗躍した元暗殺部隊員で、スチームギアはその頃に入手したものだ。\",\n            \"【元盗人】 あなたは盗品として流れてきたスチームギアを偶然発見して、入手した。\"\n          ]\n        ),\n        \"BWT\" => SPTable.new(\n          \"経緯表『スチームウェア』\",\n          [\n            \"【独自ルート】 あなたは人間の限界を超えるために、独自のルートを使って、自らの意志で肉体を機械化した。\",\n            \"【相棒の技師】 あなたが蒸気事件で肉体を欠損した際、機械技師をしている相棒が欠損部位を機械化してくれた。\",\n            \"【元実験体】 あなたは蒸気事件で重傷を負った際、実験体となる代わりに特殊な機械化手術を施された。\",\n            \"【元機械化兵】 あなたは大戦時に機械化手術で蘇った元蒸気兵だ。終戦後、スチームギアをわざと取り換えなかった。\",\n            \"【帰還兵】 あなたは蒸気大戦から帰還した帰還兵だ。だが戦時中に肉体が欠損し、軍部が機械化してくれた。\",\n            \"【元機械闘士】 あなたは機械化格闘に出場した元格闘士だ。機械化した部位は、その頃に違法改造したものだ。\",\n            \"【元闇医者】 あなたは、元モグリの機械医師だった。機械化したその部位は、その頃に自身で改造したものだ。\",\n            \"【元英雄】 あなたは蒸気大戦の英雄だ。あなたは戦線に赴く際、上層部から新世代スチームギアを支給されたのだ。\"\n          ]\n        ),\n        \"FST\" => SPTable.new(\n          \"特徴表S\",\n          [\n            \"【蒸気帽】 あなたは、なんらかの蒸気機械を仕込んだ帽子を愛用している。\",\n            \"【装飾品】 あなたは、蒸気仕掛けが施された特殊なアクセサリーやペンダントを愛用している。\",\n            \"【蒸気杖/傘】 あなたは、特殊機能を備えた蒸気機械式の傘を、あるいはステッキを愛用している。\",\n            \"【ゴーグル】 あなたは、特殊機能を備えたゴーグルを愛用している。\",\n            \"【特殊眼鏡】 あなたは、拡大機能などを備えた眼鏡や単眼鏡を愛用している。\",\n            \"【蒸気ライター】 あなたは、小さなマグナイトが仕込まれた蒸気式ライターを隠し持っている。\",\n            \"【機関手袋】 あなたは、特殊機能を備えた頑丈な革手袋を愛用している。\",\n            \"【偽造カード】 あなたは、偽造した戸籍情報を点刻したパンチカードを隠し持っている。\"\n          ]\n        ),\n        \"FPT\" => SPTable.new(\n          \"特徴表P\",\n          [\n            \"【傷】 顔、あるいは体のどこかに傷がある。\",\n            \"【美声】 一度聞くと忘れられないほど、美しい声だ。\",\n            \"【筋肉質】 鍛え抜かれた肉体をしている。\",\n            \"【美形】 生きている宝石のように美しい容貌をしている。\",\n            \"【童顔】 年齢に関係なく、非常に若く見える。\",\n            \"【髪】 不思議な髪の色、あるいはパンクな髪型をしている。\",\n            \"【刺青】 体のどこかに特徴的なタトゥーがある。\",\n            \"【瞳】 不思議な瞳の色、あるいは特徴的な眼差しをしている。\"\n          ]\n        ),\n        \"RST\" => SPTable.new(\n          \"関係性表S\",\n          [\n            \"【元敵同士】 相手とは、元敵同士の間柄だ。どのように敵対していたかは、プレイヤーと相談して決定せよ。\",\n            \"【愛憎】 相手とは、愛憎渦巻く仲だ。愛しあっていた、憎みあっていたのかはプレイヤーと相談して決定せよ。\",\n            \"【元相棒】 相手とは、元相棒の間柄だ。なぜ相棒でなくなったかについてはプレイヤーと相談して決定せよ。\",\n            \"【犬猿】 相手とは、犬猿の仲だ。なぜ、いがみあっているかについてはプレイヤーと相談して決定せよ。\",\n            \"【共依存】 相手とは、共依存の関係だ。どのように依存しあっているかはプレイヤーと相談して決定せよ。\",\n            \"【仇同士】 相手とは、仇同士の間柄だ。どのような因縁であるかはプレイヤーと相談して決定せよ。\",\n            \"【主従】 相手とは、主従の間柄だ。どちらが主で、どちらが従者かはプレイヤーと相談して決定せよ。\",\n            \"【裏切り】 相手とは、裏切りあった間柄だ。どちらが裏切ったかについてはプレイヤーと相談して決定せよ。\"\n          ]\n        ),\n        \"RPT\" => SPTable.new(\n          \"関係性表P\",\n          [\n            \"【血縁】 相手とは、血縁がある。どの程度の間柄であるかについてはプレイヤーと相談して決定せよ。\",\n            \"【同志】 相手は、同じ志を持っている。どんな志を共にしているかはプレイヤーと相談して決定せよ。\",\n            \"【好敵手】 相手とは、良きライバルだ。どのような形での好敵手かは、プレイヤーと相談して決定せよ。\",\n            \"【親友】 相手とは、親友の間柄だ。どのくらい仲が良いかについては、プレイヤーと相談して決定せよ。\",\n            \"【相棒】 相手は、無二の相棒だ。どのくらいの年月を共にしてきたかについてはプレイヤーと相談して決定せよ。\",\n            \"【腐れ縁】 相手とは幼い頃からの腐れ縁だ。どのくらいの年齢からであるかはプレイヤーと相談して決定せよ。\",\n            \"【戦友】 相手とは戦友の間柄だ。どこで、なにと戦ったかについてはプレイヤーと相談して決定せよ。\",\n            \"【師弟】 相手は師、あるいは弟子だ。どちらが師で、どちらが弟子かはプレイヤーと相談して決定せよ。\"\n          ]\n        ),\n        \"EST\" => SPTable.new(\n          \"感情表S\",\n          [\n            \"【殺意】 相手に殺意を覚えている。どういった経緯で殺意を抱いているかについては自身で決定せよ。\",\n            \"【優越感】 相手に優越感がある。どういった経緯で優越感を抱いているかについては自身で決定せよ。\",\n            \"【嫉妬】 相手に嫉妬している。どういった経緯で嫉妬しているかについては自身で決定せよ。\",\n            \"【劣等感】 相手に劣等感がある。どういった経緯で劣等感を抱いているかについては自身で決定せよ。\",\n            \"【罪悪感】 相手に罪悪感がある。どういった経緯で罪悪感を持っているかについては自身で決定せよ。\",\n            \"【不安】 相手のことが不安だ。どういったときに不安を感じるかについては自身で決定せよ。\",\n            \"【恐怖】 相手のことを恐れている。どういった経緯で恐れるようになったかについては自身で決定せよ。\",\n            \"【嫌悪】 相手のことを嫌悪している。どの程度の嫌悪であるかについては自身で決定せよ。\"\n          ]\n        ),\n        \"EPT\" => SPTable.new(\n          \"感情表P\",\n          [\n            \"【誠意】 相手に対して誠意を感じる。どういった経緯で誠意を感じたかについては自身で決定せよ。\",\n            \"【好感】 相手に対して好感を抱いている。どういった経緯で好感を抱くに至ったかについては自身で決定せよ。\",\n            \"【尊敬】 相手のことを尊敬している。どういった経緯で相手を尊敬したかについては自身で決定せよ。\",\n            \"【友情】 相手に対して友情を抱いている。どういった経緯で友情を抱くに至ったかについては自身で決定せよ。\",\n            \"【庇護】 相手を護りたいと思っている。どういった経緯で相手を庇護対象にしたかは自身で決定せよ。\",\n            \"【信頼】 相手のことを信頼している。どういった経緯で信頼するようになったかについては自身で決定せよ。\",\n            \"【期待】 相手に対して期待している。どういった経緯で期待を抱くようになったかについては自身で決定せよ。\",\n            \"【愛情】 相手に愛情や友愛を抱いている。どういった経緯で愛情を抱くに至ったかについては自身で決定せよ。\"\n          ]\n        ),\n        \"ODT\" => SPTable.new(\n          \"災厄表\",\n          [\n            \"【蒸気の不調】 スチームギアが不調になった！おそらくマグナイトが尽きかけてるのだ。ペナルティーを受けたPCは、そのフェイズの終了まで、スチームの抑圧を解放できない。\",\n            \"【卑劣な強襲】 突如として強力な不意討ちを受けた。おそらく、スチームギアによる特殊な攻撃だ。PC全員は【耐久値】を-3する(最小1)。\",\n            \"【非道な行為】 黒幕は気まぐれから、罪のない人をスチームギアで傷つけた。なんという非道な行為だ！PC全員は世界からの抑圧を2枚受ける。\",\n            \"【嫌な予感】 今回の蒸気事件は特に嫌な予感がする……以後、全てのエネミーは終了フェイズを迎えるまで、実行の《アビリティ》の成功数を+1する。\",\n            \"【敵役出現】 見知らぬ妨害者が現れた！以後、[【反抗LV】の平均以下]のエネミーが、そのフェイズに1人参加。戦闘不能にしない限り、メインを迎える度に実行を行ない、活劇フェイズにも参加する。\",\n            \"【迎撃準備】 黒幕は万が一に備えて、手下を武装させ始めた。以後、全てのエネミーはシナリオ中、【耐久値】を+3する。\",\n            \"【疑惑の目】 まずい。警察や政府がキミたちに対して疑惑の目を向け始めているようだ。PC全員は【理性値】を-2する(最小0)。\",\n            \"【絶望感】 突如として心の傷が痛み、信念が揺らいでしまう。ペナルティーを受けたPCは、そのフェイズの終了まで、パンクの抑圧を解放できない。\"\n          ]\n        ),\n        \"OST\" => SPTable.new(\n          \"場面表\",\n          [\n            \"【地下鉄】 途中まで、地下鉄を利用することにする。駅のホームは蒸気列車が放出する蒸気のせいで、湿り気と熱気を帯びていた。\",\n            \"【工業地帯】 工業地帯を横切る。開かれた窓の奥に視線を送ると、労働者たちが製造用蒸気機関を操り、真鍮製の煙突から蒸気が噴き上っている。\",\n            \"【店舗】 途中、店舗で簡単な買い物を済ませた。支払いは無論、パンチカードで一括。階差演算機関はすでに個人の予算残高すら管理下に置いている。\",\n            \"【ビッグ・ベン】 遠くから時刻を告げるビッグ・ベンの鐘が響くと、蒸気オルガンの薄暗い音色が、いつものようにロンドンの上空を覆った。\",\n            \"【人混み】 人混みのなかを進むと、ハンチング帽をかぶった少年たちが脇を駆け抜けた……彼らを護るためにも早く蒸気事件を解決しなければ。\",\n            \"【繁華街】 調査に向かった現場では、蒸気機械仕掛けの帯状装飾が点灯しており、帯が回転する度に様々な広告が表示された。\",\n            \"【大通り】 大通りに出ると、蒸気自動車が目前で行き交っていた。真鍮や錫で装飾された蒸気自動車は、まるで晩餐会に出入りする馬車のようだ。\",\n            \"【移動パブ】 途中、移動パブを見かけた。蒸気自動車に機関式サーバーを搭載したもので、周りには若いロンドン子たちが口に泡をつけながら騒いでいる。\"\n          ]\n        ),\n        \"OIT\" => SPTable.new(\n          \"交流表\",\n          [\n            \"【過去】 そういえば、相手の過去を知らない気がする…聞けば教えてくれるだろうか？\",\n            \"【特徴】 さっきから相手の特徴が気になる。相手から特徴にまつわる話を聞いてみようか？\",\n            \"【感情】 相手に対して抱いてる感情のことを伝えるべきだろうか？それとも、伝えないべきだろうか？\",\n            \"【蒸気事件】 相手に、今回の事件の印象について聞いてみよう。\",\n            \"【事件後】 今回の事件が終わったら、相手は何をするつもりなのだろう？\",\n            \"【関係性】 相手とは……いつからこうした関係だったろう？そもそも、相手は覚えているのだろうか？\",\n            \"【職業】 相手は、どんな経緯で今の職業となったのだろう。興味があるので、聞いてみようか？\",\n            \"【経緯】 相手はどうやってスチームギアを得たのだろう？その経緯の一部でも聞いてみようか？\"\n          ]\n        ),\n        \"OFT\" => SPTable.new(\n          \"激憤表\",\n          [\n            \"【憤怒】 これほど残虐な蒸気事件が起こったというのに、世界は一向に変わろうとしない。もはや世界への怒りは頂点へと達してしまった。PCはレヴォルトを失い、黒幕となる。\",\n            \"【破損】 怒りに任せて激闘を繰り返したため、スチームギアが破損した。もう、世界に反逆する力はない。以後、PCはスチームギアを失い、NPCとなる。\",\n            \"【偽装】 権力者からの圧力によって、社会的に抹殺されてしまった。が、それは想定済みだ。これからは別の人生を歩むことになる。PCの名前と職業を変更せよ。\",\n            \"【冷静】 今回の蒸気事件には少し思うところがあった。だが、しばらく時間を置くことで、理性的になることができた。キミはまだまだ戦える。特にペナルティーはない。\",\n            \"【重傷】 最後の戦いの際に負った傷が重症化してしまった。だが、しばらく治療に専念すれば復帰できるだろう。特にペナルティーはない。\",\n            \"【革命】 今回の事件を通じて、信念が揺らいだ。やはり、世界を変えるには圧倒的な”暴力”が必要なのだ。PCはレヴォルトを失い、黒幕となる。\",\n            \"【寝返り】 蒸気事件を通じて、世界の在り方に疑問を感じる。そんな矢先、目前にゾディアックの上級幹部が現れ、キミをスカウトしてきた。PCはレヴォルトを失い、黒幕となる。\",\n            \"【悪堕ち】 信念に従い、反逆を続けてきた。だが、蒸気事件が尽きる気配はない。反逆など無意味なのか。なら、この手で……PCはレヴォルトを失い、黒幕となる。\"\n          ]\n        )\n      }.freeze\n\n      register_prefix('SP', TABLES.keys)\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:SteamPunkers>", "eval_game_system_specific_command", "command", "result", "roll_tables", "TABLES", "roll_sp", "m", "match", "dice_count", "[]", "1", "to_i", "target_number", "2", "dice_list", "@randomizer", "roll_barabara", "6", "dice_list_text", "join", "successes", "+", "*", "count", "5", "failures", "block in roll_sp", "x", "block (2 levels) in roll_sp", "<=", "4", "all?", "==", "Result", "fumble", ">=", "success", "failure", "new", "text=", "text", "compact", "critical=", "include?", "<class:SPTable>", "initialize", "name", "items", "size", "RANGE", "raise", "UnexpectedTableSize", "items_with_range", "zip", "11", "14", "15", "22", "23", "32", "33", "36", "41", "44", "45", "52", "53", "56", "61", "66", "freeze", "DiceTable::D66RangeTable", "DiceTable", "<class:UnexpectedTableSize>", "StandardError", "SPTable", "register_prefix", "keys", "Base"], :mappings=>"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"}}]}