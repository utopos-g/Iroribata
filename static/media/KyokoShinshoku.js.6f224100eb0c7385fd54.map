{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/KyokoShinshoku.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class KyokoShinshoku < Base\n      # ゲームシステムの識別子\n      ID = \"KyokoShinshoku\"\n\n      # ゲームシステム名\n      NAME = \"虚構侵蝕TRPG\"\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = \"きよこうしんしよくTRPG\"\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・判定\n        　ダイスを指定数ダイスロールして、最も高い出目を出力します。難易度を指定すると成否を判定します。オプションでA、Dをつけると、［有利］［不利］の条件で振れます（A=［有利］、D=［不利］）。\n        KS(x,y)\n        x：ダイスサイズ。1=D4（能力値1、2以上の出目が出ていたとしても最大1）／2=D4（能力値2、3以上の出目が出ていたとしても最大2）／3=D4（能力値3、出目4が出ていたとしても最大3）／4=D4／6=D6／8=D8／10=D10／12=D12／20=D20\n        y：ダイス数（省略：1）\n\n        KS(x,y)>=z\n        x：ダイスサイズ。1=D4（能力値1、2以上の出目が出ていたとしても最大1）／2=D4（能力値2、3以上の出目が出ていたとしても最大2）／3=D4（能力値3、出目4が出ていたとしても最大3）／4=D4／6=D6／8=D8／10=D10／12=D12／20=D20\n        y：ダイス数（省略：1）\n        z：難易度\n\n        KS(x,y)A>=z（［有利］：KS(x,y)の判定を２回行い、それぞれの結果のより大きい方が結果となります）\n        x：ダイスサイズ。1=D4（能力値1、2以上の出目が出ていたとしても最大1）／2=D4（能力値2、3以上の出目が出ていたとしても最大2）／3=D4（能力値3、出目4が出ていたとしても最大3）／4=D4／6=D6／8=D8／10=D10／12=D12／20=D20\n        y：ダイス数（省略：1）\n        z：難易度\n\n        KS(x,y)D>=z（［不利］：KS(x,y)の判定を２回行い、それぞれの結果のより小さい方が結果となります）\n        x：ダイスサイズ。1=D4（能力値1、2以上の出目が出ていたとしても最大1）／2=D4（能力値2、3以上の出目が出ていたとしても最大2）／3=D4（能力値3、出目4が出ていたとしても最大3）／4=D4／6=D6／8=D8／10=D10／12=D12／20=D20\n        y：ダイス数（省略：1）\n        z：難易度\n\n        ・観測ロール\n        　［現実乖離］の段階に応じたダイスを指定数ダイスロールして、最も高い出目を出力します。\n        KR(x)\n        x=［現実乖離］の段階（1=D4／2=D6／3=D8／4=D10／5=D12／6=D20）\n\n        KR(x,y)　観測ロール（リアリティラインあり）\n        x=［現実乖離］の段階（1=D4／2=D6／3=D8／4=D10／5=D12／6=D20）\n        y=［リアリティライン］のレベル（3=1個／2=2個／1=3個）\n\n        ・虚構の収束の侵蝕度減少ロール\n        　［現実乖離］の段階に応じたダイスを指定数ダイスロールして、その合計を出力します。\n        KRS(x,y)\n        x=［現実乖離］の段階（1=D4／2=D6／3=D8／4=D10／5=D12／6=D20）\n        y=ダイスの個数\n      MESSAGETEXT\n\n      register_prefix('KS', 'KR', 'KRS')\n\n      def eval_game_system_specific_command(command)\n        roll_check(command) || roll_kansoku(command) || roll_shusoku(command)\n      end\n\n      private\n\n      DICE_SIZE_TO_SIDES = {\n        1 => 4,\n        2 => 4,\n        3 => 4,\n        4 => 4,\n        6 => 6,\n        8 => 8,\n        10 => 10,\n        12 => 12,\n        20 => 20,\n      }.freeze\n\n      def roll_check(command)\n        m = /^KS(?:\\(([-+\\d]+),([-+\\d]+)?\\)|(\\d+))([AD]?)(?:>=([-+\\d]+))?$/.match(command)\n        return nil unless m\n\n        dice_size = m[1] ? Arithmetic.eval(m[1], @round_type) : Arithmetic.eval(m[3], @round_type).to_i\n        times = m[2] ? Arithmetic.eval(m[2], @round_type) : 1\n        target = m[5] && Arithmetic.eval(m[5], @round_type)\n\n        advantage = m[4]\n\n        sides = DICE_SIZE_TO_SIDES[dice_size]\n\n        return nil if sides.nil? || times.nil?\n\n        rolls = Array.new(advantage.empty? ? 1 : 2) { roll_check_once(times, dice_size, sides) }\n        values = rolls.map { |v| v[:value] }\n\n        value =\n          if advantage == \"A\"\n            values.max\n          elsif advantage == \"D\"\n            values.min\n          else\n            values.first\n          end\n\n        result =\n          if value == 1\n            Result.fumble(\"ファンブル\")\n          elsif target && value < target\n            Result.failure(\"失敗\")\n          elsif target && value == sides\n            Result.critical(\"クリティカル\")\n          elsif target && value >= target\n            Result.success(\"成功\")\n          else\n            Result.new()\n          end\n\n        result.text = [\n          target ? \"(KS(\#{dice_size},\#{times})\#{advantage}>=\#{target})\" : \"(KS(\#{dice_size},\#{times})\#{advantage})\",\n          format_rolls(rolls),\n          value,\n          result.text,\n        ].compact.join(\" ＞ \")\n\n        return result\n      end\n\n      def roll_check_once(times, dice_size, sides)\n        if times < 1\n          dice_list = @randomizer.roll_barabara(2, sides).sort\n          value = dice_list.min.clamp(1, dice_size)\n        else\n          dice_list = @randomizer.roll_barabara(times, sides).sort\n          value = dice_list.max.clamp(1, dice_size)\n        end\n\n        return {dice_list: dice_list, value: value}\n      end\n\n      def format_rolls(rolls)\n        if rolls.length == 1 && rolls.first[:dice_list].length == 1\n          return nil\n        end\n\n        rolls.map do |v|\n          v[:dice_list].length == 1 ? v[:value].to_s : \"\#{v[:value]}[\#{v[:dice_list].join(',')}]\"\n        end.join(\", \")\n      end\n\n      GENJITU_KAIRI_TO_SIDES = [4, 6, 8, 10, 12, 20].freeze\n      REALITY_LINE_TO_TIMES = {\n        3 => 1,\n        2 => 2,\n        1 => 3,\n      }.freeze\n\n      def roll_kansoku(command)\n        m = /^KR(?:(\\d+)|\\((\\d),(\\d)\\))$/.match(command)\n        return nil unless m\n\n        dice_size = m[1]&.to_i || m[2].to_i\n        reality_line = m[3]&.to_i\n\n        if reality_line && (reality_line > 3 || reality_line < 1)\n          return nil\n        end\n\n        sides = GENJITU_KAIRI_TO_SIDES[dice_size - 1]\n        times = REALITY_LINE_TO_TIMES[reality_line] || 1\n\n        return nil unless sides\n\n        dice_list = @randomizer.roll_barabara(times, sides).sort\n        value = dice_list.max\n\n        cmd = reality_line ? \"KR(\#{dice_size},\#{reality_line})\" : \"KR(\#{dice_size})\"\n\n        if times == 1\n          \"(\#{cmd}) ＞ \#{value}\"\n        else\n          \"(\#{cmd}) ＞ \#{value}[\#{dice_list.join(',')}] ＞ \#{value}\"\n        end\n      end\n\n      def roll_shusoku(command)\n        m = /^KRS(?:\\((\\d),([-+\\d]+)\\))$/.match(command)\n        return nil unless m\n\n        dice_size = m[1].to_i\n        times = m[2] && Arithmetic.eval(m[2], @round_type)\n\n        sides = GENJITU_KAIRI_TO_SIDES[dice_size - 1]\n        return nil if sides.nil? || times.nil?\n\n        dice_list = @randomizer.roll_barabara(times, sides)\n        value = dice_list.sum\n\n        if times == 1\n          \"(KRS(\#{dice_size},\#{times})) ＞ \#{value}\"\n        else\n          \"(KRS(\#{dice_size},\#{times})) ＞ \#{value}[\#{dice_list.join(',')}] ＞ \#{value}\"\n        end\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:KyokoShinshoku>", "self", "register_prefix", "eval_game_system_specific_command", "command", "$ret_or_1", "$ret_or_2", "roll_check", "roll_kansoku", "roll_shusoku", "private", "1", "4", "2", "3", "6", "8", "10", "12", "20", "freeze", "m", "match", "dice_size", "[]", "Arithmetic", "eval", "@round_type", "to_i", "times", "target", "5", "advantage", "sides", "DICE_SIZE_TO_SIDES", "nil?", "rolls", "new", "Array", "empty?", "block in roll_check", "block (2 levels) in roll_check", "roll_check_once", "values", "map", "v", "value", "max", "min", "first", "result", "Result", "fumble", "<", "failure", "critical", ">=", "success", "text=", "format_rolls", "text", "compact", "join", "dice_list", "@randomizer", "roll_barabara", "sort", "clamp", "length", "block in format_rolls", "block (2 levels) in format_rolls", "to_s", "reality_line", ">", "GENJITU_KAIRI_TO_SIDES", "-", "REALITY_LINE_TO_TIMES", "cmd", "sum", "Base"], :mappings=>"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"}}]}