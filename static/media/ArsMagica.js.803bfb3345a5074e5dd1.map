{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/normalize.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module Normalize\n    module_function\n\n    # 比較演算子をシンボルに正規化する\n    #\n    # @param op [String]\n    # @return [Symbol, nil]\n    def comparison_operator(op)\n      case op\n      when /<=|=</\n        :<=\n      when />=|=>/\n        :>=\n      when /<>|!=|=!/\n        :'!='\n      when /</\n        :<\n      when />/\n        :>\n      when /=/\n        :==\n      end\n    end\n\n    # 目標値を正規化する\n    #\n    # @param val [String]\n    # @return [Integer, String] 整数か'?'\n    def target_number(val)\n      if val == \"?\"\n        val\n      else\n        val.to_i\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:Normalize>", "self", "module_function", "comparison_operator", "op", "$ret_or_1", "target_number", "val", "to_i"], :mappings=>"AAAAA,mCAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;;;MACEC,IAAAC,iBAAAA,CAAAA;;AAMAC,MAAAA,mCAAAA,+BAAwBC,EAAxBD;AAAAA,QAAAA;;QAEE,IAAA,QAAK,OAAL,EADAE,CAAAA,YAAKD,EAALC,CACA,CAAA;UACEF,OAAA;QADF,OAEA,IAAA,QAAK,OAAL,EAdN,SAcM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,UAAL,EAhBN,SAgBM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,GAAL,EAlBN,SAkBM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,GAAL,EApBN,SAoBM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,GAAL,EAtBN,SAsBM,CAAA;UACEA,OAAA;QADF;UAXAA,OAAA;QAWA;MAZFA,CAAAA;MAqBAH,OAAAM,6BAAAA,yBAAkBC,GAAlBD;AAAAA;QACE,IAAA,MAAGC,GAAH,EAAUD,GAAV,CAAA;UACEA,OAAAC;QADF;UAGED,OAAAC,GAAGC,MAAAA,CAAAA;QAHL;MADFF,CAAAA;IA5BFN,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>46, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/format.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module Format\n    module_function\n\n    # 比較演算子を文字列表記にする\n    #\n    # @param op [Symbol]\n    # @return [String, nil]\n    def comparison_operator(op)\n      case op\n      when :==\n        \"=\"\n      when :'!='\n        \"<>\"\n      when Symbol\n        op.to_s\n      end\n    end\n\n    # 修正値を文字列表記にする\n    #\n    # @param number [Integer, nil]\n    # @return [String]\n    def modifier(number)\n      if number.nil?\n        nil\n      elsif number == 0\n        \"\"\n      elsif number > 0\n        \"+\#{number}\"\n      else\n        number.to_s\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:Format>", "self", "module_function", "comparison_operator", "op", "$ret_or_1", "Symbol", "to_s", "modifier", "number", "nil?", "0", ">"], :mappings=>"AAAAA,gCAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;;MACEC,IAAAC,iBAAAA,CAAAA;;AAMAC,MAAAA,mCAAAA,+BAAwBC,EAAxBD;AAAAA,QAAAA;;QAEE,IAAA,QAAK,IAAL,EADAE,CAAAA,YAAKD,EAALC,CACA,CAAA;UACEF,OAAAA;QADF,OAEA,IAAA,QAAK,IAAL,EAdN,SAcM,CAAA;UACEA,OAAAA;QADF,OAEA,IAAA,QAAKG,YAAL,EAhBN,SAgBM,CAAA;UACEH,OAAAC,EAAEG,MAAAA,CAAAA;QADJ;UALAJ,OAAA;QAKA;MANFA,CAAAA;MAeAH,OAAAQ,wBAAAA,oBAAaC,MAAbD;AAAAA;QACE,IAAA,QAAGC,MAAMC,SAAAA,CAAAA,CAAT,CAAA;UACEF,OAAA;QADF,OAEA,IAAA,MAAMC,MAAN,EAAgBE,CAAhB,CAAA;UACEH,OAAAA;QADF,OAEA,IAAA,QAAaI,OAAPH,MAAOG,EAAED,CAAFC,CAAb,CAAA;UACEJ,OAACA,GAAD,GAAA,CAAIC,MAAJ;QADF;UAGED,OAAAC,MAAMF,MAAAA,CAAAA;QAHR;MALFC,CAAAA;IAtBFR,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>91, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/ArsMagica.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/normalize\"\nrequire \"bcdice/format\"\n\nmodule BCDice\n  module GameSystem\n    class ArsMagica < Base\n      # ゲームシステムの識別子\n      ID = 'ArsMagica'\n\n      # ゲームシステム名\n      NAME = 'アルスマギカ'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'あるすまきか'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・ストレスダイス　(ArSx+y)\n        　\"ArS(ボッチダイス)+(修正)\"です。判定にも使えます。Rコマンド(1R10+y[m])に読替をします。\n        　ボッチダイスと修正は省略可能です。(ボッチダイスを省略すると1として扱います)\n        　botchダイスの0の数が2以上の時は、数えて表示します。\n        　（注意！） botchの判断が発生したときには、そのダイスを含めてロールした全てのダイスを[]の中に並べて表示します。\n        　例) (1R10[5]) ＞ 0[0,1,8,0,8,1] ＞ Botch!\n        　　最初の0が判断基準で、その右側5つがボッチダイスです。1*2,8*2,0*1なので1botchという訳です。\n      INFO_MESSAGE_TEXT\n\n      register_prefix('ArS', '1R10')\n\n      def eval_game_system_specific_command(string)\n        unless parse_ars(string) || parse_1r10(string)\n          return nil\n        end\n\n        diff = @target_numner || 0\n        botch = @botch\n        bonus = @modify_number\n        crit_mul = 1\n        total = 0\n        cmp_op = @cmp_op\n\n        die = @randomizer.roll_once(10) - 1\n        output = \"(\#{expr()}) ＞ \"\n\n        if die == 0 # botch?\n          count0 = 0\n          dice_n = []\n\n          botch.times do |_i|\n            botch_die = @randomizer.roll_once(10) - 1\n            count0 += 1 if botch_die == 0\n            dice_n.push(botch_die)\n          end\n\n          output += \"0[\#{die},\#{dice_n.join(',')}]\"\n\n          if count0 != 0\n            if count0 > 1\n              output += \" ＞ \#{count0}Botch!\"\n            else\n              output += \" ＞ Botch!\"\n            end\n\n            # Botchの時には目標値を使った判定はしない\n            cmp_op = nil\n          else\n            if bonus > 0\n              output += \"+\#{bonus} ＞ \#{bonus}\"\n            elsif bonus < 0\n              output += \"\#{bonus} ＞ \#{bonus}\"\n            else\n              output += \" ＞ 0\"\n            end\n            total = bonus\n          end\n        elsif die == 1 # Crit\n          crit_dice = \"\"\n          while die == 1\n            crit_mul *= 2\n            die = @randomizer.roll_once(10)\n            crit_dice += \"\#{die},\"\n          end\n          total = die * crit_mul\n          crit_dice = crit_dice.sub(/,$/, '')\n          output += total.to_s\n          output += \"[1,\#{crit_dice}]\"\n          total += bonus\n          if bonus > 0\n            output += \"+\#{bonus} ＞ \#{total}\"\n          elsif bonus < 0\n            output += \"\#{bonus} ＞ \#{total}\"\n          end\n        else\n          total = die + bonus\n          if bonus > 0\n            output += \"\#{die}+\#{bonus} ＞ \#{total}\"\n          elsif bonus < 0\n            output += \"\#{die}\#{bonus} ＞ \#{total}\"\n          else\n            output += total.to_s\n          end\n        end\n\n        if cmp_op == :>=\n          output += (total >= diff ? \" ＞ 成功\" : \" ＞ 失敗\")\n        end\n\n        return output.to_s\n      end\n\n      private\n\n      def parse_ars(command)\n        m = /^ArS(\\d+)?((?:[+-]-?\\d+)+)?(?:([>=]+)(\\d+))?$/i.match(command)\n        unless m\n          return false\n        end\n\n        @botch = m[1]&.to_i || 1\n        @modify_number = ArithmeticEvaluator.eval(m[2] || \"\")\n        @cmp_op = Normalize.comparison_operator(m[3])\n        @target_numner = m[4]&.to_i\n\n        return true\n      end\n\n      def parse_1r10(command)\n        m = /^1R10((?:[+-]-?\\d+)+)?(?:\\[(\\d+)\\])?(?:([>=]+)(\\d+))?$/i.match(command)\n        unless m\n          return false\n        end\n\n        @modify_number = ArithmeticEvaluator.eval(m[1] || \"\")\n        @botch = m[2]&.to_i || 1\n        @cmp_op = Normalize.comparison_operator(m[3])\n        @target_numner = m[4]&.to_i\n\n        return true\n      end\n\n      def expr()\n        modifier = Format.modifier(@modify_number)\n\n        \"1R10\#{modifier}[\#{@botch}]\#{@cmp_op}\#{@target_numner}\"\n      end\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:ArsMagica>", "register_prefix", "eval_game_system_specific_command", "string", "parse_ars", "parse_1r10", "diff", "$ret_or_1", "@target_numner", "0", "botch", "@botch", "bonus", "@modify_number", "crit_mul", "1", "total", "cmp_op", "@cmp_op", "die", "-", "@randomizer", "roll_once", "10", "output", "expr", "count0", "dice_n", "times", "block in eval_game_system_specific_command", "_i", "block (2 levels) in eval_game_system_specific_command", "botch_die", "+", "push", "join", ">", "<", "crit_dice", "*", "2", "sub", "to_s", ">=", "private", "command", "m", "match", "[]", "ArithmeticEvaluator", "eval", "Normalize", "comparison_operator", "3", "4", "modifier", "Format", "Base"], :mappings=>"AAAAA,2BAAAA;EAAAA;;;EAEAC,IAAAC,SAAAA,CAAQF,kBAARE;EACAD,IAAAC,SAAAA,CAAQF,eAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAEE,8BAAKA,WAAL;QAGA,gCAAOA,QAAP;QAGA,oCAAWA,QAAX;QAGA,wCACNA,qBADqB,GAErBA,6DAFqB,GAGrBA,4CAHqB,GAIrBA,kCAJqB,GAKrBA,gEALqB,GAMrBA,2CANqB,GAOrBA,4DAPM;QAUAJ,IAAAK,iBAAAA,CAAgBD,KAAhB,EAAuBA,MAAvBC;;AAEAC,QAAAA,iDAAAA,6CAAsCC,MAAtCD;AAAAA,UAAAA;;;UACE,KAAO,CAAA,QAAAN,IAAAQ,WAAAA,CAAUD,MAAVC,CAAA,CAAA,IAAA,CAAA,QAAqBR,IAAAS,YAAAA,CAAWF,MAAXE,CAArB,CAAA,CAAA,CAAP;YACE,OAAO;UADT;UAIAC,OAAO,CAAA,QAAAC,CAAAA,YAAAC,kBAAAD,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAkBE,CAAlB,CAAA;UACPC,QAAQC;UACRC,QAAQC;UACRC,WAAWC;UACXC,QAAQP;UACRQ,SAASC;UAETC,MAAgCC,UAA1BC,eAAWC,WAAAA,CAAWC,EAAXD,CAAeF,EAAEL,CAAFK;UAChCI,SAAUtB,GAAD,GAAA,CAAIN,IAAA6B,MAAAA,CAAAA,CAAJ,CAAA,GAAWvB;UAEpB,IAAA,MAAGiB,GAAH,EAAUV,CAAV,CAAA;;YACEiB,SAASjB;YACTkB,SAAS;YAEJC,MAALlB,KAAKkB,SAAAA,EAAAA,EAAAA,EAALC,aAAgBC,EAAhBD,EAAAE;AAAAA;;;cAAgB;cACdC,YAAsCZ,UAA1BC,eAAWC,WAAAA,CAAWC,EAAXD,CAAeF,EAAEL,CAAFK;cACtC,IAAA,MAAeY,SAAf,EAA4BvB,CAA5B,CAAA;gBAAAiB,SAAOO,SAAPP,MAAOO,EAAGlB,CAAHkB;cAAP;cACAF,OAAAJ,MAAMO,MAAAA,CAAMF,SAANE,EAHRL,CAAAA,GAAAA,SAAAA,CAAKD;YAMLJ,SAAOS,SAAPT,MAAOS,EAAI/B,IAAD,GAAA,CAAKiB,GAAL,CAAA,GAASjB,GAAT,GAAA,CAAYyB,MAAMQ,MAAAA,CAAMjC,GAANiC,CAAlB,CAAA,GAA6BjC,GAAhC+B;YAEP,IAAA,OAAGP,MAAH,EAAajB,CAAb,CAAA;;cACE,IAAA,QAAU2B,OAAPV,MAAOU,EAAErB,CAAFqB,CAAV,CAAA;gBACEZ,SAAOS,SAAPT,MAAOS,EAAI/B,KAAD,GAAA,CAAMwB,MAAN,CAAA,GAAaxB,QAAhB+B;cADT;gBAGET,SAAOS,SAAPT,MAAOS,EAAG/B,WAAH+B;cAHT;cAOAhB,SAAS;YARX;;cAUE,IAAA,QAASmB,OAANxB,KAAMwB,EAAE3B,CAAF2B,CAAT,CAAA;gBACEZ,SAAOS,SAAPT,MAAOS,EAAI/B,GAAD,GAAA,CAAIU,KAAJ,CAAA,GAAUV,KAAV,GAAA,CAAeU,KAAf,CAAHqB;cADT,OAEA,IAAA,QAAYI,OAANzB,KAAMyB,EAAE5B,CAAF4B,CAAZ,CAAA;gBACEb,SAAOS,SAAPT,MAAOS,EAAG,EAAA,GAAA,CAAGrB,KAAH,CAAA,GAASV,KAAT,GAAA,CAAcU,KAAd,CAAHqB;cADT;gBAGET,SAAOS,SAAPT,MAAOS,EAAG/B,MAAH+B;cAHT;cAKAjB,QAAQJ;YAjBV;UAZF,OA+BA,IAAA,MAAMO,GAAN,EAAaJ,CAAb,CAAA;;YACEuB,YAAYpC;YACZ,OAAA,MAAMiB,GAAN,EAAaJ,CAAb,CAAA;;cACED,WAASyB,UAATzB,QAASyB,EAAGC,CAAHD;cACTpB,MAAME,eAAWC,WAAAA,CAAWC,EAAXD;cACjBgB,YAAUL,SAAVK,SAAUL,EAAG,EAAA,GAAA,CAAGd,GAAH,CAAA,GAAOjB,GAAV+B;YAHZ;YAKAjB,QAAYuB,UAAJpB,GAAIoB,EAAEzB,QAAFyB;YACZD,YAAYA,SAASG,KAAAA,CAAK,IAAd,EAAoBvC,EAAXuC;YACrBjB,SAAOS,SAAPT,MAAOS,EAAGjB,KAAK0B,MAAAA,CAAAA,CAART;YACPT,SAAOS,SAAPT,MAAOS,EAAI/B,KAAD,GAAA,CAAMoC,SAAN,CAAA,GAAgBpC,GAAnB+B;YACPjB,QAAMiB,SAANjB,KAAMiB,EAAGrB,KAAHqB;YACN,IAAA,QAASG,OAANxB,KAAMwB,EAAE3B,CAAF2B,CAAT,CAAA;cACEZ,SAAOS,SAAPT,MAAOS,EAAI/B,GAAD,GAAA,CAAIU,KAAJ,CAAA,GAAUV,KAAV,GAAA,CAAec,KAAf,CAAHiB;YADT,OAEA,IAAA,QAAYI,OAANzB,KAAMyB,EAAE5B,CAAF4B,CAAZ,CAAA;cACEb,SAAOS,SAAPT,MAAOS,EAAG,EAAA,GAAA,CAAGrB,KAAH,CAAA,GAASV,KAAT,GAAA,CAAcc,KAAd,CAAHiB;YADT;UAdF;;YAkBEjB,QAAYiB,SAAJd,GAAIc,EAAErB,KAAFqB;YACZ,IAAA,QAASG,OAANxB,KAAMwB,EAAE3B,CAAF2B,CAAT,CAAA;cACEZ,SAAOS,SAAPT,MAAOS,EAAG,EAAA,GAAA,CAAGd,GAAH,CAAA,GAAOjB,GAAP,GAAA,CAAUU,KAAV,CAAA,GAAgBV,KAAhB,GAAA,CAAqBc,KAArB,CAAHiB;YADT,OAEA,IAAA,QAAYI,OAANzB,KAAMyB,EAAE5B,CAAF4B,CAAZ,CAAA;cACEb,SAAOS,SAAPT,MAAOS,EAAG,EAAA,GAAA,CAAGd,GAAH,CAAA,GAAA,CAASP,KAAT,CAAA,GAAeV,KAAf,GAAA,CAAoBc,KAApB,CAAHiB;YADT;cAGET,SAAOS,SAAPT,MAAOS,EAAGjB,KAAK0B,MAAAA,CAAAA,CAART;YAHT;UArBF;UA4BA,IAAA,MAAGhB,MAAH,EAAa,IAAb,CAAA;YACEO,SAAOS,SAAPT,MAAOS,EAAI,CAAA,QAAMU,OAAN3B,KAAM2B,EAAGrC,IAAHqC,CAAN,CAAA,GAAA,CAAgBzC,OAAhB,IAAA,CAA0BA,OAA1B,CAAA,CAAJ+B;UADT;UAIA,OAAOT,MAAMkB,MAAAA,CAAAA;QA9EfxC,CAAAA;QAiFAN,IAAAgD,SAAAA,CAAAA;;AAEAxC,QAAAA,yBAAAA,qBAAcyC,OAAdzC,GAAAA,MAAAA,IAAAA,wCAAAA;AAAAA,UAAAA;;;UACE0C,IAAI,gDAAgDC,OAAAA,CAAOF,OAAPE;UACpD,KAAA,QAAOD,CAAP,CAAA;YACE,OAAO;UADT;UAIAnC,aAAS,CAAA,QAAAJ,CAAAA,YAAA,CAAA,KAAAuC,CAACE,OAAAA,CAACjC,CAADiC,CAAD,qCAAA,EAAA,MAAA,CAAA,CAAA,CAAAzC,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAcQ,CAAd,CAAA;UACTF,qBAAiBoC,yBAAmBC,MAAAA,CAAM,CAAA,QAAA3C,CAAAA,YAAAuC,CAACE,OAAAA,CAACR,CAADQ,CAADzC,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAQH,EAAR,CAAA,CAAN8C;UACpChC,cAAUiC,eAASC,qBAAAA,CAAqBN,CAACE,OAAAA,CAACK,CAADL,CAAtBI;UACnB5C,qBAAiB,CAAA,KAAAsC,CAACE,OAAAA,CAACM,CAADN,CAAD,qCAAA,EAAA,MAAA,CAAA,CAAA;UAEjB,OAAO,KAXT5C;YAAAA;YAAAA;UAAAA;QAAAA,CAAAA;;AAcAC,QAAAA,0BAAAA,sBAAewC,OAAfxC,GAAAA,MAAAA,IAAAA,wCAAAA;AAAAA,UAAAA;;;UACEyC,IAAI,yDAAyDC,OAAAA,CAAOF,OAAPE;UAC7D,KAAA,QAAOD,CAAP,CAAA;YACE,OAAO;UADT;UAIAjC,qBAAiBoC,yBAAmBC,MAAAA,CAAM,CAAA,QAAA3C,CAAAA,YAAAuC,CAACE,OAAAA,CAACjC,CAADiC,CAADzC,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAQF,EAAR,CAAA,CAAN6C;UACpCvC,aAAS,CAAA,QAAAJ,CAAAA,YAAA,CAAA,KAAAuC,CAACE,OAAAA,CAACR,CAADQ,CAAD,qCAAA,EAAA,MAAA,CAAA,CAAA,CAAAzC,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAcQ,CAAd,CAAA;UACTG,cAAUiC,eAASC,qBAAAA,CAAqBN,CAACE,OAAAA,CAACK,CAADL,CAAtBI;UACnB5C,qBAAiB,CAAA,KAAAsC,CAACE,OAAAA,CAACM,CAADN,CAAD,qCAAA,EAAA,MAAA,CAAA,CAAA;UAEjB,OAAO,KAXT3C;YAAAA;YAAAA;UAAAA;QAAAA,CAAAA;QAcAL,OAAAyB,oBAAAA,gBAAAA;AAAAA,UAAAA;;;UACE8B,WAAWC,YAAMD,UAAAA,CAAU1C,kBAAV0C;UAEjB9B,OAACA,MAAD,GAAA,CAAO8B,QAAP,CAAA,GAAgB9B,GAAhB,GAAA,CAAmBd,UAAnB,CAAA,GAA0Bc,GAA1B,GAAA,CAA6BP,WAA7B,CAAA,GAAA,CAAuCV,kBAAvC;QAHFiB,CAAAA;MAtIFzB,GAAAA,WAAAA,EAAkByD,UAAlBzD;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AALAH;"}}]}