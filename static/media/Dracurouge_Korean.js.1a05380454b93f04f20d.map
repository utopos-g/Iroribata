{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Dracurouge.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Dracurouge < Base\n      # ゲームシステムの識別子\n      ID = 'Dracurouge'\n\n      # ゲームシステム名\n      NAME = 'ドラクルージュ'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'とらくるうしゆ'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・行い判定（DRx+y）\n        　x：振るサイコロの数（省略時４）、y：渇き修正（省略時０）\n        　例） DR　DR6　DR+1　DR5+2\n        ・抗い判定（DRRx）\n        　x：振るサイコロの数\n        　例） DRR3\n        ・原風景表（ST）、叙勲表（CO）、叙勲後表（CA）、遥か過去表（EP）\n        　原罪表（OS）、受難表（PN）、近況表（RS）、平和な過去表（PP）\n        ・堕落表（CTx） x：渇き （例） CT3\n        ・堕落の兆し表（CS）、拡張・堕落の兆し表（ECS）\n        ・絆内容決定表（BT）\n        ・反応表（RTxy）x：血統、y：道　xy省略で一括表示\n        　血統　D：ドラク、R：ローゼンブルク、H：ヘルズガルド、M：ダストハイム\n        　　　　A：アヴァローム　N：ノスフェラス、G：ゲイズヴァルト、K：カインシルト\n        　道　F：領主、G：近衛、R：遍歴、W：賢者、J：狩人、N：夜獣\n        　　　E：将軍、B：僧正、H：空駆、K：船長、L：寵童、V：仲立、U：技師、D：博士\n        　　　S：星読、G2：後見\n        　例）RT（一括表示）、RTDF（ドラクの領主）、RTAG2（アヴァロームの後見人）\n        ・異端の反応表（HRTxy）x：血統、y：道　xy省略で一括表示\n        　血統　L：異端卿、V：ヴルコラク、N：ナハツェーラ、K：カルンシュタイン\n        　　　　G：グリマルキン、S：ストリガ、M：メリュジーヌ、F：フォーン\n        　　　　H：ホムンクルス、E：エナメルム、S2：サングィナリエ、A：アールヴ\n        　　　　V2：ヴィーヴル、L2：ルーガルー、A2：アルラウネ、F2：フリッガ\n        　道　W：野伏、N：流浪、S：密使、H：魔女、F：剣士、X：検体\n        　例）HRT（一括表示）、HRTVW（ヴルコラクの野伏）、HRTF2X（フリッガの検体）\n        ・D66ダイスあり\n      MESSAGETEXT\n\n      def initialize(command)\n        super(command)\n        @d66_sort_type = D66SortType::NO_SORT\n      end\n\n      def eval_game_system_specific_command(command)\n        roll_conduct_dice(command) ||\n          roll_resist_dice(command) ||\n          getReactionDiceCommandResult(command) ||\n          getHeresyReactionDiceCommandResult(command) ||\n          getCorruptionDiceCommandResult(command) ||\n          roll_tables(command, self.class::TABLES)\n      end\n\n      private\n\n      # 行い判定 (DRx+y)\n      def roll_conduct_dice(command)\n        m = /^DR(\\d*[1-9])?(\\+\\d+)?$/.match(command)\n        unless m\n          return nil\n        end\n\n        dice_count = m[1]&.to_i || 4\n        thirsty_point = m[2].to_i\n\n        dice_list = @randomizer.roll_barabara(dice_count, 6).sort\n\n        glory_dice = count_glory_dice(dice_list)\n        dice_list += Array.new(glory_dice, 10)\n\n        calculation_process = apply_thirsty_point(dice_list, thirsty_point)\n\n        sequence = [\n          \"(\#{command})\",\n          \"\#{dice_count}D6\#{Format.modifier(thirsty_point)}\",\n          calculation_process,\n          \"[ \#{dice_list.join(', ')} ]\",\n        ].compact\n\n        return sequence.join(\" ＞ \")\n      end\n\n      def count_glory_dice(dice_list)\n        one_count = dice_list.count(1)\n        six_count = dice_list.count(6)\n\n        return (one_count / 2).to_i + (six_count / 2).to_i\n      end\n\n      def apply_thirsty_point(dice_list, thirsty_point)\n        return nil if thirsty_point == 0\n\n        idx = dice_list.rindex { |i| i <= 6 }\n\n        text_list = dice_list.map(&:to_s)\n        text_list[idx] += \"+\#{thirsty_point}\"\n        dice_list[idx] += thirsty_point\n\n        return \"[ \#{text_list.join(', ')} ]\"\n      end\n\n      # 抗い判定 (DRRx)\n      def roll_resist_dice(command)\n        m = /^DRR(\\d+)$/.match(command)\n        unless m\n          return nil\n        end\n\n        dice_count = m[1].to_i\n        dice_count = 4 if dice_count == 0\n\n        dice_list = @randomizer.roll_barabara(dice_count, 6).sort\n        total = dice_list.sum()\n\n        return \"(\#{command}) ＞ \#{dice_count}D6 ＞ [ \#{dice_list.join(', ')} ] ＞ \#{total}\"\n      end\n\n      def getReactionDiceCommandResult(command)\n        return nil unless command =~ /^RT((\\w\\d*)(\\w\\d*))?/\n\n        typeText1 = Regexp.last_match(2)\n        typeText2 = Regexp.last_match(3)\n\n        name = translate(\"Dracurouge.RT.name\")\n        blood = translate(\"Dracurouge.RT.blood\")\n        style = translate(\"Dracurouge.RT.style\")\n\n        return getReactionText(name, typeText1, typeText2, blood, style)\n      end\n\n      def getHeresyReactionDiceCommandResult(command)\n        return nil unless command =~ /^HRT((\\w\\d*)(\\w\\d*))?/\n\n        typeText1 = Regexp.last_match(2)\n        typeText2 = Regexp.last_match(3)\n\n        name = translate(\"Dracurouge.HRT.name\")\n        blood = translate(\"Dracurouge.HRT.blood\")\n        style = translate(\"Dracurouge.HRT.style\")\n\n        return getReactionText(name, typeText1, typeText2, blood, style)\n      end\n\n      def getReactionText(name, typeText1, typeText2, infos1, infos2)\n        return nil unless checkTypeText(typeText1, infos1)\n        return nil unless checkTypeText(typeText2, infos2)\n\n        ten_value = @randomizer.roll_once(6)\n        one_value = @randomizer.roll_once(6)\n        number = \"\#{ten_value}\#{one_value}\"\n\n        isBefore = (ten_value < 4)\n        infos = isBefore ? infos1 : infos2\n\n        typeText = (isBefore ? typeText1 : typeText2)\n\n        index = (one_value - 1) + (isBefore ? (ten_value - 1) : (ten_value - 4)) * 6\n        debug(\"index\", index)\n\n        if typeText.nil?\n          resultText = getReactionTextFull(infos, index)\n        else\n          info = infos[typeText.to_sym]\n          return nil if info.nil?\n\n          resultText = getReactionTex(info, index)\n        end\n\n        return \"\#{name}(\#{number}) ＞ \#{resultText}\"\n      end\n\n      def checkTypeText(typeText, infos)\n        return true if typeText.nil?\n\n        return infos.keys.include?(typeText.to_sym)\n      end\n\n      def getReactionTextFull(infos, index)\n        resultTexts = []\n\n        infos.each_value do |info|\n          resultTexts << getReactionTex(info, index)\n        end\n\n        return resultTexts.join('／')\n      end\n\n      def getReactionTex(info, index)\n        typeName = info[:name]\n        text = info[:table][index]\n\n        return \"\#{typeName}：\#{text}\"\n      end\n\n      def getCorruptionDiceCommandResult(command)\n        return nil unless command =~ /^CT(\\d+)$/\n\n        modify = Regexp.last_match(1).to_i\n\n        name = translate(\"Dracurouge.CT.name\")\n        table =\n          [\n            [0, translate(\"Dracurouge.CT.table.0\")],\n            [1, translate(\"Dracurouge.CT.table.1\")],\n            [3, translate(\"Dracurouge.CT.table.3\")],\n            [5, translate(\"Dracurouge.CT.table.5\")],\n            [6, translate(\"Dracurouge.CT.table.6\")],\n            [7, translate(\"Dracurouge.CT.table.7\")],\n            [8, translate(\"Dracurouge.CT.table.8\")],\n            [99, translate(\"Dracurouge.CT.table.99\")],\n          ]\n\n        dice_list = @randomizer.roll_barabara(2, 6)\n        number = dice_list.sum()\n        number_text = dice_list.join(\",\")\n\n        index = (number - modify)\n        debug('index', index)\n        text = get_table_by_number(index, table)\n\n        return \"2D6[\#{number_text}]-\#{modify} ＞  \#{name}(\#{index}) ＞ \#{text}\"\n      end\n\n      class YearTable\n        # @param key [String]\n        # @param locale [Symbol]\n        # @param years [Array<String>]\n        # @return [YearTable]\n        def self.from_i18n(key, locale, years)\n          table = I18n.translate(key, locale: locale, raise: true)\n          items = table[:items].zip(years)\n          return new(table[:name], table[:year_title], items)\n        end\n\n        # @param name [String]\n        # @param year_title [String]\n        # @param items [Array<Array<(String, String)>>]\n        def initialize(name, year_title, items)\n          @name = name\n          @year_title = year_title\n          @items = items.freeze\n        end\n\n        # @param randomizer [Randomizer]\n        # @return [String]\n        def roll(randomizer)\n          tens, ones = randomizer.roll_barabara(2, 6)\n          index = (tens - 1) * 6 + (ones - 1)\n\n          text, year_expr = @items[index]\n          interim_expr = year_expr.gsub(/\\d+D6+/) { |expr| roll_d6x(expr, randomizer) }\n          year = ArithmeticEvaluator.eval(interim_expr.gsub(\"×\", \"*\"))\n\n          \"\#{@name}(\#{tens}\#{ones}) ＞ \#{text} ＞ \#{@year_title}：\#{year_expr} ＞ (\#{interim_expr}) ＞ \#{@year_title}：\#{year}年\"\n        end\n\n        private\n\n        # D66と同様の形式でD666などにも対応したダイスロール\n        #\n        # @param expr [String]\n        # @param randomizer [Randomizer]\n        # @return [Integer]\n        def roll_d6x(expr, randomizer)\n          times, sides = expr.split(\"D\", 2)\n          times = times.to_i\n\n          list = Array.new(times) do\n            randomizer.roll_barabara(sides.length, 6)\n                      .reverse # テスト系の互換性のために反転する\n                      .map.with_index { |x, idx| x * (10**idx).to_i }\n                      .sum()\n          end\n\n          return list.sum()\n        end\n      end\n\n      class << self\n        private\n\n        def translate_tables(locale)\n          {\n            \"CO\" => YearTable.from_i18n(\n              \"Dracurouge.table.CO\",\n              locale,\n              [\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"10+2D6\",\n                \"7+1D6×1D6\",\n                \"14+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"10+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"10+2D6\",\n                \"7+1D6×1D6\",\n                \"14+1D6×1D6\",\n                \"10+2D6\",\n                \"7+1D6×1D6\",\n                \"14+1D6×1D6\",\n                \"18+1D6×1D6\",\n                \"10+2D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"30+1D6×1D6\",\n                \"14+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"14+1D6×1D6\",\n                \"10+2D6\",\n                \"14+1D6×1D6\",\n                \"14+1D6×1D6\",\n                \"7+4D6\",\n                \"14+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n              ]\n            ),\n            \"CA\" => YearTable.from_i18n(\n              \"Dracurouge.table.CA\",\n              locale,\n              [\n                \"2D6×10\",\n                \"1D6×1D6\",\n                \"1D6×1D6\",\n                \"2D6×5\",\n                \"2D6×10\",\n                \"1D6×1D6\",\n                \"2D6×10\",\n                \"1D6×5\",\n                \"2D6×10\",\n                \"2D6×3\",\n                \"1D6×1D6\",\n                \"1D6×1D6\",\n                \"2D6×10\",\n                \"2D6×10\",\n                \"2D6×20\",\n                \"2D6×10\",\n                \"2D6×20\",\n                \"1D6×1D6\",\n                \"1D6×3\",\n                \"1D6×1D6\",\n                \"1D6×5\",\n                \"2D6×10\",\n                \"1D6×1D6\",\n                \"2D6×10\",\n                \"2D6\",\n                \"1D6×1D6\",\n                \"2D6\",\n                \"1D6×1D6\",\n                \"2D6×20\",\n                \"2D6×10\",\n                \"1D6×1D6\",\n                \"2D6×50\",\n                \"2D6×10\",\n                \"1D6×1D6\",\n                \"2D6×5\",\n                \"1D6×1D6\",\n              ]\n            ),\n            \"EP\" => YearTable.from_i18n(\n              \"Dracurouge.table.EP\",\n              locale,\n              [\n                \"1D66+1300\",\n                \"1D666\",\n                \"1D666\",\n                \"1D666\",\n                \"1D66+1250\",\n                \"1D666\",\n                \"3D6×100\",\n                \"2D6×100\",\n                \"1D66+1210\",\n                \"1D666\",\n                \"2D6×100\",\n                \"3D6×100\",\n                \"1D66+1300\",\n                \"2D6×100\",\n                \"1D6+1250\",\n                \"1D666\",\n                \"1D666\",\n                \"1D666\",\n                \"1D66+1250\",\n                \"2D6×100\",\n                \"1D666\",\n                \"3D6×100\",\n                \"2D6×100\",\n                \"2D6×100\",\n                \"1D6×150\",\n                \"2D6×100\",\n                \"1D66+1250\",\n                \"1D66+400\",\n                \"1212\",\n                \"2D6×100\",\n                \"2D6×100\",\n                \"1D66×10\",\n                \"3D6×100\",\n                \"3D6×100\",\n                \"1D66+1300\",\n                \"1D66+1833\",\n              ]\n            ),\n            \"OS\" => YearTable.from_i18n(\n              \"Dracurouge.table.OS\",\n              locale,\n              [\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"13+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"13+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"13+1D6×1D6\",\n                \"13+1D6×1D6\",\n                \"13+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"10+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"15+1D6×1D6\",\n                \"6+2D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"13+1D6×1D6\",\n                \"35+1D6×1D6\",\n                \"9+2D6\",\n                \"13+1D6×1D6\",\n                \"9+2D6\",\n                \"6+2D6\",\n                \"7+1D6×1D6\",\n                \"7+2D6\",\n                \"7+1D6×1D5\",\n                \"7+1D6×1D6\",\n                \"13+1D6×1D6\",\n                \"7+1D6×1D6\",\n              ]\n            ),\n            \"RS\" => YearTable.from_i18n(\n              \"Dracurouge.table.RS\",\n              locale,\n              [\n                \"2D6×10\",\n                \"1D6×1D6\",\n                \"1D6×1D6\",\n                \"1D6×1D6\",\n                \"3D6×30\",\n                \"3D6×30\",\n                \"2D6×10\",\n                \"2D6×10\",\n                \"2D6×10\",\n                \"2D6×10\",\n                \"2D6×20\",\n                \"1D6×1D6\",\n                \"1D6×1D6\",\n                \"1D6×1D6\",\n                \"1\",\n                \"2D6×10\",\n                \"2D6×20\",\n                \"1D6×1D6\",\n                \"1D6×1D6\",\n                \"3D6×30\",\n                \"3D6×20\",\n                \"1D6×1D6\",\n                \"3D6×30\",\n                \"3D6×20\",\n                \"1D6×1D6\",\n                \"1D6×1D6\",\n                \"1D6×1D6\",\n                \"1D6×1D6\",\n                \"1D6×10\",\n                \"2D6×10\",\n                \"3D6×50\",\n                \"1D6×1D6\",\n                \"3D6×20\",\n                \"2D6×10\",\n                \"1D6×1D6\",\n                \"3D6×50\",\n              ]\n            ),\n            \"PP\" => YearTable.from_i18n(\n              \"Dracurouge.table.PP\",\n              locale,\n              [\n                \"8+2D6\",\n                \"6+2D6\",\n                \"7+1D6×1D6\",\n                \"15+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"6+2D6\",\n                \"7+1D6×1D6\",\n                \"9+2D6\",\n                \"15+1D6×1D6\",\n                \"9+3D6\",\n                \"7+1D6×1D6\",\n                \"10+1D6×1D6\",\n                \"9+2D6\",\n                \"9+2D6\",\n                \"9+3D6\",\n                \"6+2D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"6+2D6\",\n                \"10+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"12+1D6×1D6\",\n                \"15+1D6×1D6\",\n                \"9+3D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"7+1D6×1D6\",\n                \"12+4D6\",\n              ]\n            ),\n            \"ST\" => DiceTable::D66Table.from_i18n(\"Dracurouge.table.ST\", locale),\n            \"PN\" => DiceTable::D66Table.from_i18n(\"Dracurouge.table.PN\", locale),\n            \"CS\" => DiceTable::Table.from_i18n(\"Dracurouge.table.CS\", locale),\n            \"ECS\" => DiceTable::D66Table.from_i18n(\"Dracurouge.table.ECS\", locale),\n            \"BT\" => DiceTable::Table.from_i18n(\"Dracurouge.table.BT\", locale),\n          }\n        end\n      end\n\n      TABLES = translate_tables(:ja_jp)\n\n      register_prefix('DR', 'RT', 'HRT', 'CT', TABLES.keys)\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:GameSystem>", "<class:Dracurouge>", "initialize", "command", "self", "@d66_sort_type", "D66SortType::NO_SORT", "D66SortType", "eval_game_system_specific_command", "$ret_or_1", "$ret_or_2", "$ret_or_3", "$ret_or_4", "$ret_or_5", "roll_conduct_dice", "roll_resist_dice", "getReactionDiceCommandResult", "getHeresyReactionDiceCommandResult", "getCorruptionDiceCommandResult", "roll_tables", "class::TABLES", "class", "private", "m", "match", "dice_count", "[]", "1", "4", "thirsty_point", "2", "to_i", "dice_list", "@randomizer", "roll_barabara", "6", "sort", "glory_dice", "count_glory_dice", "+", "Array", "new", "10", "calculation_process", "apply_thirsty_point", "sequence", "Format", "modifier", "join", "compact", "one_count", "count", "six_count", "/", "0", "idx", "rindex", "block in apply_thirsty_point", "i", "block (2 levels) in apply_thirsty_point", "<=", "text_list", "map", "to_proc", "[]=", "total", "sum", "=~", "typeText1", "Regexp", "last_match", "typeText2", "3", "name", "translate", "blood", "style", "getReactionText", "infos1", "infos2", "checkTypeText", "ten_value", "roll_once", "one_value", "number", "isBefore", "<", "infos", "typeText", "index", "-", "*", "debug", "nil?", "resultText", "getReactionTextFull", "info", "to_sym", "getReactionTex", "keys", "include?", "resultTexts", "each_value", "block in getReactionTextFull", "block (2 levels) in getReactionTextFull", "<<", "typeName", "text", "modify", "table", "5", "7", "8", "99", "number_text", "get_table_by_number", "<class:YearTable>", "from_i18n", "key", "locale", "years", "I18n", "items", "zip", "year_title", "@name", "@year_title", "@items", "freeze", "roll", "randomizer", "tens", "ones", "year_expr", "interim_expr", "gsub", "block in roll", "expr", "block (2 levels) in roll", "roll_d6x", "year", "ArithmeticEvaluator", "eval", "split", "times", "sides", "list", "block in roll_d6x", "block (2 levels) in roll_d6x", "with_index", "length", "reverse", "x", "block (3 levels) in roll_d6x", "**", "translate_tables", "YearTable", "DiceTable::D66Table", "DiceTable", "DiceTable::Table", "register_prefix", "TABLES", "Base"], :mappings=>"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"}}, {:offset=>{:line=>292, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Dracurouge_Korean.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/game_system/Dracurouge\"\n\nmodule BCDice\n  module GameSystem\n    class Dracurouge_Korean < Dracurouge\n      # ゲームシステムの識別子\n      ID = 'Dracurouge:Korean'\n\n      # ゲームシステム名\n      NAME = '드라크루주'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = '国際化:Korean:드라크루주'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・행동판정（DRx+y）\n        　x：굴리는 주사위의 수（생략시４）, y：갈증수정（생략시０）\n        　예） DR　DR6　DR+1　DR5+2\n        ・저항판정（DRRx）\n        　x：굴리는 주사위의\n        　예） DRR3\n        ・原風景表（ST）, 叙勲表（CO）, 叙勲後表（CA）, 遥か過去表（EP）\n        　原罪表（OS）, 受難表（PN）, 近況表（RS）, 平和な過去表（PP）\n        ・타락표（CTx） x：갈증（예） CT3\n        ・타락의 전조표（CS）, 拡張・堕落の兆し表（ECS）\n        ・인연 내용 결정표（BT）\n        ・반응표（RTxy）x：혈통, y：길　xy생략으로 일괄표시\n        　　혈통　D：드라크, R：로젠부르크, H：헬스가르드, M：더스트하임,\n        　　　　　A：아발롬　N：노스페라스\n        　　길　　F：영주, G：근위, R：방랑, W：현자, J：사냥꾼, N：야수\n        　예）RT（일괄표시）, RTDF（드라크 영주）, RTAN（아발롬 야수）\n        ・異端の反応表（HRTxy）x：血統, y：道　xy省略で一括表示\n        　血統　L：異端卿, V：ヴルコラク, N：ナハツェーラ, K：カルンシュタイン\n        　　　　G：グリマルキン, S：ストリガ, M：メリュジーヌ, F：フォーン\n        　　　　H：ホムンクルス, E：エナメルム, S2：サングィナリエ, A：アールヴ\n        　　　　V2：ヴィーヴル, L2：ルーガルー, A2：アルラウネ, F2：フリッガ\n        　道　W：野伏, N：流浪, S：密使, H：魔女, F：剣士, X：検体\n        ・D66 다이스 있음\n      MESSAGETEXT\n\n      register_prefix_from_super_class()\n\n      def initialize(command)\n        super(command)\n\n        @locale = :ko_kr\n      end\n\n      TABLES = translate_tables(:ko_kr)\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:Dracurouge_Korean>", "register_prefix_from_super_class", "initialize", "command", "@locale", "translate_tables", "Dracurouge"], :mappings=>"AAAAA,2BAAAA;EAAAA;;;EAEAC,IAAAC,SAAAA,CAAQF,+BAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;;QAEE,8BAAKA,mBAAL;QAGA,gCAAOA,OAAP;QAGA,oCAAWA,kBAAX;QAGA,wCACNA,gBADqB,GAErBA,qCAFqB,GAGrBA,yBAHqB,GAIrBA,eAJqB,GAKrBA,eALqB,GAMrBA,YANqB,GAOrBA,2CAPqB,GAQrBA,0CARqB,GASrBA,yBATqB,GAUrBA,gCAVqB,GAWrBA,kBAXqB,GAYrBA,mCAZqB,GAarBA,0CAbqB,GAcrBA,sBAdqB,GAerBA,4CAfqB,GAgBrBA,2CAhBqB,GAiBrBA,qCAjBqB,GAkBrBA,4CAlBqB,GAmBrBA,0CAnBqB,GAoBrBA,6CApBqB,GAqBrBA,6CArBqB,GAsBrBA,yCAtBqB,GAuBrBA,eAvBM;QA0BAJ,IAAAK,kCAAAA,CAAAA;;AAEAC,QAAAA,0BAAAA,sBAAeC,OAAfD;AAAAA,UAAAA;;UAAAA;;UACE,OAAAN,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAMO,OAAN,CAAA,EAAA,IAAA;UAEAD,OAAAE,CAAAA,cAAU,OAAVA;QAHFF,CAAAA;QAMAF,OAAA,kCAASJ,IAAAS,kBAAAA,CAAiB,OAAjBA,CAAT;MA7CFL,GAAAA,WAAAA,EAA0BM,gBAA1BN;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAJAH;"}}]}