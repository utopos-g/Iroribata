{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    # 表を表すクラス\n    class Table\n      # @param key [String]\n      # @param locale [Symbol]\n      # @return [Table]\n      def self.from_i18n(key, locale)\n        table = I18n.t(key, locale: locale)\n        new(table[:name], table[:type], table[:items])\n      end\n\n      # @param [String] name 表の名前\n      # @param [String] type 項目を選ぶときのダイスロールの方法 '1D6'など\n      # @param [Array<String>] items 表の項目の配列\n      def initialize(name, type, items)\n        @name = name\n        @items = items.freeze\n\n        m = /(\\d+)D(\\d+)/i.match(type)\n        unless m\n          raise ArgumentError, \"Unexpected table type: \#{type}\"\n        end\n\n        @times = m[1].to_i\n        @sides = m[2].to_i\n      end\n\n      # 表を振る\n      # @param [BCDice] bcdice ランダマイザ\n      # @return [String] 結果\n      def roll(bcdice)\n        value = bcdice.roll_sum(@times, @sides)\n        return choice(value)\n      end\n\n      def choice(value)\n        index = value - @times\n        return RollResult.new(@name, value, @items[index])\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:Table>", "from_i18n", "self", "key", "locale", "table", "I18n", "t", "new", "[]", "initialize", "name", "type", "items", "@name", "@items", "freeze", "m", "match", "raise", "ArgumentError", "@times", "1", "to_i", "@sides", "2", "roll", "bcdice", "value", "roll_sum", "choice", "index", "-", "RollResult"], :mappings=>"AAAAA,0CAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MAEEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAIEC,MAAIC,IAAJD,gBAAAA,qBAAmBE,GAAD,EAAMC,MAAxBH;AAAAA,UAAAA;;;UACEI,QAAQC,UAAIC,GAAAA,CAAGJ,GAAP,EAAY,oBAAA,UAAQC,MAAR,EAARG;UACZN,OAAAC,IAAAM,KAAAA,CAAIH,KAAKI,OAAAA,CAAC,MAADA,CAAT,EAAkBJ,KAAKI,OAAAA,CAAC,MAADA,CAAvB,EAAgCJ,KAAKI,OAAAA,CAAC,OAADA,CAArCD;QAFFP,CAAAA;;AAQAS,QAAAA,0BAAAA,sBAAeC,IAAD,EAAOC,IAAP,EAAaC,KAA3BH;AAAAA,UAAAA;;;UACEI,YAAQH;UACRI,aAASF,KAAKG,QAAAA,CAAAA;UAEdC,IAAI,cAAcC,OAAAA,CAAON,IAAPM;UAClB,KAAA,QAAOD,CAAP,CAAA;YACEf,IAAAiB,OAAAA,CAAMC,mBAAN,EAAsBV,yBAAD,GAAA,CAA0BE,IAA1B,CAArBO;UADF;UAIAE,aAASJ,CAACR,OAAAA,CAACa,CAADb,CAAGc,MAAAA,CAAAA;UACbb,OAAAc,CAAAA,aAASP,CAACR,OAAAA,CAACgB,CAADhB,CAAGc,MAAAA,CAAAA,CAAbC;QAVFd,CAAAA;;AAgBAgB,QAAAA,oBAAAA,gBAASC,MAATD;AAAAA,UAAAA;;;UACEE,QAAQD,MAAME,UAAAA,CAAUR,UAAhB,EAAwBG,UAAlBK;UACd,OAAO3B,IAAA4B,QAAAA,CAAOF,KAAPE;QAFTJ,CAAAA;QAKA1B,OAAA8B,sBAAAA,kBAAWF,KAAXE;AAAAA,UAAAA;;;UACEC,QAAcC,UAANJ,KAAMI,EAAEX,UAAFW;UACd,OAAOC,gBAAUzB,KAAAA,CAAKM,SAAf,EAAsBc,KAAtB,EAA6Bb,UAAMN,OAAAA,CAACsB,KAADtB,CAAzBD;QAFnBsB,CAAAA;MAjCF9B,GAAAA,WAAAA,EAAAA,IAAAA;IAFFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>61, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/format.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module Format\n    module_function\n\n    # 比較演算子を文字列表記にする\n    #\n    # @param op [Symbol]\n    # @return [String, nil]\n    def comparison_operator(op)\n      case op\n      when :==\n        \"=\"\n      when :'!='\n        \"<>\"\n      when Symbol\n        op.to_s\n      end\n    end\n\n    # 修正値を文字列表記にする\n    #\n    # @param number [Integer, nil]\n    # @return [String]\n    def modifier(number)\n      if number.nil?\n        nil\n      elsif number == 0\n        \"\"\n      elsif number > 0\n        \"+\#{number}\"\n      else\n        number.to_s\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:Format>", "self", "module_function", "comparison_operator", "op", "$ret_or_1", "Symbol", "to_s", "modifier", "number", "nil?", "0", ">"], :mappings=>"AAAAA,gCAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;;MACEC,IAAAC,iBAAAA,CAAAA;;AAMAC,MAAAA,mCAAAA,+BAAwBC,EAAxBD;AAAAA,QAAAA;;QAEE,IAAA,QAAK,IAAL,EADAE,CAAAA,YAAKD,EAALC,CACA,CAAA;UACEF,OAAAA;QADF,OAEA,IAAA,QAAK,IAAL,EAdN,SAcM,CAAA;UACEA,OAAAA;QADF,OAEA,IAAA,QAAKG,YAAL,EAhBN,SAgBM,CAAA;UACEH,OAAAC,EAAEG,MAAAA,CAAAA;QADJ;UALAJ,OAAA;QAKA;MANFA,CAAAA;MAeAH,OAAAQ,wBAAAA,oBAAaC,MAAbD;AAAAA;QACE,IAAA,QAAGC,MAAMC,SAAAA,CAAAA,CAAT,CAAA;UACEF,OAAA;QADF,OAEA,IAAA,MAAMC,MAAN,EAAgBE,CAAhB,CAAA;UACEH,OAAAA;QADF,OAEA,IAAA,QAAaI,OAAPH,MAAOG,EAAED,CAAFC,CAAb,CAAA;UACEJ,OAACA,GAAD,GAAA,CAAIC,MAAJ;QADF;UAGED,OAAAC,MAAMF,MAAAA,CAAAA;QAHR;MALFC,CAAAA;IAtBFR,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>106, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/TrinitySeven.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/dice_table/table\"\nrequire \"bcdice/format\"\n\nmodule BCDice\n  module GameSystem\n    class TrinitySeven < Base\n      # ゲームシステムの識別子\n      ID = 'TrinitySeven'\n\n      # ゲームシステム名\n      NAME = 'トリニティセブンRPG'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'とりにていせふんRPG'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        クリティカルが変動した命中及び、7の出目がある場合のダメージ計算が行なえます。\n        なお、通常の判定としても利用できます。\n\n        ・発動/命中　［TR(±c*)<=(x)±(y*) 又は TR<=(x) など］*は必須ではない項目です。\n        \"TR(クリティカルの修正値*)<=(発動/命中)±(発動/命中の修正値*)\"\n        加算減算のみ修正値も付けられます。 ［修正値］は必須ではありません。\n        例）TR<=50 TR<=60+20 TR7<=40 TR-7<=80 TR+10<=80+20\n\n        ・ダメージ計算　［(x)DM(c*)±(y*) 又は (x)DM(c*) 又は (x)DM±(y*)］*は必須ではない項目です。\n        \"(ダイス数)DM(7の出目の数*)+(修正*)\"\n        加算減算のみ修正値も付けられます。 ［7の出目の数］および［修正値］は必須ではありません。\n        例）6DM2+1 5DM2 4DM 3DM+3\n        後から7の出目に変更する場合はC(7*6＋5)のように入力して計算してください。\n\n        ・名前表　[TRNAME]\n        名字と名前を出します。PCや突然現れたNPCの名付けにどうぞ。\n\n      MESSAGETEXT\n\n      register_prefix('\\d+DM', 'TR', 'TRNAME')\n\n      def eval_game_system_specific_command(command) # スパゲッティなコードだけど許して！！！ → 絶対に許さない。全力でリファクタリングした。\n        debug(\"eval_game_system_specific_command command\", command)\n\n        roll_hit(command) ||\n          roll_damage(command) ||\n          roll_name(command)\n      end\n\n      def roll_hit(command)\n        parser = Command::Parser.new(/TR\\d*/, round_type: round_type)\n                                .restrict_cmp_op_to(:<=)\n        cmd = parser.parse(command)\n        return nil unless cmd\n\n        modify = cmd.command[2..-1].to_i + cmd.modify_number\n        critical = 7 + modify\n        target = cmd.target_number\n\n        total = @randomizer.roll_once(100)\n        result = get_hit_roll_result(total, target, critical)\n\n        cmd.command = \"TR\"\n        cmd.modify_number = modify\n\n        result.text = \"(\#{cmd}) ＞ \#{total} ＞ \#{result.text}\"\n        debug(\"eval_game_system_specific_command result text\", result.text)\n\n        result\n      end\n\n      def get_hit_roll_result(total, target, critical)\n        if total >= 96\n          Result.fumble(\"ファンブル\")\n        elsif total <= critical\n          Result.critical(\"クリティカル\")\n        elsif total <= target\n          Result.success(\"成功\")\n        else\n          Result.failure(\"失敗\")\n        end\n      end\n\n      def roll_damage(command)\n        parser = Command::Parser.new(/\\d+DM\\d*/, round_type: round_type)\n                                .restrict_cmp_op_to(nil)\n        cmd = parser.parse(command)\n        return nil unless cmd\n\n        dice_count, critical = cmd.command.split(\"DM\", 2).map(&:to_i)\n        modify = cmd.modify_number\n\n        dice_list = @randomizer.roll_barabara(dice_count, 6).sort\n        dice_text = dice_list.join(\",\")\n\n        total, additionalList = get_roll_damage_result(dice_count, critical, dice_list, modify)\n\n        additionalListText = additionalList.nil? ? \"\" : \"→[\#{additionalList.join(',')}]\"\n\n        text = \"(\#{cmd}) ＞ [\#{dice_text}]\#{additionalListText}\#{Format.modifier(modify)} ＞ \#{total}\"\n\n        return text\n      end\n\n      def get_roll_damage_result(diceCount, critical, diceList, modify)\n        if critical <= 0\n          total = diceList.sum() + modify\n          return total, nil\n        end\n\n        restDice = diceList.clone\n\n        critical = diceCount if critical > diceCount\n\n        critical.times do\n          restDice.shift\n          diceList.shift\n          diceList.push(7)\n        end\n\n        max = restDice.pop\n        max = 1 if max.nil?\n\n        total = max * (7**critical) + restDice.sum() + modify\n\n        return total, diceList\n      end\n\n      def result_1d100(_total, dice_total, _cmp_op, _target)\n        if dice_total >= 96\n          Result.fumble(\"ファンブル\")\n        elsif dice_total <= 7\n          Result.critical(\"クリティカル\")\n        end\n      end\n\n      def roll_name(command)\n        unless command == \"TRNAME\"\n          return nil\n        end\n\n        first_name = NAME1.roll(@randomizer).last_body\n        second_name = NAME2.roll(@randomizer).last_body\n\n        text = \"\#{first_name} , \#{second_name}\"\n        return text\n      end\n\n      NAME1 = DiceTable::Table.new(\n        \"名字表\",\n        \"1D100\",\n        [\n          '春日', # 1\n          '浅見',\n          '風間',\n          '神無月',\n          '倉田',\n          '不動',\n          '山奈',\n          'シャルロック',\n          '霧隠',\n          '果心', # 10\n          '今井',\n          '長瀬',\n          '明智',\n          '風祭',\n          '志貫',\n          '一文字',\n          '月夜野',\n          '桜田門',\n          '果瀬',\n          '九十九', # 20\n          '速水',\n          '片桐',\n          '葉月',\n          'ウィンザー',\n          '時雨里',\n          '神城',\n          '水際',\n          '一ノ江',\n          '仁藤',\n          '北千住', # 30\n          '西村',\n          '諏訪',\n          '藤宮',\n          '御代',\n          '橘',\n          '霧生',\n          '白石',\n          '椎名',\n          '綾小路',\n          '二条', # 40\n          '光明寺',\n          '春秋',\n          '雪見',\n          '刀条院',\n          'ランカスター',\n          'ハクア',\n          'エルタニア',\n          'ハーネス',\n          'アウグストゥス',\n          '椎名町', # 50\n          '鍵守',\n          '茜ヶ崎',\n          '鎮宮',\n          '美柳',\n          '鎖々塚',\n          '櫻ノ杜',\n          '鏡ヶ守',\n          '輝井',\n          '南陽',\n          '雪乃城', # 60\n          '六角屋',\n          '鈴々',\n          '東三条',\n          '朱雀院',\n          '青龍院',\n          '白虎院',\n          '玄武院',\n          '麒麟院',\n          'リーシュタット',\n          'サンクチュアリ', # 70\n          '六実',\n          '須藤',\n          'ミレニアム',\n          '七里',\n          '三枝',\n          '八殿',\n          '藤里',\n          '久宝',\n          '東',\n          '赤西', # 80\n          '神ヶ崎',\n          'グランシア',\n          'ダークブーレード',\n          '天光寺',\n          '月見里',\n          '璃宮',\n          '藤見澤',\n          '赤聖',\n          '姫宮',\n          '華ノ宮', # 90\n          '\"天才\"',\n          '\"達人\"',\n          '\"賢者\"',\n          '\"疾風\"',\n          '\"海の\"',\n          '\"最強\"',\n          '\"凶器\"',\n          '\"灼熱\"',\n          '\"人間兵器\"',\n          '\"魔王\"', # 100\n        ]\n      )\n\n      NAME2 = DiceTable::Table.new(\n        \"名字表\",\n        \"1D100\",\n        [\n          'アラタ/聖', # 1\n          'アビィス/リリス',\n          'ルーグ/レヴィ',\n          'ラスト/アリン',\n          'ソラ/ユイ',\n          'イーリアス/アキオ',\n          'アカーシャ/ミラ',\n          'アリエス/リーゼロッテ',\n          'ムラサメ/シャルム',\n          '龍貴/竜姫',  # 10\n          '英樹/春菜',\n          '準一/湊',\n          '急司郎/光理',\n          '夕也/愛奈',\n          '晴彦/アキ',\n          '疾風/ヤシロ',\n          'カガリ/灯花',\n          '次郎/優都',\n          '春太郎/静理',\n          'ジン/時雨',  # 20\n          'イオリ/伊織',\n          'ユウヒ/優姫',\n          'サツキ/翠名',\n          'シュライ/サクラ',\n          'ミナヅキ/姫乃',\n          'カエデ/優樹菜',\n          'ハル/フユ',\n          'ドール/瑞江',\n          'ニトゥレスト/キリカ',\n          'スカー/綾瀬',  # 30\n          '真夏/小夏',\n          '光一/ののか',\n          '彩/翠',\n          'トウカ/柊花',\n          '命/ミコト',\n          '司/つかさ',\n          'ゆとり/なごみ',\n          '冬彦/観月',\n          'カレン/華恋',\n          '清次郎/亜矢',  # 40\n          'サード/夢子',\n          'ボックス/詩子',\n          'ヘリオス/カエデ',\n          'ゲート/京香',\n          'オンリー/パトリシア',\n          'ザッハーク/アーリ',\n          'ラスタバン/ラスティ',\n          '桜花/燁澄',\n          '計都/リヴィア',\n          'カルヴァリオ/香夜', # 50\n          '悠人/夜々子',\n          '太子/羽菜',\n          '夕立/夕凪',\n          'アルフ/愛美',\n          'ファロス/灯利',\n          'スプートニク/詩姫',\n          'アーネスト/累',\n          'ナイン/カグヤ',\n          'クリア/ヒマワリ',\n          'ウォーカー/オリビア', # 60\n          'ダーク/クオン',\n          'ウェイヴ/凛',\n          'ルーン/マリエ',\n          'エンギ/セイギ',\n          'シラヌイ/ミライ',\n          'ブライン/キズナ',\n          'クロウ/カナタ',\n          'スレイヤー/ヒカル',\n          'レス/ミリアリア',\n          'ミフユ/サリエル', # 70\n          '鳴央/音央',\n          'モンジ/理亜',\n          'パルデモントゥム/スナオ',\n          'ミシェル/詩穂',\n          'フレンズ/サン',\n          'サトリ/識',\n          'ロード/唯花',\n          'クロノス/久宝',\n          'フィラデルフィア/冬海',\n          'ティンダロス/美星',  # 80\n          '勇弥/ユーリス',\n          'エイト/アンジェラ',\n          'サタン/ルシエル',\n          'エース/小波',\n          'セージ/胡蝶',\n          '忍/千之',\n          '重吾/キリコ',\n          'マイケル/ミホシ',\n          'カズマ/鶴香',\n          'ヤマト/エリシエル',  # 90\n          '歴史上の人物の名前（信長、ジャンヌなど）',\n          'スポーツ選手の名前（ベッカム、沙保里など）',\n          '学者の名前（ソクラテス、エレナなど）',\n          'アイドルの名前（タクヤ、聖子など）',\n          '土地、国、町の名前（イングランド、ワシントンなど）',\n          'モンスターの名前（ドラゴン、ラミアなど）',\n          '武器防具の名前（ソード、メイルなど）',\n          '自然現象の名前（カザンハリケーンなど）',\n          '機械の名前（洗濯機、テレビなど）',\n          '目についた物の名前（シャーペン、メガネなど）', # 100\n        ]\n      )\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:TrinitySeven>", "register_prefix", "eval_game_system_specific_command", "command", "debug", "$ret_or_1", "$ret_or_2", "roll_hit", "roll_damage", "roll_name", "parser", "Command::Parser", "Command", "new", "round_type", "restrict_cmp_op_to", "cmd", "parse", "modify", "+", "[]", "2", "-1", "to_i", "modify_number", "critical", "7", "target", "target_number", "total", "@randomizer", "roll_once", "100", "result", "get_hit_roll_result", "command=", "modify_number=", "text=", "text", ">=", "96", "Result", "fumble", "<=", "success", "failure", "map", "split", "to_proc", "dice_count", "dice_list", "roll_barabara", "6", "sort", "dice_text", "join", "get_roll_damage_result", "additionalList", "additionalListText", "nil?", "Format", "modifier", "diceCount", "diceList", "0", "sum", "restDice", "clone", ">", "times", "block in get_roll_damage_result", "shift", "block (2 levels) in get_roll_damage_result", "push", "max", "pop", "1", "*", "**", "result_1d100", "_total", "dice_total", "_cmp_op", "_target", "first_name", "NAME1", "roll", "last_body", "second_name", "NAME2", "DiceTable::Table", "DiceTable", "Base"], :mappings=>"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"}}]}