{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/WerewolfTheApocalypse5th.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class WerewolfTheApocalypse5th < Base\n      # ゲームシステムの識別子\n      ID = 'WerewolfTheApocalypse5th'\n\n      # ゲームシステム名\n      NAME = 'Werewolf: The Apocalypse 5th Edition'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'わあうふるしあほかりふす5'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・判定コマンド(nWAFx+x または nWAIxRx)\n          WAFコマンドはRageダイスとダイスプールを個別に指定する。\n          WAIコマンドはRageダイスをダイスプールの内数として指定する。\n\n            例：難易度2、9ダイスプールでRageダイス3個の場合、それぞれ以下のようなコマンドとなる。\n            2WAF6+3\n            2WAI9R3\n\n          難易度指定：成功数のカウント、判定成功と失敗、（Rageダイスがある場合）Brutal outcome、Critical処理、Total Failure、Critical Winのチェックを行う\n          例) (難易度)WAF(通常ダイス)+(Rageダイス)\n              (難易度)WAF(通常ダイス)\n              (難易度)WAI(通常ダイス)R(Rageダイス)\n              (難易度)WAI(通常ダイス)\n\n          難易度省略：成功数のカウント、判定失敗、（Rageダイスがある場合）Brutal outcome、Critical処理、Total Failureのチェックを行う\n                      判定成功チェックを行わない\n                      Critical Winのヒントを出力\n          例) WAF(通常ダイス)+(Rageダイス)\n              WAF(通常ダイス)\n              WAI(通常ダイス)R(Rageダイス)\n              WAI(通常ダイス)\n\n          難易度0指定：Critical処理と成功数のカウントを行い、全てのチェックを行わない\n          例) 0WAF(通常ダイス)+(Rageダイス)\n              0WAF(通常ダイス)\n              0WAI(通常ダイス)+(Rageダイス)\n              0WAI(通常ダイス)\n\n      MESSAGETEXT\n\n      DIFFICULTY_INDEX                          = 1\n      DICE_POOL_RAGE_DICE_NO_INCLUDED_INDEX     = 5\n      RAGE_DICE_NO_INCLUDED_INDEX               = 7\n      COMMAND_RAGE_DICE_INCLUDED_INDEX          = 9\n      DICE_POOL_RAGE_DICE_INCLUDED_INDEX        = 10\n      RAGE_DICE_INCLUDED_INDEX                  = 12\n\n      # 難易度に指定可能な特殊値\n      NOT_CHECK_SUCCESS = -1 # 判定成功にかかわるチェックを行わない(判定失敗に関わるチェックは行う)\n\n      register_prefix('\\d*(WAF|(WAI\\d*(R\\d?)?))')\n\n      def eval_game_system_specific_command(command)\n        m = /\\A(\\d+)?(((WAF)(\\d+)(\\+(\\d+))?)|((WAI)(\\d+)(R(\\d+))?))$/.match(command)\n        unless m\n          return ''\n        end\n\n        dice_pool, rage_dice_pool = get_dice_pools(m)\n        if dice_pool < 0\n          return \"ダイスプール0のときにRageダイスは指定できません。\"\n        end\n        if rage_dice_pool > 5\n          return \"5を超えるRageダイス指定はできません。\"\n        end\n\n        dice_text, success_dice, ten_dice, = make_dice_roll(dice_pool)\n        result_text = \"(\#{dice_pool}D10\"\n\n        if rage_dice_pool >= 0\n          rage_dice_text, rage_success_dice, rage_ten_dice, brutal_result_dice = make_dice_roll(rage_dice_pool)\n\n          brutal_outcome = (brutal_result_dice / 2).floor\n          ten_dice += rage_ten_dice\n          success_dice += rage_success_dice\n\n          result_text = \"\#{result_text}+\#{rage_dice_pool}D10) ＞ [\#{dice_text}]+[\#{rage_dice_text}] \"\n        else\n          rage_ten_dice = 0\n          brutal_outcome = 0\n          result_text = \"\#{result_text}) ＞ [\#{dice_text}] \"\n        end\n\n        success_dice += get_critical_success(ten_dice)\n\n        difficulty = m[DIFFICULTY_INDEX] ? m[DIFFICULTY_INDEX].to_i : NOT_CHECK_SUCCESS\n\n        return get_roll_result(result_text, success_dice, ten_dice, rage_ten_dice, brutal_outcome, difficulty)\n      end\n\n      private\n\n      def get_dice_pools(m)\n        rage_dice_included_command = m[COMMAND_RAGE_DICE_INCLUDED_INDEX]\n        if rage_dice_included_command && rage_dice_included_command == \"WAI\"\n          # Rage Diceを内数処理するの場合\n          rage_dice_pool = m[RAGE_DICE_INCLUDED_INDEX].nil? ? -1 : m[RAGE_DICE_INCLUDED_INDEX].to_i\n          dice_pool_value = m[DICE_POOL_RAGE_DICE_INCLUDED_INDEX].to_i\n          dice_pool = dice_pool_value - (rage_dice_pool < 0 ? 0 : rage_dice_pool)\n          if dice_pool_value > 0 && rage_dice_pool >= dice_pool_value\n            # 1 以上のダイスプール、かつ、Rageダイスがダイスプール以上のとき、ダイスプールが全てRageダイスになる。\n            dice_pool = 0\n            rage_dice_pool = dice_pool_value\n          end\n        else\n          # Rage DiceがPLによる内数指定の場合\n          rage_dice_pool = m[RAGE_DICE_NO_INCLUDED_INDEX].nil? ? -1 : m[RAGE_DICE_NO_INCLUDED_INDEX].to_i\n          dice_pool = m[DICE_POOL_RAGE_DICE_NO_INCLUDED_INDEX].to_i\n        end\n        return dice_pool, rage_dice_pool\n      end\n\n      def get_roll_result(result_text, success_dice, ten_dice, _rage_ten_dice, brutal_outcome, difficulty)\n        is_critical = ten_dice >= 2\n\n        if brutal_outcome > 0 && difficulty != 0\n          success_dice += 4\n          result_text = \"\#{result_text} [Brutal outcome] 自動失敗、または 成功数=\#{success_dice}\"\n        else\n          result_text = \"\#{result_text} 成功数=\#{success_dice}\"\n        end\n\n        if difficulty > 0\n          result_text = \"\#{result_text} 難易度=\#{difficulty}\"\n          if success_dice >= difficulty\n            result_text = \"\#{result_text} 差分=\#{success_dice - difficulty}\"\n\n            if is_critical\n              result_data = Result.critical(\"\#{result_text}：判定成功! [Critical Win]\")\n              return brutal_outcome > 0 ? result_data.text : result_data\n            end\n            result_data = Result.success(\"\#{result_text}：判定成功!\")\n            return brutal_outcome > 0 ? result_data.text : result_data\n          else\n            if success_dice == 0\n              return Result.fumble(\"\#{result_text}：判定失敗! [Total Failure]\")\n            else\n              return Result.failure(\"\#{result_text}：判定失敗!\")\n            end\n          end\n        elsif difficulty < 0\n          if success_dice == 0\n            return Result.fumble(\"\#{result_text}：判定失敗! [Total Failure]\")\n          else\n            if is_critical\n              result_text = \"\#{result_text}\\n　判定成功なら [Critical Win]\"\n            end\n            return result_text.to_s\n          end\n        end\n\n        # 難易度0指定(=全ての判定チェックを行わない)\n        return result_text.to_s\n      end\n\n      def get_critical_success(ten_dice)\n        # 10の目が2個毎に追加2成功\n        return ((ten_dice / 2).floor * 2)\n      end\n\n      def make_dice_roll(dice_pool)\n        dice_list = @randomizer.roll_barabara(dice_pool, 10)\n\n        dice_text = dice_list.join(',')\n        success_dice = dice_list.count { |x| x >= 6 }\n        ten_dice = dice_list.count(10)\n        brutal_result_dice = dice_list.count(1) + dice_list.count(2)\n\n        return dice_text, success_dice, ten_dice, brutal_result_dice\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:WerewolfTheApocalypse5th>", "1", "5", "7", "9", "10", "12", "-1", "self", "register_prefix", "eval_game_system_specific_command", "command", "m", "match", "get_dice_pools", "dice_pool", "rage_dice_pool", "<", "0", ">", "make_dice_roll", "dice_text", "success_dice", "ten_dice", "result_text", ">=", "rage_dice_text", "rage_success_dice", "rage_ten_dice", "brutal_result_dice", "brutal_outcome", "/", "2", "floor", "+", "get_critical_success", "difficulty", "[]", "DIFFICULTY_INDEX", "to_i", "NOT_CHECK_SUCCESS", "get_roll_result", "private", "rage_dice_included_command", "COMMAND_RAGE_DICE_INCLUDED_INDEX", "RAGE_DICE_INCLUDED_INDEX", "nil?", "dice_pool_value", "DICE_POOL_RAGE_DICE_INCLUDED_INDEX", "-", "RAGE_DICE_NO_INCLUDED_INDEX", "DICE_POOL_RAGE_DICE_NO_INCLUDED_INDEX", "_rage_ten_dice", "is_critical", "4", "result_data", "Result", "critical", "text", "success", "fumble", "failure", "to_s", "*", "dice_list", "@randomizer", "roll_barabara", "join", "count", "block in make_dice_roll", "x", "block (2 levels) in make_dice_roll", "6", "Base"], :mappings=>"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"}}]}