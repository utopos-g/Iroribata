{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/OrgaRain.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class OrgaRain < Base\n      # ゲームシステムの識別子\n      ID = 'OrgaRain'\n\n      # ゲームシステム名\n      NAME = '在りて遍くオルガレイン'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'ありてあまねくおるかれいん'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        判定：[n]OR(count)\n\n        []内のコマンドは省略可能。\n        「n」でダイス数を指定。省略時は「1」。\n        (count)で命数を指定。「3111」のように記述。最大6つ。順不同可。\n\n        【書式例】\n        ・5OR6042 → 5dで命数「0,2,4,6」の判定\n        ・6OR33333 → 6dで命数「3,3,3,3,3」の判定。\n      MESSAGETEXT\n\n      def initialize(command)\n        super(command)\n        @sort_add_dice = true # ダイスのソート有\n      end\n\n      register_prefix(\n        '(\\d+)?OR(\\d{0,6})?'\n      )\n\n      def eval_game_system_specific_command(command)\n        m = command.match(/(\\d+)?OR(\\d{0,6})$/i)\n        return nil unless m\n\n        dice_count = (m[1] || 1).to_i\n        count_no = (m[2] || \"\").each_char.map(&:to_i).sort\n        return check_roll(dice_count, count_no)\n      end\n\n      def check_roll(dice_count, count_no)\n        dice_array = @randomizer.roll_barabara(dice_count, 10).sort\n        dice_text = dice_array.join(',')\n\n        result_array = []\n        success = 0\n        dice_array.map { |x| x == 10 ? 0 : x }.each do |i|\n          multiple = count_no.count(i)\n          if multiple > 0\n            result_array.push(\"\#{i}(x\#{multiple})\")\n            success += multiple\n          else\n            result_array.push(\"×\")\n          end\n        end\n\n        count_text = count_no.join(',')\n        result_text = result_array.join(',')\n\n        return \"\#{dice_count}D10(命数：\#{count_text}) ＞ \#{dice_text} ＞ \#{result_text} ＞ 成功数：\#{success}\"\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:OrgaRain>", "initialize", "command", "self", "@sort_add_dice", "register_prefix", "eval_game_system_specific_command", "m", "match", "dice_count", "$ret_or_1", "[]", "1", "to_i", "count_no", "map", "2", "each_char", "to_proc", "sort", "check_roll", "dice_array", "@randomizer", "roll_barabara", "10", "dice_text", "join", "result_array", "success", "0", "each", "block in check_roll", "x", "block (2 levels) in check_roll", "i", "multiple", "count", ">", "push", "+", "count_text", "result_text", "Base"], :mappings=>"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"}}]}