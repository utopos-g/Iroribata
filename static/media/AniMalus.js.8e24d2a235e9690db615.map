{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/AniMalus.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class AniMalus < Base\n      # ゲームシステムの識別子\n      ID = 'AniMalus'\n\n      # ゲームシステム名\n      NAME = 'アニマラス'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'あにまらす'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGETEXT\n        ■ステータスのダイス判定　n[+-b]AM<=t,x        n:能力値 b:修正値(省略可能) t:成功値 x:必要成功数\n        例)3AM<=2,1: ダイスを3個振って、成功値2,必要成功数1で判定。その結果(成功数,成功・失敗,クリティカル,ファンブル)を表示\n\n        ■探索技能のダイス判定　[+-b]AI<=t,x        t:探索技能レベル b:修正値(省略可能) x:必要成功数\n        例)AI<=3,1: ダイスを3個振って、探索技能レベル3,必要成功数1で判定。その結果(成功数,成功・失敗,クリティカル,ファンブル)を表示\n\n        ■攻撃判定　[+-b]AA<=t       t:戦闘技能レベル b:修正値(省略可能)\n        例)AA<=3: ダイスを3個振って、戦闘技能レベル3で判定。その結果(成功・失敗,ダメージ,クリティカル,ファンブル)を表示\n\n        ■防御判定　[+-b]AG=t        t:攻撃技能レベル b:修正値(省略可能)\n        例)AG=2: ダイスを3個振って、攻撃技能レベル2で判定。その結果(成功・失敗,ダメージ軽減,クリティカル,ファンブル)を表示\n\n        ■回避判定　[+-b]AD=t        t:攻撃技能レベル b:修正値(省略可能)\n        例)AD=3: ダイスを1個振って、攻撃技能レベル3で判定。その結果(成功・失敗)を表示\n      INFO_MESSAGETEXT\n\n      register_prefix('[-+\\d]*A[MIAGD]')\n\n      def initialize(command)\n        super(command)\n\n        @sort_barabara_dice = true # バラバラロール（Bコマンド）でソート有\n      end\n\n      def eval_game_system_specific_command(command)\n        resolute_action(command) ||\n          resolute_investigation(command) ||\n          resolute_attacking(command) ||\n          resolute_guarding(command) ||\n          resolute_dodging(command)\n      end\n\n      private\n\n      def with_symbol(number)\n        if number == 0\n          return \"\"\n        elsif number > 0\n          return \"+\#{number}\"\n        else\n          return number.to_s\n        end\n      end\n\n      # ステータスの判定\n      # @param [String] command\n      # @return [Result]\n      def resolute_action(command)\n        m = /^(\\d+)([-+]\\d+)?AM<=(\\d+),(\\d)$/.match(command)\n        return nil unless m\n\n        num_dice = m[1].to_i\n        num_bonus = m[2].to_i\n        num_target = m[3].to_i\n        num_success = m[4].to_i\n\n        dice = @randomizer.roll_barabara(num_dice + num_bonus, 6).sort\n        dice_text = dice.join(\",\")\n        success_num = dice.count { |val| val <= num_target }\n        is_critical = dice.include?(1) && dice.include?(2) && dice.include?(3)\n        is_fumble = dice.include?(4) && dice.include?(5) && dice.include?(6)\n\n        return Result.new.tap do |result|\n          result.critical = is_critical\n          result.fumble = is_fumble\n          result.condition = (success_num >= num_success)\n\n          sequence = [\n            \"(\#{num_dice}\#{with_symbol(num_bonus)}AM<=\#{num_target},\#{num_success})\",\n            dice_text,\n            \"成功数\#{success_num}\",\n            if result.success?\n              \"成功\"\n            else\n              \"失敗\"\n            end\n          ].compact\n          sequence.push(\"クリティカル\") if result.critical?\n          sequence.push(\"ファンブル\") if result.fumble?\n\n          result.text = sequence.join(\" ＞ \")\n        end\n      end\n\n      # 探索技能の判定\n      # @param [String] command\n      # @return [Result]\n      def resolute_investigation(command)\n        m = /^([-+]\\d+)?AI<=(\\d+),(\\d)$/.match(command)\n        return nil unless m\n\n        num_bonus = m[1].to_i\n        num_target = m[2].to_i\n        num_success = m[3].to_i\n\n        dice = @randomizer.roll_barabara(3 + num_bonus, 6).sort\n        dice_text = dice.join(\",\")\n        success_num = dice.count { |val| val <= num_target }\n        is_critical = dice.include?(1) && dice.include?(2) && dice.include?(3)\n        is_fumble = dice.include?(4) && dice.include?(5) && dice.include?(6)\n\n        return Result.new.tap do |result|\n          result.critical = is_critical\n          result.fumble = is_fumble\n          result.condition = (success_num >= num_success)\n\n          sequence = [\n            \"(\#{with_symbol(num_bonus)}AI<=\#{num_target},\#{num_success})\",\n            dice_text,\n            \"成功数\#{success_num}\",\n            if result.success?\n              \"成功\"\n            else\n              \"失敗\"\n            end\n          ].compact\n          sequence.push(\"クリティカル\") if result.critical?\n          sequence.push(\"ファンブル\") if result.fumble?\n\n          result.text = sequence.join(\" ＞ \")\n        end\n      end\n\n      # 攻撃技能の判定\n      # @param [String] command\n      # @return [Result]\n      def resolute_attacking(command)\n        m = /^([-+]\\d+)?AA<=(\\d+)$/.match(command)\n        return nil unless m\n\n        num_bonus = m[1].to_i\n        num_target = m[2].to_i\n\n        dice = @randomizer.roll_barabara(3 + num_bonus, 6).sort\n        dice_text = dice.join(\",\")\n        success_num = dice.count { |val| val <= num_target }\n        is_critical = dice.include?(1) && dice.include?(2) && dice.include?(3)\n        is_fumble = dice.include?(4) && dice.include?(5) && dice.include?(6)\n\n        damage1 = dice.max\n        damage2 = dice.max\n        (1..num_target).each do |idx|\n          if dice.count(idx) > 1\n            now_damage = damage1 + 3 * (dice.count(idx) - 1)\n            damage2 = now_damage if damage2 < now_damage\n          end\n        end\n\n        return Result.new.tap do |result|\n          result.critical = is_critical\n          result.fumble = is_fumble\n          result.condition = (success_num > 0)\n\n          sequence = [\n            \"(\#{with_symbol(num_bonus)}AA<=\#{num_target})\",\n            dice_text,\n            \"成功数\#{success_num}\",\n            if result.success?\n              \"成功\"\n            else\n              \"失敗\"\n            end\n          ].compact\n          if result.success?\n            sequence.push(\"最大ダメージ(\#{damage2})\")\n          end\n          sequence.push(\"クリティカル\") if result.critical?\n          sequence.push(\"ファンブル\") if result.fumble?\n\n          result.text = sequence.join(\" ＞ \")\n        end\n      end\n\n      # 防御技能の判定\n      # @param [String] command\n      # @return [Result]\n      def resolute_guarding(command)\n        m = /^([-+]\\d+)?AG=(\\d+)$/.match(command)\n        return nil unless m\n\n        num_bonus = m[1].to_i\n        num_target = m[2].to_i\n\n        dice = @randomizer.roll_barabara(3 + num_bonus, 6).sort\n        dice_text = dice.join(\",\")\n        success_num = dice.count(num_target)\n        is_critical = dice.include?(1) && dice.include?(2) && dice.include?(3)\n        is_fumble = dice.include?(4) && dice.include?(5) && dice.include?(6)\n\n        return Result.new.tap do |result|\n          result.critical = is_critical\n          result.fumble = is_fumble\n          result.condition = (success_num > 0)\n\n          sequence = [\n            \"(\#{with_symbol(num_bonus)}AG=\#{num_target})\",\n            dice_text,\n            \"成功数\#{success_num}\",\n            if result.success?\n              \"成功 ＞ ダメージ軽減(\#{success_num * 2})\"\n            else\n              \"失敗\"\n            end\n          ].compact\n          sequence.push(\"クリティカル\") if result.critical?\n          sequence.push(\"ファンブル\") if result.fumble?\n\n          result.text = sequence.join(\" ＞ \")\n        end\n      end\n\n      # 回避技能の判定\n      # @param [String] command\n      # @return [Result]\n      def resolute_dodging(command)\n        m = /^([-+]\\d+)?AD=(\\d+)$/.match(command)\n        return nil unless m\n\n        num_bonus = m[1].to_i\n        num_target = m[2].to_i\n\n        dice = @randomizer.roll_barabara(1 + num_bonus, 6)\n        dice_text = dice.join(\",\")\n        success_num = dice.count(num_target)\n\n        return Result.new.tap do |result|\n          result.condition = (success_num > 0)\n\n          sequence = [\n            \"(\#{with_symbol(num_bonus)}AD=\#{num_target})\",\n            dice_text,\n            \"成功数\#{success_num}\",\n            if result.success?\n              \"成功(ダメージ無効)\"\n            else\n              \"失敗\"\n            end\n          ].compact\n\n          result.text = sequence.join(\" ＞ \")\n        end\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:AniMalus>", "self", "register_prefix", "initialize", "command", "@sort_barabara_dice", "eval_game_system_specific_command", "$ret_or_1", "$ret_or_2", "$ret_or_3", "$ret_or_4", "resolute_action", "resolute_investigation", "resolute_attacking", "resolute_guarding", "resolute_dodging", "private", "with_symbol", "number", "0", ">", "to_s", "m", "match", "num_dice", "[]", "1", "to_i", "num_bonus", "2", "num_target", "3", "num_success", "4", "dice", "@randomizer", "roll_barabara", "+", "6", "sort", "dice_text", "join", "success_num", "count", "block in resolute_action", "val", "block (2 levels) in resolute_action", "<=", "is_critical", "include?", "is_fumble", "5", "tap", "Result", "new", "result", "critical=", "fumble=", "condition=", ">=", "sequence", "success?", "compact", "critical?", "push", "fumble?", "text=", "block in resolute_investigation", "block (2 levels) in resolute_investigation", "block in resolute_attacking", "block (2 levels) in resolute_attacking", "damage1", "max", "damage2", "each", "idx", "now_damage", "*", "-", "<", "block in resolute_guarding", "block (2 levels) in resolute_guarding", "block in resolute_dodging", "block (2 levels) in resolute_dodging", "Base"], :mappings=>"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"}}]}