{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Irisbane.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Irisbane < Base\n      # ゲームシステムの識別子\n      ID = 'Irisbane'\n\n      # ゲームシステム名\n      NAME = '瞳逸らさぬイリスベイン'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'ひとみそらさぬいりすへいん'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~HELP\n        ■攻撃判定（ ATTACKx@y<=z ）\n        x: 攻撃力\n        y: 判定数\n        z: 目標値\n        （※ ATTACK は ATK または AT と簡略化可能）\n        例） ATTACK2@3<=5\n        例） ATK10@2<=4\n        例） AT8@3<=2\n\n        上記 x y z にはそれぞれ四則演算を指定可能。\n        例） ATTACK2+7@3*2<=5-1\n\n        □攻撃判定のダメージ増減（ ATTACKx@y<=z[+a]  ATTACKx@y<=z[-a]）\n        末尾に [+a] または [-a] と指定すると、最終的なダメージを増減できる。\n        a: 増減量\n        例） ATTACK2@3<=5[+10]\n        例） ATK10@2<=4[-8]\n        例） AT8@3<=2[-8+5]\n\n        ■シチュエーション（p115）\n        SceneSituation, SSi\n      HELP\n\n      ATTACK_ROLL_REG = %r{^AT(TACK|K)?([+\\-*/()\\d]+)@([+\\-*/()\\d]+)<=([+\\-*/()\\d]+)(\\[([+-])([+\\-*/()\\d]+)\\])?}i.freeze\n      register_prefix('AT(TACK|K)?')\n\n      def initialize(command)\n        super(command)\n\n        @sort_barabara_dice = true\n        @round_type = RoundType::CEIL\n      end\n\n      def eval_game_system_specific_command(command)\n        command = ALIAS[command] || command\n\n        if (m = ATTACK_ROLL_REG.match(command))\n          roll_attack(m[2], m[3], m[4], m[6], m[7])\n        else\n          roll_tables(command, TABLES)\n        end\n      end\n\n      private\n\n      def roll_attack(power_expression, dice_count_expression, border_expression, modification_operator, modification_expression)\n        power = Arithmetic.eval(power_expression, RoundType::CEIL)\n        dice_count = Arithmetic.eval(dice_count_expression, RoundType::CEIL)\n        border = Arithmetic.eval(border_expression, RoundType::CEIL)\n        modification_value = modification_expression.nil? ? nil : Arithmetic.eval(modification_expression, RoundType::CEIL)\n        return if power.nil? || dice_count.nil? || border.nil?\n        return if modification_operator && modification_value.nil?\n\n        power = 0 if power < 0\n        border = border.clamp(1, 6)\n\n        command = make_command_text(power, dice_count, border, modification_operator, modification_value)\n\n        if dice_count <= 0\n          return \"\#{command} ＞ 判定数が 0 です\"\n        end\n\n        dices = @randomizer.roll_barabara(dice_count, 6).sort\n\n        success_dice_count = dices.count { |dice| dice <= border }\n        damage = success_dice_count * power\n\n        message_elements = []\n        message_elements << command\n        message_elements << dices.join(',')\n        message_elements << \"成功ダイス数 \#{success_dice_count}\"\n        message_elements << \"× 攻撃力 \#{power}\" if success_dice_count > 0\n\n        if success_dice_count > 0\n          if modification_operator && modification_value\n            message_elements << \"ダメージ \#{damage}\#{modification_operator}\#{modification_value}\"\n            damage = parse_operator(modification_operator).call(damage, modification_value)\n            damage = 0 if damage < 0\n            message_elements << damage.to_s\n          else\n            message_elements << \"ダメージ \#{damage}\"\n          end\n        end\n\n        Result.new(message_elements.join(' ＞ ')).tap do |r|\n          r.condition = success_dice_count > 0\n        end\n      end\n\n      def make_command_text(power, dice_count, border, modification_operator, modification_value)\n        text = \"(ATTACK\#{power}@\#{dice_count}<=\#{border}\"\n        text += \"[\#{modification_operator}\#{modification_value}]\" if modification_operator\n        text += \")\"\n        text\n      end\n\n      def parse_operator(operator)\n        case operator\n        when '+'\n          lambda { |x, y| x + y }\n        when '-'\n          lambda { |x, y| x - y }\n        end\n      end\n\n      TABLES = {\n        \"SceneSituation\" => DiceTable::D66LeftRangeTable.new(\n          \"シチュエーション\",\n          BCDice::D66SortType::NO_SORT,\n          [\n            [1..3, [\n              \"【日常】何一つ変わることの無い日々の一幕。移ろい易い世界では、それはとても大切である。\",\n              \"【準備】何かを為すための用意をする一幕。情報収集、買物遠征、やるべきことは一杯だ。\",\n              \"【趣味】自分の時間を、有効活用している一幕。必要に追われていない分、心は軽く晴れやかだ。\",\n              \"【喫茶】一息入れ、嗜好品を嗜む時の一幕。穏やかな空気は、だが、往々にして変わりやすい。\",\n              \"【鍛錬】体を鍛え、心を養う修練の一幕。己さえ良ければ、その方法も何だって良い。\",\n              \"【職務】役割の元、仕事に精を出す時の一幕。目的が何であれ、為すべきことに変わりはない。\",\n            ]],\n            [4..6, [\n              \"【移動】何処かから何処かへと向かう一幕。進んでいるなら、手段も目的地も関係あるまい。\",\n              \"【墓前】故人が眠る場所へと赴く一幕。共に眠ることだけは無いように。\",\n              \"【操作】何かを操り、望みを果たしている一幕。運転にせよ何にせよ、脇見には注意が必要だ。\",\n              \"【食事】何かを糧とし、己の力を蓄える一幕。行動すれば消耗する。腹が減っては何とやらだ。\",\n              \"【休息】日々の合間の、憩いの一幕。“何もしない”というのも、立派な行いである。\",\n              \"【夢幻】現実に存在しない何かへと耽る一幕。時間帯に関わらず、何時かは必ず覚めるだろう。\",\n            ]],\n          ]\n        ),\n      }.transform_keys(&:upcase).freeze\n\n      ALIAS = {\n        \"SSi\" => \"SceneSituation\",\n      }.transform_keys(&:upcase).transform_values(&:upcase).freeze\n\n      register_prefix(TABLES.keys, ALIAS.keys)\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Irisbane>", "freeze", "self", "register_prefix", "initialize", "command", "@sort_barabara_dice", "@round_type", "RoundType::CEIL", "RoundType", "eval_game_system_specific_command", "$ret_or_1", "ALIAS", "[]", "m", "ATTACK_ROLL_REG", "match", "roll_attack", "2", "3", "4", "6", "7", "roll_tables", "TABLES", "private", "power_expression", "dice_count_expression", "border_expression", "modification_operator", "modification_expression", "power", "Arithmetic", "eval", "dice_count", "border", "modification_value", "nil?", "<", "0", "clamp", "1", "make_command_text", "<=", "dices", "@randomizer", "roll_barabara", "sort", "success_dice_count", "count", "block in roll_attack", "dice", "block (2 levels) in roll_attack", "damage", "*", "message_elements", "<<", "join", ">", "parse_operator", "call", "to_s", "tap", "Result", "new", "r", "condition=", "text", "+", "operator", "lambda", "block in parse_operator", "x", "y", "block (2 levels) in parse_operator", "-", "transform_keys", "DiceTable::D66LeftRangeTable", "DiceTable", "BCDice::D66SortType::NO_SORT", "BCDice::D66SortType", "BCDice", "to_proc", "transform_values", "keys", "Base"], :mappings=>"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"}}]}