{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Karukami.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Karukami < Base\n      # ゲームシステムの識別子\n      ID = 'Karukami'\n\n      # ゲームシステム名\n      NAME = 'カルカミ'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'かるかみ'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~HELP_MESSAGE\n        ■ 行為判定、ダメージ算出 (xUB+y@c>=t)\n          6面ダイスをx個ダイスロールし、クリティカル値以上の出目が出たら振り足して合計値を算出します。\n          x: ダイス数\n          y: 修正値（省略可）\n          c: クリティカル値（省略可）\n          t: 目標値値（省略可）\n          例）2UB, 2UB>=7, 3UB+1@5, 3UB+1@5<10\n      HELP_MESSAGE\n\n      register_prefix('\\d+UB')\n\n      def eval_game_system_specific_command(command)\n        roll_ub(command)\n      end\n\n      def roll_ub(command)\n        parser = Command::Parser.new(\"UB\", round_type: @round_type)\n                                .has_prefix_number\n                                .enable_critical\n        parsed = parser.parse(command)\n        unless parsed\n          return nil\n        end\n\n        critical = parsed.critical || 6\n        if critical <= 1\n          return \"(\#{parsed}) ＞ クリティカル値は2以上としてください\"\n        end\n\n        list_list = []\n        criticals = 0\n        stack = parsed.prefix_number\n        while stack > 0\n          dice_list = @randomizer.roll_barabara(stack, 6)\n          list_list.push(dice_list)\n          stack = dice_list.count { |x| x >= critical }\n          criticals += stack\n        end\n\n        total = list_list.flatten.sum() + parsed.modify_number\n\n        result =\n          if list_list.first.all?(1)\n            total = 0\n            Result.fumble(\"ファンブル\")\n          elsif parsed.cmp_op.nil?\n            Result.new()\n          elsif total.send(parsed.cmp_op, parsed.target_number)\n            Result.success(\"成功\")\n          else\n            Result.failure(\"失敗\")\n          end\n        result.critical = criticals > 0\n\n        sequence = [\n          \"(\#{parsed})\",\n          *list_list.map { |list| \"[\#{list.join(',')}]\" },\n          total,\n          (\"\#{criticals}クリティカル\" if result.critical?),\n          result.text,\n        ].compact\n\n        result.text = sequence.join(\" ＞ \")\n        return result\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Karukami>", "self", "register_prefix", "eval_game_system_specific_command", "command", "roll_ub", "parser", "Command::Parser", "Command", "new", "@round_type", "has_prefix_number", "enable_critical", "parsed", "parse", "critical", "$ret_or_1", "6", "<=", "1", "list_list", "criticals", "0", "stack", "prefix_number", ">", "dice_list", "@randomizer", "roll_barabara", "push", "count", "block in roll_ub", "x", "block (2 levels) in roll_ub", ">=", "+", "total", "flatten", "sum", "modify_number", "result", "first", "all?", "Result", "fumble", "cmp_op", "nil?", "send", "target_number", "success", "failure", "critical=", "sequence", "map", "list", "join", "critical?", "text", "compact", "text=", "Base"], :mappings=>"AAAAA,2BAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAEE,8BAAKA,UAAL;QAGA,gCAAOA,MAAP;QAGA,oCAAWA,MAAX;QAGA,wCACNA,8BADqB,GAErBA,qDAFqB,GAGrBA,aAHqB,GAIrBA,iBAJqB,GAKrBA,qBALqB,GAMrBA,kBANqB,GAOrBA,wCAPM;QAUAC,IAAAC,iBAAAA,CAAgBF,QAAhBE;;AAEAC,QAAAA,iDAAAA,6CAAsCC,OAAtCD;AAAAA,UAAAA;;UACEA,OAAAF,IAAAI,SAAAA,CAAQD,OAARC;QADFF,CAAAA;QAIAH,OAAAK,uBAAAA,mBAAYD,OAAZC;AAAAA,UAAAA;;;UACEC,SAASC,IAAAC,aAAAD,WAAeE,KAAAA,CAAKJ,IAApB,EAA0B,wBAAA,cAAYK,eAAZ,EAAXD,CACAE,mBAAAA,CAAAA,CACAC,iBAAAA,CAAAA;UACxBC,SAASP,MAAMQ,OAAAA,CAAOV,OAAPU;UACf,KAAA,QAAOD,MAAP,CAAA;YACE,OAAO;UADT;UAIAE,WAAW,CAAA,QAAAC,CAAAA,YAAAH,MAAME,UAAAA,CAAAA,CAANC,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAmBC,CAAnB,CAAA;UACX,IAAA,QAAYC,OAATH,QAASG,EAAGC,CAAHD,CAAZ,CAAA;YACE,OAAQb,GAAD,GAAA,CAAIQ,MAAJ,CAAA,GAAWR;UADpB;UAIAe,YAAY;UACZC,YAAYC;UACZC,QAAQV,MAAMW,eAAAA,CAAAA;UACd,OAAA,QAAYC,OAANF,KAAME,EAAEH,CAAFG,CAAZ,CAAA;;YACEC,YAAYC,eAAWC,eAAAA,CAAeL,KAA1B,EAAiCN,CAAtBW;YACvBR,SAASS,MAAAA,CAAMH,SAANG;YACTN,QAAiBO,MAATJ,SAASI,SAAAA,EAAAA,EAAAA,EAATC,aAAmBC,CAAnBD;;cAAmB;cAAGE,OAAEC,OAAFF,CAAEE,EAAGnB,QAAHmB,EAAxBH,CAASD;YACjBT,YAAUc,SAAVd,SAAUc,EAAGZ,KAAHY;UAJZ;UAOAC,QAAgCD,SAAxBf,SAASiB,SAAAA,CAAAA,CAAQC,KAAAA,CAAAA,CAAOH,EAAEtB,MAAM0B,eAAAA,CAAAA,CAARJ;UAEhCK,SACE,CAAA,QAAGpB,SAASqB,OAAAA,CAAAA,CAAMC,SAAAA,CAAMvB,CAANuB,CAAlB,CAAA,GAAA,CACErC,CAAA+B,CAAAA,QAAQd,CAARc,GACAO,YAAMC,QAAAA,CAAQvC,OAARuC,CADNvC,CADF,IAGA,CAAA,QAAMQ,MAAMgC,QAAAA,CAAAA,CAAOC,SAAAA,CAAAA,CAAnB,CAAA,GAAA,CACEH,YAAMlC,KAAAA,CAAAA,CADR,IAEA,CAAA,QAAM2B,KAAKW,MAAAA,CAAMlC,MAAMgC,QAAAA,CAAAA,CAAjB,EAA0BhC,MAAMmC,eAAAA,CAAAA,CAA3BD,CAAX,CAAA,GAAA,CACEJ,YAAMM,SAAAA,CAAS5C,IAAT4C,CADR,IAAA,CAGEN,YAAMO,SAAAA,CAAS7C,IAAT6C,CAHR,CAAA,CAFA,CAHA;UAUFV,MAAMW,cAAAA,CAAsB1B,OAAVJ,SAAUI,EAAEH,CAAFG,CAAtB0B;UAENC,WAAW,CACR/C,GAAD,GAAA,CAAIQ,MAAJ,CAAA,GAAWR,GADF,CAAA,QAET,MAAUgD,MAATjC,SAASiC,OAAAA,EAAAA,EAAAA,EAATtB,aAAiBuB,IAAjBvB;;YAAiB;YAAME,OAACA,GAAD,GAAA,CAAIqB,IAAIC,MAAAA,CAAMtB,GAANsB,CAAR,CAAA,GAAmBtB,IAA1CF,CAASsB,CAAV,CAFS,CAAA,QAAA,CAGTjB,KAHS,EAIR,CAAA,QAAwBI,MAAMgB,cAAAA,CAAAA,CAA9B,CAAA,GAAA,CAAA,EAAA,GAAA,CAAGnC,SAAH,CAAA,GAAahB,QAAb,IAAA,GAAA,CAJQ,EAKTmC,MAAMiB,MAAAA,CAAAA,CALG,CAAA,CAMVC,SAAAA,CAAAA;UAEDlB,MAAMmB,UAAAA,CAAQP,QAAQG,MAAAA,CAAMlD,KAANkD,CAAhBI;UACN,OAAOnB;QAhDTnC,CAAAA;MA3BFL,GAAAA,WAAAA,EAAiB4D,UAAjB5D;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}]}