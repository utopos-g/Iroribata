{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    # 表を表すクラス\n    class Table\n      # @param key [String]\n      # @param locale [Symbol]\n      # @return [Table]\n      def self.from_i18n(key, locale)\n        table = I18n.t(key, locale: locale)\n        new(table[:name], table[:type], table[:items])\n      end\n\n      # @param [String] name 表の名前\n      # @param [String] type 項目を選ぶときのダイスロールの方法 '1D6'など\n      # @param [Array<String>] items 表の項目の配列\n      def initialize(name, type, items)\n        @name = name\n        @items = items.freeze\n\n        m = /(\\d+)D(\\d+)/i.match(type)\n        unless m\n          raise ArgumentError, \"Unexpected table type: \#{type}\"\n        end\n\n        @times = m[1].to_i\n        @sides = m[2].to_i\n      end\n\n      # 表を振る\n      # @param [BCDice] bcdice ランダマイザ\n      # @return [String] 結果\n      def roll(bcdice)\n        value = bcdice.roll_sum(@times, @sides)\n        return choice(value)\n      end\n\n      def choice(value)\n        index = value - @times\n        return RollResult.new(@name, value, @items[index])\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:Table>", "from_i18n", "self", "key", "locale", "table", "I18n", "t", "new", "[]", "initialize", "name", "type", "items", "@name", "@items", "freeze", "m", "match", "raise", "ArgumentError", "@times", "1", "to_i", "@sides", "2", "roll", "bcdice", "value", "roll_sum", "choice", "index", "-", "RollResult"], :mappings=>"AAAAA,0CAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MAEEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAIEC,MAAIC,IAAJD,gBAAAA,qBAAmBE,GAAD,EAAMC,MAAxBH;AAAAA,UAAAA;;;UACEI,QAAQC,UAAIC,GAAAA,CAAGJ,GAAP,EAAY,oBAAA,UAAQC,MAAR,EAARG;UACZN,OAAAC,IAAAM,KAAAA,CAAIH,KAAKI,OAAAA,CAAC,MAADA,CAAT,EAAkBJ,KAAKI,OAAAA,CAAC,MAADA,CAAvB,EAAgCJ,KAAKI,OAAAA,CAAC,OAADA,CAArCD;QAFFP,CAAAA;;AAQAS,QAAAA,0BAAAA,sBAAeC,IAAD,EAAOC,IAAP,EAAaC,KAA3BH;AAAAA,UAAAA;;;UACEI,YAAQH;UACRI,aAASF,KAAKG,QAAAA,CAAAA;UAEdC,IAAI,cAAcC,OAAAA,CAAON,IAAPM;UAClB,KAAA,QAAOD,CAAP,CAAA;YACEf,IAAAiB,OAAAA,CAAMC,mBAAN,EAAsBV,yBAAD,GAAA,CAA0BE,IAA1B,CAArBO;UADF;UAIAE,aAASJ,CAACR,OAAAA,CAACa,CAADb,CAAGc,MAAAA,CAAAA;UACbb,OAAAc,CAAAA,aAASP,CAACR,OAAAA,CAACgB,CAADhB,CAAGc,MAAAA,CAAAA,CAAbC;QAVFd,CAAAA;;AAgBAgB,QAAAA,oBAAAA,gBAASC,MAATD;AAAAA,UAAAA;;;UACEE,QAAQD,MAAME,UAAAA,CAAUR,UAAhB,EAAwBG,UAAlBK;UACd,OAAO3B,IAAA4B,QAAAA,CAAOF,KAAPE;QAFTJ,CAAAA;QAKA1B,OAAA8B,sBAAAA,kBAAWF,KAAXE;AAAAA,UAAAA;;;UACEC,QAAcC,UAANJ,KAAMI,EAAEX,UAAFW;UACd,OAAOC,gBAAUzB,KAAAA,CAAKM,SAAf,EAAsBc,KAAtB,EAA6Bb,UAAMN,OAAAA,CAACsB,KAADtB,CAAzBD;QAFnBsB,CAAAA;MAjCF9B,GAAAA,WAAAA,EAAAA,IAAAA;IAFFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>61, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/d66_grid_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    # D66を振って6x6マスの表を参照する\n    class D66GridTable\n      # @param key [String]\n      # @param locale [Symbol]\n      # @return [D66GridTable]\n      def self.from_i18n(key, locale)\n        table = I18n.t(key, locale: locale, raise: true)\n        new(table[:name], table[:items])\n      end\n\n      # @param [String] name 表の名前\n      # @param [Array<Array<String>>] items 表の項目の配列\n      def initialize(name, items)\n        @name = name\n        @items = items.freeze\n      end\n\n      # 表を振る\n      # @param randomizer [#roll_once] ランダマイザ\n      # @return [String] 結果\n      def roll(randomizer)\n        dice1 = randomizer.roll_once(6)\n        dice2 = randomizer.roll_once(6)\n        value = dice1 * 10 + dice2\n\n        index1 = dice1 - 1\n        index2 = dice2 - 1\n        return RollResult.new(@name, value, @items[index1][index2])\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:D66GridTable>", "from_i18n", "self", "key", "locale", "table", "I18n", "t", "new", "[]", "initialize", "name", "items", "@name", "@items", "freeze", "roll", "randomizer", "dice1", "roll_once", "6", "dice2", "value", "+", "*", "10", "index1", "-", "1", "index2", "RollResult"], :mappings=>"AAAAA,mDAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MAEEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAIEC,MAAIC,IAAJD,gBAAAA,qBAAmBE,GAAD,EAAMC,MAAxBH;AAAAA,UAAAA;;;UACEI,QAAQC,UAAIC,GAAAA,CAAGJ,GAAP,EAAY,6BAAA,UAAQC,MAAR,EAAA,SAAuB,IAAvB,EAARG;UACZN,OAAAC,IAAAM,KAAAA,CAAIH,KAAKI,OAAAA,CAAC,MAADA,CAAT,EAAkBJ,KAAKI,OAAAA,CAAC,OAADA,CAAvBD;QAFFP,CAAAA;;AAOAS,QAAAA,0BAAAA,sBAAeC,IAAD,EAAOC,KAArBF;AAAAA,UAAAA;;;UACEG,YAAQF;UACRD,OAAAI,CAAAA,aAASF,KAAKG,QAAAA,CAAAA,CAAdD;QAFFJ,CAAAA;QAQAV,OAAAgB,oBAAAA,gBAASC,UAATD;AAAAA,UAAAA;;;UACEE,QAAQD,UAAUE,WAAAA,CAAWC,CAAXD;UAClBE,QAAQJ,UAAUE,WAAAA,CAAWC,CAAXD;UAClBG,QAAmBC,SAALC,UAANN,KAAMM,EAAEC,EAAFD,CAAKD,EAAEF,KAAFE;UAEnBG,SAAeC,UAANT,KAAMS,EAAEC,CAAFD;UACfE,SAAeF,UAANN,KAAMM,EAAEC,CAAFD;UACf,OAAOG,gBAAUtB,KAAAA,CAAKK,SAAf,EAAsBS,KAAtB,EAA6BR,UAAML,OAAAA,CAACiB,MAADjB,CAAQA,OAAAA,CAACoB,MAADpB,CAAjCD;QAPnBQ,CAAAA;MAnBFhB,GAAAA,WAAAA,EAAAA,IAAAA;IAFFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>112, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/StellarKnights.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/dice_table/table\"\nrequire \"bcdice/dice_table/d66_grid_table\"\n\nmodule BCDice\n  module GameSystem\n    class StellarKnights < Base\n      # ゲームシステムの識別子\n      ID = 'StellarKnights'\n\n      # ゲームシステム名\n      NAME = '銀剣のステラナイツ'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'きんけんのすてらないつ'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・アタック判定　nSK[d][,k>l,...]\n        []内は省略可能。\n        n: ダイス数、d: アタック判定における対象の防御力、k, l: ダイスの出目がkならばlに変更（アマランサスのスキル「始まりの部屋」用）\n        d省略時はダイスを振った結果のみ表示。（nSKはnB6と同じ）\n\n        4SK: ダイスを4個振って、その結果を表示\n        4+2SK: ダイスを4+2 (=6) 個振って、その結果を表示\n        5/2SK: ダイスを5個の半分 (=2) 個振って、その結果を表示\n        (5+3)/2SK: ダイスを(5+3)個の半分 (=4) 個振って、その結果を表示\n        5SK3: 【アタック判定：5ダイス】、対象の防御力を3として成功数を表示\n        3SK,1>6: ダイスを3個振り、出目が1のダイスを全て6に変更し、その結果を表示\n        6SK4,1>6,2>6: 【アタック判定：6ダイス】、出目が1と2のダイスを全て6に変更、対象の防御力を4として成功数を表示\n\n        ・基本\n        TT：お題表\n        STA    ：シチュエーション表A：時間 (Situation Table A)\n        STB    ：シチュエーション表B：場所 (ST B)\n        STB2[n]：シチュエーション表B その2：学園編 (ST B 2)\n        　n: 1(アーセルトレイ), 2(イデアグロリア), 3(シトラ), 4(フィロソフィア), 5(聖アージェティア), 6(SoA)\n        STC    ：シチュエーション表C：話題 (ST C)\n        ALLS   ：シチュエーション表全てを一括で（学園編除く）\n        GAT：所属組織決定 (Gakuen Table)\n        HOT：希望表 (Hope Table)\n        DET：絶望表 (Despair Table)\n        WIT：願い事表 (Wish Table)\n        YST：あなたの物語表 (Your Story Table)\n        YSTA：あなたの物語表：異世界 (YST Another World)\n        PET：性格表 (Personality Table)\n            性格表を2回振り、性格を決定する\n\n        ・霧と桜のマルジナリア\n        YSTM：あなたの物語表：マルジナリア世界 (YST Marginalia)\n        STM：シチュエーション表：マルジナリア世界 (ST Marginalia)\n        YSTL：あなたの物語表：手紙世界 (YST Letter)\n        YSTR：あなたの物語表：リコレクト・ドール (YST Recollect-doll)\n        STBR：シチュエーション表B：場所（リコレクト・ドール） (ST B Recollect-doll)\n        STCR：シチュエーション表C：リコレクト (ST C Recollect)\n        STBS：シチュエーション表B：シトラセッティング (ST B Sut Tu Real)\n        STE：シチュエーション表：エクリプス専用 (ST Eclipse)\n\n        ・紫弾のオルトリヴート\n        FT：フラグメント表 (Fragment Table)\n            フラグメント表を５回振る\n        FTx：フラグメント表をx回振る\n        YSTB：あなたの物語表：ブリンガー (YST Bringer)\n        YSTF：あなたの物語表：フォージ (YST Forge)\n        STAL：シチュエーション表：オルトリヴート (ST Alt-Levoot)\n      MESSAGETEXT\n\n      def initialize(command)\n        super(command)\n\n        @sort_barabara_dice = true # バラバラロール（Bコマンド）でソート有\n        @d66_sort_type = D66SortType::NO_SORT\n      end\n\n      def eval_game_system_specific_command(command)\n        command = command.upcase\n\n        if (table = self.class::TABLES[command])\n          table.roll(@randomizer)\n        elsif (m = %r{([()+/\\d]+)SK(\\d)?((,\\d>\\d)+)?}.match(command))\n          num_dices = Arithmetic.eval(m[1], RoundType::FLOOR)\n\n          unless num_dices.nil?\n            resolute_action(num_dices, m[2] && m[2].to_i, m[3])\n          end\n        elsif command == 'STB2'\n          roll_all_situation_b2_tables\n        elsif command == 'ALLS'\n          roll_all_situation_tables\n        elsif command == \"PET\"\n          roll_personality_table\n        elsif (m = /FT(\\d+)?/.match(command))\n          num = (m[1] || 5).to_i\n          roll_fragment_table(num)\n        end\n      end\n\n      private\n\n      # @param [Integer] num_dices\n      # @param [Integer | nil] defence\n      # @param [String] dice_change_text\n      # @return [Result, String]\n      def resolute_action(num_dices, defence, dice_change_text)\n        dices = @randomizer.roll_barabara(num_dices, 6).sort\n        dice_text = dices.join(\",\")\n\n        output = \"(\#{remake_command(num_dices, defence, dice_change_text)}) ＞ \#{dice_text}\"\n        if dices.empty?\n          return output + translate(\"StellarKnights.SK.no_dice_error\")\n        end\n\n        # FAQによると、ダイスの置き換えは宣言された順番に適用されていく\n        dice_change_rules = parse_dice_change_rules(dice_change_text)\n        dice_change_rules.each do |rule|\n          dices.map! { |val| val == rule[:from] ? rule[:to] : val }\n        end\n\n        unless dice_change_rules.empty?\n          dices.sort!\n          output += \" ＞ [\#{dices.join(',')}]\"\n        end\n\n        if defence.nil?\n          success = false\n          failure = false\n        else\n          success_num = dices.count { |val| val >= defence }\n          output += \" ＞ \" + translate(\"StellarKnights.SK.success_num\", success_num: success_num)\n          success = success_num > 0\n          failure = !success\n        end\n\n        Result.new(output).tap do |r|\n          r.success = success\n          r.failure = failure\n        end\n      end\n\n      def remake_command(num_dices, defence, dice_change_text)\n        command = \"\#{num_dices}SK\"\n        command += defence.to_s unless defence.nil?\n        command += dice_change_text unless dice_change_text.nil?\n        command\n      end\n\n      def parse_dice_change_rules(text)\n        return [] if text.nil?\n\n        # 正規表現の都合で先頭に ',' が残っているので取っておく\n        text = text[1..-1]\n        text.split(',').map do |rule|\n          v = rule.split('>').map(&:to_i)\n          {\n            from: v[0],\n            to: v[1],\n          }\n        end\n      end\n\n      def roll_all_situation_b2_tables\n        (1..6).map { |num| self.class::TABLES[\"STB2\#{num}\"].roll(@randomizer) }.join(\"\\n\")\n      end\n\n      def roll_all_situation_tables\n        ['STA', 'STB', 'STC'].map { |command| self.class::TABLES[command].roll(@randomizer) }.join(\"\\n\")\n      end\n\n      def roll_personality_table\n        value1, index1 = get_table_by_d66(translate(\"StellarKnights.PET.items\"))\n        value2, index2 = get_table_by_d66(translate(\"StellarKnights.PET.items\"))\n        name = translate(\"StellarKnights.PET.name\")\n        result = translate(\"StellarKnights.PET.result\", value1: value1, value2: value2)\n        return \"\#{name}(\#{index1},\#{index2}) ＞ \#{result}\"\n      end\n\n      def roll_fragment_table(num)\n        if num <= 0\n          return nil\n        end\n\n        results = Array.new(num) { get_table_by_d66(translate(\"StellarKnights.FT.items\")) }\n        values = results.map { |r| r[0] }\n        indexes = results.map { |r| r[1] }\n        name = translate(\"StellarKnights.FT.name\")\n\n        return \"\#{name}(\#{indexes.join(',')}) ＞ \#{values.join(translate('StellarKnights.FT.sep'))}\"\n      end\n\n      class << self\n        private\n\n        def translate_tables(locale)\n          {\n            \"TT\" => DiceTable::D66GridTable.from_i18n(\"StellarKnights.tables.TT\", locale),\n            \"STA\" => DiceTable::Table.from_i18n(\"StellarKnights.tables.STA\", locale),\n            \"STB\" => DiceTable::D66OneThirdTable.from_i18n(\"StellarKnights.tables.STB\", locale),\n            \"STB21\" => DiceTable::Table.from_i18n(\"StellarKnights.tables.STB21\", locale),\n            \"STB22\" => DiceTable::Table.from_i18n(\"StellarKnights.tables.STB22\", locale),\n            \"STB23\" => DiceTable::Table.from_i18n(\"StellarKnights.tables.STB23\", locale),\n            \"STB24\" => DiceTable::Table.from_i18n(\"StellarKnights.tables.STB24\", locale),\n            \"STB25\" => DiceTable::Table.from_i18n(\"StellarKnights.tables.STB25\", locale),\n            \"STB26\" => DiceTable::Table.from_i18n(\"StellarKnights.tables.STB26\", locale),\n            \"STC\" => DiceTable::D66HalfGridTable.from_i18n(\"StellarKnights.tables.STC\", locale),\n            \"GAT\" => DiceTable::Table.from_i18n(\"StellarKnights.tables.GAT\", locale),\n            \"HOT\" => DiceTable::D66HalfGridTable.from_i18n(\"StellarKnights.tables.HOT\", locale),\n            \"DET\" => DiceTable::D66HalfGridTable.from_i18n(\"StellarKnights.tables.DET\", locale),\n            \"WIT\" => DiceTable::D66OneThirdTable.from_i18n(\"StellarKnights.tables.WIT\", locale),\n            \"YST\" => DiceTable::D66OneThirdTable.from_i18n(\"StellarKnights.tables.YST\", locale),\n            \"YSTA\" => DiceTable::D66OneThirdTable.from_i18n(\"StellarKnights.tables.YSTA\", locale),\n            \"YSTM\" => DiceTable::D66OneThirdTable.from_i18n(\"StellarKnights.tables.YSTM\", locale),\n            \"STM\" => DiceTable::D66HalfGridTable.from_i18n(\"StellarKnights.tables.STM\", locale),\n            \"YSTL\" => DiceTable::D66HalfGridTable.from_i18n(\"StellarKnights.tables.YSTL\", locale),\n            \"YSTR\" => DiceTable::D66HalfGridTable.from_i18n(\"StellarKnights.tables.YSTR\", locale),\n            \"STBR\" => DiceTable::D66HalfGridTable.from_i18n(\"StellarKnights.tables.STBR\", locale),\n            \"STCR\" => DiceTable::D66HalfGridTable.from_i18n(\"StellarKnights.tables.STCR\", locale),\n            \"STBS\" => DiceTable::D66HalfGridTable.from_i18n(\"StellarKnights.tables.STBS\", locale),\n            \"STE\" => DiceTable::D66HalfGridTable.from_i18n(\"StellarKnights.tables.STE\", locale),\n            \"YSTB\" => DiceTable::D66HalfGridTable.from_i18n(\"StellarKnights.tables.YSTB\", locale),\n            \"YSTF\" => DiceTable::D66HalfGridTable.from_i18n(\"StellarKnights.tables.YSTF\", locale),\n            \"STAL\" => DiceTable::D66HalfGridTable.from_i18n(\"StellarKnights.tables.STAL\", locale),\n          }\n        end\n      end\n\n      TABLES = translate_tables(:ja_jp)\n\n      register_prefix('[()+\\/\\d]+SK', 'STB2', 'ALLS', 'PET', 'FT', TABLES.keys)\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:StellarKnights>", "initialize", "command", "@sort_barabara_dice", "@d66_sort_type", "D66SortType::NO_SORT", "D66SortType", "eval_game_system_specific_command", "upcase", "table", "class::TABLES", "class", "[]", "roll", "@randomizer", "m", "match", "num_dices", "Arithmetic", "eval", "1", "RoundType::FLOOR", "RoundType", "nil?", "resolute_action", "$ret_or_1", "2", "to_i", "3", "roll_all_situation_b2_tables", "roll_all_situation_tables", "roll_personality_table", "num", "5", "roll_fragment_table", "private", "defence", "dice_change_text", "dices", "roll_barabara", "6", "sort", "dice_text", "join", "output", "remake_command", "empty?", "+", "translate", "dice_change_rules", "parse_dice_change_rules", "each", "block in resolute_action", "rule", "block (2 levels) in resolute_action", "map!", "val", "block (3 levels) in resolute_action", "sort!", "success", "failure", "success_num", "count", ">=", ">", "0", "!", "tap", "Result", "new", "r", "success=", "failure=", "to_s", "text", "-1", "map", "split", "block in parse_dice_change_rules", "block (2 levels) in parse_dice_change_rules", "v", "to_proc", "block in roll_all_situation_b2_tables", "block (2 levels) in roll_all_situation_b2_tables", "block in roll_all_situation_tables", "block (2 levels) in roll_all_situation_tables", "get_table_by_d66", "value1", "index1", "value2", "index2", "name", "result", "<=", "results", "Array", "block in roll_fragment_table", "block (2 levels) in roll_fragment_table", "values", "indexes", "translate_tables", "locale", "DiceTable::D66GridTable", "DiceTable", "from_i18n", "DiceTable::Table", "DiceTable::D66OneThirdTable", "DiceTable::D66HalfGridTable", "register_prefix", "TABLES", "keys", "Base"], :mappings=>"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"}}]}