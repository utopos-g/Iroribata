{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Airgetlamh.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Airgetlamh < Base\n      # ゲームシステムの識別子\n      ID = 'Airgetlamh'\n\n      # ゲームシステム名\n      NAME = '朱の孤塔のエアゲトラム'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'あけのことうのえあけとらむ'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        【Reg2.0『THE ANSWERER』～】\n        ・調査判定（成功数を表示）：[n]AA[m]\n        ・命中判定（ダメージ表示）：[n]AA[m]*p[+t][Cx]\n        【～Reg1.1『昇華』】\n        ・調査判定（成功数を表示）：[n]AL[m]\n        ・命中判定（ダメージ表示）：[n]AL[m]*p\n        ----------------------------------------\n        []内のコマンドは省略可能。\n\n        「n」でダイス数（攻撃回数）を指定。省略時は「2」。\n        「m」で目標値を指定。省略時は「6」。\n        「p」で威力を指定。「*」は「x」で代用可。\n        「+t」でクリティカルトリガーを指定。省略可。\n        「Cx」でクリティカル値を指定。省略時は「1」、最大値は「3」、「0」でクリティカル無し。\n\n        攻撃力指定で命中判定となり、成功数ではなく、ダメージを結果表示します。\n        クリティカルヒットの分だけ、自動で振り足し処理を行います。\n        （ALコマンドではクリティカル処理を行いません）\n\n        【書式例】\n        ・AL → 2d10で目標値6の調査判定。\n        ・5AA7*12 → 5d10で目標値7、威力12の命中判定。\n        ・AA7x28+5 → 2d10で目標値7、威力28、クリティカルトリガー5の命中判定。\n        ・9aa5*10C2 → 9d10で目標値5、威力10、クリティカル値2の命中判定。\n        ・15AAx4c0 → 15d10で目標値6、威力4、クリティカル無しの命中判定。\n      MESSAGETEXT\n\n      register_prefix(\n        '\\d*A[AL]'\n      )\n\n      def initialize(command)\n        super(command)\n        @sort_add_dice = true # ダイスのソート有\n      end\n\n      def eval_game_system_specific_command(command)\n        # AA/ALコマンド：調査判定, 成功判定\n        if command =~ /(\\d+)?A(A|L)(\\d+)?((x|\\*)(\\d+)(\\+(\\d+))?)?(C(\\d+))?$/i\n          diceCount = (Regexp.last_match(1) || 2).to_i\n          target = (Regexp.last_match(3) || 6).to_i\n          damage = (Regexp.last_match(6) || 0).to_i\n\n          if Regexp.last_match(2) == 'L' # 旧Ver対応\n            criticalTrigger = 0\n            criticalNumber = 0\n          else\n            criticalTrigger = (Regexp.last_match(8) || 0).to_i\n            criticalNumber = (Regexp.last_match(10) || 1).to_i\n          end\n          criticalNumber = 3 if criticalNumber > 4\n\n          return checkRoll(diceCount, target, damage, criticalTrigger, criticalNumber)\n        end\n\n        return nil\n      end\n\n      def checkRoll(diceCount, target, damage, criticalTrigger, criticalNumber)\n        totalSuccessCount = 0\n        totalCriticalCount = 0\n        text = \"\"\n\n        rollCount = diceCount\n\n        while rollCount > 0\n          diceArray = @randomizer.roll_barabara(rollCount, 10).sort\n          diceText = diceArray.join(\",\")\n\n          successCount = diceArray.count { |i| i <= target }\n          criticalCount = diceArray.count { |i| i <= criticalNumber }\n\n          totalSuccessCount += successCount\n          totalCriticalCount += criticalCount\n\n          text += \"+\" unless text.empty?\n          text += \"\#{successCount}[\#{diceText}]\"\n\n          rollCount = criticalCount\n        end\n\n        result = \"\"\n        isDamage = (damage != 0)\n\n        if isDamage\n          totalDamage = totalSuccessCount * damage + totalCriticalCount * criticalTrigger\n\n          result += \"(\#{diceCount}D10\\<\\=\#{target}) ＞ \#{text} ＞ Hits：\#{totalSuccessCount}*\#{damage}\"\n          result += \" + Trigger：\#{totalCriticalCount}*\#{criticalTrigger}\" if criticalTrigger > 0\n          result += \" ＞ \#{totalDamage}ダメージ\"\n        else\n          result += \"(\#{diceCount}D10\\<\\=\#{target}) ＞ \#{text} ＞ 成功数：\#{totalSuccessCount}\"\n        end\n\n        result += \" / \#{totalCriticalCount}クリティカル\" if totalCriticalCount > 0\n\n        return result\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Airgetlamh>", "self", "register_prefix", "initialize", "command", "@sort_add_dice", "eval_game_system_specific_command", "=~", "diceCount", "$ret_or_1", "Regexp", "last_match", "1", "2", "to_i", "target", "3", "6", "damage", "0", "criticalTrigger", "criticalNumber", "8", "10", ">", "4", "checkRoll", "totalSuccessCount", "totalCriticalCount", "text", "rollCount", "diceArray", "@randomizer", "roll_barabara", "sort", "diceText", "join", "successCount", "count", "block in checkRoll", "i", "block (2 levels) in checkRoll", "<=", "criticalCount", "+", "empty?", "result", "isDamage", "!=", "totalDamage", "*", "Base"], :mappings=>"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"}}]}