{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/HouraiGakuen.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class HouraiGakuen < Base\n      # ゲームシステムの識別子\n      ID = 'HouraiGakuen'\n\n      # ゲームシステム名\n      NAME = '蓬莱学園の冒険!!'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'ほうらいかくえんのほうけん'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・基本ロール：ROL(x+n)\n          ROLL(自分の能力値 + 簡単値 + 応石 or 蓬莱パワー)と記述します。3D6をロールし、成功したかどうかを表示します。\n          例）ROL(4+6)\n        ・対人判定：MED(x,y)\n          自分の能力値 x と 相手の能力値 y でロールを行い、成功したかどうかを表示します。\n          例）MED(5,2)\n        ・対抗判定：RES(x,y)\n          自分の能力値 x と 相手の能力値 y で相互にロールし、どちらが成功したかを表示します。両者とも成功 or 失敗の場合は引き分けとなります。\n          例）RES(6,4)\n        ・陰陽コマンド INY\n          例）Hourai : 陽（奇数の方が多い）\n        ・五行コマンド：GOG\n          例）Hourai : 五行表(3) → 五行【土】\n        ・八徳コマンド：HTK\n          例）Hourai : 仁義八徳は、【義】(奇数、奇数、偶数)\n      INFO_MESSAGE_TEXT\n\n      register_prefix('ROL', 'MED', 'RES', 'INY', 'HTK', 'GOG')\n\n      # ゲームの名前\n      # チャット欄表示名\n      # 判定用前置文字\n      # 説明文\n      # コマンド分岐\n      def eval_game_system_specific_command(command)\n        case command\n        when /^ROL/i\n          return getRollResult(command)\n        when /^MED/i\n          return getMedResult(command)\n        when /^RES/i\n          return getResResult(command)\n        when /^INY/i\n          return getInnyouResult(command)\n        when /^HTK/i\n          return getHattokuResult(command)\n        when /^GOG$/i\n          return getGogyouResult(command)\n        end\n\n        return nil\n      end\n\n      CRITICAL = \"大成功\"\n      SUCCESS = \"成功\"\n      FAILURE = \"失敗\"\n      FUMBLE = \"大失敗\"\n\n      # 基本ロール\n      def getRollResult(command)\n        return nil unless /rol([-\\d]+)/i =~ command\n\n        # 目標値セット\n        target = Regexp.last_match(1).to_i\n\n        dice_list = @randomizer.roll_barabara(3, 6)\n        total = dice_list.sum()\n        diceText = dice_list.join(\",\")\n\n        result = getCheckResult(dice_list, total, target)\n\n        return \"(3d6<=\#{target}) ＞ 出目\#{diceText}＝合計\#{total} ＞ \#{result}\"\n      end\n\n      def getCheckResult(diceList, total, target)\n        diceList = diceList.sort\n\n        if isFamble(diceList)\n          return FUMBLE\n        end\n\n        if isCritical(diceList)\n          return CRITICAL\n        end\n\n        if total <= target\n          return SUCCESS\n        end\n\n        return FAILURE\n      end\n\n      def isFamble(diceList)\n        return diceList == [6, 6, 6]\n      end\n\n      def isCritical(diceList)\n        return diceList == [1, 2, 3]\n      end\n\n      # 対人ロール\n      def getMedResult(command)\n        return nil unless /med\\((\\d+),(\\d+)\\)/i =~ command\n\n        yourValue = Regexp.last_match(1).to_i # あなたの値\n        enemyValue = Regexp.last_match(2).to_i # 相手の値\n        target = getTargetFromValue(yourValue, enemyValue) # 値から目標値を作出\n\n        dice_list = @randomizer.roll_barabara(3, 6)\n        total = dice_list.sum()\n        diceText = dice_list.join(\",\")\n\n        result = getCheckResult(dice_list, total, target)\n\n        return \"(あなたの値\#{yourValue}、相手の値\#{enemyValue}、3d6<=\#{target}) ＞ 出目\#{diceText}＝合計\#{total} ＞ \#{result}\"\n      end\n\n      def getTargetFromValue(yourValue, enemyValue)\n        yourValue + (10 - enemyValue) # 値から目標値を作出\n      end\n\n      # 対抗ロール\n      def getResResult(command)\n        return nil unless /res\\((\\d+),(\\d+)\\)/i =~ command\n\n        yourValue = Regexp.last_match(1).to_i # あなたの値\n        enemyValue = Regexp.last_match(2).to_i # 相手の値\n\n        # 値から目標値を作出\n        yourTarget = getTargetFromValue(yourValue, enemyValue)\n        enemyTarget = getTargetFromValue(enemyValue, yourValue)\n\n        your_dice_list = @randomizer.roll_barabara(3, 6)\n        yourTotal = your_dice_list.sum()\n        yourDiceText = your_dice_list.join(\",\")\n\n        enemy_dice_list = @randomizer.roll_barabara(3, 6)\n        enemyTotal = enemy_dice_list.sum()\n        enemyDiceText = enemy_dice_list.join(\",\")\n\n        yourResult = getCheckResult(your_dice_list, yourTotal, yourTarget)\n        enemyResult = getCheckResult(enemy_dice_list, enemyTotal, enemyTarget)\n\n        result = getResistCheckResult(yourResult, enemyResult)\n\n        return \"あなたの値\#{yourValue}、相手の値\#{enemyValue}\n(あなたのロール 3d6<=\#{yourTarget}) ＞ \#{yourDiceText}=\#{yourTotal} ＞ \#{yourResult}\n(相手のロール 3d6<=\#{enemyTarget}) ＞ \#{enemyDiceText}=\#{enemyTotal} ＞ \#{enemyResult}\n＞\#{result}\"\n      end\n\n      def getResistCheckResult(yourResult, enemyResult)\n        yourRank = getResultRank(yourResult)\n        enemyRank = getResultRank(enemyResult)\n\n        if yourRank > enemyRank\n          return \"あなたが勝利\"\n        end\n\n        if yourRank < enemyRank\n          return \"相手が勝利\"\n        end\n\n        return \"引き分け\"\n      end\n\n      def getResultRank(result)\n        ranks = [\n          FUMBLE,\n          FAILURE,\n          SUCCESS,\n          CRITICAL,\n        ]\n\n        return ranks.index(result)\n      end\n\n      # 陰陽コマンド\n      def getInnyouResult(_command)\n        oddCount = 0\n        evenCount = 0\n\n        3.times do\n          dice = @randomizer.roll_once(6)\n\n          if dice.even?\n            evenCount += 1 # 偶数カウント\n          else\n            oddCount += 1 # 奇数カウント\n          end\n        end\n\n        if evenCount < oddCount\n          return \"陽（奇数の方が多い）\"\n        else\n          return \"陰（偶数の方が多い）\"\n        end\n      end\n\n      # 八徳コマンド\n      def getHattokuResult(_command)\n        # 3回振って、奇数・偶数がどの順序で出たかを記録する\n        oddEvenList = []\n        3.times do\n          oddEvenList << getOddEven\n        end\n\n        oddEvenText = oddEvenList.join(\"、\")\n\n        case oddEvenText\n        when \"奇数、奇数、奇数\"\n          return \"仁義八徳は、【仁】(\#{oddEvenText})\"\n        when \"奇数、奇数、偶数\"\n          return \"仁義八徳は、【義】(\#{oddEvenText})\"\n        when \"奇数、偶数、奇数\"\n          return \"仁義八徳は、【礼】(\#{oddEvenText})\"\n        when \"奇数、偶数、偶数\"\n          return \"仁義八徳は、【智】(\#{oddEvenText})\"\n        when \"偶数、奇数、奇数\"\n          return \"仁義八徳は、【忠】(\#{oddEvenText})\"\n        when \"偶数、奇数、偶数\"\n          return \"仁義八徳は、【信】(\#{oddEvenText})\"\n        when \"偶数、偶数、奇数\"\n          return \"仁義八徳は、【孝】(\#{oddEvenText})\"\n        when \"偶数、偶数、偶数\"\n          return \"仁義八徳は、【悌】(\#{oddEvenText})\"\n        else\n          return \"異常終了\"\n        end\n      end\n\n      def getOddEven\n        dice = @randomizer.roll_once(6)\n\n        return \"偶数\" if dice.even?\n\n        return \"奇数\"\n      end\n\n      def getGogyouResult(_command)\n        type = '五行表'\n\n        table = getGogyouTable\n        text, number = get_table_by_1d6(table)\n\n        output = \"\#{type}(\#{number}) ＞ \#{text}\"\n        return output\n      end\n\n      # 五行コマンド\n      def getGogyouTable\n        table = [\n          '五行【木】',\n          '五行【火】',\n          '五行【土】',\n          '五行【金】',\n          '五行【水】',\n          '五行は【任意選択】',\n        ]\n        return table\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:HouraiGakuen>", "self", "register_prefix", "eval_game_system_specific_command", "command", "$ret_or_1", "getRollResult", "getMedResult", "getResResult", "getInnyouResult", "getHattokuResult", "getGogyouResult", "=~", "target", "Regexp", "last_match", "1", "to_i", "dice_list", "@randomizer", "roll_barabara", "3", "6", "total", "sum", "diceText", "join", "result", "getCheckResult", "diceList", "sort", "isFamble", "FUMBLE", "isCritical", "CRITICAL", "<=", "SUCCESS", "FAILURE", "==", "2", "yourValue", "enemyValue", "getTargetFromValue", "+", "-", "10", "yourTarget", "enemyTarget", "your_dice_list", "yourTotal", "yourDiceText", "enemy_dice_list", "enemyTotal", "enemyDiceText", "yourResult", "enemyResult", "getResistCheckResult", "yourRank", "getResultRank", "enemyRank", ">", "<", "ranks", "index", "_command", "oddCount", "0", "evenCount", "times", "block in getInnyouResult", "block (2 levels) in getInnyouResult", "dice", "roll_once", "even?", "oddEvenList", "block in getHattokuResult", "block (2 levels) in getHattokuResult", "<<", "getOddEven", "oddEvenText", "type", "table", "getGogyouTable", "get_table_by_1d6", "text", "number", "output", "Base"], :mappings=>"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"}}]}