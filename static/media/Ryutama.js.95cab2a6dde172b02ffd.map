{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Ryutama.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Ryutama < Base\n      # ゲームシステムの識別子\n      ID = 'Ryutama'\n\n      # ゲームシステム名\n      NAME = 'りゅうたま'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'りゆうたま'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・判定\n        　Rx,y>=t（x,y：使用する能力値、t：目標値）\n        　1ゾロ、クリティカルも含めて判定結果を表示します\n        　能力値１つでの判定は Rx>=t で行えます\n        例）R8,6>=13\n      INFO_MESSAGE_TEXT\n\n      register_prefix('R')\n\n      def initialize(command)\n        super(command)\n        @validDiceTypes = [20, 12, 10, 8, 6, 4, 2]\n      end\n\n      def eval_game_system_specific_command(command)\n        debug('eval_game_system_specific_command begin')\n\n        unless command =~ /^R(\\d+)(,(\\d+))?([+\\-\\d]+)?(>=(\\d+))?/\n          debug('unmatched!')\n          return ''\n        end\n        debug('matched')\n\n        dice1 = Regexp.last_match(1).to_i\n        dice2 = Regexp.last_match(3).to_i\n        modifyString = Regexp.last_match(4)\n        difficulty = Regexp.last_match(6)\n\n        dice1, dice2 = getDiceType(dice1, dice2)\n        if dice1 == 0\n          return ''\n        end\n\n        modifyString ||= ''\n        modify = ArithmeticEvaluator.eval(modifyString)\n        difficulty = getDiffculty(difficulty)\n\n        value1 = getRollValue(dice1)\n        value2 = getRollValue(dice2)\n        total = value1 + value2 + modify\n\n        result = getResultText(value1, value2, dice1, dice2, difficulty, total)\n        unless result.empty?\n          result = \" ＞ \#{result}\"\n        end\n\n        value1Text = \"\#{value1}(\#{dice1})\"\n        value2Text = (value2 == 0 ? \"\" : \"+\#{value2}(\#{dice2})\")\n        modifyText = getModifyString(modify)\n\n        baseText = getBaseText(dice1, dice2, modify, difficulty)\n        output = \"(\#{baseText}) ＞ \#{value1Text}\#{value2Text}\#{modifyText} ＞ \#{total}\#{result}\"\n        return output\n      end\n\n      def getDiceType(dice1, dice2)\n        debug('getDiceType begin')\n\n        if dice2 != 0\n          if isValidDiceOne(dice1)\n            return dice1, dice2\n          else\n            return 0, 0\n          end\n        end\n\n        if isValidDice(dice1, dice2)\n          return dice1, dice2\n        end\n\n        diceBase = dice1\n\n        dice1 = (diceBase / 10).to_i\n        dice2 = diceBase % 10\n\n        if isValidDice(dice1, dice2)\n          return dice1, dice2\n        end\n\n        dice1 = (diceBase / 100).to_i\n        dice2 = diceBase % 100\n\n        if isValidDice(dice1, dice2)\n          return dice1, dice2\n        end\n\n        if isValidDiceOne(diceBase)\n          return diceBase, 0\n        end\n\n        return 0, 0\n      end\n\n      def isValidDice(dice1, dice2)\n        return isValidDiceOne(dice1) &&\n               isValidDiceOne(dice2)\n      end\n\n      def isValidDiceOne(dice)\n        @validDiceTypes.include?(dice)\n      end\n\n      def getDiffculty(difficulty)\n        unless difficulty.nil?\n          difficulty = difficulty.to_i\n        end\n\n        return difficulty\n      end\n\n      def getRollValue(dice)\n        return 0 if dice == 0\n\n        value = @randomizer.roll_once(dice)\n        return value\n      end\n\n      def getResultText(value1, value2, dice1, dice2, difficulty, total)\n        if isFamble(value1, value2)\n          return \"１ゾロ【１ゾロポイント＋１】\"\n        end\n\n        if isCritical(value1, value2, dice1, dice2)\n          return \"クリティカル成功\"\n        end\n\n        if difficulty.nil?\n          return ''\n        end\n\n        if total >= difficulty\n          return \"成功\"\n        end\n\n        return \"失敗\"\n      end\n\n      def isFamble(value1, value2)\n        return (value1 == 1) && (value2 == 1)\n      end\n\n      def isCritical(value1, value2, dice1, dice2)\n        return false if value2 == 0\n\n        if (value1 == 6) && (value2 == 6)\n          return true\n        end\n\n        if (value1 == dice1) && (value2 == dice2)\n          return true\n        end\n\n        return false\n      end\n\n      def getBaseText(dice1, dice2, modify, difficulty)\n        baseText = \"R\#{dice1}\"\n\n        if dice2 != 0\n          baseText += \",\#{dice2}\"\n        end\n\n        baseText += getModifyString(modify)\n\n        unless difficulty.nil?\n          baseText += \">=\#{difficulty}\"\n        end\n\n        return baseText\n      end\n\n      def getModifyString(modify)\n        if modify > 0\n          return \"+\" + modify.to_s\n        elsif modify < 0\n          return modify.to_s\n        end\n\n        return ''\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Ryutama>", "self", "register_prefix", "initialize", "command", "@validDiceTypes", "20", "12", "10", "8", "6", "4", "2", "eval_game_system_specific_command", "debug", "=~", "dice1", "Regexp", "last_match", "1", "to_i", "dice2", "3", "modifyString", "difficulty", "getDiceType", "0", "$ret_or_1", "modify", "ArithmeticEvaluator", "eval", "getDiffculty", "value1", "getRollValue", "value2", "total", "+", "result", "getResultText", "empty?", "value1Text", "value2Text", "modifyText", "getModifyString", "baseText", "getBaseText", "output", "isValidDiceOne", "isValidDice", "diceBase", "/", "%", "100", "dice", "include?", "nil?", "value", "@randomizer", "roll_once", "isFamble", "isCritical", ">=", "==", ">", "to_s", "<", "Base"], :mappings=>"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"}}]}