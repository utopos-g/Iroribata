{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/RecordOfLodossWar.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class RecordOfLodossWar < Base\n      ID = 'RecordOfLodossWar'\n      NAME = 'ロードス島戦記RPG'\n      SORT_KEY = 'ろおとすとうせんきRPG'\n\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ●判定\n        　LW<=(目標値)で判定。\n        　達成値が目標値の1/10(端数切り上げ)以下であれば大成功。1～10であれば自動成功。\n        　91～100であれば自動失敗となります。\n\n        ●回避判定\n        　LWD<=(目標値)で回避判定。この時出目が51以上で自動失敗となります。\n\n        　判定と回避判定は、どちらもコマンドだけの場合、出目の表示と自動成功と自動失敗の判定のみを行います。\n      INFO_MESSAGE_TEXT\n\n      register_prefix('LW')\n\n      def eval_game_system_specific_command(command)\n        parser = Command::Parser.new(\"LWD\", \"LW\", round_type: round_type)\n                                .restrict_cmp_op_to(nil, :<=)\n        cmd = parser.parse(command)\n\n        if cmd.nil? || ![nil, :<=].include?(cmd.cmp_op)\n          return nil\n        end\n\n        auto_failure = cmd.command == \"LWD\" ? 51 : 91\n        critical = (cmd.target_number.to_f / 10).ceil\n\n        dice_value = @randomizer.roll_once(100)\n\n        result =\n          if dice_value >= auto_failure\n            \"自動失敗(\#{auto_failure})\"\n          elsif dice_value <= critical\n            \"大成功(\#{critical})\"\n          elsif dice_value <= 10\n            \"自動成功\"\n          elsif cmd.cmp_op\n            dice_value <= cmd.target_number ? \"成功\" : \"失敗\"\n          end\n\n        sequence = [\n          \"(1D100\#{cmd.cmp_op}\#{cmd.target_number})\",\n          dice_value.to_s,\n          result\n        ].compact\n\n        return sequence.join(\" ＞ \")\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:RecordOfLodossWar>", "self", "register_prefix", "eval_game_system_specific_command", "command", "parser", "Command::Parser", "Command", "new", "round_type", "restrict_cmp_op_to", "cmd", "parse", "nil?", "include?", "cmp_op", "auto_failure", "51", "91", "critical", "/", "target_number", "to_f", "10", "ceil", "dice_value", "@randomizer", "roll_once", "100", "result", ">=", "<=", "sequence", "to_s", "compact", "join", "Base"], :mappings=>"AAAAA,2BAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QACE,8BAAKA,mBAAL;QACA,gCAAOA,YAAP;QACA,oCAAWA,cAAX;QAEA,wCACNA,OADqB,GAErBA,kBAFqB,GAGrBA,gDAHqB,GAIrBA,yBAJqB,GAKrBA,IALqB,GAMrBA,SANqB,GAOrBA,0CAPqB,GAQrBA,IARqB,GASrBA,sDATM;QAYAC,IAAAC,iBAAAA,CAAgBF,IAAhBE;QAEAF,OAAAG,iDAAAA,6CAAsCC,OAAtCD;AAAAA,UAAAA;;;UACEE,SAASC,IAAAC,aAAAD,WAAeE,KAAAA,CAAKL,KAApB,EAA2BA,IAA3B,EAAiC,wBAAA,cAAYF,IAAAQ,YAAAA,CAAAA,CAAZ,EAAlBD,CACAE,oBAAAA,CAAoB,GADnC,EACwC,IAAzBA;UACxBC,MAAMN,MAAMO,OAAAA,CAAOR,OAAPQ;UAEZ,IAAG,CAAA,QAAAD,GAAGE,SAAAA,CAAAA,CAAH,CAAA,IAAA,CAAA,KAAa,CAAC,GAAD,EAAM,IAAN,CAAUC,aAAAA,CAAUH,GAAGI,QAAAA,CAAAA,CAAbD,CAAvB,CAAA,CAAA,CAAH;YACE,OAAO;UADT;UAIAE,eAAe,CAAA,MAAAL,GAAGP,SAAAA,CAAAA,CAAH,EAAeD,KAAf,CAAA,GAAA,CAAuBc,EAAvB,IAAA,CAA4BC,EAA5B,CAAA;UACfC,WAAmCC,WAAvBT,GAAGU,eAAAA,CAAAA,CAAcC,MAAAA,CAAAA,CAAMF,EAAEG,EAAFH,CAAKI,MAAAA,CAAAA;UAExCC,aAAaC,eAAWC,WAAAA,CAAWC,GAAXD;UAExBE,SACE,CAAA,QAAcC,OAAXL,UAAWK,EAAGd,YAAHc,CAAd,CAAA,GAAA,CACG3B,OAAD,GAAA,CAAQa,YAAR,CAAA,GAAqBb,GADvB,IAEA,CAAA,QAAiB4B,OAAXN,UAAWM,EAAGZ,QAAHY,CAAjB,CAAA,GAAA,CACG5B,MAAD,GAAA,CAAOgB,QAAP,CAAA,GAAgBhB,GADlB,IAEA,CAAA,QAAiB4B,OAAXN,UAAWM,EAAGR,EAAHQ,CAAjB,CAAA,GAAA,CACE5B,MADF,IAEA,CAAA,QAAMQ,GAAGI,QAAAA,CAAAA,CAAT,CAAA,GAAA,CACE,CAAA,QAAWgB,OAAXN,UAAWM,EAAGpB,GAAGU,eAAAA,CAAAA,CAANU,CAAX,CAAA,GAAA,CAAkC5B,IAAlC,IAAA,CAAyCA,IAAzC,CAAA,CADF,IAAA,GAAA,CAFA,CAFA,CAFA;UAUF6B,WAAW,CACR7B,QAAD,GAAA,CAASQ,GAAGI,QAAAA,CAAAA,CAAZ,CAAA,GAAA,CAAsBJ,GAAGU,eAAAA,CAAAA,CAAzB,CAAA,GAAwClB,GAD/B,EAETsB,UAAUQ,MAAAA,CAAAA,CAFD,EAGTJ,MAHS,CAIVK,SAAAA,CAAAA;UAED,OAAOF,QAAQG,MAAAA,CAAMhC,KAANgC;QA/BjBhC,CAAAA;MAnBFH,GAAAA,WAAAA,EAA0BoC,UAA1BpC;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}]}