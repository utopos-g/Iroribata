{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/GehennaAn.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class GehennaAn < Base\n      # ゲームシステムの識別子\n      ID = 'GehennaAn'\n\n      # ゲームシステム名\n      NAME = 'ゲヘナ・アナスタシス'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'けへなあなすたしす'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        戦闘判定と通常判定に対応。幸運の助け、連撃増加値(戦闘判定)、闘技チット(戦闘判定)を自動表示します。\n        ・戦闘判定　(nGAt+m)\n        　ダイス数n、目標値t、修正値mで戦闘判定を行います。\n        　幸運の助け、連撃増加値、闘技チットを自動処理します。\n        ・通常判定　(nGt+m)\n        　ダイス数n、目標値t、修正値mで通常判定を行います。\n        　幸運の助けを自動処理します。(連撃増加値、闘技チットを表示抑制します)\n      INFO_MESSAGE_TEXT\n\n      register_prefix('\\d+G\\d+', '\\d+GA\\d+', '\\d+R6')\n\n      def initialize(command)\n        super(command)\n        @sort_add_dice = true\n        @sort_barabara_dice = true\n      end\n\n      private\n\n      def replace_text(string)\n        string\n          .gsub(/(\\d+)GA(\\d+)([+-][+\\-\\d]+)/) { \"\#{Regexp.last_match(1)}R6\#{Regexp.last_match(3)}>=\#{Regexp.last_match(2)}[1]\" }\n          .gsub(/(\\d+)GA(\\d+)/) { \"\#{Regexp.last_match(1)}R6>=\#{Regexp.last_match(2)}[1]\" }\n          .gsub(/(\\d+)G(\\d+)([+-][+\\-\\d]+)/) { \"\#{Regexp.last_match(1)}R6\#{Regexp.last_match(3)}>=\#{Regexp.last_match(2)}[0]\" }\n          .gsub(/(\\d+)G(\\d+)/) { \"\#{Regexp.last_match(1)}R6>=\#{Regexp.last_match(2)}[0]\" }\n      end\n\n      public\n\n      def eval_game_system_specific_command(string)\n        string = replace_text(string)\n\n        unless /(^|\\s)S?((\\d+)[rR]6([+\\-\\d]+)?([>=]+(\\d+))(\\[(\\d)\\]))(\\s|$)/i =~ string\n          return nil\n        end\n\n        string = Regexp.last_match(2)\n        diceCount = Regexp.last_match(3).to_i\n        modText = Regexp.last_match(4)\n        diff = Regexp.last_match(6).to_i\n        mode = Regexp.last_match(8).to_i\n\n        mod = ArithmeticEvaluator.eval(modText)\n\n        diceArray = @randomizer.roll_barabara(diceCount, 6).sort\n        diceValue = diceArray.sum()\n        diceText = diceArray.join(\",\")\n\n        dice_1st = \"\"\n        isLuck = true\n        diceValue = 0\n\n        # 幸運の助けチェック\n        diceArray.each do |i|\n          if dice_1st != \"\"\n            if (dice_1st != i) || (i < diff)\n              isLuck = false\n            end\n          else\n            dice_1st = i\n          end\n\n          diceValue += 1 if i >= diff\n        end\n\n        diceValue *= 2 if isLuck && (diceCount > 1)\n\n        output = \"\#{diceValue}[\#{diceText}]\"\n        success = diceValue + mod\n        success = 0 if success < 0\n\n        failed = diceCount - diceValue\n        failed = 0 if failed < 0\n\n        if mod > 0\n          output += \"+\#{mod}\"\n        elsif mod < 0\n          output += mod.to_s\n        end\n\n        if /[^\\d\\[\\]]+/ =~ output\n          output = \"(\#{string}) ＞ \#{output} ＞ 成功\#{success}、失敗\#{failed}\"\n        else\n          output = \"(\#{string}) ＞ \#{output}\"\n        end\n\n        # 連撃増加値と闘技チット\n        output += getAnastasisBonusText(mode, success)\n\n        return output\n      end\n\n      private\n\n      def getAnastasisBonusText(mode, success)\n        return '' if mode == 0\n\n        ma_bonus = ((success - 1) / 2).to_i\n        ma_bonus = 7 if ma_bonus > 7\n\n        bonus_str = ''\n        bonus_str += \"連撃[+\#{ma_bonus}]/\" if ma_bonus > 0\n        bonus_str += \"闘技[\#{getTougiBonus(success)}]\"\n        return \" ＞ \#{bonus_str}\"\n      end\n\n      def getTougiBonus(success)\n        table = [\n          [6, '1'],\n          [13, '2'],\n          [18, '3'],\n          [22, '4'],\n          [99, '5'],\n        ]\n\n        return get_table_by_number(success, table)\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:GehennaAn>", "self", "register_prefix", "initialize", "command", "@sort_add_dice", "@sort_barabara_dice", "private", "replace_text", "string", "gsub", "block in replace_text", "block (2 levels) in replace_text", "Regexp", "last_match", "1", "3", "2", "public", "eval_game_system_specific_command", "=~", "diceCount", "to_i", "modText", "4", "diff", "6", "mode", "8", "mod", "ArithmeticEvaluator", "eval", "diceArray", "@randomizer", "roll_barabara", "sort", "diceValue", "sum", "diceText", "join", "dice_1st", "isLuck", "0", "each", "block in eval_game_system_specific_command", "i", "block (2 levels) in eval_game_system_specific_command", "<", ">=", "+", ">", "*", "output", "success", "failed", "-", "to_s", "getAnastasisBonusText", "ma_bonus", "/", "7", "bonus_str", "getTougiBonus", "table", "13", "18", "22", "99", "get_table_by_number", "Base"], :mappings=>"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"}}]}