{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/TokumeiTenkousei.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class TokumeiTenkousei < Base\n      # ゲームシステムの識別子\n      ID = 'TokumeiTenkousei'\n\n      # ゲームシステム名\n      NAME = '特命転攻生'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'とくめいてんこうせい'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~HELP\n        ・判定 (xD6+y>=n)\n        　ゾロ目での自動振り足し\n        　1の出目に応じてEPPの獲得量を表示\n        　目標値 \"?\" には未対応\n      HELP\n\n      def initialize(command)\n        super(command)\n\n        @sort_add_dice = true\n      end\n\n      register_prefix('\\d+D6')\n\n      def eval_game_system_specific_command(command)\n        parser = Command::Parser.new(/\\d+D6/, round_type: round_type)\n        cmd = parser.parse(command)\n        unless cmd\n          return nil\n        end\n\n        times = cmd.command.to_i\n\n        dice_list = @randomizer.roll_barabara(times, 6).sort\n        @dice_list = [dice_list]\n        while same_all_dice?(dice_list)\n          dice_list = @randomizer.roll_barabara(times, 6).sort\n          @dice_list.push(dice_list)\n        end\n\n        dice_list_flatten = @dice_list.flatten\n        dice_total = dice_list_flatten.sum()\n        count_one = dice_list_flatten.count(1)\n\n        total = dice_total + cmd.modify_number\n\n        result =\n          if cmd.cmp_op\n            total.send(cmd.cmp_op, cmd.target_number) ? Result.success(\"成功\") : Result.failure(\"失敗\")\n          end\n\n        sequence = [\n          \"(\#{cmd})\",\n          interim_expr(cmd, dice_total),\n          total.to_s,\n          result.text,\n          epp(count_one)\n        ].compact\n\n        result.text = sequence.join(\" ＞ \")\n        return result\n      end\n\n      # 出目が全て同じか\n      def same_all_dice?(dice_list)\n        dice_list.size > 1 && dice_list.uniq.size == 1\n      end\n\n      def interim_expr(cmd, dice_total)\n        if @dice_list.flatten.size == 1 && cmd.modify_number == 0\n          return nil\n        end\n\n        dice_list = @dice_list.map { |ds| \"[\#{ds.join(',')}]\" }.join(\"\")\n        modifier = Format.modifier(cmd.modify_number)\n\n        return [dice_total.to_s, dice_list, modifier].join(\"\")\n      end\n\n      # エキストラパワーポイント獲得\n      #\n      # @param count_one [Integer]\n      # @return [String, nil]\n      def epp(count_one)\n        if count_one > 0\n          \"\#{count_one * 5}EPP獲得\"\n        end\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:TokumeiTenkousei>", "initialize", "command", "self", "@sort_add_dice", "register_prefix", "eval_game_system_specific_command", "parser", "Command::Parser", "Command", "new", "round_type", "cmd", "parse", "times", "to_i", "dice_list", "@randomizer", "roll_barabara", "6", "sort", "@dice_list", "same_all_dice?", "push", "dice_list_flatten", "flatten", "dice_total", "sum", "count_one", "count", "1", "total", "+", "modify_number", "result", "cmp_op", "send", "target_number", "Result", "success", "failure", "sequence", "interim_expr", "to_s", "text", "epp", "compact", "text=", "join", "$ret_or_1", ">", "size", "uniq", "==", "0", "map", "block in interim_expr", "ds", "block (2 levels) in interim_expr", "modifier", "Format", "*", "5", "Base"], :mappings=>"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"}}]}