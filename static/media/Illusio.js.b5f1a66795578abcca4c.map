{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Illusio.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Illusio < Base\n      # ゲームシステムの識別子\n      ID = 'Illusio'\n\n      # ゲームシステム名\n      NAME = '晃天のイルージオ'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'こうてんのいるうしお'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        判定：[n]IL(BNo)[P]\n\n        []内のコマンドは省略可能。\n        「n」でダイス数を指定。省略時は「1」。\n        (BNo)でブロックナンバーを指定。「236」のように記述。順不同可。\n        コマンド末に「P」を指定で、(BNo)のパリィ判定。（一応、複数指定可）\n\n        【書式例】\n        ・6IL236 → 6dでブロックナンバー「2,3,6」の判定。\n        ・IL4512 → 1dでブロックナンバー「1,2,4,5」の判定。\n        ・2IL1P → 2dでパリィナンバー「1」の判定。\n      MESSAGETEXT\n\n      def initialize(command)\n        super(command)\n        @sort_add_dice = true # ダイスのソート有\n      end\n\n      register_prefix(\n        '(\\d+)?IL([1-6]{0,6})(P)?'\n      )\n\n      def eval_game_system_specific_command(command)\n        m = command.match(/(\\d+)?IL([1-6]{0,6})(P)?$/i)\n        return nil unless m\n\n        dice_count = (m[1] || 1).to_i\n        block_no = (m[2] || \"\").each_char.map(&:to_i).uniq.sort\n        is_parry = !m[3].nil?\n\n        return check_roll(dice_count, block_no, is_parry)\n      end\n\n      def check_roll(dice_count, block_no, is_parry)\n        dice_array = @randomizer.roll_barabara(dice_count, 6).sort\n        dice_text = dice_array.join(',')\n\n        result_array = []\n        success = 0\n        dice_array.each do |i|\n          if block_no.count(i) > 0\n            result_array.push(\"×\")\n          else\n            result_array.push(i)\n            success += 1\n          end\n        end\n\n        block_text = block_no.join(',')\n        block_text2 = is_parry ? \"Parry\" : \"Block\"\n        result_text = result_array.join(',')\n\n        result = \"\#{dice_count}D6(\#{block_text2}:\#{block_text}) ＞ \#{dice_text} ＞ \#{result_text} ＞ \"\n        return \"\#{result}成功数：\#{success}\" unless is_parry\n\n        if success < dice_count\n          \"\#{result}パリィ成立！　次の非ダメージ2倍。\"\n        else\n          \"\#{result}成功数：\#{success}　パリィ失敗\"\n        end\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Illusio>", "initialize", "command", "self", "@sort_add_dice", "register_prefix", "eval_game_system_specific_command", "m", "match", "dice_count", "$ret_or_1", "[]", "1", "to_i", "block_no", "map", "2", "each_char", "to_proc", "uniq", "sort", "is_parry", "3", "nil?", "!", "check_roll", "dice_array", "@randomizer", "roll_barabara", "6", "dice_text", "join", "result_array", "success", "0", "each", "block in check_roll", "i", ">", "count", "block (2 levels) in check_roll", "push", "+", "block_text", "block_text2", "result_text", "result", "<", "Base"], :mappings=>"AAAAA,2BAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAEE,8BAAKA,SAAL;QAGA,gCAAOA,UAAP;QAGA,oCAAWA,YAAX;QAGA,wCACNA,oBADqB,GAErBA,IAFqB,GAGrBA,kBAHqB,GAIrBA,wBAJqB,GAKrBA,uCALqB,GAMrBA,wCANqB,GAOrBA,IAPqB,GAQrBA,SARqB,GASrBA,oCATqB,GAUrBA,sCAVqB,GAWrBA,8BAXM;;AAcAC,QAAAA,0BAAAA,sBAAeC,OAAfD;AAAAA,UAAAA;;UAAAA;;UACE,OAAAE,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAMD,OAAN,CAAA,EAAA,IAAA;UACAD,OAAAG,CAAAA,qBAAiB,IAAjBA;QAFFH,CAAAA;QAKAE,IAAAE,iBAAAA,CACEL,2BADFK;;AAIAC,QAAAA,iDAAAA,6CAAsCJ,OAAtCI;AAAAA,UAAAA;;;UACEC,IAAIL,OAAOM,OAAAA,CAAO,4BAAPA;UACX,KAAA,QAAkBD,CAAlB,CAAA;YAAA,OAAO;UAAP;UAEAE,aAAc,CAAA,QAAAC,CAAAA,YAAAH,CAACI,OAAAA,CAACC,CAADD,CAADD,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAQE,CAAR,CAAA,CAAUC,MAAAA,CAAAA;UACxBC,WAAiCC,MAArB,CAAA,QAAAL,CAAAA,YAAAH,CAACI,OAAAA,CAACK,CAADL,CAADD,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAQJ,EAAR,CAAA,CAAWW,WAAAA,CAAAA,CAAUF,OAAAA,EAAAA,EAAAA,EAAM,MAADG,SAAAA,CAAAA,CAALH,CAAYI,MAAAA,CAAAA,CAAKC,MAAAA,CAAAA;UAClDC,WAAYd,CAACI,OAAAA,CAACW,CAADX,CAAGY,SAAAA,CAAAA,CAALC,MAAAA,CAAAA;UAEX,OAAOrB,IAAAsB,YAAAA,CAAWhB,UAAX,EAAuBK,QAAvB,EAAiCO,QAAjCI;QARTnB,CAAAA;QAWAN,OAAAyB,0BAAAA,sBAAehB,UAAD,EAAaK,QAAb,EAAuBO,QAArCI;AAAAA,UAAAA;;;UACEC,aAAaC,eAAWC,eAAAA,CAAenB,UAA1B,EAAsCoB,CAA3BD,CAA6BR,MAAAA,CAAAA;UACrDU,YAAYJ,UAAUK,MAAAA,CAAMN,GAANM;UAEtBC,eAAe;UACfC,UAAUC;UACAC,MAAVT,UAAUS,QAAAA,EAAAA,EAAAA,EAAVC,aAAoBC,CAApBD;;YAAoB;YAClB,IAAA,QAAqBE,OAAlBxB,QAAQyB,OAAAA,CAAOF,CAAPE,CAAUD,EAAEJ,CAAFI,CAArB,CAAA;cACEE,OAAAR,YAAYS,MAAAA,CAAMD,GAANC;YADd;;cAGET,YAAYS,MAAAA,CAAMJ,CAANI;cACZD,OAAAP,CAAAA,UAAQS,SAART,OAAQS,EAAG9B,CAAH8B,CAART;YAJF,EADFG,CAAUD;UASVQ,aAAa7B,QAAQiB,MAAAA,CAAMN,GAANM;UACrBa,cAAc,CAAA,QAAAvB,QAAA,CAAA,GAAA,CAAWI,OAAX,IAAA,CAAqBA,OAArB,CAAA;UACdoB,cAAcb,YAAYD,MAAAA,CAAMN,GAANM;UAE1Be,SAAS,EAAA,GAAA,CAAGrC,UAAH,CAAA,GAAcgB,KAAd,GAAA,CAAmBmB,WAAnB,CAAA,GAA+BnB,GAA/B,GAAA,CAAkCkB,UAAlC,CAAA,GAA6ClB,MAA7C,GAAA,CAAmDK,SAAnD,CAAA,GAA6DL,KAA7D,GAAA,CAAkEoB,WAAlE,CAAA,GAA8EpB;UACvF,KAAA,QAAwCJ,QAAxC,CAAA;YAAA,OAAO,EAAA,GAAA,CAAGyB,MAAH,CAAA,GAAUrB,MAAV,GAAA,CAAgBQ,OAAhB;UAAP;UAEA,IAAA,QAAWc,OAARd,OAAQc,EAAEtC,UAAFsC,CAAX,CAAA;YACEtB,OAAA,EAAA,GAAA,CAAGqB,MAAH,CAAA,GAAUrB;UADZ;YAGEA,OAAA,EAAA,GAAA,CAAGqB,MAAH,CAAA,GAAUrB,MAAV,GAAA,CAAgBQ,OAAhB,CAAA,GAAwBR;UAH1B;QAtBFA,CAAAA;MA7CFzB,GAAAA,WAAAA,EAAgBgD,UAAhBhD;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}]}