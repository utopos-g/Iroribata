{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/ShinMegamiTenseiKakuseihen.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class ShinMegamiTenseiKakuseihen < Base\n      # ゲームシステムの識別子\n      ID = 'ShinMegamiTenseiKakuseihen'\n\n      # ゲームシステム名\n      NAME = '真・女神転生TRPG 覚醒篇'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'しんめかみてんせいTRPGかくせいへん'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・判定\n        1D100<=(目標値) でスワップ・通常・逆スワップ判定を判定。\n        威力ダイスは nU6[6] (nはダイス個数)でロール可能です。\n      INFO_MESSAGE_TEXT\n\n      # ゲーム別成功度判定(1d100)\n      def check_1D100(total, dice_total, cmp_op, target)\n        return '' if target == '?'\n        return '' unless cmp_op == :<=\n\n        dice1, dice2 = split_tens(dice_total)\n\n        total1 = dice1 * 10 + dice2\n        total2 = dice2 * 10 + dice1\n\n        # ゾロ目\n        isRepdigit = (dice1 == dice2)\n\n        result = \" ＞ スワップ\"\n        result += getCheckResultText(target, [total1, total2].min, isRepdigit)\n        result += \"／通常\"\n        result += getCheckResultText(target, total % 100, isRepdigit)\n        result += \"／逆スワップ\"\n        result += getCheckResultText(target, [total1, total2].max, isRepdigit)\n\n        return result\n      end\n\n      def split_tens(value)\n        value %= 100\n\n        ones = (value / 10).to_i\n        tens = value % 10\n\n        return [ones, tens]\n      end\n\n      def getCheckResultText(diff, total, isRepdigit)\n        checkResult = getCheckResult(diff, total, isRepdigit)\n        text = format(\"(%02d)\", total) + checkResult\n        return text\n      end\n\n      def getCheckResult(diff, total, isRepdigit)\n        if diff >= total\n          return getSuccessResult(isRepdigit)\n        end\n\n        return getFailResult(isRepdigit)\n      end\n\n      def getSuccessResult(isRepdigit)\n        if isRepdigit\n          return \"絶対成功\"\n        end\n\n        return \"成功\"\n      end\n\n      def getFailResult(isRepdigit)\n        if isRepdigit\n          return \"絶対失敗\"\n        end\n\n        return \"失敗\"\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:ShinMegamiTenseiKakuseihen>", "check_1D100", "total", "dice_total", "cmp_op", "target", "self", "split_tens", "dice1", "dice2", "total1", "+", "*", "10", "total2", "isRepdigit", "==", "result", "getCheckResultText", "min", "%", "100", "max", "value", "ones", "/", "to_i", "tens", "diff", "checkResult", "getCheckResult", "text", "format", ">=", "getSuccessResult", "getFailResult", "Base"], :mappings=>"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"}}]}