{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/normalize.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module Normalize\n    module_function\n\n    # 比較演算子をシンボルに正規化する\n    #\n    # @param op [String]\n    # @return [Symbol, nil]\n    def comparison_operator(op)\n      case op\n      when /<=|=</\n        :<=\n      when />=|=>/\n        :>=\n      when /<>|!=|=!/\n        :'!='\n      when /</\n        :<\n      when />/\n        :>\n      when /=/\n        :==\n      end\n    end\n\n    # 目標値を正規化する\n    #\n    # @param val [String]\n    # @return [Integer, String] 整数か'?'\n    def target_number(val)\n      if val == \"?\"\n        val\n      else\n        val.to_i\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:Normalize>", "self", "module_function", "comparison_operator", "op", "$ret_or_1", "target_number", "val", "to_i"], :mappings=>"AAAAA,mCAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;;;MACEC,IAAAC,iBAAAA,CAAAA;;AAMAC,MAAAA,mCAAAA,+BAAwBC,EAAxBD;AAAAA,QAAAA;;QAEE,IAAA,QAAK,OAAL,EADAE,CAAAA,YAAKD,EAALC,CACA,CAAA;UACEF,OAAA;QADF,OAEA,IAAA,QAAK,OAAL,EAdN,SAcM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,UAAL,EAhBN,SAgBM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,GAAL,EAlBN,SAkBM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,GAAL,EApBN,SAoBM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,GAAL,EAtBN,SAsBM,CAAA;UACEA,OAAA;QADF;UAXAA,OAAA;QAWA;MAZFA,CAAAA;MAqBAH,OAAAM,6BAAAA,yBAAkBC,GAAlBD;AAAAA;QACE,IAAA,MAAGC,GAAH,EAAUD,GAAV,CAAA;UACEA,OAAAC;QADF;UAGED,OAAAC,GAAGC,MAAAA,CAAAA;QAHL;MADFF,CAAAA;IA5BFN,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>46, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/format.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module Format\n    module_function\n\n    # 比較演算子を文字列表記にする\n    #\n    # @param op [Symbol]\n    # @return [String, nil]\n    def comparison_operator(op)\n      case op\n      when :==\n        \"=\"\n      when :'!='\n        \"<>\"\n      when Symbol\n        op.to_s\n      end\n    end\n\n    # 修正値を文字列表記にする\n    #\n    # @param number [Integer, nil]\n    # @return [String]\n    def modifier(number)\n      if number.nil?\n        nil\n      elsif number == 0\n        \"\"\n      elsif number > 0\n        \"+\#{number}\"\n      else\n        number.to_s\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:Format>", "self", "module_function", "comparison_operator", "op", "$ret_or_1", "Symbol", "to_s", "modifier", "number", "nil?", "0", ">"], :mappings=>"AAAAA,gCAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;;MACEC,IAAAC,iBAAAA,CAAAA;;AAMAC,MAAAA,mCAAAA,+BAAwBC,EAAxBD;AAAAA,QAAAA;;QAEE,IAAA,QAAK,IAAL,EADAE,CAAAA,YAAKD,EAALC,CACA,CAAA;UACEF,OAAAA;QADF,OAEA,IAAA,QAAK,IAAL,EAdN,SAcM,CAAA;UACEA,OAAAA;QADF,OAEA,IAAA,QAAKG,YAAL,EAhBN,SAgBM,CAAA;UACEH,OAAAC,EAAEG,MAAAA,CAAAA;QADJ;UALAJ,OAAA;QAKA;MANFA,CAAAA;MAeAH,OAAAQ,wBAAAA,oBAAaC,MAAbD;AAAAA;QACE,IAAA,QAAGC,MAAMC,SAAAA,CAAAA,CAAT,CAAA;UACEF,OAAA;QADF,OAEA,IAAA,MAAMC,MAAN,EAAgBE,CAAhB,CAAA;UACEH,OAAAA;QADF,OAEA,IAAA,QAAaI,OAAPH,MAAOG,EAAED,CAAFC,CAAb,CAAA;UACEJ,OAACA,GAAD,GAAA,CAAIC,MAAJ;QADF;UAGED,OAAAC,MAAMF,MAAAA,CAAAA;QAHR;MALFC,CAAAA;IAtBFR,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>91, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/NightWizard.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/normalize\"\nrequire \"bcdice/format\"\n\nmodule BCDice\n  module GameSystem\n    class NightWizard < Base\n      # ゲームシステムの識別子\n      ID = 'NightWizard'\n\n      # ゲームシステム名\n      NAME = 'ナイトウィザード The 2nd Edition'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'ないとういさあと2'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・判定用コマンド　(aNW+b@x#y$z+c)\n        　　a : 基本値\n        　　b : 常時に準じる特技による補正\n        　　c : 常時以外の特技、および支援効果による補正（ファンブル時には適用されない）\n        　　x : クリティカル値のカンマ区切り（省略時 10）\n        　　y : ファンブル値のカンマ区切り（省略時 5）\n        　　z : プラーナによる達成値補正のプラーナ消費数（ファンブル時には適用されない）\n        　クリティカル値、ファンブル値が無い場合は1や13などのあり得ない数値を入れてください。\n        　例）12NW-5@7#2$3 1NW 50nw+5@7,10#2,5 50nw-5+10@7,10#2,5+15+25\n      INFO_MESSAGE_TEXT\n\n      register_prefix('([-+]?\\d+)?NW', '2R6')\n\n      def initialize(command)\n        super(command)\n\n        @nw_command = \"NW\"\n      end\n\n      # @return [String, nil]\n      def eval_game_system_specific_command(string)\n        cmd = parse_nw(string) || parse_2r6(string)\n        unless cmd\n          return nil\n        end\n\n        total, interim_expr, status = roll_nw(cmd)\n        result =\n          if cmd.cmp_op\n            total.send(cmd.cmp_op, cmd.target_number) ? \"成功\" : \"失敗\"\n          end\n\n        sequence = [\n          \"(\#{cmd})\",\n          interim_expr,\n          status,\n          total.to_s,\n          result,\n        ].compact\n        return sequence.join(\" ＞ \")\n      end\n\n      private\n\n      class Parsed\n        # @return [Array<Integer>] クリティカルになる出目の一覧\n        attr_accessor :critical_numbers\n\n        # @return [Array<Integer>] ファンブルになる出目の一覧\n        attr_accessor :fumble_numbers\n\n        # @return [Integer, nil] プラーナによる補正\n        attr_accessor :prana\n\n        # @return [Integer] ファンブルでない時に適用される修正値\n        attr_accessor :active_modify_number\n\n        # @return [Symbol, nil] 比較演算子\n        attr_accessor :cmp_op\n\n        # @return [Integer, nil] 目標値\n        attr_accessor :target_number\n      end\n\n      class ParsedNW < Parsed\n        # @return [Integer] 判定の基礎値\n        attr_accessor :base\n\n        # @return [Integer] 修正値\n        attr_accessor :modify_number\n\n        def initialize(command)\n          super()\n          @command = command\n        end\n\n        # 常に適用される修正値を返す\n        #\n        # @return [Integer]\n        def passive_modify_number\n          @base + @modify_number\n        end\n\n        # @return [String]\n        def to_s\n          base = @base.zero? ? nil : @base\n          modify_number = Format.modifier(@modify_number)\n          active_modify_number = Format.modifier(@active_modify_number)\n          dollar = @prana && \"$\#{@prana}\"\n\n          return \"\#{base}\#{@command}\#{modify_number}@\#{@critical_numbers.join(',')}#\#{@fumble_numbers.join(',')}\#{dollar}\#{active_modify_number}\#{@cmp_op}\#{@target_number}\"\n        end\n      end\n\n      class Parsed2R6 < Parsed\n        # @return [Integer] 常に適用される修正値\n        attr_accessor :passive_modify_number\n\n        # @return [String]\n        def to_s\n          \"2R6M[\#{@passive_modify_number},\#{@active_modify_number}]C[\#{@critical_numbers.join(',')}]F[\#{@fumble_numbers.join(',')}]\#{@cmp_op}\#{@target_number}\"\n        end\n      end\n\n      # @return [ParsedNW, nil]\n      def parse_nw(string)\n        m = /^([-+]?\\d+)?\#{@nw_command}((?:[-+]\\d+)+)?(?:@(\\d+(?:,\\d+)*))?(?:#(\\d+(?:,\\d+)*))?(?:\\$(\\d+))?((?:[-+]\\d+)+)?(?:([>=]+)(\\d+))?$/.match(string)\n        unless m\n          return nil\n        end\n\n        command = ParsedNW.new(@nw_command)\n        command.base = m[1].to_i\n        command.modify_number = ArithmeticEvaluator.eval(m[2])\n        command.critical_numbers = m[3] ? m[3].split(',').map(&:to_i) : [10]\n        command.fumble_numbers = m[4] ? m[4].split(',').map(&:to_i) : [5]\n        command.prana = m[5]&.to_i\n        command.active_modify_number = ArithmeticEvaluator.eval(m[6])\n        command.cmp_op = Normalize.comparison_operator(m[7])\n        command.target_number = m[8]&.to_i\n\n        return command\n      end\n\n      # @return [Parsed2R6, nil]\n      def parse_2r6(string)\n        m = /^2R6m\\[([-+]?\\d+(?:[-+]\\d+)*)(?:,([-+]?\\d+(?:[-+]\\d+)*))?\\](?:c\\[(\\d+(?:,\\d+)*)\\])?(?:f\\[(\\d+(?:,\\d+)*)\\])?(?:([>=]+)(\\d+))?/i.match(string)\n        unless m\n          return nil\n        end\n\n        command = Parsed2R6.new\n        command.passive_modify_number = ArithmeticEvaluator.eval(m[1])\n        command.active_modify_number = ArithmeticEvaluator.eval(m[2])\n        command.critical_numbers = m[3] ? m[3].split(',').map(&:to_i) : [10]\n        command.fumble_numbers = m[4] ? m[4].split(',').map(&:to_i) : [5]\n        command.cmp_op = Normalize.comparison_operator(m[5])\n        command.target_number = m[6]&.to_i\n\n        return command\n      end\n\n      def roll_nw(parsed)\n        @critical_numbers = parsed.critical_numbers\n        @fumble_numbers = parsed.fumble_numbers\n\n        @total = 0\n        @interim_expr = \"\"\n        @status = nil\n\n        status = roll_once_first()\n        while status == :critical\n          status = roll_once()\n        end\n\n        if status != :fumble && parsed.prana\n          dice_list = @randomizer.roll_barabara(parsed.prana, 6)\n          prana_bonus = dice_list.sum()\n          prana_list = dice_list.join(\",\")\n\n          @total += prana_bonus\n          @interim_expr += \"+\#{prana_bonus}[\#{prana_list}]\"\n        end\n\n        base =\n          if status == :fumble\n            fumble_base_number(parsed)\n          else\n            parsed.passive_modify_number + parsed.active_modify_number\n          end\n\n        @total += base\n        @interim_expr = base.to_s + @interim_expr\n\n        return @total, @interim_expr, @status\n      end\n\n      # @return [Symbol, nil]\n      def roll_once(fumbleable = false)\n        dice_list = @randomizer.roll_barabara(2, 6)\n        dice_value = dice_list.sum()\n        dice_str = dice_list.join(\",\")\n\n        if fumbleable && @fumble_numbers.include?(dice_value)\n          @total -= 10\n          @interim_expr += \"-10[\#{dice_str}]\"\n          @status = \"ファンブル\"\n          return :fumble\n        elsif @critical_numbers.include?(dice_value)\n          @total += 10\n          @interim_expr += \"+10[\#{dice_str}]\"\n          @status = \"クリティカル\"\n          return :critical\n        else\n          @total += dice_value\n          @interim_expr += \"+\#{dice_value}[\#{dice_str}]\"\n          return nil\n        end\n      end\n\n      # @return [Symbol, nil]\n      def roll_once_first\n        roll_once(true)\n      end\n\n      # @return [Integer]\n      def fumble_base_number(parsed)\n        parsed.passive_modify_number\n      end\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:NightWizard>", "register_prefix", "initialize", "command", "@nw_command", "eval_game_system_specific_command", "string", "cmd", "$ret_or_1", "parse_nw", "parse_2r6", "roll_nw", "total", "interim_expr", "status", "result", "cmp_op", "send", "target_number", "sequence", "to_s", "compact", "join", "private", "<class:Parsed>", "attr_accessor", "<class:ParsedNW>", "@command", "passive_modify_number", "+", "@base", "@modify_number", "base", "zero?", "modify_number", "Format", "modifier", "active_modify_number", "@active_modify_number", "dollar", "@prana", "@critical_numbers", "@fumble_numbers", "@cmp_op", "@target_number", "Parsed", "<class:Parsed2R6>", "@passive_modify_number", "m", "match", "ParsedNW", "new", "base=", "[]", "1", "to_i", "modify_number=", "ArithmeticEvaluator", "eval", "2", "critical_numbers=", "3", "map", "split", "to_proc", "10", "fumble_numbers=", "4", "5", "prana=", "active_modify_number=", "6", "cmp_op=", "Normalize", "comparison_operator", "7", "target_number=", "8", "Parsed2R6", "passive_modify_number=", "parsed", "critical_numbers", "fumble_numbers", "@total", "0", "@interim_expr", "@status", "roll_once_first", "roll_once", "prana", "dice_list", "@randomizer", "roll_barabara", "prana_bonus", "sum", "prana_list", "fumble_base_number", "fumbleable", "dice_value", "dice_str", "include?", "-", "Base"], :mappings=>"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"}}]}