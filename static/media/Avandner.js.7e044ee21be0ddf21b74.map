{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Avandner.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Avandner < Base\n      # ゲームシステムの識別子\n      ID = 'Avandner'\n\n      # ゲームシステム名\n      NAME = '黒絢のアヴァンドナー'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'こつけんのあうあんとなあ'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・調査判定：nAVm[Cx]\n        ・命中判定：nAVm*p[+t][Cx]\n        []内は省略可能。\n\n        クリティカルヒットの分だけ、自動で振り足し処理を行います。0\n        「n」でダイス数を指定。\n        「m」で目標値を指定。省略は出来ません。\n        「Cx」でクリティカル値を指定。省略時は「1」、最大値は「2」、「0」でクリティカル無し。\n        「p」で攻撃力を指定。「*」は「x」でも可。\n        「+t」でクリティカルトリガーを指定。省略可能です。\n        攻撃力指定で命中判定となり、成功数ではなく、ダメージを結果表示します。\n\n        【書式例】\n        ・5AV3 → 5d10で目標値3。\n        ・6AV2C0 → 6d10で目標値2。クリティカル無し。\n        ・4AV3*5 → 4d10で目標値3、攻撃力5の命中判定。\n        ・7AV2x10 → 7d10で目標値2、攻撃力10の命中判定。\n        ・8av4*7+10 → 8d10で目標値4、攻撃力7、クリティカルトリガー10の命中判定。\n      MESSAGETEXT\n\n      register_prefix('\\d+AV')\n\n      def initialize(command)\n        super(command)\n        @sort_add_dice = true # ダイスのソート有\n      end\n\n      def eval_game_system_specific_command(command)\n        # AVコマンド：調査判定, 成功判定\n        if command =~ /(\\d+)AV(\\d+)((x|\\*)(\\d+))?(\\+(\\d+))?(C(\\d+))?$/i\n          diceCount = Regexp.last_match(1).to_i\n          target = Regexp.last_match(2).to_i\n          damage = (Regexp.last_match(5) || 0).to_i\n          criticalTrigger = (Regexp.last_match(7) || 0).to_i\n          criticalNumber = (Regexp.last_match(9) || 1).to_i.clamp(0, 2)\n          return checkRoll(diceCount, target, damage, criticalTrigger, criticalNumber)\n        end\n\n        return nil\n      end\n\n      def checkRoll(diceCount, target, damage, criticalTrigger, criticalNumber)\n        totalSuccessCount = 0\n        totalCriticalCount = 0\n        text = \"\"\n\n        rollCount = diceCount\n\n        while rollCount > 0\n          diceArray = @randomizer.roll_barabara(rollCount, 10).sort\n          diceText = diceArray.join(\",\")\n\n          successCount = diceArray.count { |i| i <= target }\n          criticalCount = diceArray.count { |i| i <= criticalNumber }\n\n          totalSuccessCount += successCount\n          totalCriticalCount += criticalCount\n\n          text += \"+\" unless text.empty?\n          text += \"\#{successCount}[\#{diceText}]\"\n\n          rollCount = criticalCount\n        end\n\n        result = \"\"\n        isDamage = (damage != 0)\n\n        if isDamage\n          totalDamage = totalSuccessCount * damage + totalCriticalCount * criticalTrigger\n\n          result += \"(\#{diceCount}D10\\<\\=\#{target}) ＞ \#{text} ＞ Hits：\#{totalSuccessCount}*\#{damage}\"\n          result += \" + Trigger：\#{totalCriticalCount}*\#{criticalTrigger}\" if criticalTrigger > 0\n          result += \" ＞ \#{totalDamage}ダメージ\"\n        else\n          result += \"(\#{diceCount}D10\\<\\=\#{target}) ＞ \#{text} ＞ 成功数：\#{totalSuccessCount}\"\n        end\n\n        result += \" / \#{totalCriticalCount}クリティカル\" if totalCriticalCount > 0\n\n        return result\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Avandner>", "self", "register_prefix", "initialize", "command", "@sort_add_dice", "eval_game_system_specific_command", "=~", "diceCount", "Regexp", "last_match", "1", "to_i", "target", "2", "damage", "$ret_or_1", "5", "0", "criticalTrigger", "7", "criticalNumber", "9", "clamp", "checkRoll", "totalSuccessCount", "totalCriticalCount", "text", "rollCount", ">", "diceArray", "@randomizer", "roll_barabara", "10", "sort", "diceText", "join", "successCount", "count", "block in checkRoll", "i", "block (2 levels) in checkRoll", "<=", "criticalCount", "+", "empty?", "result", "isDamage", "!=", "totalDamage", "*", "Base"], :mappings=>"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"}}]}