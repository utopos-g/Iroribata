{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Villaciel.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Villaciel < Base\n      # ゲームシステムの識別子\n      ID = 'Villaciel'\n\n      # ゲームシステム名\n      NAME = '蒼天のヴィラシエル'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'そうてんのういらしえる'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・判定　　　　　　　　nVBS[>=d]\n        　[]内省略時は達成数の計算のみ。トライアンフあり。\n        　n: ダイス数、d: 難易度\n        ・フロンティア判定　　nVF\n        　n: ダイス数\n        　nVBSを行い、うでまえ表を参照した結果を表示します。\n        ・採掘スキル判定　　　nVM\n        　n: ダイス数\n        　判定に成功した場合、自動的に獲得できるアイテム数も表示されます。\n        ・宝石加工スキル判定　nVG\n        　n: ダイス数\n        ・前職表　　　　　　　PJ[x]    x=V,A\n        　[]内は省略可能。\n        　PJ, PJV: 「蒼天のヴィラシエル」掲載の前職表　PJA: 「白雲のアルメサール」掲載の前職表\n        ・ぷちクエスト表　　　PQ[x]    x=V,A\n        　[]内は省略可能。\n        　PQ, PQV: 「蒼天のヴィラシエル」掲載のぷちクエスト表　PQA: 「白雲のアルメサール」掲載のぷちクエスト表\n        ・アクシデント表　　　AC\n        ・もふもふ表　　　　　MMx      x=I,A,V,VV,VA,D\n          MMI: 昆虫　MMA: 動物　MMV, MMVV: ヴィラシエル種（「蒼天のヴィラシエル」掲載）　MMVA: ヴィラシエル種（「白雲のアルメサール」掲載）　MMD: 鋼龍種\n        ・釣り表　　　　　　　Fx       x=L,R,W,G,B,C,S\n        　FL: 湖　FR: 河　FW: 白雲　FG: 灰雲　FB: 黒雲　FC: 共通　FS: 塩湖\n        ・不食植物表　　　　　IP[x]    x=V,A\n        　IP, IPV: 「蒼天のヴィラシエル」掲載の不食植物表　IPA: 「白雲のアルメサール」掲載の不食植物表\n        ・可食植物表　　　　　EP[x][n] x=V,A\n        　[]内は省略可能。\n        　n: 可食植物表番号\n        　EP[n], EPV[n]: 「蒼天のヴィラシエル」掲載の可食植物表。[]内省略時はnを1D6で決定し、EPVnを実行。ただし、1D6の出目が6ならば、「好きな表を選んでおっけー！」と表示。\n        　EPA[n]: 「白雲のアルメサール」掲載の可食植物表。[]内省略時は1D6を振り、出目が偶数ならばEPA1、奇数ならばEPA2を実行。\n        ・変異植物表　　　　　MP\n        ・改良種表　　　　　　IS\n      MESSAGETEXT\n\n      register_prefix('\\d+VBS(>=\\d+)?', '\\d+VF', '\\d+VM', '\\d+VG', 'PJ[VA]?', 'PQ[VA]?', 'AC', 'MM([IAD]|V[VA]?)', 'F[LRWGBCS]', 'IP[VA]?', 'EP[VA]?', 'MP', 'IS')\n\n      def initialize(command)\n        super(command)\n\n        @d66_sort_type = D66SortType::NO_SORT # D66あり。ただし、現行ルールにある6x6の表については別のコマンドを用意\n        @round_type = RoundType::CEIL # 端数は切り上げ\n      end\n\n      def eval_game_system_specific_command(command)\n        case command\n        when /\\d+VBS/\n          resolute_action(command)\n        when /\\d+VF/\n          resolute_frontier_action(command)\n        when /\\d+VM/\n          resolute_mining_action(command)\n        when /\\d+VG/\n          resolute_cutting_gem_action(command)\n        when /PJ[VA]?/\n          use_previous_job_chart(command)\n        when /PQ[VA]?/\n          use_petit_quest_chart(command)\n        when 'AC'\n          use_accident_chart(command)\n        when /MM([IAD]|V[VA]?)/\n          use_mohumohu_chart(command)\n        when /F[LRWGBCS]/\n          use_fishing_chart(command)\n        when /IP[VA]?/\n          use_inedible_plant_chart(command)\n        when /EP[VA]?\\d?/\n          use_edible_plant_chart(command)\n        when 'MP'\n          use_mutant_plant_chart(command)\n        when 'IS'\n          use_improved_species_chart(command)\n        end\n      end\n\n      private\n\n      D6 = 6\n      LEAST_SUCCESS_ROLL = 4\n      SUCCESS_STR = ' ＞ 成功'\n      FAILURE_STR = ' ＞ 失敗'\n\n      def derive_achievement(num_dices, command)\n        # 達成数計算の際にはトライアンフ「出目が6だったダイスは達成数2としてカウントする」を考慮する必要があるが、要は「達成数=成功数+出目が最大値だったダイスの数」になる\n        dice_list = @randomizer.roll_barabara(num_dices, D6)\n        dice_str = dice_list.join(\",\")\n        num_triumph_dices = dice_list.count(6)\n        num_successes = dice_list.count { |dice| dice >= LEAST_SUCCESS_ROLL }\n        achievement = num_successes + num_triumph_dices\n\n        output = \"(\#{command}) ＞ [\#{dice_str}] ＞ 達成数: \#{achievement}\"\n        return achievement, output\n      end\n\n      def resolute_action(command)\n        match_data = command.match(/(\\d+)VBS(>=(\\d+))?/)\n\n        num_dices = match_data[1].to_i\n        achievement, output = derive_achievement(num_dices, command)\n        return output unless match_data[2]\n\n        difficulty = match_data[3].to_i\n        output += achievement >= difficulty ? SUCCESS_STR : FAILURE_STR\n\n        return output\n      end\n\n      SKILL_CHART = ['左に3マス、上に3マス動かす', '左に2マス、上に2マス動かす', '右か下に1マス動かしてもよい', '右に1マス、下に1マス動かす', '好きな方向に最大で3マス動かしてもよい（1マスでも良い）', '好きな方向に最大で5マス動かしてもよい（1〜3マスでもよい）'].freeze\n\n      def resolute_frontier_action(command)\n        num_dices = command.match(/(\\d+)VF/)[1].to_i\n        achievement, output = derive_achievement(num_dices, command)\n\n        chart_index =\n          case achievement\n          when 0..2\n            achievement\n          when 3, 4\n            3\n          when 5..8\n            4\n          else\n            5\n          end\n\n        skill = SKILL_CHART[chart_index]\n        return \"\#{output} ＞ \#{skill}\"\n      end\n\n      def resolute_difficult_action(num_dices, least_success_roll, command)\n        # 1個でもleast_success_roll以上の出目が出たら成功となる判定\n\n        # 出目の最大値がnならば「1個でもn以上の出目が出た」ことになる\n        dice_list = @randomizer.roll_barabara(num_dices, D6)\n        dice_str = dice_list.join(',')\n        largest_roll = dice_list.max()\n        is_successful = largest_roll >= least_success_roll\n\n        output = \"(\#{command}) ＞ [\#{dice_str}]\"\n        output += is_successful ? SUCCESS_STR : FAILURE_STR\n\n        return output, is_successful\n      end\n\n      LEAST_MINING_SUCCESS_ROLL = 5\n      LEAST_GEM_SUCCESS_ROLL = 6\n\n      def resolute_mining_action(command)\n        num_dices = command.match(/(\\d+)VM/)[1].to_i\n        output, is_successful = resolute_difficult_action(num_dices, LEAST_MINING_SUCCESS_ROLL, command)\n        return output unless is_successful\n\n        roll_result = @randomizer.roll_once(D6)\n        \"\#{output} ＞ (1D6) ＞ [\#{roll_result}] ＞ アイテムを\#{roll_result}個獲得\"\n      end\n\n      def resolute_cutting_gem_action(command)\n        num_dices = command.match(/(\\d+)VG/)[1].to_i\n        resolute_difficult_action(num_dices, LEAST_GEM_SUCCESS_ROLL, command)[0]\n      end\n\n      VILLACIEL_PREVIOUS_JOB_CHART = [['農家: 知力+1 器用さ+1 開拓／1Lv',\n                                       '漁師: 知力+1 ひらめき+1 釣り／1Lv',\n                                       '狩人: 武力+1 ひらめき+1 穴掘り／1Lv',\n                                       '鍛冶職人: 武力+1 器用さ+1 採掘／1Lv',\n                                       '牧場主: 仲良し+2 開拓／1Lv',\n                                       '採掘師: 器用さ+1 ひらめき+1 採掘／1Lv'].freeze,\n                                      ['家事手伝い: 器用さ+1 仲良し+1 調理／1Lv',\n                                       '調理師: 知力+1 ひらめき+1 調理／1Lv',\n                                       '細工師: 器用さ+2 採掘／1Lv',\n                                       '大工: 武力+1 器用さ+1 木こり／1Lv',\n                                       '荒くれ者: 武力+2 穴掘り／1Lv',\n                                       '王国騎士: 武力+1 知力+1 木こり／1Lv'].freeze].freeze\n      ARMESEAR_PREVIOUS_JOB_CHART = [['農家: 知力+1 器用さ+1 開拓／1Lv',\n                                      '漁師: 知力+1 ひらめき+1 釣り／1Lv',\n                                      '狩人: 武力+1 ひらめき+1 穴掘り／1Lv',\n                                      '鍛冶職人: 武力+1 器用さ+1 採掘／1Lv',\n                                      '牧場主: 仲良し+2 開拓／1Lv',\n                                      '採掘師: 器用さ+1 ひらめき+1 採掘／1Lv'].freeze,\n                                     ['羊飼い: 仲良し+2 もふもふ／1Lv',\n                                      '芽拾い: 知力+1 武力+1 採集／1Lv',\n                                      '服屋見習い: 器用さ+2 裁縫／1Lv',\n                                      '革細工見習い: 知力+2 裁縫／1Lv',\n                                      '商人: 知力+1 仲良し+1 基礎になるスキル／1Lv',\n                                      '旅人: 武力+1 知力+1 基礎になるスキル／1Lv'].freeze,\n                                     ['家事手伝い: 器用さ+1 仲良し+1 調理／1Lv',\n                                      '調理師: 知力+1 ひらめき+1 調理／1Lv',\n                                      '細工師: 器用さ+2 採掘／1Lv or 調合・細工／1Lv',\n                                      '大工: 武力+1 器用さ+1 木こり／1Lv',\n                                      '荒くれ者: 武力+2 穴掘り／1Lv',\n                                      '王国騎士: 武力+1 知力+1 木こり／1Lv'].freeze].freeze\n\n      def use_previous_job_chart(command)\n        match_data = command.match(/PJ([VA]?)/)\n        chart_symbol = match_data[1] == '' ? 'V' : match_data[1]\n\n        roll_result1 = @randomizer.roll_once(D6)\n        chart_text, roll_result2 = case chart_symbol\n                                   when 'V' then get_table_by_1d6(VILLACIEL_PREVIOUS_JOB_CHART[((roll_result1 - 1) / 3).to_i])\n                                   when 'A' then get_table_by_1d6(ARMESEAR_PREVIOUS_JOB_CHART[((roll_result1 - 1) / 2).to_i])\n                                   end\n\n        chart_title = case chart_symbol\n                      when 'V' then '前職表（ヴィラシエル）'\n                      when 'A' then '前職表（アルメサール）'\n                      end\n        \"\#{chart_title} ＞ [\#{roll_result1},\#{roll_result2}] ＞ \#{chart_text}\"\n      end\n\n      VILLACIEL_PETIT_QUEST_CHART = [['家の補強のために: 【目的：木を1個納品】【報酬：各自2プサイ】見えを張っていい木材で家を作ったら木材が枯渇しちまった。頼む、原木を分けてくれないか？',\n                                      '孫のために: 【目的：花を1個納品】【報酬：各自2プサイ】綺麗な花があればいい色に染められるだろうと思うてな。孫のために必要なの。',\n                                      '人間界の草: 【目的：草を2個納品】【報酬：各自3プサイ】魔界にはない草が生えていると噂で聞いたことがある。その草がほしい。',\n                                      '種の生存のために: 【目的：可食植物（改良種を除く）を1個納品】【報酬：各自1プサイ】育ちが悪い同種の植物と掛け合わせてみたいのでサンプルがほしい。',\n                                      'にんげんのたべもの！: 【目的：可食植物（改良種を除く）を1個納品】【報酬：各自2プサイ】ひゅーいあはなにをたべるの！ たべたい！',\n                                      'まかいのたべものって？: 【目的：可食植物の改良種を2個納品】【報酬：各自3プサイ】まぞくさんはなにたべるですか！ おしえてください。'].freeze,\n                                     ['おうちなおしたいの！: 【目的：石材を1個納品】【報酬：各自1プサイ】おうちがぼろぼろだから、ママのかわりになおしたいの。',\n                                      '娘の結婚式に必要なんだ！: 【目的：宝石を2個納品】【報酬：各自3プサイ】ちょっとさきなんですが、娘が結婚するので結婚式用の宝石を集めています。',\n                                      '金属がたりない！: 【目的：金属を1個納品】【報酬：各自2プサイ】いい武器にはいい金属を。今回必要なのは……。',\n                                      '村の聖堂を直したいんだ！: 【目的：石材を1個納品】【報酬：各自2プサイ】聖堂を直していたが石材がたりない！',\n                                      '弟の甲冑に使うんだ！: 【目的：金属を2個納品】【報酬：各自3プサイ】最近、近くの鉱山から「ある金属」が姿を消した。',\n                                      'おねえちゃんのたんじょうびに: 【目的：宝石を1個納品】【報酬：各自2プサイ】たんじょうびぷれぜんとにほうせきあげたらおねえちゃんよろこぶかな？'].freeze,\n                                     ['パパのために: 【目的：木材の家具を1個納品】【報酬：各自2プサイ】はたらいてばっかりのパパにプレゼントしたいの。おねがいします！',\n                                      '癒やされたい……: 【目的：石材の家具を1個納品】【報酬：各自2プサイ】仕事時間は短いとはいえ、激務。めちゃつらい。癒しになる家具がほしい。',\n                                      'いい家具に囲まれてみたい: 【目的：金属の家具を1個納品】【報酬：各自2プサイ】開拓も最高だけど、他の島の人とも交流したい。人を呼べるような家を作るためには最高の家具が必要！',\n                                      '家具の在庫不足: 【目的：木材の装飾品を1個納品】【報酬：各自3プサイ】困ったことに職人に逃げられた！ このままじゃ、お店開けない！！',\n                                      'と、ともだちにあげるの！: 【目的：石材の装飾品を1個納品】【報酬：各自3プサイ】えっと、お、おきにいりのともだちがいるんだ。そ、そのこのたんじょうびだから、プレゼントしたくって。',\n                                      '親の木に飾りを: 【目的：金属の装飾品を1個納品】【報酬：各自3プサイ】元気のない親の木を心配してペッコ達が大騒ぎしているんだ。君はいつまでも美しいよと伝えたくてね。一つ助力をお願いするよ。'].freeze,\n                                     ['そちらの河魚を食してみたい: 【目的：河魚を2個納品】【報酬：各自3プサイ】おいしい河魚がいるときいたことがあるのです。さぁ、はやく、釣ってきてくださいまし。',\n                                      '研究に使用したい: 【目的：湖魚を1個納品】【報酬：各自1プサイ】そちらの世界にある同名の魚が本当にこちらの世界にいるものと一緒か確かめたいのです。',\n                                      'しろいくもにすむおさかながみたい！: 【目的：白雲の雲魚を1個納品】【報酬：各自2プサイ】こっちにはしろいくもってなかなかないの！ しろいくものおさかな、たべてみたいな。',\n                                      '釣り師がいないのでお魚がほしい: 【目的：灰雲の雲魚を2個納品】【報酬：各自3プサイ】野菜や肉もいいが魚も食べたい……。頼む、魚を釣ってきてくれないか？',\n                                      'まっくろなくもにすむおさかな！: 【目的：黒雲の雲魚を1個納品】【報酬：各自2プサイ】まっくろなくもにはどんなさかながすんでるの？ みせて、みせて！',\n                                      '人間界では見られない魚が見たい！: 【目的：共通の雲魚を1個納品】【報酬：各自2プサイ】他の魚の雲を利用して泳ぎ回る魚がいると聞いたよ。ぜひ見せてほしいな。'].freeze].freeze\n      ARMESEAR_PETIT_QUEST_CHART = [['お祭り用の布が足りないの！: 【目的：布を2個納品】【報酬：各自4プサイ】お祭り前なのに、布職人が腰を痛めちゃったの！',\n                                     'お洋服がぼろぼろになっちゃったの: 【目的：布を1個納品】【報酬：各自2プサイ】おばあちゃんに作ってもらった服がボロボロになっちゃったから、なおしたいの。',\n                                     'ぎっくり腰からのヘルプ: 【目的：薪を3個納品】【報酬：各自3プサイ】仕事してたらぎっくり腰になっちゃったのだ。頼むのだ。',\n                                     '不調には栄養たっぷりのミルクを: 【目的：ミルクを1個納品】【報酬：各自3プサイ】体調を崩しちゃったの。栄養満点のミルクを頂戴。',\n                                     '材料がたりない！: 【目的：？？？の粗皮を1個納品】【報酬：各自3プサイ】革細工師を目指してるんだけど、皮が足りないんだ。種類は問わないから、早めに頼むよ。',\n                                     '愛しのガードナーのために: 【目的：？？？の肉を1個納品】【報酬：各自3プサイ】ガードナーの調子が悪いから、栄養をつけさせたいんだ。肉はなんだっていい、とびっきりのを頼むよ。'].freeze,\n                                    ['灯火をひとつ: 【目的：キャンドルを1個納品】【報酬：各自3プサイ】家の裏に知らない建物があるんだ。まっくらだから明かりが必要で……。',\n                                     '布の色を頂戴: 【目的：染料を1個納品】【報酬：各自2プサイ】んー、コンテストのために布を織ったのだけど、色が決められないんだ。お願いするよ。',\n                                     'きれいなのお花を: 【目的：花を1個納品】【報酬：各自2プサイ】パパの誕生日プレゼントを妹と作りたいんだ。お願いできる？',\n                                     '旅立ちのために: 【目的：衣類を1個納品】【報酬：各自15プサイ】旅立つ弟に服をプレゼントしたいんだ。',\n                                     '納品物が足りない！: 【目的：革を1個納品】【報酬：各自4プサイ】どうしても納品する皮がたりない……頼む、なんとか用意できないか？',\n                                     '求）照明: 【目的：照明を1個納品】【報酬：各自10プサイ】引っ越しする最中に照明を壊してしまった！ 明日から明かりがないのはつらい……。作ってくれないか？'].freeze,\n                                    ['装備の修復のため: 【目的：革を2個納品】【報酬：各自5プサイ】大事な装備が壊れちゃったんだ！ 直すのに必要なんだけど、革を持っているかい？',\n                                     '主に祝いの品を: 【目的：敷物を1個納品】【報酬：各自15プサイ】誕生日を迎える主にささやかなながらわたしからも祝いの品を送りたいのです。',\n                                     '手料理を求めて: 【目的：出来栄え5の料理を1個納品】【報酬：各自5プサイ】たまには誰かの料理が食べたいんだ。',\n                                     '釣り竿が折れちゃって……: 【目的：塩魚を2個納品】【報酬：各自3プサイ】釣り竿が折れちゃったから釣りができないんだ。一匹頼める？',\n                                     '蝋がほしいの: 【目的：蝋を1個納品】【報酬：各自2プサイ】お兄ちゃんとパパの誕生日プレゼントを作るの。見つからないからお願いできる？',\n                                     '美しさを求めて: 【目的：アルメサール産の花を1個納品】【報酬：各自3プサイ】美しいお花を摘んで来てくださらない？ 美のために必要でしてよ。'].freeze].freeze\n\n      def use_petit_quest_chart(command)\n        match_data = command.match(/PQ([VA]?)/)\n        chart_symbol = match_data[1] == '' ? 'V' : match_data[1]\n\n        roll_result1 = @randomizer.roll_once(D6)\n        chart_text, roll_result2 = case chart_symbol\n                                   when 'V'\n                                     chart_index = case roll_result1\n                                                   when 1, 2 then 0\n                                                   when 3, 4 then 1\n                                                   when 5 then 2\n                                                   when 6 then 3\n                                                   end\n                                     get_table_by_1d6(VILLACIEL_PETIT_QUEST_CHART[chart_index])\n                                   when 'A' then get_table_by_1d6(ARMESEAR_PETIT_QUEST_CHART[((roll_result1 - 1) / 2).to_i])\n                                   end\n\n        chart_title = case chart_symbol\n                      when 'V' then 'ぷちクエスト表（ヴィラシエル）'\n                      when 'A' then 'ぷちクエスト表（アルメサール）'\n                      end\n        \"\#{chart_title} ＞ [\#{roll_result1},\#{roll_result2}] ＞ \#{chart_text}\"\n      end\n\n      ACCIDENT_CHART = ['飛び猪襲来！: 空飛ぶ猪が浮遊島めがけて突撃してきた！ 建物が粉砕される前に迎撃だ！（「蒼天のヴィラシエル」P.46）',\n                        '嵐がくるぞ！: 嵐が来るらしいぞ！ どれだけ対策できるかが鍵だ！（「蒼天のヴィラシエル」P.47）',\n                        '雨が降らないぞ！: おかしいなぁ、雨が降らないぞぉ……？ こうなったら雨乞いの踊りだ！（「蒼天のヴィラシエル」P.48）',\n                        'トビウオ流星群: きらきら光る流れ星……いや待て！ あれはトビウオの群れだー！？（「蒼天のヴィラシエル」P.49）',\n                        'すごい雷雨: すごい。ごろごろばりばり聞こえてくる。これは早々に対策しないと直撃するぞ！（「蒼天のヴィラシエル」P.50）',\n                        '野菜泥棒出現！: 畑の野菜が盗まれているぞ……？ これは犯人を捕まえないと！（「蒼天のヴィラシエル」P.51）'].freeze\n\n      def use_accident_chart(_command)\n        chart_text, roll_result = get_table_by_1d6(ACCIDENT_CHART)\n        \"アクシデント表 ＞ [\#{roll_result}] ＞ \#{chart_text}\"\n      end\n\n      def use_6x6_chart(chart, chart_name)\n        # 6x6の表からランダムに参照する\n        # chartは文字列の配列の配列であることを仮定\n        # D66ロールによる表参照と近いが、D66の方は13, 42などの数値に対応した表なのに対し、こちらは「下3マス、右2マス」という風にセルを参照する\n        y_roll = @randomizer.roll_once(D6)\n        cell_text, x_roll = get_table_by_1d6(chart[y_roll - 1])\n        \"\#{chart_name} ＞ [\#{y_roll},\#{x_roll}] ＞ 下\#{y_roll}マス、右\#{x_roll}マス ＞ \#{cell_text}\"\n      end\n\n      MOHUMOHU_INSECT_CHART = [['小さな虫', '小さな虫', 'カマキリ', 'カマキリ', 'バッタ', 'クワガタ'].freeze,\n                               ['小さな虫', 'カラスアゲハ', 'カマキリ', 'バッタ', 'オオスカシバ', 'カイコ'].freeze,\n                               ['ハンミョウ', 'カラスアゲハ', 'カマキリ', 'バッタ', 'カイコ', 'トンボ'].freeze,\n                               ['ハンミョウ', 'カラスアゲハ', 'カラスアゲハ', 'チッチハチ', 'トンボ', 'トンボ'].freeze,\n                               ['クワガタ', 'カラスアゲハ', 'チッチハチ', 'チッチハチ', 'アリ', 'アリ'].freeze,\n                               ['クワガタ', 'チッチハチ', 'チッチハチ', 'チッチハチ', 'アリ', 'アリ'].freeze].freeze\n\n      MOHUMOHU_ANIMAL_CHART = [['トリサン', 'トリサン', 'ブタ', 'ヒツジ', 'タヌキ', 'タヌキ'].freeze,\n                               ['トリサン', 'ブタ', 'ヒツジ', 'ウッシ', 'キツネ', 'タヌキ'].freeze,\n                               ['ブタ', 'オグマ', 'ヒツジ', 'キツネ', 'キツネ', 'アタウサギ'].freeze,\n                               ['ブタ', 'ヒツジ', 'ヒツジ', 'リス', 'シシ', 'ヴィラシエル種(MMV)'].freeze,\n                               ['ウッシ', 'ウサギ', 'ウサギ', 'シシ', 'アタウサギ', 'オオカミ'].freeze,\n                               ['ウッシ', 'オグマ', 'クーマ', 'シシ', 'オオカミ', 'ヴィラシエル種(MMV)'].freeze].freeze\n\n      MOHUMOHU_VILLACIEL_CHART = [['ウドン', 'ウドン', 'オボン', 'オボン', 'オボン', 'オワン'].freeze,\n                                  ['ウドン', 'ウドン', 'オボン', 'オワン', 'オワン', 'オワン'].freeze].freeze\n\n      MOHUMOHU_VILLACIEL2_CHART = [['すねーくあし', 'すねーくあし', 'すねーくあし', 'ウタヒ', 'オオトリサン', 'オオトリサン'].freeze,\n                                   ['すねーくあし', 'すねーくあし', 'ホネホネ', 'オオトリサン', 'アマアマガニ', 'ホワホワ'].freeze,\n                                   ['すねーくあし', 'ホネホネ', 'オオトリサン', 'ウタヒ', 'アマアマガニ', 'ペロリ'].freeze,\n                                   ['オオトリサン', 'オオトリサン', 'ホネホネ', 'ホネホネ', 'ホワホワ', 'アマアマガニ'].freeze,\n                                   ['ホネホネ', 'ウタヒ', 'アマアマガニ', 'ペロリ', 'ペロリ', 'ペロリ'].freeze,\n                                   ['オオトリサン', 'ホワホワ', 'ホワホワ', 'アマアマガニ', 'ペロリ', 'ペロリ'].freeze].freeze\n\n      MOHUMOHU_DRAGON_CHART = [['モドモドリス', 'テロメ', 'モドモドリス', 'オジサン', 'オジサン', 'グロッチ'].freeze,\n                               ['テロメ', 'モドモドリス', 'オジサン', 'テロメ', 'ニホンツノ', 'グロッチ'].freeze,\n                               ['テロメ', 'グロッチ', 'グロッチ', 'グロッチ', 'オジサン', 'コディ'].freeze,\n                               ['モドモドリス', 'グロッチ', 'ニホンツノ', 'テロメ', 'テーリー', 'ケラプス'].freeze,\n                               ['オジサン', 'テロメ', 'テロメ', 'コディ', 'コディ', 'ケラプス'].freeze,\n                               ['コディ', 'テーリー', 'テーリー', 'コディ', 'ケラプス', 'アサール・ゴッツ'].freeze].freeze\n\n      def use_mohumohu_chart(command)\n        case command\n        when 'MMI' then use_6x6_chart(MOHUMOHU_INSECT_CHART, 'もふもふ表・昆虫')\n        when 'MMA' then use_6x6_chart(MOHUMOHU_ANIMAL_CHART, 'もふもふ表・動物')\n        when /MMV[VA]?/\n          match_data = command.match(/MMV([VA]?)/)\n          chart_symbol = match_data[1] == '' ? 'V' : match_data[1]\n\n          case chart_symbol\n          when 'V'\n            y_roll = @randomizer.roll_once(D6)\n            cell_text, x_roll = get_table_by_1d6(MOHUMOHU_VILLACIEL_CHART[1 - y_roll % 2])\n            \"もふもふ表・ヴィラシエル種（ヴィラシエル） ＞ [\#{y_roll},\#{x_roll}] ＞ 下\#{y_roll.even? ? '偶数' : '奇数'}、右\#{x_roll}マス ＞ \#{cell_text}\"\n          when 'A' then use_6x6_chart(MOHUMOHU_VILLACIEL2_CHART, 'もふもふ表・ヴィラシエル種（アルメサール）')\n          end\n        when 'MMD' then use_6x6_chart(MOHUMOHU_DRAGON_CHART, 'もふもふ表・鋼龍種')\n        end\n      end\n\n      FISHING_LAKE_CHART = [['ヤマアイズリ', 'ヤマアイズリ', 'ヤマアイズリ', 'シコウチャ', 'シコウチャ', 'ハナロクショウ'].freeze,\n                            ['ヤマアイズリ', 'ヤマアイズリ', 'ヤマアイズリ', 'シコウチャ', 'ハナロクショウ', 'ハナロクショウ'].freeze,\n                            ['ヤマアイズリ', 'ヤマアイズリ', 'シコウチャ', 'シコウチャ', 'ハナモエギ', 'トノチャ'].freeze,\n                            ['ヤマアイズリ', 'カラスアゲハ', 'シコウチャ', 'ハナロクショウ', 'トノチャ', 'ハナモエギ'].freeze,\n                            ['シコウチャ', 'シコウチャ', 'ハナロクショウ', 'ハナロクショウ', 'トノチャ', 'ハナモエギ'].freeze,\n                            ['シコウチャ', 'ハナロクショウ', 'トノチャ', 'トノチャ', 'ハナモエギ', 'シンペキ'].freeze].freeze\n\n      FISHING_RIVER_CHART = [['ケイカンセキ', 'ケイカンセキ', 'ケイカンセキ', 'ケイカンセキ', 'カナリア', 'イワヌ'].freeze,\n                             ['ケイカンセキ', 'ケイカンセキ', 'カナリア', 'カナリア', 'カナリア', 'イワヌ'].freeze,\n                             ['ケイカンセキ', 'ケイカンセキ', 'カナリア', 'イワヌ', 'イワヌ', 'ヤマブキ'].freeze,\n                             ['ケイカンセキ', 'カナリア', 'イワヌ', 'アメイロ', 'アメイロ', 'ヤマブキ'].freeze,\n                             ['カナリア', 'カナリア', 'イワヌ', 'アメイロ', 'ヤマブキ', 'ヤマブキ'].freeze,\n                             ['カナリア', 'イワヌ', 'アメイロ', 'アメイロ', 'ヤマブキ', 'コハク'].freeze].freeze\n\n      FISHING_WHITE_CHART = [['ウメガサネ', 'ウメガサネ', 'ウメガサネ', 'ウメガサネ', 'ハネズ', 'ユルシ'].freeze,\n                             ['ウメガサネ', 'ウメガサネ', 'ウメガサネ', 'ハネズ', 'ソホ', 'シンク'].freeze,\n                             ['ウメガサネ', 'ウメガサネ', 'ハネズ', 'ソホ', 'ユルシ', 'ユルシ'].freeze,\n                             ['ウメガサネ', 'ハネズ', 'ソホ', 'ユルシ', 'シンク', 'シンク'].freeze,\n                             ['ハネズ', 'ソホ', 'ソホ', 'ユルシ', 'シンク', '共通(FC)'].freeze,\n                             ['ハネズ', 'ソホ', 'ユルシ', 'シンク', '共通(FC)', 'シュアン'].freeze].freeze\n\n      FISHING_GRAY_CHART = [['ウメガサネ', 'ウメガサネ', 'セイラン', 'セイラン', 'ミハナダ', 'ミハナダ'].freeze,\n                            ['ウメガサネ', 'セイラン', 'セイラン', 'ミハナダ', 'ミハナダ', 'ミハナダ'].freeze,\n                            ['ウメガサネ', 'ユルシ', 'ミハナダ', 'ミハナダ', 'ミハナダ', 'リンドウ'].freeze,\n                            ['ユルシ', 'ユルシ', 'セイラン', 'リンドウ', 'リンドウ', 'スミレ'].freeze,\n                            ['ユルシ', 'ユルシ', 'リンドウ', 'スミレ', 'スミレ', '共通(FC)'].freeze,\n                            ['ユルシ', 'リンドウ', 'スミレ', 'スミレ', '共通(FC)', 'シゴク'].freeze].freeze\n\n      FISHING_BLACK_CHART = [['セイラン', 'セイラン', 'テツコン', 'テツコン', 'ウスハナ', 'ウスハナ'].freeze,\n                             ['セイラン', 'セイラン', 'テツコン', 'ウスハナ', 'ウスハナ', 'フカガワネズミ'].freeze,\n                             ['セイラン', 'テツコン', 'ウスハナ', 'ウスハナ', 'ミハナダ', 'フカガワネズミ'].freeze,\n                             ['セイラン', 'テツコン', 'ミハナダ', 'ウスハナ', 'フカガワネズミ', 'フカガワネズミ'].freeze,\n                             ['セイラン', 'ウスハナ', 'ミハナダ', 'ミハナダ', 'ミハナダ', '共通(FC)'].freeze,\n                             ['テツコン', 'ウスハナ', 'ミハナダ', 'フカガワネズミ', '共通(FC)', 'ルリ'].freeze].freeze\n\n      FISHING_COMMON_CHART = [['トビウオ', 'トビウオ', 'トビウオ', 'オオガメ', 'ロブスター', 'オオサンショウウオ'].freeze,\n                              ['トビウオ', 'トビウオ', 'エイ', 'オオガメ', 'クジラ', 'ロブスター'].freeze,\n                              ['トビウオ', 'エイ', 'マグロ', 'マグロ', 'カジキ', 'イタチザメ'].freeze,\n                              ['トビウオ', 'ミズダコ', 'クラゲ', 'マグロ', 'オオクラゲ', 'ハンマーヘッド・シャーク'].freeze,\n                              ['トビウオ', 'エイ', 'オオガメ', 'オオガメ', 'イタチザメ', 'ミズダコ'].freeze,\n                              ['トビウオ', 'クラゲ', 'ロブスター', 'ハンマーヘッド・シャーク', 'ミズダコ', 'ダイオウイカ'].freeze].freeze\n\n      FISHING_SALT_LAKE_CHART = [['シラユリ', 'シラユリ', 'シラユリ', 'ゲッパク', 'ゲッパク', 'ゲッパク'].freeze,\n                                 ['シラユリ', 'シラユリ', 'シラユリ', 'ゲッパク', 'スズ', 'ナマリ'].freeze,\n                                 ['シラユリ', 'ゲッパク', 'ゲッパク', 'スズ', 'ナマリ', 'ナマリ'].freeze,\n                                 ['シラユリ', 'シラユリ', 'ナマリ', 'ナマリ', 'ナマリ', 'ナマリ'].freeze,\n                                 ['ゲッパク', 'ゲッパク', 'スズ', 'スズ', 'ロイロ', 'ロイロ'].freeze,\n                                 ['ナマリ', 'スズ', 'スズ', 'スズ', 'ロイロ', 'クロツルバミ'].freeze].freeze\n\n      def use_fishing_chart(command)\n        case command\n        when 'FL' then use_6x6_chart(FISHING_LAKE_CHART, '釣り・湖表')\n        when 'FR' then use_6x6_chart(FISHING_RIVER_CHART, '釣り・河表')\n        when 'FW' then use_6x6_chart(FISHING_WHITE_CHART, '釣り・白雲表')\n        when 'FG' then use_6x6_chart(FISHING_GRAY_CHART, '釣り・灰雲表')\n        when 'FB' then use_6x6_chart(FISHING_BLACK_CHART, '釣り・黒雲表')\n        when 'FC' then use_6x6_chart(FISHING_COMMON_CHART, '釣り・共通表')\n        when 'FS' then use_6x6_chart(FISHING_SALT_LAKE_CHART, '釣り・塩湖表')\n        end\n      end\n\n      INEDIBLE_PLANT_CHART = [['シュイの花', 'ダデオの花', 'ロキの花', 'シェラの花', 'トトイト', 'ポロネイマ'].freeze,\n                              ['シュイの花', 'ロキの花', 'アウディの花', 'イディウの花', 'トトイト', 'ポロネイマ'].freeze,\n                              ['ダデオの花', 'アウディの花', 'イディウの花', 'マトイト', 'ポポトマ', 'ルタタ'].freeze,\n                              ['シュイの花', 'ミカギの花', 'ロトイト', 'ロトイト', 'ツルイド', 'ルタタ'].freeze,\n                              ['ミカギの花', 'ロトイト', 'ロトイト', 'ツルイド', 'ルタタ', '変異植物(MP)'].freeze,\n                              ['トトイト', 'マトイト', 'ポポトマ', 'ツルイド', '変異植物(MP)', 'サボサボ'].freeze].freeze\n\n      INEDIBLE_PLANT2_CHART = [['マトラの花', 'マトラの花', '蜜蝋', 'ポルラの花', 'ウェスドの花', 'ポルラの花'].freeze,\n                               ['マトラの花', 'ホイの花', 'マトラの花', 'ウェスドの花', '蜜蝋', 'ロロの花'].freeze,\n                               ['ホイの花', 'ポルラの花', 'ウェスドの花', 'ホイの花', 'ポルラの花', 'ポルラの花'].freeze,\n                               ['ポルラの花', 'ホイの花', 'ロロの花', 'ウェスドの花', 'ポルラの花', 'ドダの実'].freeze,\n                               ['ポルラの花', 'ウェスドの花', 'ロロの花', 'ロロの花', 'ロロの花', 'ロロの花'].freeze,\n                               ['ウェスドの花', 'ロロの花', 'ポルラの花', 'ロロの花', 'ドダの実', 'ロロの花'].freeze].freeze\n\n      def use_inedible_plant_chart(command)\n        match_data = command.match(/IP([VA]?)/)\n        chart_symbol = match_data[1] == '' ? 'V' : match_data[1]\n\n        case chart_symbol\n        when 'V' then use_6x6_chart(INEDIBLE_PLANT_CHART, '不食植物表（ヴィラシエル）')\n        when 'A' then use_6x6_chart(INEDIBLE_PLANT2_CHART, '不食植物表（アルメサール）')\n        end\n      end\n\n      EDIBLE_PLANT_CHARTS = [[['小麦', '小麦', 'さつまいも', 'ねぎ', '白菜', 'きゅうり'].freeze,\n                              ['小麦', 'さつまいも', 'さといも', '白菜', '白菜', 'とうもろこし'].freeze,\n                              ['さといも', 'さといも', 'ねぎ', '白菜', 'とうもろこし', '枝豆'].freeze,\n                              ['シソ', 'ひらたけ', 'エリンギ', '枝豆', '枝豆', 'ラズベリー'].freeze,\n                              ['シソ', 'ひらたけ', 'ひらたけ', 'エリンギ', 'ラズベリー', 'さといも'].freeze,\n                              ['ナシ', 'ナシ', 'ナシ', 'ラズベリー', 'ラズベリー', 'さといも'].freeze].freeze,\n                             [['米', '米', 'にんじん', 'じゃがいも', 'ふき', 'まいたけ'].freeze,\n                              ['米', 'じゃがいも', 'じゃがいも', 'にら', 'ふき', 'きくらげ'].freeze,\n                              ['冬瓜', 'しょうが', '冬瓜', 'ふき', 'ふき', 'きくらげ'].freeze,\n                              ['しょうが', '冬瓜', 'ビワ', 'にら', 'まいたけ', 'まいたけ'].freeze,\n                              ['ビワ', 'ビワ', 'もも', 'かぼちゃ', 'グリーンピース', 'まいたけ'].freeze,\n                              ['ビワ', 'もも', 'もも', 'かぼちゃ', 'かぼちゃ', 'かぼちゃ'].freeze].freeze,\n                             [['もち米', 'トマト', 'オクラ', 'とうがらし', '大根', 'グミ'].freeze,\n                              ['もち米', 'オクラ', 'オクラ', '大根', '大根', 'とうがらし'].freeze,\n                              ['しいたけ', 'マッシュルーム', 'オクラ', 'グミ', '玉ねぎ', '小松菜'].freeze,\n                              ['ブロッコリー', 'しいたけ', 'トマト', '玉ねぎ', 'さやえんどう', '玉ねぎ'].freeze,\n                              ['しいたけ', 'マッシュルーム', 'ブロッコリー', '小松菜', 'さやえんどう', '改良種(IS)'].freeze,\n                              ['マッシュルーム', 'ブロッコリー', 'マッシュルーム', '小松菜', '改良種(IS)', 'グミ'].freeze].freeze,\n                             [['大豆', '大豆', 'にんにく', 'そらまめ', 'しめじ', 'みかん'].freeze,\n                              ['かぶ', '大豆', 'かぶ', 'キャベツ', 'そらまめ', 'みかん'].freeze,\n                              ['にんにく', 'かぶ', 'にんにく', 'しめじ', 'クランベリー', 'ピーマン'].freeze,\n                              ['キャベツ', 'キャベツ', 'ほうれん草', 'しめじ', 'レタス', 'ピーマン'].freeze,\n                              ['ほうれん草', 'ほうれん草', 'クランベリー', 'レタス', 'ピーマン', '改良種(IS)'].freeze,\n                              ['松茸', 'ほうれん草', '松茸', 'レタス', 'クランベリー', '改良種(IS)'].freeze].freeze,\n                             [['小豆', 'れんこん', 'みつば', 'やまのいも', 'デコポン', 'イチゴ'].freeze,\n                              ['れんこん', 'れんこん', '小豆', 'なめこ', 'かいわれ大根', 'なめこ'].freeze,\n                              ['やまのいも', 'アスパラガス', 'なす', 'なめこ', 'やまのいも', 'デコポン'].freeze,\n                              ['なす', 'やまのいも', 'みつば', 'えのきたけ', 'かいわれ大根', 'デコポン'].freeze,\n                              ['アスパラガス', 'アスパラガス', 'やまのいも', 'みつば', 'なめこ', '改良種(IS)'].freeze,\n                              ['なす', 'もやし', 'えのきたけ', 'えのきたけ', '改良種(IS)', 'イチゴ'].freeze].freeze].freeze\n\n      EDIBLE_PLANT2_CHARTS = [[['テンサイ', 'バノ', 'テンサイ', 'サトウモロ', 'サトウモロ', 'パンノミ'].freeze,\n                               ['テンサイ', 'バノ', 'サトウモロ', 'バノ', 'ミソレグア', 'パンノミ'].freeze,\n                               ['テンサイ', 'サトウモロ', 'バノ', 'ニクニク', 'パンノミ', 'メーズム'].freeze,\n                               ['バノ', 'バノ', 'バノ', 'パンノミ', 'ミソレグア', 'メーズム'].freeze,\n                               ['テンサイ', 'パンノミ', 'ニクニク', 'ニクニク', 'メーズム', 'ミソレグア'].freeze,\n                               ['サトウモロ', 'ニクニク', 'メーズム', 'ミソレグア', 'メーズム', 'メーズム'].freeze].freeze,\n                              [['アロアベリー', 'パンノミ', 'ミソレグア', 'サイングア', 'パンノミ', 'アロアベリー'].freeze,\n                               ['パンノミ', 'サイングア', 'パンノミ', 'ミソレグア', 'アロアベリー', 'ミソレグア'].freeze,\n                               ['パンノミ', 'アロアベリー', 'サイングア', 'パンノミ', 'パンノミ', 'トロアベリア'].freeze,\n                               ['パンノミ', 'アロアベリー', 'パンノミ', 'ミソレグア', 'ミソレグア', 'トロアベリア'].freeze,\n                               ['サイングア', 'パンノミ', 'トロアベリア', 'ミソレグア', 'アロアベリー', 'サイングア'].freeze,\n                               ['ミソレグア', 'トロアベリア', 'サイングア', 'アロアベリー', 'トロアベリア', 'トロアベリア'].freeze].freeze].freeze\n\n      def use_villaciel_edible_plant_chart(chart_id, output)\n        output + use_6x6_chart(EDIBLE_PLANT_CHARTS[chart_id - 1], \"可食植物表\#{chart_id}（ヴィラシエル）\")\n      end\n\n      def use_armesear_edible_plant_chart(chart_id, output)\n        output + use_6x6_chart(EDIBLE_PLANT2_CHARTS[chart_id - 1], \"可食植物表\#{chart_id}（アルメサール）\")\n      end\n\n      def use_edible_plant_chart(command)\n        match_data = command.match(/EP([VA]?)(\\d?)/)\n        chart_symbol = match_data[1] == '' ? 'V' : match_data[1]\n\n        case chart_symbol\n        when 'V'\n          case match_data[2]\n          when ''\n            roll_result = @randomizer.roll_once(D6)\n            return '(1D6) ＞ [6] ＞ 好きな表を選んでおっけー！' if roll_result == D6\n\n            use_villaciel_edible_plant_chart(roll_result, \"(1D6) ＞ [\#{roll_result}] ＞ \")\n          else\n            chart_id = match_data[2].to_i\n            return '' unless chart_id >= 1 && chart_id <= 5\n\n            use_villaciel_edible_plant_chart(chart_id, '')\n          end\n        when 'A'\n          case match_data[2]\n          when ''\n            roll_result = @randomizer.roll_once(D6)\n            use_armesear_edible_plant_chart(roll_result.even? ? 1 : 2, \"(1D6) ＞ [\#{roll_result}] ＞ \")\n          else\n            chart_id = match_data[2].to_i\n            return '' unless [1, 2].include?(chart_id)\n\n            use_armesear_edible_plant_chart(chart_id, '')\n          end\n        end\n      end\n\n      MUTANT_PLANT_CHART = [['ガドゴン', 'ガドゴン', 'レディダン', 'ボディア', 'ブタマル', 'ブタマル'].freeze,\n                            ['レディダン', 'レディダン', 'ボディア', 'トロコッコ', 'ブタマル', 'ツァイド'].freeze,\n                            ['ボディア', 'ボディア', 'マメノキ', 'ナッキュ', 'ツァイド', 'ボディア'].freeze,\n                            ['ナッキュ', 'マメノキ', 'ナッキュ', 'ガドゴン', 'レディダン', 'レディダン'].freeze,\n                            ['ポメラマ', 'ポメラマ', 'ナッキュ', 'ツァイド', 'ガドゴン', 'ボディア'].freeze,\n                            ['ナッキュ', 'ツァイド', 'ツァイド', 'ツァイド', 'ボディア', 'グラディエゴ'].freeze].freeze\n\n      def use_mutant_plant_chart(_command)\n        use_6x6_chart(MUTANT_PLANT_CHART, '変異植物表')\n      end\n\n      IMPROVED_SPECIES_CHART = [['ワワ', 'ワワ', 'ブラックカロット', 'ビーズ', 'レモン', 'ブラッドオレンジ'].freeze,\n                                ['ポポ', 'ポポ', 'グランツェ', 'オオカサゲ', 'ブラッドオレンジ', 'レモン'].freeze,\n                                ['ヒットト', 'グランツェ', 'ブラックベリー', 'ピマット', 'ブラッドオレンジ', 'レモン'].freeze,\n                                ['ブルーベリー', 'ヒットト', 'グランツェ', 'ブラッドオレンジ', 'ユズ', 'ブラックベリー'].freeze,\n                                ['ビーズ', 'ピマット', 'オオカサゲ', 'ライム', 'ブルーベリー', 'ユズ'].freeze,\n                                ['ビーズ', 'レッドキャベツ', 'ライム', 'オオカサゲ', 'ライム', 'リンゴ'].freeze].freeze\n\n      def use_improved_species_chart(_command)\n        use_6x6_chart(IMPROVED_SPECIES_CHART, '改良種表')\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Villaciel>", "self", "register_prefix", "initialize", "command", "@d66_sort_type", "D66SortType::NO_SORT", "D66SortType", "@round_type", "RoundType::CEIL", "RoundType", "eval_game_system_specific_command", "$ret_or_1", "resolute_action", "resolute_frontier_action", "resolute_mining_action", "resolute_cutting_gem_action", "use_previous_job_chart", "use_petit_quest_chart", "use_accident_chart", "use_mohumohu_chart", "use_fishing_chart", "use_inedible_plant_chart", "use_edible_plant_chart", "use_mutant_plant_chart", "use_improved_species_chart", "private", "6", "4", "derive_achievement", "num_dices", "dice_list", "@randomizer", "roll_barabara", "D6", "dice_str", "join", "num_triumph_dices", "count", "num_successes", "block in derive_achievement", "dice", "block (2 levels) in derive_achievement", ">=", "LEAST_SUCCESS_ROLL", "achievement", "+", "output", "match_data", "match", "[]", "1", "to_i", "2", "difficulty", "3", "SUCCESS_STR", "FAILURE_STR", "freeze", "chart_index", "0", "5", "8", "skill", "SKILL_CHART", "resolute_difficult_action", "least_success_roll", "largest_roll", "max", "is_successful", "LEAST_MINING_SUCCESS_ROLL", "roll_result", "roll_once", "LEAST_GEM_SUCCESS_ROLL", "chart_symbol", "roll_result1", "get_table_by_1d6", "VILLACIEL_PREVIOUS_JOB_CHART", "/", "-", "ARMESEAR_PREVIOUS_JOB_CHART", "chart_text", "roll_result2", "chart_title", "$ret_or_2", "VILLACIEL_PETIT_QUEST_CHART", "ARMESEAR_PETIT_QUEST_CHART", "_command", "ACCIDENT_CHART", "use_6x6_chart", "chart", "chart_name", "y_roll", "cell_text", "x_roll", "MOHUMOHU_INSECT_CHART", "MOHUMOHU_ANIMAL_CHART", "MOHUMOHU_VILLACIEL_CHART", "%", "even?", "MOHUMOHU_VILLACIEL2_CHART", "MOHUMOHU_DRAGON_CHART", "FISHING_LAKE_CHART", "FISHING_RIVER_CHART", "FISHING_WHITE_CHART", "FISHING_GRAY_CHART", "FISHING_BLACK_CHART", "FISHING_COMMON_CHART", "FISHING_SALT_LAKE_CHART", "INEDIBLE_PLANT_CHART", "INEDIBLE_PLANT2_CHART", "use_villaciel_edible_plant_chart", "chart_id", "EDIBLE_PLANT_CHARTS", "use_armesear_edible_plant_chart", "EDIBLE_PLANT2_CHARTS", "<=", "include?", "MUTANT_PLANT_CHART", "IMPROVED_SPECIES_CHART", "Base"], :mappings=>"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"}}]}