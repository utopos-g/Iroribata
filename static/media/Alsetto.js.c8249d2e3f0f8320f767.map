{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Alsetto.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Alsetto < Base\n      # ゲームシステムの識別子\n      ID = 'Alsetto'\n\n      # ゲームシステム名\n      NAME = '詩片のアルセット'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'うたかたのあるせつと'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・成功判定：nAL[m]　　　　・トライアンフ無し：nALC[m]\n        ・命中判定：nAL[m]*p　　　・トライアンフ無し：nALC[m]*p\n        ・命中判定（ガンスリンガーの根源詩）：nALG[m]*p\n        []内は省略可能。\n\n        ALコマンドはトライアンフの分だけ、自動で振り足し処理を行います。\n        「n」でダイス数を指定。\n        「m」で目標値を指定。省略時は、デフォルトの「3」が使用されます。\n        「p」で攻撃力を指定。「*」は「x」でも可。\n        攻撃力指定で命中判定となり、成功数ではなく、ダメージを結果表示します。\n\n        ALCコマンドはトライアンフ無しで、成功数、ダメージを結果表示します。\n        ALGコマンドは「2以下」でトライアンフ処理を行います。\n\n        【書式例】\n        ・5AL → 5d6で目標値3。\n        ・5ALC → 5d6で目標値3。トライアンフ無し。\n        ・6AL2 → 6d6で目標値2。\n        ・4AL*5 → 4d6で目標値3、攻撃力5の命中判定。\n        ・7AL2x10 → 7d6で目標値2、攻撃力10の命中判定。\n        ・8ALC4x5 → 8d6で目標値4、攻撃力5、トライアンフ無しの命中判定。\n      MESSAGETEXT\n\n      register_prefix('\\d+AL[CG]?')\n\n      def initialize(command)\n        super(command)\n        @sort_add_dice = true # ダイスのソート有\n      end\n\n      def eval_game_system_specific_command(command)\n        # ALCコマンド：命中判定\n        # ALCコマンド：成功判定\n        if command =~ /(\\d+)AL(C|G)?(\\d+)?((x|\\*)(\\d+))?$/i\n          rapid = Regexp.last_match(1).to_i\n          isCritical = Regexp.last_match(2).nil?\n          if isCritical\n            criticalNumber = 1\n          else\n            if Regexp.last_match(2) == \"G\"\n              isCritical = true\n              criticalNumber = 2\n            else\n              criticalNumber = 0\n            end\n          end\n          target = (Regexp.last_match(3) || 3).to_i\n          damage = (Regexp.last_match(6) || 0).to_i\n          return checkRoll(rapid, target, damage, isCritical, criticalNumber)\n        end\n\n        return nil\n      end\n\n      def checkRoll(rapid, target, damage, isCritical, criticalNumber)\n        totalSuccessCount = 0\n        totalCriticalCount = 0\n        text = \"\"\n\n        rollCount = rapid\n\n        while rollCount > 0\n          diceArray = @randomizer.roll_barabara(rollCount, 6).sort\n          diceText = diceArray.join(\",\")\n\n          successCount = 0\n          criticalCount = 0\n\n          diceArray.each do |i|\n            if i <= target\n              successCount += 1\n            end\n\n            if i <= criticalNumber\n              criticalCount += 1\n            end\n          end\n\n          totalSuccessCount += successCount\n          totalCriticalCount += 1 unless criticalCount == 0\n\n          text += \"+\" unless text.empty?\n          text += \"\#{successCount}[\#{diceText}]\"\n\n          break unless isCritical\n\n          rollCount = criticalCount\n        end\n\n        isDamage = (damage != 0)\n\n        if isDamage\n          totalDamage = totalSuccessCount * damage\n\n          result = \"(\#{rapid}D6\\<\\=\#{target}) ＞ \#{text} ＞ Hits：\#{totalSuccessCount}*\#{damage} ＞ \#{totalDamage}ダメージ\"\n        else\n          result = \"(\#{rapid}D6\\<\\=\#{target}) ＞ \#{text} ＞ 成功数：\#{totalSuccessCount}\"\n        end\n\n        if isCritical\n          result += \" / \#{totalCriticalCount}トライアンフ\"\n        end\n\n        return result\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Alsetto>", "self", "register_prefix", "initialize", "command", "@sort_add_dice", "eval_game_system_specific_command", "=~", "rapid", "Regexp", "last_match", "1", "to_i", "isCritical", "2", "nil?", "criticalNumber", "0", "target", "$ret_or_1", "3", "damage", "6", "checkRoll", "totalSuccessCount", "totalCriticalCount", "text", "rollCount", ">", "diceArray", "@randomizer", "roll_barabara", "sort", "diceText", "join", "successCount", "criticalCount", "each", "block in checkRoll", "i", "<=", "+", "block (2 levels) in checkRoll", "empty?", "isDamage", "!=", "totalDamage", "*", "result", "Base"], :mappings=>"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"}}]}