{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/VampireTheMasquerade5th.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class VampireTheMasquerade5th < Base\n      # ゲームシステムの識別子\n      ID = 'VampireTheMasquerade5th'\n\n      # ゲームシステム名\n      NAME = 'Vampire: The Masquerade 5th Edition'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'うあんはいあさますかれえと5'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・判定コマンド(nVMFx+x または nVMIxHx)\n          VMFコマンドはHungerダイスとダイスプールを個別に指定する。\n          VMIコマンドはHungerダイスをダイスプールの内数として指定する。\n\n            例：難易度2、9ダイスプールでHungerダイス3個の場合、それぞれ以下のようなコマンドとなる。\n            2VMF6+3\n            2VMI9H3\n\n          難易度指定：成功数のカウント、判定成功と失敗、Critical処理、Critical Win、Total Failureのチェックを行う\n                     （Hungerダイスがある場合）Messy CriticalとBestial Failureチェックを行う\n          例) (難易度)VMF(通常ダイス)+(Hungerダイス)\n              (難易度)VMF(通常ダイス)\n              (難易度)VMI(通常ダイス)H(Hungerダイス)\n              (難易度)VMI(通常ダイス)\n\n          難易度省略：成功数のカウント、判定失敗、Critical処理、Total Failure、（Hungerダイスがある場合）Bestial Failureチェックを行う\n                      判定成功、Messy Criticalのチェックを行わない\n                      Critical Win、（Hungerダイスがある場合）Bestial Failure、Messy Criticalのヒントを出力\n          例) VMF(通常ダイス)+(Hungerダイス)\n              VMF(通常ダイス)\n              VMI(通常ダイス)H(Hungerダイス)\n              VMI(通常ダイス)\n\n          難易度0指定：Critical処理と成功数のカウントを行い、全てのチェックを行わない\n          例) 0VMF(通常ダイス)+(Hungerダイス)\n              0VMF(通常ダイス)\n              0VMI(通常ダイス)+(Hungerダイス)\n              0VMI(通常ダイス)\n\n      MESSAGETEXT\n\n      DIFFICULTY_INDEX                            = 1\n      DICE_POOL_HUNGER_DICE_NO_INCLUDED_INDEX     = 5\n      HUNGER_DICE_NO_INCLUDED_INDEX               = 7\n      COMMAND_HUNGER_DICE_INCLUDED_INDEX          = 9\n      DICE_POOL_HUNGER_DICE_INCLUDED_INDEX        = 10\n      HUNGER_DICE_INCLUDED_INDEX                  = 12\n\n      # 難易度に指定可能な特殊値\n      NOT_CHECK_SUCCESS = -1 # 判定成功にかかわるチェックを行わない(判定失敗に関わるチェックは行う)\n\n      register_prefix('\\d*(VMF|(VMI\\d*(H\\d?)?))')\n\n      def eval_game_system_specific_command(command)\n        m = /\\A(\\d+)?(((VMF)(\\d+)(\\+(\\d+))?)|((VMI)(\\d+)(H(\\d+))?))$/.match(command)\n        unless m\n          return ''\n        end\n\n        dice_pool, hunger_dice_pool = get_dice_pools(m)\n        if dice_pool < 0\n          return \"ダイスプール0のときにHungerダイスは指定できません。\"\n        end\n        if hunger_dice_pool > 5\n          return \"Hungerダイス指定は5ダイスが最大です。\"\n        end\n\n        dice_text, success_dice, ten_dice, = make_dice_roll(dice_pool)\n        result_text = \"(\#{dice_pool}D10\"\n\n        if hunger_dice_pool >= 0\n          hunger_dice_text, hunger_success_dice, hunger_ten_dice, hunger_botch_dice = make_dice_roll(hunger_dice_pool)\n\n          ten_dice += hunger_ten_dice\n          success_dice += hunger_success_dice\n\n          result_text = \"\#{result_text}+\#{hunger_dice_pool}D10) ＞ [\#{dice_text}]+[\#{hunger_dice_text}] \"\n        else\n          hunger_ten_dice = 0\n          hunger_botch_dice = 0\n          result_text = \"\#{result_text}) ＞ [\#{dice_text}] \"\n        end\n\n        success_dice += get_critical_success(ten_dice)\n\n        difficulty = m[DIFFICULTY_INDEX] ? m[DIFFICULTY_INDEX].to_i : NOT_CHECK_SUCCESS\n\n        return get_roll_result(result_text, success_dice, ten_dice, hunger_ten_dice, hunger_botch_dice, difficulty)\n      end\n\n      private\n\n      def get_dice_pools(m)\n        hunger_dice_included_command = m[COMMAND_HUNGER_DICE_INCLUDED_INDEX]\n        if hunger_dice_included_command && hunger_dice_included_command == \"VMI\"\n          # Hunger Diceを内数処理するの場合\n          hunger_dice_pool = m[HUNGER_DICE_INCLUDED_INDEX].nil? ? -1 : m[HUNGER_DICE_INCLUDED_INDEX].to_i\n          dice_pool_value = m[DICE_POOL_HUNGER_DICE_INCLUDED_INDEX].to_i\n          dice_pool = dice_pool_value - (hunger_dice_pool < 0 ? 0 : hunger_dice_pool)\n          if dice_pool_value > 0 && hunger_dice_pool >= dice_pool_value\n            # 1 以上のダイスプール、かつ、Hungerダイスがダイスプール以上のとき、ダイスプールが全てHungerダイスになる。\n            dice_pool = 0\n            hunger_dice_pool = dice_pool_value\n          end\n        else\n          # Hunger DiceがPLによる内数指定の場合\n          hunger_dice_pool = m[HUNGER_DICE_NO_INCLUDED_INDEX].nil? ? -1 : m[HUNGER_DICE_NO_INCLUDED_INDEX].to_i\n          dice_pool = m[DICE_POOL_HUNGER_DICE_NO_INCLUDED_INDEX].to_i\n        end\n        return dice_pool, hunger_dice_pool\n      end\n\n      def get_roll_result(result_text, success_dice, ten_dice, hunger_ten_dice, hunger_botch_dice, difficulty)\n        result_text = \"\#{result_text} 成功数=\#{success_dice}\"\n        is_critical = ten_dice >= 2\n\n        if difficulty > 0\n          result_text = \"\#{result_text} 難易度=\#{difficulty}\"\n\n          if success_dice >= difficulty\n            result_text = \"\#{result_text} 差分=\#{success_dice - difficulty}\"\n\n            if hunger_ten_dice > 0 && is_critical\n              return Result.critical(\"\#{result_text}：判定成功! [Messy Critical]\")\n            elsif is_critical\n              return Result.critical(\"\#{result_text}：判定成功! [Critical Win]\")\n            end\n\n            return Result.success(\"\#{result_text}：判定成功!\")\n          else\n            if hunger_botch_dice > 0\n              return Result.fumble(\"\#{result_text}：判定失敗! [Bestial Failure]\")\n            end\n            if success_dice == 0\n              return Result.fumble(\"\#{result_text}：判定失敗! [Total Failure]\")\n            end\n\n            return Result.failure(\"\#{result_text}：判定失敗!\")\n          end\n        elsif difficulty < 0\n          if success_dice == 0\n            if hunger_botch_dice > 0\n              return Result.fumble(\"\#{result_text}：判定失敗! [Bestial Failure]\")\n            end\n\n            return Result.fumble(\"\#{result_text}：判定失敗! [Total Failure]\")\n          else\n            if hunger_botch_dice > 0\n              result_text = \"\#{result_text}\\n　判定失敗なら [Bestial Failure]\"\n            end\n            if hunger_ten_dice > 0 && is_critical\n              result_text = \"\#{result_text}\\n　判定成功なら [Messy Critical]\"\n            elsif is_critical\n              result_text = \"\#{result_text}\\n　判定成功なら [Critical Win]\"\n            end\n            return result_text.to_s\n          end\n        end\n\n        # 難易度0指定(=全ての判定チェックを行わない)\n        return result_text.to_s\n      end\n\n      def get_critical_success(ten_dice)\n        # 10の目が2個毎に追加2成功\n        return ((ten_dice / 2).to_i * 2)\n      end\n\n      def make_dice_roll(dice_pool)\n        dice_list = @randomizer.roll_barabara(dice_pool, 10)\n\n        dice_text = dice_list.join(',')\n        success_dice = dice_list.count { |x| x >= 6 }\n        ten_dice = dice_list.count(10)\n        botch_dice = dice_list.count(1)\n\n        return dice_text, success_dice, ten_dice, botch_dice\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:VampireTheMasquerade5th>", "1", "5", "7", "9", "10", "12", "-1", "self", "register_prefix", "eval_game_system_specific_command", "command", "m", "match", "get_dice_pools", "dice_pool", "hunger_dice_pool", "<", "0", ">", "make_dice_roll", "dice_text", "success_dice", "ten_dice", "result_text", ">=", "hunger_dice_text", "hunger_success_dice", "hunger_ten_dice", "hunger_botch_dice", "+", "get_critical_success", "difficulty", "[]", "DIFFICULTY_INDEX", "to_i", "NOT_CHECK_SUCCESS", "get_roll_result", "private", "hunger_dice_included_command", "COMMAND_HUNGER_DICE_INCLUDED_INDEX", "HUNGER_DICE_INCLUDED_INDEX", "nil?", "dice_pool_value", "DICE_POOL_HUNGER_DICE_INCLUDED_INDEX", "-", "HUNGER_DICE_NO_INCLUDED_INDEX", "DICE_POOL_HUNGER_DICE_NO_INCLUDED_INDEX", "is_critical", "2", "Result", "critical", "success", "fumble", "failure", "to_s", "*", "/", "dice_list", "@randomizer", "roll_barabara", "join", "count", "block in make_dice_roll", "x", "block (2 levels) in make_dice_roll", "6", "botch_dice", "Base"], :mappings=>"AAAAA,2BAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAEE,8BAAKA,yBAAL;QAGA,gCAAOA,qCAAP;QAGA,oCAAWA,gBAAX;QAGA,wCACNA,gCADqB,GAErBA,uCAFqB,GAGrBA,yCAHqB,GAIrBA,IAJqB,GAKrBA,wDALqB,GAMrBA,eANqB,GAOrBA,eAPqB,GAQrBA,IARqB,GASrBA,0EATqB,GAUrBA,sEAVqB,GAWrBA,oCAXqB,GAYrBA,yBAZqB,GAarBA,qCAbqB,GAcrBA,yBAdqB,GAerBA,IAfqB,GAgBrBA,yFAhBqB,GAiBrBA,+CAjBqB,GAkBrBA,oFAlBqB,GAmBrBA,+BAnBqB,GAoBrBA,oBApBqB,GAqBrBA,gCArBqB,GAsBrBA,oBAtBqB,GAuBrBA,IAvBqB,GAwBrBA,gDAxBqB,GAyBrBA,gCAzBqB,GA0BrBA,qBA1BqB,GA2BrBA,iCA3BqB,GA4BrBA,qBA5BqB,GA6BrBA,IA7BM;QAgCA,4CAA8CC,CAA9C;QACA,mEAA8CC,CAA9C;QACA,yDAA8CC,CAA9C;QACA,8DAA8CC,CAA9C;QACA,gEAA8CC,EAA9C;QACA,sDAA8CC,EAA9C;QAGA,6CAAoBC,EAApB;QAEAC,IAAAC,iBAAAA,CAAgBT,6BAAhBS;;AAEAC,QAAAA,iDAAAA,6CAAsCC,OAAtCD;AAAAA,UAAAA;;;UACEE,IAAI,wDAAyDC,OAAAA,CAAOF,OAAPE;UAC7D,KAAA,QAAOD,CAAP,CAAA;YACE,OAAOF;UADT;UAIA,KAA8BF,IAAAM,gBAAAA,CAAeF,CAAfE,CAA9B,kBAAA,EAAAC,CAAAA,YAAA,6BAAAA,CAAA,EAAWC,CAAAA,mBAAX,6BAAWA,CAAX;UACA,IAAA,QAAaC,OAAVF,SAAUE,EAAEC,CAAFD,CAAb,CAAA;YACE,OAAOP;UADT;UAGA,IAAA,QAAoBS,OAAjBH,gBAAiBG,EAAEjB,CAAFiB,CAApB,CAAA;YACE,OAAOT;UADT;UAIA,KAAqCF,IAAAY,gBAAAA,CAAeL,SAAfK,CAArC,kBAAA,EAAAC,CAAAA,YAAA,6BAAAA,CAAA,EAAWC,CAAAA,eAAX,6BAAWA,CAAX,EAAyBC,CAAAA,WAAzB,6BAAyBA,CAAzB;UACAC,cAAed,GAAD,GAAA,CAAIK,SAAJ,CAAA,GAAcL;UAE5B,IAAA,QAAoBe,OAAjBT,gBAAiBS,EAAGP,CAAHO,CAApB,CAAA;;YACE,KAA4EjB,IAAAY,gBAAAA,CAAeJ,gBAAfI,CAA5E,kBAAA,EAAAM,CAAAA,mBAAA,6BAAAA,CAAA,EAAkBC,CAAAA,sBAAlB,6BAAkBA,CAAlB,EAAuCC,CAAAA,kBAAvC,6BAAuCA,CAAvC,EAAwDC,CAAAA,oBAAxD,6BAAwDA,CAAxD;YAEAN,WAASO,SAATP,QAASO,EAAGF,eAAHE;YACTR,eAAaQ,SAAbR,YAAaQ,EAAGH,mBAAHG;YAEbN,cAAc,EAAA,GAAA,CAAGA,WAAH,CAAA,GAAed,GAAf,GAAA,CAAkBM,gBAAlB,CAAA,GAAmCN,UAAnC,GAAA,CAA6CW,SAA7C,CAAA,GAAuDX,KAAvD,GAAA,CAA4DgB,gBAA5D,CAAA,GAA6EhB;UAN7F;;YAQEkB,kBAAkBV;YAClBW,oBAAoBX;YACpBM,cAAc,EAAA,GAAA,CAAGA,WAAH,CAAA,GAAed,OAAf,GAAA,CAAsBW,SAAtB,CAAA,GAAgCX;UAVhD;UAaAY,eAAaQ,SAAbR,YAAaQ,EAAGtB,IAAAuB,sBAAAA,CAAqBR,QAArBQ,CAAHD;UAEbE,aAAa,CAAA,QAAApB,CAACqB,OAAAA,CAACC,sBAADD,CAAD,CAAA,GAAA,CAAsBrB,CAACqB,OAAAA,CAACC,sBAADD,CAAkBE,MAAAA,CAAAA,CAAzC,IAAA,CAAiDC,uBAAjD,CAAA;UAEb,OAAO5B,IAAA6B,iBAAAA,CAAgBb,WAAhB,EAA6BF,YAA7B,EAA2CC,QAA3C,EAAqDK,eAArD,EAAsEC,iBAAtE,EAAyFG,UAAzFK;QAlCT3B,CAAAA;QAqCAF,IAAA8B,SAAAA,CAAAA;;AAEAxB,QAAAA,8BAAAA,0BAAmBF,CAAnBE;AAAAA,UAAAA;;;UACEyB,+BAA+B3B,CAACqB,OAAAA,CAACO,wCAADP;UAChC,IAAG,CAAA,QAAAM,4BAAA,CAAA,IAAA,CAAA,MAAgCA,4BAAhC,EAAgEzB,KAAhE,CAAA,CAAA,CAAH;;YAEEE,mBAAmB,CAAA,QAAAJ,CAACqB,OAAAA,CAACQ,gCAADR,CAA4BS,SAAAA,CAAAA,CAA7B,CAAA,GAAA,CAAqCnC,EAArC,IAAA,CAA0CK,CAACqB,OAAAA,CAACQ,gCAADR,CAA4BE,MAAAA,CAAAA,CAAvE,CAAA;YACnBQ,kBAAkB/B,CAACqB,OAAAA,CAACW,0CAADX,CAAsCE,MAAAA,CAAAA;YACzDpB,YAA4B8B,UAAhBF,eAAgBE,EAAG,CAAA,QAAiB5B,OAAjBD,gBAAiBC,EAAEC,CAAFD,CAAjB,CAAA,GAAA,CAAuBC,CAAvB,IAAA,CAA2BF,gBAA3B,CAAA,CAAH6B;YAC5B,IAAG,CAAA,QAAgB1B,OAAhBwB,eAAgBxB,EAAED,CAAFC,CAAhB,CAAA,IAAA,CAAA,QAAwCM,OAAjBT,gBAAiBS,EAAGkB,eAAHlB,CAAxC,CAAA,CAAA,CAAH;;cAEEV,YAAYG;cACZF,mBAAmB2B;YAHrB;UALF;;YAYE3B,mBAAmB,CAAA,QAAAJ,CAACqB,OAAAA,CAACa,mCAADb,CAA+BS,SAAAA,CAAAA,CAAhC,CAAA,GAAA,CAAwCnC,EAAxC,IAAA,CAA6CK,CAACqB,OAAAA,CAACa,mCAADb,CAA+BE,MAAAA,CAAAA,CAA7E,CAAA;YACnBpB,YAAYH,CAACqB,OAAAA,CAACc,6CAADd,CAAyCE,MAAAA,CAAAA;UAbxD;UAeA,OAAA,CAAOpB,SAAP,EAAkBC,gBAAlB;QAjBFF,CAAAA;;AAoBAuB,QAAAA,+BAAAA,2BAAoBb,WAAD,EAAcF,YAAd,EAA4BC,QAA5B,EAAsCK,eAAtC,EAAuDC,iBAAvD,EAA0EG,UAA7FK;AAAAA,UAAAA;;;UACEb,cAAc,EAAA,GAAA,CAAGA,WAAH,CAAA,GAAea,OAAf,GAAA,CAAsBf,YAAtB;UACd0B,cAAuBvB,OAATF,QAASE,EAAGwB,CAAHxB;UAEvB,IAAA,QAAcN,OAAXa,UAAWb,EAAED,CAAFC,CAAd,CAAA;;YACEK,cAAc,EAAA,GAAA,CAAGA,WAAH,CAAA,GAAea,OAAf,GAAA,CAAsBL,UAAtB;YAEd,IAAA,QAAgBP,OAAbH,YAAaG,EAAGO,UAAHP,CAAhB,CAAA;;cACED,cAAc,EAAA,GAAA,CAAGA,WAAH,CAAA,GAAea,MAAf,GAAA,CAAkCQ,UAAbvB,YAAauB,EAAEb,UAAFa,CAAlC;cAEd,IAAG,CAAA,QAAgB1B,OAAhBS,eAAgBT,EAAED,CAAFC,CAAhB,CAAA,IAAA,CAAA,QAAuB6B,WAAvB,CAAA,CAAA,CAAH;gBACE,OAAOE,YAAMC,UAAAA,CAAU,EAAA,GAAA,CAAG3B,WAAH,CAAA,GAAea,yBAAzBc;cADf,OAEA,IAAA,QAAMH,WAAN,CAAA;gBACE,OAAOE,YAAMC,UAAAA,CAAU,EAAA,GAAA,CAAG3B,WAAH,CAAA,GAAea,uBAAzBc;cADf;cAIA,OAAOD,YAAME,SAAAA,CAAS,EAAA,GAAA,CAAG5B,WAAH,CAAA,GAAea,QAAxBe;YATf;;cAWE,IAAA,QAAqBjC,OAAlBU,iBAAkBV,EAAED,CAAFC,CAArB,CAAA;gBACE,OAAO+B,YAAMG,QAAAA,CAAQ,EAAA,GAAA,CAAG7B,WAAH,CAAA,GAAea,0BAAvBgB;cADf;cAGA,IAAA,MAAG/B,YAAH,EAAmBJ,CAAnB,CAAA;gBACE,OAAOgC,YAAMG,QAAAA,CAAQ,EAAA,GAAA,CAAG7B,WAAH,CAAA,GAAea,wBAAvBgB;cADf;cAIA,OAAOH,YAAMI,SAAAA,CAAS,EAAA,GAAA,CAAG9B,WAAH,CAAA,GAAea,QAAxBiB;YAlBf;UAHF,OAuBA,IAAA,QAAiBrC,OAAXe,UAAWf,EAAEC,CAAFD,CAAjB,CAAA;YACE,IAAA,MAAGK,YAAH,EAAmBJ,CAAnB,CAAA;;cACE,IAAA,QAAqBC,OAAlBU,iBAAkBV,EAAED,CAAFC,CAArB,CAAA;gBACE,OAAO+B,YAAMG,QAAAA,CAAQ,EAAA,GAAA,CAAG7B,WAAH,CAAA,GAAea,0BAAvBgB;cADf;cAIA,OAAOH,YAAMG,QAAAA,CAAQ,EAAA,GAAA,CAAG7B,WAAH,CAAA,GAAea,wBAAvBgB;YALf;;cAOE,IAAA,QAAqBlC,OAAlBU,iBAAkBV,EAAED,CAAFC,CAArB,CAAA;gBACEK,cAAc,EAAA,GAAA,CAAGA,WAAH,CAAA,GAAea;cAD/B;cAGA,IAAG,CAAA,QAAgBlB,OAAhBS,eAAgBT,EAAED,CAAFC,CAAhB,CAAA,IAAA,CAAA,QAAuB6B,WAAvB,CAAA,CAAA,CAAH;gBACExB,cAAc,EAAA,GAAA,CAAGA,WAAH,CAAA,GAAea;cAD/B,OAEA,IAAA,QAAMW,WAAN,CAAA;gBACExB,cAAc,EAAA,GAAA,CAAGA,WAAH,CAAA,GAAea;cAD/B;cAGA,OAAOb,WAAW+B,MAAAA,CAAAA;YAfpB;UADF;UAqBA,OAAO/B,WAAW+B,MAAAA,CAAAA;QAhDpBlB,CAAAA;;AAmDAN,QAAAA,oCAAAA,gCAAyBR,QAAzBQ;AAAAA;UAEE,OAA4ByB,UAAVC,WAATlC,QAASkC,EAAER,CAAFQ,CAAItB,MAAAA,CAAAA,CAAMqB,EAAEP,CAAFO;QAF9BzB,CAAAA;QAKA/B,OAAAoB,8BAAAA,0BAAmBL,SAAnBK;AAAAA,UAAAA;;;UACEsC,YAAYC,eAAWC,eAAAA,CAAe7C,SAA1B,EAAqCV,EAA1BuD;UAEvBvC,YAAYqC,SAASG,MAAAA,CAAMzC,GAANyC;UACrBvC,eAAwBwC,MAATJ,SAASI,SAAAA,EAAAA,EAAAA,EAATC,aAAmBC,CAAnBD;;YAAmB;YAAGE,OAAExC,OAAFuC,CAAEvC,EAAGyC,CAAHzC,EAAxBsC,CAASD;UACxBvC,WAAWmC,SAASI,OAAAA,CAAOzD,EAAPyD;UACpBK,aAAaT,SAASI,OAAAA,CAAO7D,CAAP6D;UAEtB,OAAA,CAAOzC,SAAP,EAAkBC,YAAlB,EAAgCC,QAAhC,EAA0C4C,UAA1C;QARF/C,CAAAA;MA1KFpB,GAAAA,WAAAA,EAAgCoE,UAAhCpE;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}]}