{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/TheUnofficialHollowKnightRPG.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class TheUnofficialHollowKnightRPG < Base\n      # ゲームシステムの識別子\n      ID = 'TheUnofficialHollowKnightRPG'\n\n      # ゲームシステム名\n      NAME = 'The Unofficial Hollow Knight RPG'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'しあんおふいしやるほろうないとRPG'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・能力値判定　[n]AD[+b][#r][>=t]\n        　n: 能力値。小数可。省略不可。\n        　b: ボーナス、ペナルティダイス。省略可。\n        　r: 追加リロールダイス数。省略可。\n        　t: 目標値。>=含めて省略可。\n        　成功数を判定。\n        　例）1AD, 2.5AD, 1.5AD+1, 2AD#1, 2.5AD+2#2>=4\n\n        ・イニシアチブ　[n]INTI[+b][#r]\n        　n: イニシアチブに使う能力値。省略不可。\n          b: ボーナス、ペナルティダイス。省略可。\n          r: 追加リロールダイス数。省略可。\n        　振り直しを行ったうえでイニシアチブ値を計算。\n        　例）1INTI, 2.5INTI, 1.5INTI+1, 2INTI#1, 2.5INTI+2#2\n      INFO_MESSAGE_TEXT\n\n      register_prefix('(\\d+\\.?\\d*)?AD([+-](\\d+))?(#(\\d+))?(>=(\\d+))?', '(\\d+\\.?\\d*)?(INTI|inti)([+-](\\d+))?(#(\\d+))?')\n\n      def initialize(command)\n        super(command)\n\n        @sort_barabara_dice = false # バラバラロール（Bコマンド）でソート無\n      end\n\n      def eval_game_system_specific_command(command)\n        ability_roll(command) || initiative_roll(command)\n      end\n\n      def number_with_sign_from_int(number)\n        if number == 0\n          return \"\"\n        elsif number > 0\n          return \"+\#{number.abs}\"\n        elsif number < 0\n          return \"-\#{number.abs}\"\n        else\n          return number.to_s\n        end\n      end\n\n      def number_with_reroll_from_int(number)\n        if number == 0\n          return \"\"\n        elsif number > 0\n          return \"\\#\#{number}\"\n        else\n          return number.to_s\n        end\n      end\n\n      # 能力値ロール\n      def ability_roll(command)\n        m = /^(\\d+\\.?\\d*)?AD([+-](\\d+))?(#(\\d*))?(>=(\\d+))?/.match(command)\n        unless m\n          return nil\n        end\n\n        num_of_die = m[1].to_f\n        bonus = m[3].to_i\n        reroll = m[5].to_i\n        difficulty = m[7].to_i\n\n        if /\\.[1-9]+/ =~ num_of_die.to_s\n          dice_command = \"\#{num_of_die}AD\#{number_with_sign_from_int(bonus)}\#{number_with_reroll_from_int(reroll)}\"\n          reroll += 1\n        else\n          dice_command = \"\#{num_of_die.to_i}AD\#{number_with_sign_from_int(bonus)}\#{number_with_reroll_from_int(reroll)}\"\n        end\n\n        if difficulty == 0\n          difficulty = 5\n        else\n          dice_command += \">=\#{difficulty}\"\n        end\n\n        # 振られたダイスを入れる\n        values = @randomizer.roll_barabara(num_of_die.to_i + bonus, 6)\n        # 成功数\n        result = values.count { |num| num >= difficulty }\n        failed_roll = num_of_die.to_i - result\n\n        # ロールの結果の文字列\n        rolled_text = \"[\" + values.join(\",\") + \"]\"\n\n        reroll_values = []\n\n        if reroll == 1\n          reroll_values.push(@randomizer.roll_once(6))\n        elsif reroll > 1\n          reroll_values += @randomizer.roll_barabara(reroll, 6)\n        end\n\n        reroll_result = reroll_values.count { |num| num >= difficulty }\n        if failed_roll < reroll_result\n          reroll_result = failed_roll\n        end\n        result += reroll_result\n\n        # リロールの結果の文字列をロールの結果の文字列に追加する\n        unless reroll_values.empty?\n          rolled_text += \" Reroll [\" + reroll_values.join(\",\") + \"]\"\n        end\n\n        # 結果\n        return \"(\#{dice_command}) > \#{rolled_text} > \#{result}成功\"\n      end\n\n      # イニシアチブロール\n      def initiative_roll(command)\n        m = /^(\\d+\\.?\\d*)?(INTI|inti)([+-](\\d+))?(#(\\d+))?/.match(command)\n        unless m\n          return nil\n        end\n\n        grace = m[1].to_f\n        bonus = m[3].to_i\n        reroll = m[6].to_i\n\n        if /\\.[1-9]+/ =~ grace.to_s\n          dice_command = \"(\#{grace}INTI\#{number_with_sign_from_int(bonus)}\#{number_with_reroll_from_int(reroll)})\"\n          reroll += 1\n        else\n          dice_command = \"(\#{grace.to_i}INTI\#{number_with_sign_from_int(bonus)}\#{number_with_reroll_from_int(reroll)})\"\n        end\n\n        values = @randomizer.roll_barabara(grace + bonus, 6)\n\n        revalue = []\n        unless reroll == 0\n          revalue = @randomizer.roll_barabara(reroll, 6)\n        end\n        revalue = revalue.sort\n\n        result = 0\n\n        res_text = \"[\"\n        values.each do |value|\n          if revalue.empty? # リロールがなければ\n            res_text += value.to_s\n            result += value\n          else # リロールがあったら\n            is_min = false\n            index = -1\n            revalue.each do |re|\n              index += 1\n              next unless re > value # リロールしたダイス最小値か\n\n              res_text += \"\#{value}<<\#{re}\"\n              result += re\n              revalue.delete_at(index)\n              is_min = true\n              break\n            end\n            unless is_min # 最小値でなかったら\n              res_text += value.to_s\n              result += value\n            end\n          end\n\n          res_text += \",\"\n        end\n        res_text = res_text.chop\n        res_text += \"]\"\n\n        return \"\#{dice_command} > \#{res_text} > \#{result}\"\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:TheUnofficialHollowKnightRPG>", "self", "register_prefix", "initialize", "command", "@sort_barabara_dice", "eval_game_system_specific_command", "$ret_or_1", "ability_roll", "initiative_roll", "number_with_sign_from_int", "number", "0", ">", "abs", "<", "to_s", "number_with_reroll_from_int", "m", "match", "num_of_die", "[]", "1", "to_f", "bonus", "3", "to_i", "reroll", "5", "difficulty", "7", "=~", "dice_command", "+", "values", "@randomizer", "roll_barabara", "6", "result", "count", "block in ability_roll", "num", "block (2 levels) in ability_roll", ">=", "failed_roll", "-", "rolled_text", "join", "reroll_values", "push", "roll_once", "reroll_result", "empty?", "grace", "revalue", "sort", "res_text", "each", "block in initiative_roll", "value", "block (2 levels) in initiative_roll", "is_min", "index", "-1", "re", "block (3 levels) in initiative_roll", "delete_at", "chop", "Base"], :mappings=>"AAAAA,2BAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAEE,8BAAKA,8BAAL;QAGA,gCAAOA,kCAAP;QAGA,oCAAWA,oBAAX;QAGA,wCACNA,6BADqB,GAErBA,qBAFqB,GAGrBA,0BAHqB,GAIrBA,uBAJqB,GAKrBA,qBALqB,GAMrBA,YANqB,GAOrBA,+CAPqB,GAQrBA,IARqB,GASrBA,2BATqB,GAUrBA,0BAVqB,GAWrBA,2BAXqB,GAYrBA,wBAZqB,GAarBA,2BAbqB,GAcrBA,sDAdM;QAiBAC,IAAAC,iBAAAA,CAAgBF,qDAAhB,EAAiEA,mDAAjEE;;AAEAC,QAAAA,0BAAAA,sBAAeC,OAAfD;AAAAA,UAAAA;;UAAAA;;UACE,OAAAF,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAMG,OAAN,CAAA,EAAA,IAAA;UAEAD,OAAAE,CAAAA,0BAAsB,KAAtBA;QAHFF,CAAAA;;AAMAG,QAAAA,iDAAAA,6CAAsCF,OAAtCE;AAAAA,UAAAA;;UACE,IAAA,QAAAC,CAAAA,YAAAN,IAAAO,cAAAA,CAAaJ,OAAbI,CAAAD,CAAA,CAAA;YAAAD,OAAA;UAAA;YAAyBA,OAAAL,IAAAQ,iBAAAA,CAAgBL,OAAhBK;UAAzB;QADFH,CAAAA;;AAIAI,QAAAA,yCAAAA,qCAA8BC,MAA9BD;AAAAA;UACE,IAAA,MAAGC,MAAH,EAAaC,CAAb,CAAA;YACE,OAAOF;UADT,OAEA,IAAA,QAAaG,OAAPF,MAAOE,EAAED,CAAFC,CAAb,CAAA;YACE,OAAQH,GAAD,GAAA,CAAIC,MAAMG,KAAAA,CAAAA,CAAV;UADT,OAEA,IAAA,QAAaC,OAAPJ,MAAOI,EAAEH,CAAFG,CAAb,CAAA;YACE,OAAQL,GAAD,GAAA,CAAIC,MAAMG,KAAAA,CAAAA,CAAV;UADT;YAGE,OAAOH,MAAMK,MAAAA,CAAAA;UAHf;QALFN,CAAAA;;AAYAO,QAAAA,2CAAAA,uCAAgCN,MAAhCM;AAAAA;UACE,IAAA,MAAGN,MAAH,EAAaC,CAAb,CAAA;YACE,OAAOK;UADT,OAEA,IAAA,QAAaJ,OAAPF,MAAOE,EAAED,CAAFC,CAAb,CAAA;YACE,OAAQI,GAAD,GAAA,CAAKN,MAAL;UADT;YAGE,OAAOA,MAAMK,MAAAA,CAAAA;UAHf;QAHFC,CAAAA;;AAWAT,QAAAA,4BAAAA,wBAAiBJ,OAAjBI;AAAAA,UAAAA;;;UACEU,IAAI,gDAAgDC,OAAAA,CAAOf,OAAPe;UACpD,KAAA,QAAOD,CAAP,CAAA;YACE,OAAO;UADT;UAIAE,aAAaF,CAACG,OAAAA,CAACC,CAADD,CAAGE,MAAAA,CAAAA;UACjBC,QAAQN,CAACG,OAAAA,CAACI,CAADJ,CAAGK,MAAAA,CAAAA;UACZC,SAAST,CAACG,OAAAA,CAACO,CAADP,CAAGK,MAAAA,CAAAA;UACbG,aAAaX,CAACG,OAAAA,CAACS,CAADT,CAAGK,MAAAA,CAAAA;UAEjB,IAAA,QAAG,UAAWK,OAAAA,CAAGX,UAAUJ,MAAAA,CAAAA,CAAbe,CAAd,CAAA;;YACEC,eAAe,EAAA,GAAA,CAAGZ,UAAH,CAAA,GAAcZ,IAAd,GAAA,CAAkBP,IAAAS,2BAAAA,CAA0Bc,KAA1Bd,CAAlB,CAAA,GAAA,CAAqDT,IAAAgB,6BAAAA,CAA4BU,MAA5BV,CAArD;YACfU,SAAOM,SAAPN,MAAOM,EAAGX,CAAHW;UAFT;YAIED,eAAe,EAAA,GAAA,CAAGZ,UAAUM,MAAAA,CAAAA,CAAb,CAAA,GAAmBlB,IAAnB,GAAA,CAAuBP,IAAAS,2BAAAA,CAA0Bc,KAA1Bd,CAAvB,CAAA,GAAA,CAA0DT,IAAAgB,6BAAAA,CAA4BU,MAA5BV,CAA1D;UAJjB;UAOA,IAAA,MAAGY,UAAH,EAAiBjB,CAAjB,CAAA;YACEiB,aAAaD;UADf;YAGEI,eAAaC,SAAbD,YAAaC,EAAIzB,IAAD,GAAA,CAAKqB,UAAL,CAAHI;UAHf;UAOAC,SAASC,eAAWC,eAAAA,CAA+BH,SAAhBb,UAAUM,MAAAA,CAAAA,CAAMO,EAAET,KAAFS,CAA1C,EAAmDI,CAAxCD;UAEpBE,SAAeC,MAANL,MAAMK,SAAAA,EAAAA,EAAAA,EAANC,aAAgBC,GAAhBD;;YAAgB;YAAKE,OAAIC,OAAJF,GAAIE,EAAGd,UAAHc,EAAzBH,CAAMD;UACfK,cAA8BC,UAAhBzB,UAAUM,MAAAA,CAAAA,CAAMmB,EAAEP,MAAFO;UAG9BC,cAAqCb,SAAnBA,SAAJzB,GAAIyB,EAAEC,MAAMa,MAAAA,CAAMvC,GAANuC,CAARd,CAAmBA,EAAEzB,GAAFyB;UAErCe,gBAAgB;UAEhB,IAAA,MAAGrB,MAAH,EAAaL,CAAb,CAAA;YACE0B,aAAaC,MAAAA,CAAMd,eAAWe,WAAAA,CAAWb,CAAXa,CAAjBD;UADf,OAEA,IAAA,QAAapC,OAAPc,MAAOd,EAAES,CAAFT,CAAb,CAAA;YACEmC,gBAAcf,SAAde,aAAcf,EAAGE,eAAWC,eAAAA,CAAeT,MAA1B,EAAkCU,CAAvBD,CAAdH;UADhB;UAIAkB,gBAA6BZ,MAAbS,aAAaT,SAAAA,EAAAA,EAAAA,EAAbC,aAAuBC,GAAvBD;;YAAuB;YAAKE,OAAIC,OAAJF,GAAIE,EAAGd,UAAHc,EAAhCH,CAAaD;UAC7B,IAAA,QAAexB,OAAZ6B,WAAY7B,EAAEoC,aAAFpC,CAAf,CAAA;YACEoC,gBAAgBP;UADlB;UAGAN,SAAOL,SAAPK,MAAOL,EAAGkB,aAAHlB;UAGP,KAAA,QAAOe,aAAaI,WAAAA,CAAAA,CAApB,CAAA;YACEN,cAAYb,SAAZa,WAAYb,EAAyCA,SAA1BA,SAAZzB,WAAYyB,EAAEe,aAAaD,MAAAA,CAAMvC,GAANuC,CAAfd,CAA0BA,EAAEzB,GAAFyB,CAAzCA;UADd;UAKA,OAAQzB,GAAD,GAAA,CAAIwB,YAAJ,CAAA,GAAiBxB,MAAjB,GAAA,CAAuBsC,WAAvB,CAAA,GAAmCtC,KAAnC,GAAA,CAAwC8B,MAAxC,CAAA,GAA+C9B;QArDxDA,CAAAA;QAyDAR,OAAAS,+BAAAA,2BAAoBL,OAApBK;AAAAA,UAAAA;;;UACES,IAAI,+CAA+CC,OAAAA,CAAOf,OAAPe;UACnD,KAAA,QAAOD,CAAP,CAAA;YACE,OAAO;UADT;UAIAmC,QAAQnC,CAACG,OAAAA,CAACC,CAADD,CAAGE,MAAAA,CAAAA;UACZC,QAAQN,CAACG,OAAAA,CAACI,CAADJ,CAAGK,MAAAA,CAAAA;UACZC,SAAST,CAACG,OAAAA,CAACgB,CAADhB,CAAGK,MAAAA,CAAAA;UAEb,IAAA,QAAG,UAAWK,OAAAA,CAAGsB,KAAKrC,MAAAA,CAAAA,CAARe,CAAd,CAAA;;YACEC,eAAgBvB,GAAD,GAAA,CAAI4C,KAAJ,CAAA,GAAU5C,MAAV,GAAA,CAAgBR,IAAAS,2BAAAA,CAA0Bc,KAA1Bd,CAAhB,CAAA,GAAA,CAAmDT,IAAAgB,6BAAAA,CAA4BU,MAA5BV,CAAnD,CAAA,GAAuFR;YACtGkB,SAAOM,SAAPN,MAAOM,EAAGX,CAAHW;UAFT;YAIED,eAAgBvB,GAAD,GAAA,CAAI4C,KAAK3B,MAAAA,CAAAA,CAAT,CAAA,GAAejB,MAAf,GAAA,CAAqBR,IAAAS,2BAAAA,CAA0Bc,KAA1Bd,CAArB,CAAA,GAAA,CAAwDT,IAAAgB,6BAAAA,CAA4BU,MAA5BV,CAAxD,CAAA,GAA4FR;UAJ7G;UAOAyB,SAASC,eAAWC,eAAAA,CAAqBH,SAANoB,KAAMpB,EAAET,KAAFS,CAAhC,EAAyCI,CAA9BD;UAEpBkB,UAAU;UACV,KAAA,MAAO3B,MAAP,EAAiBf,CAAjB,CAAA;YACE0C,UAAUnB,eAAWC,eAAAA,CAAeT,MAA1B,EAAkCU,CAAvBD;UADvB;UAGAkB,UAAUA,OAAOC,MAAAA,CAAAA;UAEjBjB,SAAS1B;UAET4C,WAAW/C;UACLgD,MAANvB,MAAMuB,QAAAA,EAAAA,EAAAA,EAANC,aAAgBC,KAAhBD,EAAAE;;;YAAgB;YACd,IAAA,QAAGN,OAAOF,WAAAA,CAAAA,CAAV,CAAA;;cACEI,WAASvB,SAATuB,QAASvB,EAAG0B,KAAK3C,MAAAA,CAAAA,CAARiB;cACTK,SAAOL,SAAPK,MAAOL,EAAG0B,KAAH1B;YAFT;;cAIE4B,SAAS;cACTC,QAAQC;cACDN,YAAAA,MAAAA,IAAAA,4BAAAA,EAAAA,OAAAA,MAAPH,OAAOG,QAAAA,EAAAA,EAAAA,EAAPG,aAAiBI,EAAjBJ;;gBAAiB;gBACfE,QAAM7B,SAAN6B,KAAM7B,EAAGX,CAAHW;gBACN,KAAA,QAAepB,OAAHmD,EAAGnD,EAAE8C,KAAF9C,CAAf,CAAA;kBAAA,OAAA;gBAAA;gBAEA2C,WAASvB,SAATuB,QAASvB,EAAG,EAAA,GAAA,CAAG0B,KAAH,CAAA,GAASM,IAAT,GAAA,CAAaD,EAAb,CAAH/B;gBACTK,SAAOL,SAAPK,MAAOL,EAAG+B,EAAH/B;gBACPqB,OAAOY,WAAAA,CAAWJ,KAAXI;gBACPL,SAAS;gBACT,QAAA,QAAA,EARFD,CAAOH,CAAAA;gBAAAA;gBAAAA;cAAAA,CAAAA;cAUP,KAAA,QAAOI,MAAP,CAAA;;gBACEL,WAASvB,SAATuB,QAASvB,EAAG0B,KAAK3C,MAAAA,CAAAA,CAARiB;gBACTK,SAAOL,SAAPK,MAAOL,EAAG0B,KAAH1B;cAFT;YAhBF;YAsBA2B,OAAAJ,CAAAA,WAASvB,SAATuB,QAASvB,EAAG2B,GAAH3B,CAATuB,EAvBFE,CAAMD;UAyBND,WAAWA,QAAQW,MAAAA,CAAAA;UACnBX,WAASvB,SAATuB,QAASvB,EAAGxB,GAAHwB;UAET,OAAO,EAAA,GAAA,CAAGD,YAAH,CAAA,GAAgBvB,KAAhB,GAAA,CAAqB+C,QAArB,CAAA,GAA8B/C,KAA9B,GAAA,CAAmC6B,MAAnC;QAxDT7B,CAAAA;MAxHFT,GAAAA,WAAAA,EAAqCoE,UAArCpE;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}]}