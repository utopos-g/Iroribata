{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/BeginningIdol2022.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class BeginningIdol2022 < Base\n      # ゲームシステムの識別子\n      ID = 'BeginningIdol2022'\n\n      # ゲームシステム名\n      NAME = 'ビギニングアイドル（2022年改訂版）'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'ひきにんくあいとる2022'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        これは、2022年に大判サイズで発売された『駆け出しアイドルRPG ビギニングアイドル 基本ルールブック』に対応したコマンドです。\n\n        ・行為判定　BIn@c#f+m>=t\n        　nD6をダイスロールし、行為判定に成功したかを出力します。スペシャルとファンブルの判定も行います。\n        　　n: ダイス数（省略時 2)\n        　　c: スペシャル値（省略時 12)\n        　　f: ファンブル値（省略時 2)\n        　　m: 修正値（省略可)\n        　　t: 目標値\n\n        ・パフォーマンス判定　PDn+m\n        　nD6をダイスロールし、パフォーマンス値を出力します。パーフェクトミラクルとミラクルの判定も行います。\n        　　n: ダイス数\n        　　m: 修正値（省略可)\n\n        ・シンフォニー　xxxPDn+m\n        　nD6をダイスロールし、場に残っているダイスを加味してパフォーマンス値を出力します。\n        　パーフェクトミラクルとミラクルシンクロの判定も行います。\n        　　xxx: 場に残っているダイスの出目を列挙したもの\n        　　n: ダイス数\n        　　m: 修正値（省略可)\n      INFO_MESSAGE_TEXT\n\n      def initialize(command)\n        super(command)\n\n        @sort_add_dice = true\n        @d66_sort_type = D66SortType::ASC\n      end\n\n      register_prefix(\"BI\", \"PD\", \"[1-6]+PD\")\n\n      def eval_game_system_specific_command(command)\n        roll_skill_check(command) || roll_performance_check(command) || roll_symphony_check(command)\n      end\n\n      private\n\n      # 行為判定\n      def roll_skill_check(command)\n        parser = Command::Parser.new(\"BI\", round_type: @round_type)\n                                .enable_suffix_number\n                                .enable_critical\n                                .enable_fumble\n                                .restrict_cmp_op_to(:>=)\n        parsed = parser.parse(command)\n        unless parsed\n          return nil\n        end\n\n        dice_times = parsed.suffix_number || 2\n        critical = parsed.critical || 12\n        fumble = parsed.fumble || 2\n\n        dice_list = @randomizer.roll_barabara(dice_times, 6).sort()\n        dice_total = dice_list.sum()\n        is_critical = dice_total >= critical\n        is_fumble = !is_critical && dice_total <= fumble\n        total = dice_total + parsed.modify_number\n\n        result =\n          if is_critical\n            Result.critical(\"スペシャル(PCは【思い出】を1つ獲得する)\")\n          elsif is_fumble\n            Result.fumble(\"ファンブル(【思い出】を1つ獲得し、ファンブル表を振る)\")\n          elsif total >= parsed.target_number\n            Result.success(\"成功\")\n          else\n            Result.failure(\"失敗\")\n          end\n\n        result.text = \"(\#{parsed}) ＞ \#{dice_total}[\#{dice_list.join(',')}]\#{Format.modifier(parsed.modify_number)} ＞ \#{total} ＞ \#{result.text}\"\n        return result\n      end\n\n      # パフォーマンス判定\n      def roll_performance_check(command)\n        m = /^PD(\\d+)([+-]\\d+)?$/.match(command)\n        unless m\n          return nil\n        end\n\n        suffix_number = m[1].to_i\n        modifier = m[2].to_i\n        is_extension = suffix_number >= 7\n        dice_times = is_extension ? 6 : suffix_number\n        extension_bonus = is_extension ? suffix_number - dice_times : 0\n\n        if dice_times <= 0\n          return nil\n        end\n\n        dice_list = @randomizer.roll_barabara(dice_times, 6).sort()\n        uniqed = select_uniqs(dice_list).sort()\n\n        is_perfect_miracle = uniqed == [1, 2, 3, 4, 5, 6]\n        is_miracle = uniqed.empty?\n        result_label =\n          if is_perfect_miracle\n            \"【パーフェクトミラクル】\#{30 + extension_bonus + modifier}\"\n          elsif is_miracle\n            \"【ミラクル】\#{10 + extension_bonus + modifier}\"\n          else\n            (uniqed.sum() + extension_bonus + modifier).to_s\n          end\n        if is_extension\n          result_label += \" (エクステンション: \#{extension_bonus}個まで振りなおし可能)\"\n        end\n\n        Result.new.tap do |result|\n          result.critical = is_perfect_miracle || is_miracle\n          result.text = [\n            \"(\#{command})\",\n            \"パフォーマンス判定\",\n            \"[\#{dice_list.join(',')}]\#{Format.modifier(extension_bonus)}\#{Format.modifier(modifier)}\",\n            (\"[\#{uniqed.join(',')}]\#{Format.modifier(extension_bonus)}\#{Format.modifier(modifier)}\" if dice_list.size != uniqed.size),\n            result_label,\n          ].compact.join(\" ＞ \")\n        end\n      end\n\n      def select_uniqs(array)\n        # TODO: Ruby 2.7以降のみサポートするようになった場合に Enumerable#tally で書く\n        array.group_by(&:itself)\n             .to_a\n             .select { |_, arr| arr.size == 1 }\n             .map { |key, _| key }\n      end\n\n      # シンフォニー\n      def roll_symphony_check(command)\n        m = /^([1-6]+)PD([1-6])([+-]\\d+)?$/.match(command)\n        unless m\n          return nil\n        end\n\n        carries = m[1].chars.map(&:to_i).sort()\n        dice_times = m[2].to_i\n        modifier = m[3].to_i\n\n        dice_list = @randomizer.roll_barabara(dice_times, 6).sort()\n        uniqed = select_uniqs(carries + dice_list).sort()\n\n        is_perfect_miracle = uniqed == [1, 2, 3, 4, 5, 6]\n        is_miracle_synchro = uniqed.empty?\n        result_label =\n          if is_perfect_miracle\n            \"【パーフェクトミラクル】\#{30 + modifier}\"\n          elsif is_miracle_synchro\n            \"【ミラクルシンクロ】\#{20 + modifier}\"\n          else\n            (uniqed.sum() + modifier).to_s\n          end\n\n        Result.new.tap do |result|\n          result.critical = is_perfect_miracle || is_miracle_synchro\n          result.text = [\n            \"(\#{command})\",\n            \"シンフォニー\",\n            \"[\#{carries.join(',')}],[\#{dice_list.join(',')}]\#{Format.modifier(modifier)}\",\n            \"[\#{uniqed.join(',')}]\#{Format.modifier(modifier)}\",\n            result_label,\n          ].join(\" ＞ \")\n        end\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:BeginningIdol2022>", "initialize", "command", "self", "@sort_add_dice", "@d66_sort_type", "D66SortType::ASC", "D66SortType", "register_prefix", "eval_game_system_specific_command", "$ret_or_1", "$ret_or_2", "roll_skill_check", "roll_performance_check", "roll_symphony_check", "private", "parser", "Command::Parser", "Command", "new", "@round_type", "enable_suffix_number", "enable_critical", "enable_fumble", "restrict_cmp_op_to", "parsed", "parse", "dice_times", "suffix_number", "2", "critical", "12", "fumble", "dice_list", "@randomizer", "roll_barabara", "6", "sort", "dice_total", "sum", "is_critical", ">=", "is_fumble", "!", "<=", "total", "+", "modify_number", "result", "Result", "target_number", "success", "failure", "text=", "join", "Format", "modifier", "text", "m", "match", "[]", "1", "to_i", "is_extension", "7", "extension_bonus", "-", "0", "uniqed", "select_uniqs", "is_perfect_miracle", "==", "3", "4", "5", "is_miracle", "empty?", "result_label", "30", "10", "to_s", "tap", "block in roll_performance_check", "block (2 levels) in roll_performance_check", "critical=", "size", "compact", "array", "map", "select", "group_by", "to_proc", "to_a", "block in select_uniqs", "_", "arr", "block (2 levels) in select_uniqs", "key", "carries", "chars", "is_miracle_synchro", "20", "block in roll_symphony_check", "block (2 levels) in roll_symphony_check", "Base"], :mappings=>"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"}}]}