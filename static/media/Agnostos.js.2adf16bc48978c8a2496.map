{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Agnostos.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Agnostos < Base\n      # ゲームシステムの識別子\n      ID = \"Agnostos\"\n\n      # ゲームシステム名\n      NAME = \"アグノストス\"\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = \"あくのすとす\"\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ■ 行為判定\n          CDx>=t\n          x: コンディションレベル（A~E もしくは 5~1)\n          t: 目標値\n          の成否とコンディションの変動量を判定します。\n\n        ■ 心拍のコンディションチェック\n          HCDx\n          x: コンディションレベル（C+, B+, A, B-, C-, もしくは 5~1）\n          酸素の消費量、コンディションの変動量、気絶したかを判定します。\n\n        ■ 必殺技\n          xSPy\n          x: メインコンディション（A~E もしくは 5~1)\n          y: サブコンディション（A~E もしくは 5~1)\n          必殺技のダメージ量を判定します。\n      MESSAGETEXT\n\n      register_prefix('CD', 'HCD', '[A-E1-5]SP[A-E1-5]')\n\n      def eval_game_system_specific_command(command)\n        condition_roll(command) || heart_condition_roll(command) || special_roll(command)\n      end\n\n      private\n\n      # コンディションチェック\n      def condition_roll(command)\n        parser = Command::Parser.new(/CD[A-E1-5]/, round_type: @round_type).disable_modifier.restrict_cmp_op_to(:>=)\n        parsed = parser.parse(command)\n        unless parsed\n          return nil\n        end\n\n        condition_level = to_condition_level(parsed.command[-1])\n        sides = to_sides(condition_level)\n        value = @randomizer.roll_once(sides)\n\n        Result.new.tap do |r|\n          r.critical = critical?(sides, value)\n          r.fumble = fumble?(sides, value)\n          r.condition = value >= parsed.target_number\n\n          r.text = [\n            \"(CD\#{condition_level}>=\#{parsed.target_number})\",\n            \"(1D\#{sides}>=\#{parsed.target_number})\",\n            value.to_s(),\n            r.success? ? \"成功\" : \"失敗\",\n            condition_change(sides, value),\n          ].join(\" ＞ \")\n        end\n      end\n\n      def to_condition_level(char)\n        case char\n        when \"5\"\n          \"A\"\n        when \"4\"\n          \"B\"\n        when \"3\"\n          \"C\"\n        when \"2\"\n          \"D\"\n        when \"1\"\n          \"E\"\n        else\n          char\n        end\n      end\n\n      def to_sides(condition)\n        case condition\n        when \"A\"\n          12\n        when \"B\"\n          10\n        when \"C\"\n          8\n        when \"D\"\n          6\n        else # \"E\"\n          4\n        end\n      end\n\n      def condition_change(sides, value)\n        if critical?(sides, value)\n          \"コンディション：2段階上昇（クリティカル）\"\n        elsif fumble?(sides, value)\n          \"コンディション：2段階下降（ファンブル）\"\n        elsif sides != 12 && sides - value <= 1\n          \"コンディション：1段階上昇\"\n        elsif sides == 12 && value <= 6\n          \"コンディション：1段階下降\"\n        elsif sides == 10 && value <= 3\n          \"コンディション：1段階下降\"\n        elsif sides == 8 && value <= 2\n          \"コンディション：1段階下降\"\n        else\n          \"コンディション：変動なし\"\n        end\n      end\n\n      def critical?(sides, value)\n        sides != 12 && sides == value\n      end\n\n      def fumble?(sides, value)\n        sides != 4 && value == 1\n      end\n\n      # 心拍のコンディションチェック\n      def heart_condition_roll(command)\n        m = /^HCD([A1-5]|[BC][+-])$/.match(command)\n        unless m\n          return nil\n        end\n\n        suffix = m[1]\n        condition_level = to_heart_condition_level(suffix)\n        sides = to_heart_sides(condition_level)\n        value = @randomizer.roll_once(sides)\n\n        Result.new.tap do |r|\n          r.critical = critical?(sides, value)\n          r.fumble = fumble?(sides, value)\n\n          r.text = [\n            \"(HCD\#{condition_level})\",\n            \"(1D\#{sides})\",\n            value.to_s(),\n            heart_condition_change(sides, value),\n          ].join(\" ＞ \")\n        end\n      end\n\n      def to_heart_condition_level(char)\n        case char\n        when \"5\"\n          \"C+\"\n        when \"4\"\n          \"B+\"\n        when \"3\"\n          \"A\"\n        when \"2\"\n          \"B-\"\n        when \"1\"\n          \"C-\"\n        else\n          char\n        end\n      end\n\n      def to_heart_sides(condition)\n        case condition\n        when \"C+\"\n          12\n        when \"B+\"\n          10\n        when \"A\"\n          8\n        when \"B-\"\n          6\n        else # \"C-\"\n          4\n        end\n      end\n\n      def fainted?(sides, value)\n        case sides\n        when 12\n          value >= 7\n        when 10\n          value >= 10\n        when 8\n          false\n        when 6\n          value <= 1\n        else # 4\n          value <= 2\n        end\n      end\n\n      def heart_condition_change(sides, value)\n        if fainted?(sides, value)\n          \"気絶\"\n        else\n          condition_change(sides, value)\n        end\n      end\n\n      # 必殺技\n      def special_roll(command)\n        m = /^([A-E1-5])SP([A-E1-5])$/.match(command)\n        unless m\n          return nil\n        end\n\n        times_conditon_level = to_condition_level(m[1])\n        sides_conditon_level = to_condition_level(m[2])\n\n        times = to_times(times_conditon_level)\n        sides = to_sides(sides_conditon_level)\n\n        dice_list = @randomizer.roll_barabara(times, sides)\n        value = dice_list.sum()\n\n        return [\n          \"(\#{times_conditon_level}SP\#{sides_conditon_level})\",\n          \"(\#{times}D\#{sides})\",\n          \"\#{value}[\#{dice_list.join(',')}]\",\n          value.to_s(),\n        ].join(\" ＞ \")\n      end\n\n      def to_times(condition)\n        case condition\n        when \"A\"\n          5\n        when \"B\"\n          4\n        when \"C\"\n          3\n        when \"D\"\n          2\n        else # \"E\"\n          1\n        end\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Agnostos>", "self", "register_prefix", "eval_game_system_specific_command", "command", "$ret_or_1", "$ret_or_2", "condition_roll", "heart_condition_roll", "special_roll", "private", "parser", "Command::Parser", "Command", "new", "@round_type", "disable_modifier", "restrict_cmp_op_to", "parsed", "parse", "condition_level", "to_condition_level", "[]", "-1", "sides", "to_sides", "value", "@randomizer", "roll_once", "tap", "Result", "block in condition_roll", "r", "block (2 levels) in condition_roll", "critical=", "critical?", "fumble=", "fumble?", "condition=", ">=", "target_number", "text=", "to_s", "success?", "condition_change", "join", "char$", "condition", "12", "10", "8", "6", "4", "<=", "-", "1", "3", "2", "!=", "==", "m", "match", "suffix", "to_heart_condition_level", "to_heart_sides", "block in heart_condition_roll", "block (2 levels) in heart_condition_roll", "heart_condition_change", "fainted?", "7", "times_conditon_level", "sides_conditon_level", "times", "to_times", "dice_list", "roll_barabara", "sum", "5", "Base"], :mappings=>"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"}}]}