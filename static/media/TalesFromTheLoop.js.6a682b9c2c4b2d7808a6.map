{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/TalesFromTheLoop.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class TalesFromTheLoop < Base\n      # ゲームシステムの識別子\n      ID = \"TalesFromTheLoop\"\n\n      # ゲームシステム名\n      NAME = \"ザ・ループTRPG\"\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = \"さるうふTRPG\"\n\n      HELP_MESSAGE = <<~TEXT\n        ■ 判定コマンド(nTFLx-x+x or nTFLx+x-x)\n          (必要成功数)TFL(判定ダイス数)+/-(修正ダイス数)\n\n        ※ 必要成功数と修正ダイス数は省略可能\n\n        例1) 必要成功数1、判定ダイスは能力値3\n              1TFL3\n\n        例2）必要成功数不明、あるいはダイスボットの成功判定を使わない、判定ダイスは能力値3+技能1で4、アイテムの修正+1\n              TFL4+1\n\n        例3）必要成功数1、判定ダイスは能力値2+技能1で3、コンディションにチェックが2つ、アイテムの修正+1\n              1TFL3-2+1\n             あるいは以下のようにカッコ書きで内訳を詳細に記述することも可能。\n              1TFL(2+1)-(1+1)+1\n             修正ダイスのプラスとマイナスは逆でもよい。\n              1TFL(2+1)+1-(1+1)\n      TEXT\n\n      register_prefix('(\\d+)?(TFL)')\n\n      def eval_game_system_specific_command(command)\n        parser = Command::Parser.new(/\\d*TFL\\d+/, round_type: round_type)\n        parsed = parser.parse(command)\n        return nil unless parsed\n\n        difficulty, dice_pool = parsed.command.split(\"TFL\", 2).map(&:to_i)\n        dice_pool += parsed.modify_number\n        if dice_pool <= 0\n          dice_pool = 1\n        end\n\n        ability_dice_text, success_dice = make_dice_roll(dice_pool)\n\n        return make_dice_roll_text(difficulty, dice_pool, ability_dice_text, success_dice)\n      end\n\n      private\n\n      def make_dice_roll_text(difficulty, dice_pool, ability_dice_text, success_dice)\n        dice_count_text = \"(\#{dice_pool}D6) ＞ \#{ability_dice_text} 成功数:\#{success_dice}\"\n        push_dice = (dice_pool - success_dice)\n\n        if push_dice > 0\n          dice_count_text = \"\#{dice_count_text} 振り直し可能:\#{push_dice}\"\n          reroll_command = \"\\n振り直しコマンド: TFL\#{push_dice}\"\n        end\n\n        if difficulty > 0\n          if success_dice >= difficulty\n            return Result.success(\"\#{dice_count_text} 成功！\#{reroll_command}\")\n          else\n            return Result.failure(\"\#{dice_count_text} 失敗！\#{reroll_command}\")\n          end\n        end\n\n        return \"\#{dice_count_text}\#{reroll_command}\"\n      end\n\n      def make_dice_roll(dice_pool)\n        dice_list = @randomizer.roll_barabara(dice_pool, 6)\n        success_dice = dice_list.count(6)\n\n        return \"[\#{dice_list.join(',')}]\", success_dice\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:TalesFromTheLoop>", "self", "register_prefix", "eval_game_system_specific_command", "command", "parser", "Command::Parser", "Command", "new", "round_type", "parsed", "parse", "map", "split", "2", "to_proc", "difficulty", "dice_pool", "+", "modify_number", "<=", "0", "1", "make_dice_roll", "ability_dice_text", "success_dice", "make_dice_roll_text", "private", "dice_count_text", "push_dice", "-", ">", "reroll_command", ">=", "Result", "success", "failure", "dice_list", "@randomizer", "roll_barabara", "6", "count", "join", "Base"], :mappings=>"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"}}]}