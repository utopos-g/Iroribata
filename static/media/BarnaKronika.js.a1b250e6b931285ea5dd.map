{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/BarnaKronika.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class BarnaKronika < Base\n      # ゲームシステムの識別子\n      ID = 'BarnaKronika'\n\n      # ゲームシステム名\n      NAME = 'バルナ・クロニカ'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'はるなくろにか'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・通常判定　nBK\n        　ダイス数nで判定ロールを行います。\n        　セット数が1以上の時はセット数も表示します。\n        ・攻撃判定　nBA\n        　ダイス数nで判定ロールを行い、攻撃値と命中部位も表示します。\n        ・クリティカルコール　nBKCt　nBACt\n        　判定コマンドの後ろに「Ct」を付けるとクリティカルコールです。\n        　ダイス数n,コール数tで判定ロールを行います。\n        　ダイス数nで判定ロールを行います。\n        　セット数が1以上の時はセット数も表示し、攻撃判定の場合は命中部位も表示します。\n      INFO_MESSAGE_TEXT\n\n      register_prefix('\\d+BK', '\\d+BA', '\\d+BKC', '\\d+BAC', '\\d+R6')\n\n      def initialize(command)\n        super(command)\n\n        @sort_add_dice = true\n        @sort_barabara_dice = true\n      end\n\n      def replace_text(string)\n        string = string.gsub(/(\\d+)BKC(\\d)/) { \"\#{Regexp.last_match(1)}R6[0,\#{Regexp.last_match(2)}]\" }\n        string = string.gsub(/(\\d+)BAC(\\d)/) { \"\#{Regexp.last_match(1)}R6[1,\#{Regexp.last_match(2)}]\" }\n        string = string.gsub(/(\\d+)BK/) { \"\#{Regexp.last_match(1)}R6[0,0]\" }\n        string = string.gsub(/(\\d+)BA/) { \"\#{Regexp.last_match(1)}R6[1,0]\" }\n        return string\n      end\n\n      def eval_game_system_specific_command(string)\n        string = replace_text(string)\n\n        return nil unless /(^|\\s)S?((\\d+)[rR]6(\\[([,\\d]+)\\])?)(\\s|$)/i =~ string\n\n        string = Regexp.last_match(2)\n        option = Regexp.last_match(5)\n        dice_n = Regexp.last_match(3)\n        dice_n ||= 1\n\n        @isBattleMode = false # 0=判定モード, 1=戦闘モード\n        criticalCallDice = 0 # 0=通常, 1〜6=クリティカルコール\n\n        if option\n          battleModeText, criticalCallDice = option.split(\",\").map(&:to_i)\n          @isBattleMode = (battleModeText == 1)\n        end\n\n        debug(\"@isBattleMode\", @isBattleMode)\n\n        dice_str, suc, set, at_str = roll_barna_kronika(dice_n, criticalCallDice)\n\n        output = \"(\#{string}) ＞ [\#{dice_str}] ＞ \"\n\n        if @isBattleMode\n          output += at_str\n        else\n          debug(\"suc\", suc)\n          if suc > 1\n            output += \"成功数\#{suc}\"\n          else\n            output += \"失敗\"\n          end\n\n          debug(\"set\", set)\n          output += \",セット\#{set}\" if set > 0\n        end\n\n        return output\n      end\n\n      def roll_barna_kronika(dice_n, criticalCallDice)\n        dice_n = dice_n.to_i\n\n        output = ''\n        suc = 0\n        set = 0\n        at_str = ''\n        diceCountList = [0, 0, 0, 0, 0, 0]\n\n        dice_n.times do |_i|\n          index = @randomizer.roll_index(6)\n          diceCountList[index] += 1\n          if diceCountList[index] > suc\n            suc = diceCountList[index]\n          end\n        end\n\n        6.times do |i|\n          diceCount = diceCountList[i]\n\n          next if diceCount == 0\n\n          diceCount.times do |_j|\n            output += \"\#{i + 1},\"\n          end\n\n          if isCriticalCall(i, criticalCallDice)\n            debug(\"isCriticalCall\")\n            at_str += getAttackStringWhenCriticalCall(i, diceCount)\n          elsif isNomalAttack(criticalCallDice, diceCount)\n            debug(\"isNomalAttack\")\n            at_str += getAttackStringWhenNomal(i, diceCount)\n          end\n\n          set += 1 if diceCount > 1\n        end\n\n        if criticalCallDice != 0\n          c_cnt = diceCountList[criticalCallDice - 1]\n          suc = c_cnt * 2\n\n          if  c_cnt != 0\n            set = 1\n          else\n            set = 0\n          end\n        end\n\n        if @isBattleMode && (suc < 2)\n          at_str = \"失敗\"\n        end\n\n        output = output.sub(/,$/, '')\n        at_str = at_str.sub(/,$/, '')\n\n        return output, suc, set, at_str\n      end\n\n      def isCriticalCall(index, criticalCallDice)\n        return false unless @isBattleMode\n        return false if criticalCallDice == 0\n\n        return (criticalCallDice == (index + 1))\n      end\n\n      def isNomalAttack(criticalCallDice, diceCount)\n        return false unless @isBattleMode\n        return false if criticalCallDice != 0\n\n        return (diceCount > 1)\n      end\n\n      def getAttackStringWhenCriticalCall(index, diceCount)\n        hitLocation = getAttackHitLocation(index + 1)\n        attackValue = (diceCount * 2)\n        result = hitLocation + \":攻撃値\#{attackValue},\"\n        return result\n      end\n\n      def getAttackStringWhenNomal(index, diceCount)\n        hitLocation = getAttackHitLocation(index + 1)\n        attackValue = diceCount\n        result = hitLocation + \":攻撃値\#{attackValue},\"\n        return result\n      end\n\n      # 命中部位表\n      def getAttackHitLocation(num)\n        table = [\n          [1, '頭部'],\n          [2, '右腕'],\n          [3, '左腕'],\n          [4, '右脚'],\n          [5, '左脚'],\n          [6, '胴体'],\n        ]\n\n        return get_table_by_number(num, table)\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:BarnaKronika>", "self", "register_prefix", "initialize", "command", "@sort_add_dice", "@sort_barabara_dice", "replace_text", "string", "gsub", "block in replace_text", "block (2 levels) in replace_text", "Regexp", "last_match", "1", "2", "eval_game_system_specific_command", "=~", "option", "5", "dice_n", "3", "$ret_or_1", "@isBattleMode", "criticalCallDice", "0", "map", "split", "to_proc", "battleModeText", "==", "debug", "roll_barna_kronika", "dice_str", "suc", "set", "at_str", "output", "+", ">", "to_i", "diceCountList", "times", "block in roll_barna_kronika", "_i", "block (2 levels) in roll_barna_kronika", "index", "@randomizer", "roll_index", "6", "[]=", "[]", "i", "diceCount", "_j", "block (3 levels) in roll_barna_kronika", "isCriticalCall", "getAttackStringWhenCriticalCall", "isNomalAttack", "getAttackStringWhenNomal", "c_cnt", "-", "*", "<", "sub", "hitLocation", "getAttackHitLocation", "attackValue", "result", "num", "table", "4", "get_table_by_number", "Base"], :mappings=>"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"}}]}