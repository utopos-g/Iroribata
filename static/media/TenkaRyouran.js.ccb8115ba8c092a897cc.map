{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/arithmetic_evaluator.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module ArithmeticEvaluator\n    class << self\n      # 四則演算を評価する\n      # @deprecated +Arithmetic.#eval+ を利用してください。\n      # @param expr [String, nil] 評価する式\n      # @param round_type [Symbol] 端数処理の種類\n      # @return [Integer] 評価結果を返す。不正な式の場合には0を返す。\n      def eval(expr, round_type: RoundType::FLOOR)\n        return 0 unless expr\n\n        Arithmetic.eval(expr, round_type) || 0\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:ArithmeticEvaluator>", "eval", "expr", "$kwargs", "RoundType::FLOOR", "RoundType", "0", "$ret_or_1", "Arithmetic", "round_type", "self"], :mappings=>"AAAAA,8CAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAA;QAAA;;QAME,OAAAC,oBAAAA,iBAASC,IAAD,EAVdC,OAUMF,GAAAA,MAAAA,IAAAA,wCAAAA;AAAAA,UAAAA;;;UAVN;;UAUqB,0CAAA,qCAAYG,IAAAC,eAAAD;UACzB,KAAA,QAAgBF,IAAhB,CAAA;YAAA,OAAOI;UAAP;UAEA,IAAA,QAAAC,CAAAA,YAAAC,gBAAUP,MAAAA,CAAMC,IAAhB,EAAsBO,UAAZR,CAAVM,CAAA,CAAA;YAAAN,OAAA;UAAA;YAAqCA,OAAAK;UAArC,EAHFL;YAAAA;YAAAA;UAAAA;QAAAA,CAAAA,IAAAA;MANF,4BAASS,IAAT;IADFV,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>40, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/SRS.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire 'bcdice/arithmetic_evaluator'\n\nmodule BCDice\n  module GameSystem\n    class SRS < Base\n      # ゲームシステムの識別子\n      ID = 'SRS'\n\n      # ゲームシステム名\n      NAME = 'スタンダードRPGシステム'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'すたんたあとRPGしすてむ'\n\n      HELP_MESSAGE_1 = <<~HELP_MESSAGE\n        ・判定\n        　・通常判定：2D6+m@c#f>=t または 2D6+m>=t[c,f]\n        　　修正値m、目標値t、クリティカル値c、ファンブル値fで判定ロールを行います。\n        　　修正値、クリティカル値、ファンブル値は省略可能です（[]ごと省略可、@c・#fの指定は順不同）。\n        　　クリティカル値、ファンブル値の既定値は、それぞれ12、2です。\n        　　自動成功、自動失敗、成功、失敗を自動表示します。\n\n        　　例) 2d6>=10　　　　　修正値0、目標値10で判定\n        　　例) 2d6+2>=10　　　　修正値+2、目標値10で判定\n        　　例) 2d6+2>=10[11]　　↑をクリティカル値11で判定\n        　　例) 2d6+2@11>=10 　　↑をクリティカル値11で判定\n        　　例) 2d6+2>=10[12,4]　↑をクリティカル値12、ファンブル値4で判定\n        　　例) 2d6+2@12#4>=10 　↑をクリティカル値12、ファンブル値4で判定\n        　　例) 2d6+2>=10[,4]　　↑をクリティカル値12、ファンブル値4で判定（クリティカル値の省略）\n        　　例) 2d6+2#4>=10　　　↑をクリティカル値12、ファンブル値4で判定（クリティカル値の省略）\n      HELP_MESSAGE\n\n      HELP_MESSAGE_2 = <<~HELP_MESSAGE\n        　・クリティカルおよびファンブルのみの判定：2D6+m@c#f または 2D6+m[c,f]\n        　　目標値を指定せず、修正値m、クリティカル値c、ファンブル値fで判定ロールを行います。\n        　　修正値、クリティカル値、ファンブル値は省略可能です（[]は省略不可、@c・#fの指定は順不同）。\n        　　自動成功、自動失敗を自動表示します。\n\n        　　例) 2d6[]　　　　修正値0、クリティカル値12、ファンブル値2で判定\n        　　例) 2d6+2[11]　　修正値+2、クリティカル値11、ファンブル値2で判定\n        　　例) 2d6+2@11 　　修正値+2、クリティカル値11、ファンブル値2で判定\n        　　例) 2d6+2[12,4]　修正値+2、クリティカル値12、ファンブル値4で判定\n        　　例) 2d6+2@12#4 　修正値+2、クリティカル値12、ファンブル値4で判定\n      HELP_MESSAGE\n\n      HELP_MESSAGE_3 = <<~HELP_MESSAGE\n        ・D66ダイスあり（入れ替えなし)\n      HELP_MESSAGE\n\n      # 既定のダイスボット説明文\n      DEFAULT_HELP_MESSAGE = \"\#{HELP_MESSAGE_1}\\n\#{HELP_MESSAGE_2}\\n\#{HELP_MESSAGE_3}\"\n\n      HELP_MESSAGE = DEFAULT_HELP_MESSAGE\n\n      # 成功判定のエイリアスコマンド定義用のクラスメソッドを提供するモジュール\n      module ClassMethods\n        # 成功判定のエイリアスコマンドの一覧\n        # @return [Array<String>]\n        attr_reader :aliases\n\n        # ダイスボットの説明文を返す\n        # @return [String]\n        attr_reader :help_message\n\n        # 成功判定のエイリアスコマンドを設定する\n        # @param [String] aliases エイリアスコマンド（可変長引数）\n        # @return [self]\n        #\n        # エイリアスコマンドとして指定した文字列がコマンドの先頭にあれば、\n        # 実行時にそれが2D6に置換されるようになる。\n        def set_aliases_for_srs_roll(*aliases)\n          aliases_upcase = aliases.map(&:upcase)\n\n          @aliases = aliases_upcase.map { |a| Regexp.escape(a) }\n          @help_message = concatenate_help_messages(aliases_upcase)\n          return self\n        end\n\n        # 成功判定のエイリアスコマンドを未設定にする\n        # @return [self]\n        def clear_aliases_for_srs_roll\n          @aliases = []\n          @help_message = SRS::DEFAULT_HELP_MESSAGE\n          return self\n        end\n\n        private\n\n        # ダイスボットの説明文を結合する\n        # @param [Array<String>] aliases エイリアスコマンドの配列\n        # @return [String] 結合された説明文\n        # @todo 現在は2文字のエイリアスコマンドに幅を合わせてある。\n        #   エイリアスコマンドの文字数が変わる場合があれば、位置を調整するコードが\n        #   必要。\n        def concatenate_help_messages(aliases)\n          help_msg_for_aliases_for_target_value =\n            aliases\n            .map do |a|\n              \"　　例) \#{a}+2>=10　　　　 2d6+2>=10と同じ（\#{a}が2D6のショートカットコマンド）\\n\"\n            end\n            .join()\n          help_msg_for_aliases_for_without_target_value =\n            aliases\n            .map do |a|\n              \"　　例) \#{a}　　　　　 2d6[]と同じ（\#{a}が2D6のショートカットコマンド）\\n\" \\\n              \"　　例) \#{a}+2@12#4　　2d6+2@12#4と同じ（\#{a}が2D6のショートカットコマンド）\\n\"\n            end\n            .join()\n\n          return \"\#{SRS::HELP_MESSAGE_1}\" \\\n                 \"\#{help_msg_for_aliases_for_target_value}\\n\" \\\n                 \"\#{SRS::HELP_MESSAGE_2}\" \\\n                 \"\#{help_msg_for_aliases_for_without_target_value}\\n\" \\\n                 \"\#{SRS::HELP_MESSAGE_3}\"\n        end\n      end\n\n      class << self\n        # クラスが継承されたときに行う処理\n        # @return [void]\n        def inherited(subclass)\n          subclass\n            .extend(ClassMethods)\n            .clear_aliases_for_srs_roll\n        end\n\n        # ダイスボットの説明文を返す\n        # @return [String] 既定のダイスボット説明文\n        def help_message\n          DEFAULT_HELP_MESSAGE\n        end\n\n        # 成功判定のエイリアスコマンドの一覧\n        # @return [Array<String>]\n        def aliases\n          []\n        end\n      end\n\n      # 固有のコマンドの接頭辞を設定する\n      register_prefix('2D6')\n\n      # ダイスボットを初期化する\n      def initialize(command)\n        super(command)\n\n        # 式、出目ともに送信する\n\n        # バラバラロール（Bコマンド）でソートする\n        @sort_add_dice = true\n        # D66ダイスあり（出目をソートしない）\n        @d66_sort_type = D66SortType::NO_SORT\n      end\n\n      # ダイスボットの説明文を返す\n      # @return [String]\n      def help_message\n        self.class.help_message\n      end\n\n      # 成功判定のエイリアスコマンドの一覧\n      # @return [Array<String>]\n      def aliases\n        self.class.aliases\n      end\n\n      # 既定のクリティカル値\n      DEFAULT_CRITICAL_VALUE = 12\n      # 既定のファンブル値\n      DEFAULT_FUMBLE_VALUE = 2\n\n      # 成功判定コマンドのノード\n      SRSRollNode = Struct.new(\n        :modifier, :critical_value, :fumble_value, :target_value\n      ) do\n        # 成功判定の文字列表記を返す\n        # @return [String]\n        def to_s\n          lhs = \"2D6\#{Format.modifier(modifier)}\"\n          expression = target_value ? \"\#{lhs}>=\#{target_value}\" : lhs\n\n          return \"\#{expression}[\#{critical_value},\#{fumble_value}]\"\n        end\n      end\n\n      # 固有のダイスロールコマンドを実行する\n      # @param [String] command 入力されたコマンド\n      # @return [Result, nil] ダイスロールコマンドの実行結果\n      def eval_game_system_specific_command(command)\n        legacy_c_f_match = /(.+)\\[(.*)\\]\\z/.match(command)\n        node =\n          if legacy_c_f_match\n            parse_legacy(legacy_c_f_match[1], legacy_c_f_match[2])\n          else\n            parse(command)\n          end\n\n        if node\n          return execute_srs_roll(node)\n        end\n\n        return nil\n      end\n\n      private\n\n      def parse(command)\n        prefix_re = Regexp.new([\"2D6\"].concat(aliases()).join('|'), Regexp::IGNORECASE)\n        parser = Command::Parser.new(prefix_re, round_type: @round_type)\n                                .enable_critical\n                                .enable_fumble\n                                .restrict_cmp_op_to(nil, :>=)\n        cmd = parser.parse(command)\n        unless cmd\n          return nil\n        end\n\n        if command.start_with?(/2D6/i) && cmd.critical.nil? && cmd.fumble.nil? && cmd.target_number.nil?\n          # fallback to default dice\n          return nil\n        end\n\n        cmd.critical ||= DEFAULT_CRITICAL_VALUE\n        cmd.fumble ||= DEFAULT_FUMBLE_VALUE\n\n        return SRSRollNode.new(cmd.modify_number, cmd.critical, cmd.fumble, cmd.target_number)\n      end\n\n      def parse_legacy(command, c_f)\n        m = /^(-?\\d+)?(?:,(-?\\d+))?$/.match(c_f)\n        unless m\n          return nil\n        end\n\n        critical = m[1]&.to_i || DEFAULT_CRITICAL_VALUE\n        fumble = m[2]&.to_i || DEFAULT_FUMBLE_VALUE\n\n        prefix_re = Regexp.new([\"2D6\"].concat(aliases()).join('|'), Regexp::IGNORECASE)\n        parser = Command::Parser.new(prefix_re, round_type: @round_type)\n                                .restrict_cmp_op_to(nil, :>=)\n        cmd = parser.parse(command)\n        unless cmd\n          return nil\n        end\n\n        return SRSRollNode.new(cmd.modify_number, critical, fumble, cmd.target_number)\n      end\n\n      # 成功判定を実行する\n      # @param [SRSRollNode] srs_roll 成功判定ノード\n      # @return [Result] 成功判定結果\n      def execute_srs_roll(srs_roll)\n        dice_list = @randomizer.roll_barabara(2, 6)\n        dice_list.sort! if @sort_add_dice\n\n        sum = dice_list.sum()\n        dice_str = dice_list.join(\",\")\n\n        modified_sum = sum + srs_roll.modifier\n\n        result = compare_result(srs_roll, sum, modified_sum)\n\n        parts = [\n          \"(\#{srs_roll})\",\n          \"\#{sum}[\#{dice_str}]\#{Format.modifier(srs_roll.modifier)}\",\n          modified_sum,\n          result.text\n        ]\n\n        result.text = parts.compact.join(' ＞ ')\n        result\n      end\n\n      # ダイスロール結果を目標値、クリティカル値、ファンブル値と比較する\n      # @param [SRSRollNode] srs_roll 成功判定ノード\n      # @param [Integer] sum 出目の合計\n      # @param [Integer] modified_sum 修正後の値\n      # @return [Result] 比較結果\n      def compare_result(srs_roll, sum, modified_sum)\n        if sum >= srs_roll.critical_value\n          Result.critical(\"自動成功\")\n        elsif sum <= srs_roll.fumble_value\n          Result.fumble(\"自動失敗\")\n        elsif srs_roll.target_value.nil?\n          Result.new\n        elsif modified_sum >= srs_roll.target_value\n          Result.success(\"成功\")\n        else\n          Result.failure(\"失敗\")\n        end\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:SRS>", "HELP_MESSAGE_1", "HELP_MESSAGE_2", "HELP_MESSAGE_3", "DEFAULT_HELP_MESSAGE", "<module:ClassMethods>", "attr_reader", "set_aliases_for_srs_roll", "aliases_upcase", "map", "aliases", "to_proc", "@aliases", "block in set_aliases_for_srs_roll", "a", "block (2 levels) in set_aliases_for_srs_roll", "Regexp", "escape", "@help_message", "concatenate_help_messages", "clear_aliases_for_srs_roll", "SRS::DEFAULT_HELP_MESSAGE", "SRS", "private", "help_msg_for_aliases_for_target_value", "block in concatenate_help_messages", "block (2 levels) in concatenate_help_messages", "join", "help_msg_for_aliases_for_without_target_value", "SRS::HELP_MESSAGE_1", "SRS::HELP_MESSAGE_2", "SRS::HELP_MESSAGE_3", "inherited", "subclass", "extend", "ClassMethods", "help_message", "register_prefix", "initialize", "command", "@sort_add_dice", "@d66_sort_type", "D66SortType::NO_SORT", "D66SortType", "class", "12", "2", "new", "Struct", "block in <class:SRS>", "block (2 levels) in <class:SRS>", "to_s", "lhs", "Format", "modifier", "expression", "target_value", "critical_value", "fumble_value", "eval_game_system_specific_command", "legacy_c_f_match", "match", "node", "parse_legacy", "[]", "1", "parse", "execute_srs_roll", "prefix_re", "concat", "Regexp::IGNORECASE", "parser", "Command::Parser", "Command", "@round_type", "enable_critical", "enable_fumble", "restrict_cmp_op_to", "cmd", "start_with?", "critical", "nil?", "fumble", "target_number", "$ret_or_1", "critical=", "DEFAULT_CRITICAL_VALUE", "fumble=", "DEFAULT_FUMBLE_VALUE", "SRSRollNode", "modify_number", "c_f", "m", "srs_roll", "dice_list", "@randomizer", "roll_barabara", "6", "sort!", "sum", "dice_str", "modified_sum", "+", "result", "compare_result", "parts", "text", "text=", "compact", ">=", "Result", "<=", "success", "failure", "Base"], :mappings=>"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"}}, {:offset=>{:line=>266, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/TenkaRyouran.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire 'bcdice/game_system/SRS'\n\nmodule BCDice\n  module GameSystem\n    class TenkaRyouran < SRS\n      # ゲームシステムの識別子\n      ID = 'TenkaRyouran'\n\n      # ゲームシステム名\n      NAME = '天下繚乱'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'てんかりようらん'\n\n      # 固有のコマンドの接頭辞を設定する\n      register_prefix('2D6', 'TR')\n\n      # 成功判定のエイリアスコマンドを設定する\n      set_aliases_for_srs_roll('TR')\n\n      HELP_MESSAGE = help_message()\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:TenkaRyouran>", "register_prefix", "set_aliases_for_srs_roll", "help_message", "SRS"], :mappings=>"AAAAA,2BAAAA;EAAAA;;;EAEAC,IAAAC,SAAAA,CAAQF,wBAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;;QAEE,8BAAKA,cAAL;QAGA,gCAAOA,MAAP;QAGA,oCAAWA,UAAX;QAGAJ,IAAAK,iBAAAA,CAAgBD,KAAhB,EAAuBA,IAAvBC;QAGAL,IAAAM,0BAAAA,CAAyBF,IAAzBE;QAEAF,OAAA,wCAAeJ,IAAAO,cAAAA,CAAAA,CAAf;MAhBFH,GAAAA,WAAAA,EAAqBI,SAArBJ;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAJAH;"}}]}