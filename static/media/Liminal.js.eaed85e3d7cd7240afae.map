{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Liminal.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Liminal < Base\n      # ゲームシステムの識別子\n      ID = 'Liminal'\n\n      # ゲームシステム名\n      NAME = 'リミナル'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'りみなる'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGETEXT\n        ■技能判定　LMx+b>=t+m   x:技能レベル b:ボーナス t:難易度 m:敵の技能レベル(対抗判定)\n\n        例)LM2>=8:  技能レベル2,難易度8で技能判定し、その結果を表示。(クリティカル成功も表示)\n           LM3+2>=9:技能レベル3,ボーナス+2,難易度9で技能判定し、その結果を表示。( 〃 )\n           LM0>=8:  技能なし,難易度8で技能判定する。(難易度+2は自動的に足されます)\n\n        ■イニシアティヴ判定　LIx+b>=t+m   x:認識力レベル b:ボーナス t:難易度 m:敵の認識力レベル\n        例)LI2>=8+2:  認識力レベル2,難易度8,敵認識力レベル2で技能判定し、その結果を表示。\n           LI0>=8+2:  認識力なし,難易度8,敵認識力レベル2で技能判定する。(難易度加算なし)\n      INFO_MESSAGETEXT\n\n      register_prefix(\"LI\", \"LM\")\n\n      def eval_game_system_specific_command(command)\n        resolute_action(command) || resolute_initiative(command)\n      end\n\n      private\n\n      # 技能判定\n      # @param [String] command\n      # @return [Result]\n      def resolute_action(command)\n        parser = Command::Parser.new(\"LM\", round_type: @round_type)\n                                .has_suffix_number\n                                .restrict_cmp_op_to(:>=)\n        parsed = parser.parse(command)\n        return nil unless parsed\n\n        skill_level = parsed.suffix_number\n        bonus = parsed.modify_number\n        difficulty = parsed.target_number\n\n        dice = @randomizer.roll_barabara(2, 6)\n        dice_total = dice.sum\n        total = dice_total + skill_level + bonus\n        difficulty += 2 if skill_level == 0\n\n        return Result.new.tap do |result|\n          result.condition = (total >= difficulty)\n          result.critical = (total >= difficulty + 5)\n          if dice_total == 2\n            result.fumble = true\n            result.critical = false\n            result.condition = false\n          end\n\n          sequence = [\n            \"(LM\#{skill_level}\#{with_symbol(bonus)}>=\#{difficulty})\",\n            \"\#{dice_total}[\#{dice.join(',')}]\#{with_symbol(skill_level + bonus)}\",\n            total.to_s,\n            if result.fumble?\n              \"1ゾロ\"\n            elsif result.critical?\n              \"クリティカル\"\n            else\n              result.success? ? \"成功\" : \"失敗\"\n            end\n          ].compact\n\n          result.text = sequence.join(\" ＞ \")\n        end\n      end\n\n      def with_symbol(number)\n        if number == 0\n          return \"+0\"\n        elsif number > 0\n          return \"+\#{number}\"\n        else\n          return number.to_s\n        end\n      end\n\n      # イニシアティヴ判定\n      # @param [String] command\n      # @return [Result]\n      def resolute_initiative(command)\n        parser = Command::Parser.new(\"LI\", round_type: @round_type)\n                                .has_suffix_number\n                                .restrict_cmp_op_to(:>=)\n        parsed = parser.parse(command)\n        return nil unless parsed\n\n        skill_level = parsed.suffix_number\n        bonus = parsed.modify_number\n        difficulty = parsed.target_number\n\n        dice = @randomizer.roll_barabara(2, 6)\n        dice_total = dice.sum\n        total = dice_total + skill_level + bonus\n\n        return Result.new.tap do |result|\n          result.condition = (total >= difficulty)\n          result.critical = (total >= difficulty + 5)\n          if dice_total == 2\n            result.fumble = true\n            result.critical = false\n            result.condition = false\n          end\n\n          sequence = [\n            \"(LI\#{skill_level}\#{with_symbol(bonus)}>=\#{difficulty})\",\n            \"\#{dice_total}[\#{dice.join(',')}]\#{with_symbol(skill_level + bonus)}\",\n            total.to_s,\n            if result.fumble?\n              \"1ゾロ\"\n            elsif result.critical?\n              \"クリティカル\"\n            else\n              result.success? ? \"成功\" : \"失敗\"\n            end\n          ].compact\n\n          result.text = sequence.join(\" ＞ \")\n        end\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Liminal>", "self", "register_prefix", "eval_game_system_specific_command", "command", "$ret_or_1", "resolute_action", "resolute_initiative", "private", "parser", "Command::Parser", "Command", "new", "@round_type", "has_suffix_number", "restrict_cmp_op_to", "parsed", "parse", "skill_level", "suffix_number", "bonus", "modify_number", "difficulty", "target_number", "dice", "@randomizer", "roll_barabara", "2", "6", "dice_total", "sum", "total", "+", "0", "tap", "Result", "block in resolute_action", "result", "block (2 levels) in resolute_action", "condition=", ">=", "critical=", "5", "fumble=", "sequence", "with_symbol", "join", "to_s", "fumble?", "critical?", "success?", "compact", "text=", "number", ">", "block in resolute_initiative", "block (2 levels) in resolute_initiative", "Base"], :mappings=>"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"}}]}