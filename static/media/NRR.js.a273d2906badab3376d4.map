{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/NRR.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class NRR < Base\n      # ゲームシステムの識別子\n      ID = 'NRR'\n\n      # ゲームシステム名\n      NAME = 'nRR'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'えぬああるあある'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGETEXT\n        ▪️判定\n        ・ノーマルダイス　NR8\n        ・有利ダイス　NR10\n        ・不利ダイス　NR6\n        ・Exダイス　NR12\n\n        ダイスの個数を指定しての判定ができます。\n        例：有利ダイス2個で判定　2NR10\n\n        ▪️判定結果とシンボル\n        ⭕：成功\n        ❌：失敗\n        ✨：クリティカル（大成功）\n        💀：ファンブル（大失敗）\n        🌈：ミラクル（奇跡）\n      INFO_MESSAGETEXT\n\n      register_prefix('\\d*NR(6|8|10|12)')\n\n      def initialize(command)\n        super(command)\n\n        @sort_barabara_dice = true # バラバラロール（Bコマンド）でソート有\n      end\n\n      def eval_game_system_specific_command(command)\n        roll_nr(command)\n      end\n\n      private\n\n      def roll_nr(command)\n        m = /^(\\d+)?NR(6|8|10|12)$/.match(command)\n        return nil unless m\n\n        times = m[1]&.to_i || 1\n        table = case m[2]\n                when \"6\"\n                  DISADVANTAGE\n                when \"8\"\n                  NORMAL\n                when \"10\"\n                  ADVANTAGE\n                else\n                  EXTRA\n                end\n\n        values = @randomizer.roll_barabara(times, table.size)\n        result = Result.new\n        text =\n          if times == 1\n            level = table[values[0] - 1]\n            result.condition = SUCCESSES.include?(level)\n            result.fumble = level == :fumble\n            result.critical = CRITICALS.include?(level)\n\n            \"\#{ICON[level]} \#{RESULT_LABEL[level]}\"\n          else\n            levels = values.map { |v| table[v - 1] }\n            values_count = levels\n                           .group_by(&:itself)\n                           .transform_values(&:length)\n\n            values_count_strs = LEVELS.map do |l|\n              count = values_count.fetch(l, 0)\n              next nil if count == 0\n\n              \"\#{ICON[l]} \#{count}\"\n            end\n\n            values_count_strs.compact.join(\", \")\n          end\n\n        times_str = times == 1 ? nil : times\n        result.text = \"(\#{times_str}NR\#{m[2]}) ＞ \#{values.join(',')} ＞ \#{text}\"\n\n        result\n      end\n\n      LEVELS = [:fumble, :failure, :success, :critical, :miracle].freeze\n      SUCCESSES = [:success, :critical, :miracle].freeze\n      CRITICALS = [:critical, :miracle].freeze\n\n      DISADVANTAGE = [:fumble, :failure, :failure, :failure, :success, :success].freeze\n      NORMAL = [:fumble, :failure, :failure, :failure, :success, :success, :success, :critical].freeze\n      ADVANTAGE = [:fumble, :failure, :failure, :success, :success, :success, :success, :success, :critical, :critical].freeze\n      EXTRA = [:fumble, :fumble, :failure, :failure, :success, :success, :critical, :critical, :critical, :critical, :miracle, :miracle].freeze\n\n      ICON = {\n        fumble: \"💀\",\n        failure: \"❌\",\n        success: \"⭕️\",\n        critical: \"✨\",\n        miracle: \"🌈\",\n      }.freeze\n\n      RESULT_LABEL = {\n        fumble: \"ファンブル（大失敗）\",\n        failure: \"失敗\",\n        success: \"成功\",\n        critical: \"クリティカル（大成功）\",\n        miracle: \"ミラクル（奇跡）\",\n      }.freeze\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:NRR>", "self", "register_prefix", "initialize", "command", "@sort_barabara_dice", "eval_game_system_specific_command", "roll_nr", "private", "m", "match", "times", "$ret_or_1", "[]", "1", "table", "2", "DISADVANTAGE", "NORMAL", "ADVANTAGE", "EXTRA", "values", "@randomizer", "roll_barabara", "size", "result", "Result", "new", "text", "level", "-", "0", "condition=", "SUCCESSES", "include?", "fumble=", "==", "critical=", "CRITICALS", "ICON", "RESULT_LABEL", "levels", "map", "block in roll_nr", "v", "block (2 levels) in roll_nr", "values_count", "transform_values", "group_by", "to_proc", "values_count_strs", "LEVELS", "l", "count", "fetch", "compact", "join", "times_str", "text=", "freeze", "Base"], :mappings=>"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"}}]}