{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/arithmetic_evaluator.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module ArithmeticEvaluator\n    class << self\n      # 四則演算を評価する\n      # @deprecated +Arithmetic.#eval+ を利用してください。\n      # @param expr [String, nil] 評価する式\n      # @param round_type [Symbol] 端数処理の種類\n      # @return [Integer] 評価結果を返す。不正な式の場合には0を返す。\n      def eval(expr, round_type: RoundType::FLOOR)\n        return 0 unless expr\n\n        Arithmetic.eval(expr, round_type) || 0\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:ArithmeticEvaluator>", "eval", "expr", "$kwargs", "RoundType::FLOOR", "RoundType", "0", "$ret_or_1", "Arithmetic", "round_type", "self"], :mappings=>"AAAAA,8CAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAA;QAAA;;QAME,OAAAC,oBAAAA,iBAASC,IAAD,EAVdC,OAUMF,GAAAA,MAAAA,IAAAA,wCAAAA;AAAAA,UAAAA;;;UAVN;;UAUqB,0CAAA,qCAAYG,IAAAC,eAAAD;UACzB,KAAA,QAAgBF,IAAhB,CAAA;YAAA,OAAOI;UAAP;UAEA,IAAA,QAAAC,CAAAA,YAAAC,gBAAUP,MAAAA,CAAMC,IAAhB,EAAsBO,UAAZR,CAAVM,CAAA,CAAA;YAAAN,OAAA;UAAA;YAAqCA,OAAAK;UAArC,EAHFL;YAAAA;YAAAA;UAAAA;QAAAA,CAAAA,IAAAA;MANF,4BAASS,IAAT;IADFV,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>40, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/format.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module Format\n    module_function\n\n    # 比較演算子を文字列表記にする\n    #\n    # @param op [Symbol]\n    # @return [String, nil]\n    def comparison_operator(op)\n      case op\n      when :==\n        \"=\"\n      when :'!='\n        \"<>\"\n      when Symbol\n        op.to_s\n      end\n    end\n\n    # 修正値を文字列表記にする\n    #\n    # @param number [Integer, nil]\n    # @return [String]\n    def modifier(number)\n      if number.nil?\n        nil\n      elsif number == 0\n        \"\"\n      elsif number > 0\n        \"+\#{number}\"\n      else\n        number.to_s\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:Format>", "self", "module_function", "comparison_operator", "op", "$ret_or_1", "Symbol", "to_s", "modifier", "number", "nil?", "0", ">"], :mappings=>"AAAAA,gCAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;;MACEC,IAAAC,iBAAAA,CAAAA;;AAMAC,MAAAA,mCAAAA,+BAAwBC,EAAxBD;AAAAA,QAAAA;;QAEE,IAAA,QAAK,IAAL,EADAE,CAAAA,YAAKD,EAALC,CACA,CAAA;UACEF,OAAAA;QADF,OAEA,IAAA,QAAK,IAAL,EAdN,SAcM,CAAA;UACEA,OAAAA;QADF,OAEA,IAAA,QAAKG,YAAL,EAhBN,SAgBM,CAAA;UACEH,OAAAC,EAAEG,MAAAA,CAAAA;QADJ;UALAJ,OAAA;QAKA;MANFA,CAAAA;MAeAH,OAAAQ,wBAAAA,oBAAaC,MAAbD;AAAAA;QACE,IAAA,QAAGC,MAAMC,SAAAA,CAAAA,CAAT,CAAA;UACEF,OAAA;QADF,OAEA,IAAA,MAAMC,MAAN,EAAgBE,CAAhB,CAAA;UACEH,OAAAA;QADF,OAEA,IAAA,QAAaI,OAAPH,MAAOG,EAAED,CAAFC,CAAb,CAAA;UACEJ,OAACA,GAAD,GAAA,CAAIC,MAAJ;QADF;UAGED,OAAAC,MAAMF,MAAAA,CAAAA;QAHR;MALFC,CAAAA;IAtBFR,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>85, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/normalize.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module Normalize\n    module_function\n\n    # 比較演算子をシンボルに正規化する\n    #\n    # @param op [String]\n    # @return [Symbol, nil]\n    def comparison_operator(op)\n      case op\n      when /<=|=</\n        :<=\n      when />=|=>/\n        :>=\n      when /<>|!=|=!/\n        :'!='\n      when /</\n        :<\n      when />/\n        :>\n      when /=/\n        :==\n      end\n    end\n\n    # 目標値を正規化する\n    #\n    # @param val [String]\n    # @return [Integer, String] 整数か'?'\n    def target_number(val)\n      if val == \"?\"\n        val\n      else\n        val.to_i\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:Normalize>", "self", "module_function", "comparison_operator", "op", "$ret_or_1", "target_number", "val", "to_i"], :mappings=>"AAAAA,mCAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;;;MACEC,IAAAC,iBAAAA,CAAAA;;AAMAC,MAAAA,mCAAAA,+BAAwBC,EAAxBD;AAAAA,QAAAA;;QAEE,IAAA,QAAK,OAAL,EADAE,CAAAA,YAAKD,EAALC,CACA,CAAA;UACEF,OAAA;QADF,OAEA,IAAA,QAAK,OAAL,EAdN,SAcM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,UAAL,EAhBN,SAgBM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,GAAL,EAlBN,SAkBM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,GAAL,EApBN,SAoBM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,GAAL,EAtBN,SAsBM,CAAA;UACEA,OAAA;QADF;UAXAA,OAAA;QAWA;MAZFA,CAAAA;MAqBAH,OAAAM,6BAAAA,yBAAkBC,GAAlBD;AAAAA;QACE,IAAA,MAAGC,GAAH,EAAUD,GAAV,CAAA;UACEA,OAAAC;QADF;UAGED,OAAAC,GAAGC,MAAAA,CAAAA;QAHL;MADFF,CAAAA;IA5BFN,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>131, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Amadeus.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/arithmetic_evaluator\"\nrequire \"bcdice/format\"\nrequire \"bcdice/normalize\"\n\nmodule BCDice\n  module GameSystem\n    class Amadeus < Base\n      # ゲームシステムの識別子\n      ID = 'Amadeus'\n\n      # ゲームシステム名\n      NAME = 'アマデウス'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'あまてうす'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・判定(Rx±y@z>=t)\n        　能力値のダイスごとに成功・失敗の判定を行います。\n        　x：能力ランク(S,A～D)　y：修正値（省略可）\n        　z：スペシャル最低値（省略：6）　t：目標値（省略：4）\n        　　例） RA　RB-1　RC>=5　RD+2　RS-1@5>=6\n        　出力書式は\n        　　(達成値)_(判定結果)[(出目)(対応するインガ)]\n        　C,Dランクでは対応するインガは出力されません。\n        　　出力例)　2_ファンブル！[1黒] / 3_失敗[3青]\n        ・各種表\n        　境遇表 ECT／関係表 RT／親心表 PRT／戦場表 BST／休憩表 BT／\n        　ファンブル表 FT／致命傷表 FWT／戦果表 BRT／ランダムアイテム表 RIT／\n        　損傷表 WT／悪夢表 NMT／目標表 TGT／制約表 CST／\n        　ランダムギフト表 RGT／決戦戦果表 FBT／\n        　店内雰囲気表 SAT／特殊メニュー表 SMT\n        ・試練表（～VT）\n        　ギリシャ神群 GCVT／ヤマト神群 YCVT／エジプト神群 ECVT／\n        　クトゥルフ神群 CCVT／北欧神群 NCVT／中華神群 CHVT／\n          ラストクロニクル神群 LCVT／ケルト神群 KCVT／ダンジョン DGVT／日常 DAVT\n        ・挑戦テーマ表（～CT）\n        　武勇 PRCT／技術 TCCT／頭脳 INCT／霊力 PSCT／愛 LVCT／日常 DACT\n      INFO_MESSAGE_TEXT\n\n      def initialize(command)\n        super(command)\n\n        @sort_add_dice = true\n        @enabled_d66 = true\n        @d66_sort_type = D66SortType::ASC\n      end\n\n      def eval_game_system_specific_command(command)\n        roll_amadeus(command) ||\n          roll_tables(command, self.class::TABLES)\n      end\n\n      private\n\n      def roll_amadeus(command)\n        m = /^R([A-DS])([+\\-\\d]*)(@(\\d))?((>=?)([+\\-\\d]*))?(@(\\d))?$/i.match(command)\n        unless m\n          return nil\n        end\n\n        rank = m[1]\n        modifier = ArithmeticEvaluator.eval(m[2])\n        cmp_op = m[6] ? Normalize.comparison_operator(m[6]) : :>=\n        target = m[7] ? ArithmeticEvaluator.eval(m[7]) : 4\n        special = (m[4] || m[9] || 6).to_i\n\n        dice_count = CHECK_DICE_COUNT[rank]\n\n        dice_list = @randomizer.roll_barabara(dice_count, 6)\n        dice_text = dice_list.join(\",\")\n        special_text = (special == 6 ? \"\" : \"@\#{special}\")\n\n        dice_list = [dice_list.min] if rank == \"D\"\n        available_inga = dice_list.size > 1\n        inga_table = translate(\"Amadeus.inga_table\")\n\n        success = false\n        critical = false\n        fumble = false\n\n        results =\n          dice_list.map do |dice|\n            total = dice + modifier\n            result =\n              if dice == 1\n                fumble = true\n                translate(\"Amadeus.fumble\")\n              elsif dice >= special\n                critical = true\n                success = true\n                translate(\"Amadeus.special\")\n              elsif total.send(cmp_op, target)\n                success = true\n                translate(\"success\")\n              else\n                translate(\"failure\")\n              end\n\n            if available_inga\n              inga = inga_table[(dice - 1)]\n              \"\#{total}_\#{result}[\#{dice}\#{inga}]\"\n            else\n              \"\#{total}_\#{result}[\#{dice}]\"\n            end\n          end\n\n        sequence = [\n          \"(R\#{rank}\#{Format.modifier(modifier)}\#{special_text}\#{cmp_op}\#{target})\",\n          \"[\#{dice_text}]\#{Format.modifier(modifier)}\",\n          results.join(\" / \")\n        ]\n\n        Result.new.tap do |r|\n          r.text = sequence.join(\" ＞ \")\n          if success\n            r.success = true\n            r.critical = critical\n          else\n            r.failure = true\n            r.fumble = fumble\n          end\n        end\n      end\n\n      CHECK_DICE_COUNT = {\"S\" => 4, \"A\" => 3, \"B\" => 2, \"C\" => 1, \"D\" => 2}.freeze\n\n      class << self\n        private\n\n        def translate_tables(locale)\n          {\n            \"ECT\" => DiceTable::Table.from_i18n(\"Amadeus.table.ECT\", locale),\n            \"BST\" => DiceTable::Table.from_i18n(\"Amadeus.table.BST\", locale),\n            \"RT\" => DiceTable::Table.from_i18n(\"Amadeus.table.RT\", locale),\n            \"PRT\" => DiceTable::Table.from_i18n(\"Amadeus.table.PRT\", locale),\n            \"FT\" => DiceTable::Table.from_i18n(\"Amadeus.table.FT\", locale),\n            \"BT\" => DiceTable::D66Table.from_i18n(\"Amadeus.table.BT\", locale),\n            \"FWT\" => DiceTable::Table.from_i18n(\"Amadeus.table.FWT\", locale),\n            \"BRT\" => DiceTable::Table.from_i18n(\"Amadeus.table.BRT\", locale),\n            \"RIT\" => DiceTable::Table.from_i18n(\"Amadeus.table.RIT\", locale),\n            \"WT\" => DiceTable::Table.from_i18n(\"Amadeus.table.WT\", locale),\n            \"NMT\" => DiceTable::Table.from_i18n(\"Amadeus.table.NMT\", locale),\n            \"TGT\" => DiceTable::Table.from_i18n(\"Amadeus.table.TGT\", locale),\n            \"CST\" => DiceTable::Table.from_i18n(\"Amadeus.table.CST\", locale),\n            \"GCVT\" => DiceTable::Table.from_i18n(\"Amadeus.table.GCVT\", locale),\n            \"YCVT\" => DiceTable::Table.from_i18n(\"Amadeus.table.YCVT\", locale),\n            \"ECVT\" => DiceTable::Table.from_i18n(\"Amadeus.table.ECVT\", locale),\n            \"CCVT\" => DiceTable::Table.from_i18n(\"Amadeus.table.CCVT\", locale),\n            \"NCVT\" => DiceTable::Table.from_i18n(\"Amadeus.table.NCVT\", locale),\n            \"DGVT\" => DiceTable::Table.from_i18n(\"Amadeus.table.DGVT\", locale),\n            \"DAVT\" => DiceTable::Table.from_i18n(\"Amadeus.table.DAVT\", locale),\n            \"PRCT\" => DiceTable::Table.from_i18n(\"Amadeus.table.PRCT\", locale),\n            \"TCCT\" => DiceTable::Table.from_i18n(\"Amadeus.table.TCCT\", locale),\n            \"INCT\" => DiceTable::Table.from_i18n(\"Amadeus.table.INCT\", locale),\n            \"PSCT\" => DiceTable::Table.from_i18n(\"Amadeus.table.PSCT\", locale),\n            \"LVCT\" => DiceTable::Table.from_i18n(\"Amadeus.table.LVCT\", locale),\n            \"DACT\" => DiceTable::Table.from_i18n(\"Amadeus.table.DACT\", locale),\n            \"RGT\" => DiceTable::Table.from_i18n(\"Amadeus.table.RGT\", locale),\n            \"FBT\" => DiceTable::Table.from_i18n(\"Amadeus.table.FBT\", locale),\n            \"CHVT\" => DiceTable::Table.from_i18n(\"Amadeus.table.CHVT\", locale),\n            \"LCVT\" => DiceTable::Table.from_i18n(\"Amadeus.table.LCVT\", locale),\n            \"KCVT\" => DiceTable::Table.from_i18n(\"Amadeus.table.KCVT\", locale),\n            \"SAT\" => DiceTable::D66Table.from_i18n(\"Amadeus.table.SAT\", locale),\n            \"SMT\" => DiceTable::D66Table.from_i18n(\"Amadeus.table.SMT\", locale),\n          }\n        end\n      end\n\n      TABLES = translate_tables(:ja_jp)\n\n      register_prefix('R[A-DS]', TABLES.keys)\n    end\n  end\nend\n"], :names=>["<top (required)>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:Amadeus>", "initialize", "command", "@sort_add_dice", "@enabled_d66", "@d66_sort_type", "D66SortType::ASC", "D66SortType", "eval_game_system_specific_command", "$ret_or_1", "roll_amadeus", "roll_tables", "class::TABLES", "class", "private", "m", "match", "rank", "[]", "1", "modifier", "ArithmeticEvaluator", "eval", "2", "cmp_op", "6", "Normalize", "comparison_operator", "target", "7", "4", "special", "$ret_or_2", "9", "to_i", "dice_count", "CHECK_DICE_COUNT", "dice_list", "@randomizer", "roll_barabara", "dice_text", "join", "special_text", "min", "available_inga", ">", "size", "inga_table", "translate", "success", "critical", "fumble", "results", "map", "block in roll_amadeus", "dice", "block (2 levels) in roll_amadeus", "total", "+", "result", ">=", "send", "inga", "-", "sequence", "Format", "tap", "Result", "new", "r", "text=", "success=", "critical=", "failure=", "fumble=", "3", "freeze", "translate_tables", "locale", "DiceTable::Table", "DiceTable", "from_i18n", "DiceTable::D66Table", "register_prefix", "TABLES", "keys", "Base"], :mappings=>"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"}}, {:offset=>{:line=>257, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Amadeus_Korean.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/game_system/Amadeus\"\n\nmodule BCDice\n  module GameSystem\n    class Amadeus_Korean < Amadeus\n      # ゲームシステムの識別子\n      ID = 'Amadeus:Korean'\n\n      # ゲームシステム名\n      NAME = '아마데우스'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = '国際化:Korean:아마데우스'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・판정(Rx±y@z>=t)\n        　다이스별로 성공, 실패의 판정을 합니다.\n        　x：x에 랭크(S,A～D)를 입력.\n        　y：y에 수정치를 입력. ±의 계산에 대응. 생략가능.\n        　z：z에 스페셜이 되는 주사위 눈의 최저치를 입력.\n        　생략한 경우, 6의 값만 스페셜이 됩니다.\n        　t：t에 목표치를 입력. ±의 계산에 대응. 생략가능.\n        　목표치를 생략한 경우, 목표치는 4로 계산됩니다.\n        　예） RA　RB-1　RC>=5　RD+2　RS-1@5>=6\n        　※ RB++ 나 RA- 같은, 플러스 마이너스만의 표기로는 계산되지 않습니다.\n        　\"달성치\"_\"판정결과\"[\"주사위 눈\"\"대응하는 인과\"]와 같이 출력됩니다.\n        　단, C.D랭크에서는 대응하는 인과가 출력되지 않습니다.\n        　출력예)　1_펌블！[1흑] / 3_실패[3청]\n        ・각종표\n        　　조우표　ECT／관계표　RT／부모마음표　PRT／전장표　BST／휴식표　BT／\n        　　펌블표　FT／치명상표　FWT／전과표 BRT／랜덤아이템표　RIT／\n        　　손상표　WT／악몽표　NMT／목표표　TGT／制約表 CST／\n        　　ランダムギフト表 RGT／決戦戦果表 FBT／\n        　　店内雰囲気表 SAT／特殊メニュー表 SMT\n        ・試練表（～VT）\n        　ギリシャ神群 GCVT／ヤマト神群 YCVT／エジプト神群 ECVT／\n        　クトゥルフ神群 CCVT／北欧神群 NCVT／中華神群 CHVT／\n          ラストクロニクル神群 LCVT／ケルト神群 KCVT／ダンジョン DGVT／日常 DAVT\n        ・挑戦テーマ表（～CT）\n        　武勇 PRCT／技術 TCCT／頭脳 INCT／霊力 PSCT／愛 LVCT／日常 DACT\n      INFO_MESSAGE_TEXT\n\n      def initialize(command)\n        super(command)\n\n        @locale = :ko_kr\n      end\n\n      register_prefix_from_super_class()\n\n      TABLES = translate_tables(:ko_kr)\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:Amadeus_Korean>", "initialize", "command", "@locale", "register_prefix_from_super_class", "translate_tables", "Amadeus"], :mappings=>"AAAAA,2BAAAA;EAAAA;;;EAEAC,IAAAC,SAAAA,CAAQF,4BAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;;QAEE,8BAAKA,gBAAL;QAGA,gCAAOA,OAAP;QAGA,oCAAWA,kBAAX;QAGA,wCACNA,kBADqB,GAErBA,2BAFqB,GAGrBA,wBAHqB,GAIrBA,mCAJqB,GAKrBA,iCALqB,GAMrBA,4BANqB,GAOrBA,mCAPqB,GAQrBA,gCARqB,GASrBA,oCATqB,GAUrBA,gDAVqB,GAWrBA,sDAXqB,GAYrBA,oCAZqB,GAarBA,8BAbqB,GAcrBA,QAdqB,GAerBA,8CAfqB,GAgBrBA,yCAhBqB,GAiBrBA,qCAjBqB,GAkBrBA,6BAlBqB,GAmBrBA,4BAnBqB,GAoBrBA,aApBqB,GAqBrBA,wCArBqB,GAsBrBA,sCAtBqB,GAuBrBA,mDAvBqB,GAwBrBA,gBAxBqB,GAyBrBA,mDAzBM;;AA4BAC,QAAAA,0BAAAA,sBAAeC,OAAfD;AAAAA,UAAAA;;UAAAA;;UACE,OAAAL,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAMM,OAAN,CAAA,EAAA,IAAA;UAEAD,OAAAE,CAAAA,cAAU,OAAVA;QAHFF,CAAAA;QAMAL,IAAAQ,kCAAAA,CAAAA;QAEAJ,OAAA,kCAASJ,IAAAS,kBAAAA,CAAiB,OAAjBA,CAAT;MA/CFL,GAAAA,WAAAA,EAAuBM,aAAvBN;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAJAH;"}}]}