{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/TherapieSein.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class TherapieSein < Base\n      # ゲームシステムの識別子\n      ID = 'TherapieSein'\n\n      # ゲームシステム名\n      NAME = 'セラフィザイン'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'せらふいさいん'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・一般判定：TS[n][±m][@t]　　[]内のコマンドは省略可能。クリティカル無。\n        ・戦闘判定：OP[n][±m][@t]　　[]内のコマンドは省略可能。クリティカル有。\n\n        「n」で能力値修正などを指定。\n        「±m」で達成値への修正値を追加指定。+5+1-3のように、複数指定も可能です。\n        「@t」で目標値を指定。省略時は達成値のみ表示、指定時は判定の正否を追加表示。\n\n        【書式例】\n        ・TS → ダイスの合計値を達成値として表示。\n        ・TS4 → ダイス合計+4を達成値表示。\n        ・TS4-1 → ダイス合計+4-1（計+3）を達成値表示。\n        ・TS2+1@10 → ダイス合計+2+1（計+3）の達成値と、判定の成否を表示。\n        ・OP4+3+1 → ダイス合計+4+3+1（計+8）を達成値＆クリティカル表示。\n        ・OP3@12 → ダイス合計+3の達成値＆クリティカル、判定の成否を表示。\n      MESSAGETEXT\n\n      register_prefix('TS', 'OP')\n\n      def eval_game_system_specific_command(command)\n        output =\n          case command.upcase\n\n          when /(TS|OP)(\\d+)?(([+-]\\d+)*)(@(\\d+))?$/i\n            hasCritical = (Regexp.last_match(1) == \"OP\")\n            target = (Regexp.last_match(6) || 0).to_i\n            modify = (Regexp.last_match(2) || 0).to_i\n            modifyAddString = Regexp.last_match(3)\n\n            modify_list = modifyAddString.scan(/[+-]\\d+/) # 修正値を分割して配列へ\n            modify_list.each { |i| modify += i.to_i }\n\n            checkRoll(hasCritical, modify, target)\n\n          end\n\n        return output\n      end\n\n      def checkRoll(hasCritical, modify, target)\n        dice_list = @randomizer.roll_barabara(2, 6)\n        dice = dice_list.sum()\n        diceText = dice_list.join(\",\")\n        successValue = dice + modify\n\n        modifyText = getValueText(modify)\n        targetText = (target == 0 ? '' : \">=\#{target}\")\n\n        result = \"(2D6\#{modifyText}\#{targetText})\"\n        result += \" ＞ \#{dice}(\#{diceText})\#{modifyText}\"\n\n        if hasCritical && (dice == 12)\n          result += \" ＞ クリティカル！\"\n          return result\n        end\n\n        result += \" ＞ \#{successValue}\#{targetText}\"\n\n        return result if target == 0\n\n        if successValue >= target\n          result += \" ＞ 【成功】\"\n        else\n          result += \" ＞ 【失敗】\"\n        end\n\n        return result\n      end\n\n      def getValueText(value)\n        return \"\" if value == 0\n        return value.to_s if value < 0\n\n        return \"\\+\#{value}\"\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:TherapieSein>", "self", "register_prefix", "eval_game_system_specific_command", "command", "output", "$ret_or_1", "upcase", "hasCritical", "Regexp", "last_match", "1", "==", "target", "$ret_or_2", "6", "0", "to_i", "modify", "2", "modifyAddString", "3", "modify_list", "scan", "each", "block in eval_game_system_specific_command", "i", "block (2 levels) in eval_game_system_specific_command", "+", "checkRoll", "dice_list", "@randomizer", "roll_barabara", "dice", "sum", "diceText", "join", "successValue", "modifyText", "getValueText", "targetText", "result", "12", ">=", "value", "<", "to_s", "Base"], :mappings=>"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"}}]}