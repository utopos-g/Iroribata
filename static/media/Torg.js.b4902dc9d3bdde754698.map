{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Torg.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Torg < Base\n      # ゲームシステムの識別子\n      ID = 'Torg'\n\n      # ゲームシステム名\n      NAME = 'トーグ'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'とおく'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・判定　(TGm)\n        　TORG専用の判定コマンドです。\n        　\"TG(技能基本値)\"でロールします。Rコマンドに読替されます。\n        　振り足しを自動で行い、20の出目が出たときには技能無し値も並記します。\n        ・各種表　\"(表コマンド)(数値)\"で振ります。\n        　・一般結果表 成功度出力「RTx or RESULTx」\n        　・威圧/威嚇 対人行為結果表「ITx or INTIMIDATEx or TESTx」\n        　・挑発/トリック 対人行為結果表「TTx or TAUNTx or TRICKx or CTx」\n        　・間合い 対人行為結果表「MTx or MANEUVERx」\n        　・オーズ（一般人）ダメージ　「ODTx or ORDSx or ODAMAGEx」\n        　・ポシビリティー能力者ダメージ「DTx or DAMAGEx」\n        　・ボーナス表「BTx+y or BONUSx+y or TOTALx+y」 xは数値, yは技能基本値\n      INFO_MESSAGE_TEXT\n\n      register_prefix('TG', '1R20', 'RT', 'Result', 'IT', 'Intimidate', 'Test', 'TT', 'Taunt', 'Trick', 'CT', 'MT', 'Maneuver', 'ODT', 'ords', 'odamage', 'DT', 'damage', 'BT', 'bonus', 'total')\n\n      def replace_text(string)\n        string = string.gsub(/Result/i, 'RT')\n        string = string.gsub(/(Intimidate|Test)/i, 'IT')\n        string = string.gsub(/(Taunt|Trick|CT)/i, 'TT')\n        string = string.gsub(/Maneuver/i, 'MT')\n        string = string.gsub(/(ords|odamage)/i, 'ODT')\n        string = string.gsub(/damage/i, 'DT')\n        string = string.gsub(/(bonus|total)/i, 'BT')\n        string = string.gsub(/TG(\\d+)/i) { \"1R20+\#{Regexp.last_match(1)}\" }\n        string = string.gsub(/TG/i, '1R20')\n\n        return string\n      end\n\n      ####################              TORG             ########################\n      def torg_check(string)\n        unless /(^|\\s)S?(1R20([+-]\\d+)*)(\\s|$)/i =~ string\n          return nil\n        end\n\n        string = Regexp.last_match(2)\n        mod = Regexp.last_match(3)\n\n        debug(mod)\n        mod = ArithmeticEvaluator.eval(mod) if mod\n        debug(mod)\n        mod = mod.to_i\n\n        skilled, unskilled, dice_str = torg_dice\n        sk_bonus = get_torg_bonus(skilled)\n\n        if mod\n          if mod > 0\n            output = \"\#{sk_bonus}[\#{dice_str}]+\#{mod}\"\n          else\n            output = \"\#{sk_bonus}[\#{dice_str}]\#{mod}\"\n          end\n        else\n          output = \"\#{sk_bonus}[\#{dice_str}]\"\n        end\n\n        output += \" ＞ \" + (sk_bonus + mod).to_s\n\n        if skilled != unskilled\n          output += \"(技能無\" + (get_torg_bonus(unskilled) + mod).to_s + \")\"\n        end\n\n        output = \"(\#{string}) ＞ \#{output}\"\n\n        return output\n      end\n\n      def torg_dice\n        isSkilledCritical = true\n        isCritical = true\n        skilled = 0\n        unskilled = 0\n        dice_str = \"\"\n\n        while isSkilledCritical\n          dice_n = @randomizer.roll_once(20)\n          skilled += dice_n\n          unskilled += dice_n if isCritical\n\n          dice_str += \",\" unless dice_str.empty?\n          dice_str += dice_n.to_s\n\n          if dice_n == 20\n            isCritical = false\n          elsif dice_n != 10\n            isSkilledCritical = false\n            isCritical = false\n          end\n        end\n\n        return skilled, unskilled, dice_str\n      end\n\n      def eval_game_system_specific_command(command)\n        string = command.upcase\n        string = replace_text(string)\n\n        if (result = torg_check(string))\n          return result\n        end\n\n        output = '1'\n        ttype = \"\"\n        value = 0\n\n        return nil unless /([RITMDB]T)(\\d+([+-]\\d+)*)/i =~ string\n\n        type = Regexp.last_match(1)\n        num = Regexp.last_match(2)\n\n        case type\n        when 'RT'\n          value = ArithmeticEvaluator.eval(num)\n          output = get_torg_success_level(value)\n          ttype = '一般結果'\n        when 'IT'\n          value = ArithmeticEvaluator.eval(num)\n          output = get_torg_interaction_result_intimidate_test(value)\n          ttype = '威圧/威嚇'\n        when 'TT'\n          value = ArithmeticEvaluator.eval(num)\n          output = get_torg_interaction_result_taunt_trick(value)\n          ttype = '挑発/トリック'\n        when 'MT'\n          value = ArithmeticEvaluator.eval(num)\n          output = get_torg_interaction_result_maneuver(value)\n          ttype = '間合い'\n        when 'DT'\n          value = ArithmeticEvaluator.eval(num)\n          if string =~ /ODT/i\n            output = get_torg_damage_ords(value)\n            ttype = 'オーズダメージ'\n          else\n            output = get_torg_damage_posibility(value)\n            ttype = 'ポシビリティ能力者ダメージ'\n          end\n        when 'BT'\n          output, value = get_torg_bonus_text(num)\n          ttype = 'ボーナス'\n        end\n\n        if ttype != ''\n          output = \"\#{ttype}表[\#{value}] ＞ \#{output}\"\n        end\n\n        return output\n      end\n\n      # 一般結果表 成功度\n      def get_torg_success_level(value)\n        success_table = [\n          [0, \"ぎりぎり\"],\n          [1, \"ふつう\"],\n          [3, \"まあよい\"],\n          [7, \"かなりよい\"],\n          [12, \"すごい\"]\n        ]\n\n        return get_torg_table_result(value, success_table)\n      end\n\n      # 対人行為結果表\n      # 威圧／威嚇(intimidate/Test)\n      def get_torg_interaction_result_intimidate_test(value)\n        interaction_results_table = [\n          [0, \"技能なし\"],\n          [5, \"萎縮\"],\n          [10, \"逆転負け\"],\n          [15, \"モラル崩壊\"],\n          [17, \"プレイヤーズコール\"]\n        ]\n\n        return get_torg_table_result(value, interaction_results_table)\n      end\n\n      # 挑発／トリック(Taunt/Trick)\n      def get_torg_interaction_result_taunt_trick(value)\n        interaction_results_table = [\n          [0, \"技能なし\"],\n          [5, \"萎縮\"],\n          [10, \"逆転負け\"],\n          [15, \"高揚／逆転負け\"],\n          [17, \"プレイヤーズコール\"]\n        ]\n\n        return get_torg_table_result(value, interaction_results_table)\n      end\n\n      # 間合い(maneuver)\n      def get_torg_interaction_result_maneuver(value)\n        interaction_results_table = [\n          [0, \"技能なし\"],\n          [5, \"疲労\"],\n          [10, \"萎縮／疲労\"],\n          [15, \"逆転負け／疲労\"],\n          [17, \"プレイヤーズコール\"]\n        ]\n\n        return get_torg_table_result(value, interaction_results_table)\n      end\n\n      def get_torg_table_result(value, table)\n        output = '1'\n\n        table.each do |item|\n          item_index = item[0]\n\n          if item_index > value\n            break\n          end\n\n          output = item[1]\n        end\n\n        return output\n      end\n\n      # オーズダメージチャート\n      def get_torg_damage_ords(value)\n        damage_table_ords = [\n          [0, \"1\"],\n          [1, \"O1\"],\n          [2, \"K1\"],\n          [3, \"O2\"],\n          [4, \"O3\"],\n          [5, \"K3\"],\n          [6, \"転倒 K／O4\"],\n          [7, \"転倒 K／O5\"],\n          [8, \"1レベル負傷  K／O7\"],\n          [9, \"1レベル負傷  K／O9\"],\n          [10, \"1レベル負傷  K／O10\"],\n          [11, \"2レベル負傷  K／O11\"],\n          [12, \"2レベル負傷  KO12\"],\n          [13, \"3レベル負傷  KO13\"],\n          [14, \"3レベル負傷  KO14\"],\n          [15, \"4レベル負傷  KO15\"]\n        ]\n\n        return get_torg_damage(value,\n                               4,\n                               \"レベル負傷  KO15\",\n                               damage_table_ords)\n      end\n\n      # ポシビリティー能力者ダメージチャート\n      def get_torg_damage_posibility(value)\n        damage_table_posibility = [\n          [0, \"1\"],\n          [1, \"1\"],\n          [2, \"O1\"],\n          [3, \"K2\"],\n          [4, \"2\"],\n          [5, \"O2\"],\n          [6, \"転倒 O2\"],\n          [7, \"転倒 K2\"],\n          [8, \"転倒 K2\"],\n          [9, \"1レベル負傷  K3\"],\n          [10, \"1レベル負傷  K4\"],\n          [11, \"1レベル負傷  O4\"],\n          [12, \"1レベル負傷  K5\"],\n          [13, \"2レベル負傷  O4\"],\n          [14, \"2レベル負傷  KO5\"],\n          [15, \"3レベル負傷  KO5\"]\n        ]\n\n        return get_torg_damage(value,\n                               3,\n                               \"レベル負傷  KO5\",\n                               damage_table_posibility)\n      end\n\n      def get_torg_damage(value, maxDamage, maxDamageString, damage_table)\n        if value < 0\n          return '1'\n        end\n\n        table_max_value = damage_table.length - 1\n\n        if value <= table_max_value\n          return get_torg_table_result(value, damage_table)\n        end\n\n        over_kill_damage = ((value - table_max_value) / 2).to_i\n        return \"\" + (over_kill_damage + maxDamage).to_s + maxDamageString\n      end\n\n      def get_torg_bonus_text(num)\n        val_arr = num.split(/\\+/)\n        value = val_arr.shift.to_i\n\n        mod = ArithmeticEvaluator.eval(val_arr.join('+'))\n        resultValue = get_torg_bonus(value)\n\n        debug('TORG BT resultValue', resultValue)\n        debug('TORG BT mod', mod)\n\n        if mod == 0\n          output = resultValue.to_s\n        else\n          output = getTorgBonusOutputTextWhenModDefined(value, resultValue, mod)\n          value = \"\#{value}+\#{mod}\"\n        end\n\n        return output, value\n      end\n\n      def getTorgBonusOutputTextWhenModDefined(value, resultValue, mod)\n        debug('getTorgBonusOutputTextWhenModDefined value, mod', value, mod)\n        if mod > 0\n          return \"\#{resultValue}[\#{value}]+\#{mod} ＞ \#{resultValue + mod}\"\n        else\n          debug('resultValue', resultValue)\n          debug('mod', mod)\n          return \"\#{resultValue}[\#{value}]\#{mod} ＞ \#{resultValue + mod}\"\n        end\n      end\n\n      def get_torg_bonus(value)\n        bonus_table = [\n          [1, -12],\n          [2, -10],\n          [3, -8],\n          [5, -5],\n          [7, -2],\n          [9, -1],\n          [11, 0],\n          [13, 1],\n          [15, 2],\n          [16, 3],\n          [17, 4],\n          [18, 5],\n          [19, 6],\n          [20, 7]\n        ]\n\n        bonus = get_torg_table_result(value, bonus_table)\n\n        if value > 20\n          over_value_bonus = ((value - 21) / 5).to_i + 1\n          bonus += over_value_bonus\n        end\n\n        return bonus\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Torg>", "self", "register_prefix", "replace_text", "string", "gsub", "block in replace_text", "block (2 levels) in replace_text", "Regexp", "last_match", "1", "torg_check", "=~", "2", "mod", "3", "debug", "ArithmeticEvaluator", "eval", "to_i", "torg_dice", "skilled", "unskilled", "dice_str", "sk_bonus", "get_torg_bonus", ">", "0", "output", "+", "to_s", "isSkilledCritical", "isCritical", "dice_n", "@randomizer", "roll_once", "20", "empty?", "10", "eval_game_system_specific_command", "command", "upcase", "result", "ttype", "value", "type", "num", "get_torg_success_level", "get_torg_interaction_result_intimidate_test", "get_torg_interaction_result_taunt_trick", "get_torg_interaction_result_maneuver", "get_torg_damage_ords", "get_torg_damage_posibility", "get_torg_bonus_text", "success_table", "7", "12", "get_torg_table_result", "interaction_results_table", "5", "15", "17", "table", "each", "block in get_torg_table_result", "item", "block (2 levels) in get_torg_table_result", "item_index", "[]", "damage_table_ords", "4", "6", "8", "9", "11", "13", "14", "get_torg_damage", "damage_table_posibility", "maxDamage", "maxDamageString", "damage_table", "<", "table_max_value", "-", "length", "<=", "over_kill_damage", "/", "val_arr", "split", "shift", "join", "resultValue", "getTorgBonusOutputTextWhenModDefined", "bonus_table", "-12", "-10", "-8", "-5", "-2", "-1", "16", "18", "19", "bonus", "over_value_bonus", "21", "Base"], :mappings=>"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"}}]}