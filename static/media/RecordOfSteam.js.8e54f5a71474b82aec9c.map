{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/RecordOfSteam.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class RecordOfSteam < Base\n      # ゲームシステムの識別子\n      ID = 'RecordOfSteam'\n\n      # ゲームシステム名\n      NAME = 'Record of Steam'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'れこおとおふすちいむ'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        2S2@1\n        RecordOfSteam : (2S2@1) ＞ 1,2,3,4 ＞ 1回転 ＞ 成功数2\n\n        4S3@2\n        RecordOfSteam : (4S3@2) ＞ 2,1,2,4,4,4,2,3,4,5,6,6 ＞ 4回転 ＞ 成功数5\n      MESSAGETEXT\n\n      register_prefix('\\d+S\\d+')\n\n      # サンプルのダイスコマンドは「nSt@c」で n=ダイス個数, t=目標値, c=クリティカル値。@cのみ省略可\n\n      def eval_game_system_specific_command(command)\n        unless /(\\d+)[sS](\\d+)(@(\\d+))?/i =~ command\n          return \"1\"\n        end\n\n        # $x の結果は正規表現マッチングすると新しい値に書き換わってしまうので、\n        # マッチングした直後に変数に格納してしまうのが大事なポイント！\n        diceCount = Regexp.last_match(1).to_i\n        targetNumber = Regexp.last_match(2).to_i\n        criticalValue = Regexp.last_match(4)\n        criticalValue ||= 1\n        criticalValue = criticalValue.to_i\n\n        if diceCount >= 150\n          return \"(多分)無限個なので振れません！ ヤメテクダサイ、(プロセスが)死んでしまいますっ\"\n        end\n\n        if criticalValue >= 3\n          return \"(多分)無限個なので振れません！ ヤメテクダサイ、(プロセスが)死んでしまいますっ\"\n        end\n\n        specialValue = criticalValue\n\n        rollResult, successCount, roundCount, specialCount, fumbleCount = getDiceRollResult(diceCount, targetNumber, criticalValue, specialValue)\n\n        output = \"(\#{command}) ＞ \#{rollResult}\"\n\n        roundCountText = getRoundCountText(roundCount)\n        successText = getSuccessText(successCount)\n        specialText = getSpecialText(specialCount)\n        fumbleText = getFumbleText(fumbleCount)\n\n        result = \"\#{output}\#{roundCountText}\#{specialText}\#{successText}\#{fumbleText}\"\n\n        return result\n      end\n\n      def getDiceRollResult(diceCount, targetNumber, criticalValue, specialValue)\n        successCount = 0\n        roundCount = 0\n        rollResult = \"\"\n        specialCount = 0\n        specialFlag = false\n        fumbleCount = 0\n        fumbleFlag = false\n\n        while diceCount > 0\n          diceList = @randomizer.roll_barabara(diceCount, 6)\n          diceListText = diceList.join(\",\")\n\n          rollResult += \",\" if rollResult != \"\"\n          rollResult += diceListText\n\n          if diceList.uniq.length == 1 && roundCount == 0\n            if diceList.uniq.first <= specialValue\n              specialFlag = true\n            elsif diceList.uniq.first == 6\n              fumbleFlag = true\n            end\n          end\n          debug(\"diceList\", diceList)\n\n          if specialFlag\n            specialCount = 1\n            successCount = diceCount * 3\n\n            return rollResult, successCount, roundCount, specialCount, fumbleCount\n          elsif fumbleFlag\n            fumbleCount = 1\n\n            return rollResult, successCount, roundCount, specialCount, fumbleCount\n          end\n\n          diceCount = 0\n\n          diceList.map do |diceValue|\n            debug(\"diceValue\", diceValue)\n            debug(\"criticalValue\", criticalValue)\n            debug(\"specialValue\", specialValue)\n\n            if diceValue <= criticalValue\n              diceCount += 2\n              roundCount += 1\n            end\n\n            successCount += 1 if diceValue <= targetNumber\n          end\n        end\n\n        return rollResult, successCount, roundCount, specialCount, fumbleCount\n      end\n\n      def getRoundCountText(roundCount)\n        if roundCount <= 0\n          return \"\"\n        end\n\n        return \" ＞ \#{roundCount}回転\"\n      end\n\n      def getSuccessText(successCount)\n        if successCount > 0\n          return \" ＞ 成功数\#{successCount}\"\n        end\n\n        return \" ＞ 失敗\"\n      end\n\n      def getSpecialText(specialCount)\n        if specialCount == 1\n          return \" ＞ スペシャル\"\n        end\n      end\n\n      def getFumbleText(fumbleCount)\n        if fumbleCount == 1\n          return \" ＞ ファンブル\"\n        end\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:RecordOfSteam>", "self", "register_prefix", "eval_game_system_specific_command", "command", "=~", "diceCount", "Regexp", "last_match", "1", "to_i", "targetNumber", "2", "criticalValue", "4", "$ret_or_1", ">=", "150", "3", "specialValue", "getDiceRollResult", "rollResult", "successCount", "roundCount", "specialCount", "fumbleCount", "output", "roundCountText", "getRoundCountText", "successText", "getSuccessText", "specialText", "getSpecialText", "fumbleText", "getFumbleText", "result", "0", "specialFlag", "fumbleFlag", ">", "diceList", "@randomizer", "roll_barabara", "6", "diceListText", "join", "+", "uniq", "length", "<=", "first", "debug", "*", "map", "block in getDiceRollResult", "diceValue", "block (2 levels) in getDiceRollResult", "Base"], :mappings=>"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"}}]}