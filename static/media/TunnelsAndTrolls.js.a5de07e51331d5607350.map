{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/TunnelsAndTrolls.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class TunnelsAndTrolls < Base\n      # ゲームシステムの識別子\n      ID = 'TunnelsAndTrolls'\n\n      # ゲームシステム名\n      NAME = 'トンネルズ＆トロールズ'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'とんねるすあんととろおるす'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・行為判定　(nD6+x>=nLV)\n        失敗、成功、自動失敗の自動判定とゾロ目の振り足し経験値の自動計算を行います。\n        SAVEの難易度を「レベル」で表記することが出来ます。\n        例えば「2Lv」と書くと「25」に置換されます。\n        判定時以外は悪意ダメージを表示します。\n        バーサークとハイパーバーサーク用に専用コマンドが使えます。\n        例）2D6+1>=1Lv\n        　 (2D6+1>=20) ＞ 7[2,5]+1 ＞ 8 ＞ 失敗\n        　判定時にはゾロ目を自動で振り足します。\n\n        ・バーサークとハイパーバーサーク　(nBS+x or nHBS+x)\n        　\"(ダイス数)BS(修正値)\"でバーサーク、\"(ダイス数)HBS(修正値)\"でハイパーバーサークでロールできます。\n        　最初のダイスの読替は、個別の出目はそのままで表示。\n        　下から２番目の出目をずらした分だけ合計にマイナス修正を追加して表示します。\n      INFO_MESSAGE_TEXT\n\n      register_prefix('\\d+H?BS', '\\d+R6', '\\d+D\\d+')\n\n      def initialize(command)\n        super(command)\n\n        @sort_add_dice = true\n      end\n\n      private\n\n      def replace_text(string)\n        if /BS/i =~ string\n          string = string.gsub(/(\\d+)HBS([^\\d\\s][+\\-\\d]+)/i) { \"\#{Regexp.last_match(1)}R6\#{Regexp.last_match(2)}[H]\" }\n          string = string.gsub(/(\\d+)HBS/i) { \"\#{Regexp.last_match(1)}R6[H]\" }\n          string = string.gsub(/(\\d+)BS([^\\d\\s][+\\-\\d]+)/i) { \"\#{Regexp.last_match(1)}R6\#{Regexp.last_match(2)}\" }\n          string = string.gsub(/(\\d+)BS/i) { \"\#{Regexp.last_match(1)}R6\" }\n        end\n\n        return string\n      end\n\n      def eval_game_system_specific_command(string)\n        if /^\\d+D\\d+/i.match?(string)\n          return roll_action(string)\n        end\n\n        string = replace_text(string)\n        debug('tandt_berserk string', string)\n\n        output = \"1\"\n\n        return output unless (m = /(^|\\s)S?((\\d+)[rR]6([+\\-\\d]*)(\\[(\\w+)\\])?)(\\s|$)/i.match(string))\n\n        debug('tandt_berserk matched')\n\n        string = m[2]\n        dice_c = m[3].to_i\n        bonus = 0\n        bonus = ArithmeticEvaluator.eval(m[4]) if m[4]\n        isHyperBerserk = false\n        isHyperBerserk = true if m[5] && (m[6] =~ /[Hh]/)\n        dice_arr = []\n        dice_now = 0\n        dice_str = \"\"\n        isFirstLoop = true\n        n_max = 0\n        bonus2 = 0\n\n        debug('isHyperBerserk', isHyperBerserk)\n\n        # ２回目以降\n        dice_arr.push(dice_c)\n\n        loop do\n          debug('loop dice_arr', dice_arr)\n          dice_wk = dice_arr.shift\n\n          debug('roll dice_wk d6', dice_wk)\n          dice_list = @randomizer.roll_barabara(dice_wk, 6).sort\n          rollTotal = dice_list.sum()\n          rollDiceMaxCount = dice_list.count(6)\n\n          if dice_wk >= 2 # ダイスが二個以上\n            dice_num = dice_list\n\n            diceType = 6\n\n            dice_face = []\n            diceType.times do |_i|\n              dice_face.push(0)\n            end\n\n            dice_num.each do |dice_o|\n              dice_face[dice_o - 1] += 1\n            end\n\n            dice_face.each do |dice_o|\n              if dice_o >= 2\n                dice_o += 1 if isHyperBerserk\n                dice_arr.push(dice_o)\n              end\n            end\n\n            if isFirstLoop && dice_arr.empty?\n              min1 = 0\n              min2 = 0\n\n              diceType.times do |i|\n                index = diceType - i - 1\n                debug('diceType index', index)\n                if dice_face[index] > 0\n                  min2 = min1\n                  min1 = index\n                end\n              end\n\n              debug(\"min1, min2\", min1, min2)\n              bonus2 = -(min2 - min1)\n              rollDiceMaxCount -= 1 if min2 == 5\n\n              if isHyperBerserk\n                dice_arr.push(3)\n              else\n                dice_arr.push(2)\n              end\n            end\n          end\n\n          dice_now += rollTotal\n          dice_str += \"][\" if dice_str != \"\"\n          dice_str += dice_list.join(\",\")\n          n_max += rollDiceMaxCount\n          isFirstLoop = false\n\n          debug('loop last chek dice_arr', dice_arr)\n\n          break if dice_arr.empty?\n        end\n\n        debug('loop breaked')\n\n        debug('dice_now, bonus, bonus2', dice_now, bonus, bonus2)\n        total_n = dice_now + bonus + bonus2\n\n        dice_str = \"[\#{dice_str}]\"\n        output = \"\#{dice_now}\#{dice_str}\"\n\n        if bonus2 < 0\n          debug('bonus2', bonus2)\n          output += bonus2.to_s\n        end\n\n        debug('bonus', bonus)\n        if bonus > 0\n          output += \"+\#{bonus}\"\n        elsif bonus < 0\n          output += bonus.to_s\n        end\n\n        if output =~ /[^\\d\\[\\]]+/\n          output = \"(\#{string}) ＞ \#{output} ＞ \#{total_n}\"\n        else\n          output = \"(\#{string}) ＞ \#{total_n}\"\n        end\n\n        output += \" ＞ 悪意\#{n_max}\" if n_max > 0\n\n        return output\n      end\n\n      def roll_action(command)\n        command = command\n                  .sub(/\\d+LV$/i) { |level| level.to_i * 5 + 15 }\n\n        parser = Command::Parser.new(/\\d+D6/, round_type: round_type)\n                                .restrict_cmp_op_to(nil, :>=)\n                                .enable_question_target()\n        cmd = parser.parse(command)\n        unless cmd\n          return nil\n        end\n\n        times = cmd.command.to_i\n        roll_action_dice(times)\n        total = @dice_total + cmd.modify_number\n\n        target = cmd.question_target? ? \"?\" : cmd.target_number\n\n        sequence = [\n          \"(\#{cmd})\",\n          interim_expr(cmd, @dice_total),\n          total.to_s,\n          action_result(total, @dice_total, target),\n          additional_result(@count_6)\n        ].compact\n\n        return sequence.join(\" ＞ \")\n      end\n\n      def roll_action_dice(times)\n        dice_list = @randomizer.roll_barabara(times, 6).sort\n        @dice_list = [dice_list]\n        while same_all_dice?(dice_list)\n          dice_list = @randomizer.roll_barabara(times, 6).sort\n          @dice_list.push(dice_list)\n        end\n\n        dice_list_flatten = @dice_list.flatten\n        @dice_total = dice_list_flatten.sum()\n        @count_6 = dice_list_flatten.count(6)\n      end\n\n      # 出目が全て同じか\n      def same_all_dice?(dice_list)\n        dice_list.size > 1 && dice_list.uniq.size == 1\n      end\n\n      def interim_expr(cmd, dice_total)\n        if @dice_list.flatten.size == 1 && cmd.modify_number == 0\n          return nil\n        end\n\n        dice_list = @dice_list.map { |ds| \"[\#{ds.join(',')}]\" }.join(\"\")\n        modifier = Format.modifier(cmd.modify_number)\n\n        return [dice_total.to_s, dice_list, modifier].join(\"\")\n      end\n\n      def action_result(total, dice_total, target_number)\n        if dice_total == 3\n          \"自動失敗\"\n        elsif target_number.nil?\n          nil\n        elsif target_number == \"?\"\n          success_level(total, dice_total)\n        elsif total >= target_number\n          \"成功 ＞ 経験値\#{experience_point(target_number, dice_total)}\"\n        else\n          \"失敗\"\n        end\n      end\n\n      def success_level(total, dice_total)\n        level = ((total - 15) / 5).to_i\n        if level <= 0\n          \"失敗 ＞ 経験値\#{dice_total}\"\n        else\n          \"\#{level}Lv成功 ＞ 経験値\#{dice_total}\"\n        end\n      end\n\n      def experience_point(target_number, dice_total)\n        ep = 1.0 * (target_number - 15) / 5 * dice_total\n\n        if ep <= 0\n          \"0\"\n        elsif int?(ep)\n          ep.to_i.to_s\n        else\n          format(\"%.1f\", ep)\n        end\n      end\n\n      def int?(v)\n        v == v.to_i\n      end\n\n      def additional_result(count_6)\n        if count_6 > 0\n          \"悪意\#{count_6}\"\n        end\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:TunnelsAndTrolls>", "self", "register_prefix", "initialize", "command", "@sort_add_dice", "private", "replace_text", "string", "=~", "gsub", "block in replace_text", "block (2 levels) in replace_text", "Regexp", "last_match", "1", "2", "eval_game_system_specific_command", "match?", "roll_action", "debug", "output", "m", "match", "[]", "dice_c", "3", "to_i", "bonus", "0", "4", "ArithmeticEvaluator", "eval", "isHyperBerserk", "5", "6", "dice_arr", "dice_now", "dice_str", "isFirstLoop", "n_max", "bonus2", "push", "loop", "block in eval_game_system_specific_command", "block (2 levels) in eval_game_system_specific_command", "dice_wk", "shift", "dice_list", "@randomizer", "roll_barabara", "sort", "rollTotal", "sum", "rollDiceMaxCount", "count", ">=", "dice_num", "diceType", "dice_face", "times", "_i", "block (3 levels) in eval_game_system_specific_command", "each", "dice_o", "[]=", "-", "+", "empty?", "min1", "min2", "i", "index", ">", "-@", "join", "total_n", "<", "to_s", "sub", "block in roll_action", "level", "block (2 levels) in roll_action", "*", "15", "parser", "Command::Parser", "Command", "new", "round_type", "restrict_cmp_op_to", "enable_question_target", "cmd", "parse", "roll_action_dice", "total", "@dice_total", "modify_number", "target", "question_target?", "target_number", "sequence", "interim_expr", "action_result", "additional_result", "@count_6", "compact", "@dice_list", "same_all_dice?", "dice_list_flatten", "flatten", "$ret_or_1", "size", "uniq", "==", "dice_total", "map", "block in interim_expr", "ds", "block (2 levels) in interim_expr", "modifier", "Format", "nil?", "success_level", "experience_point", "/", "<=", "ep", "int?", "format", "v", "count_6", "Base"], :mappings=>"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"}}]}