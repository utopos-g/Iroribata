{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/format.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module Format\n    module_function\n\n    # 比較演算子を文字列表記にする\n    #\n    # @param op [Symbol]\n    # @return [String, nil]\n    def comparison_operator(op)\n      case op\n      when :==\n        \"=\"\n      when :'!='\n        \"<>\"\n      when Symbol\n        op.to_s\n      end\n    end\n\n    # 修正値を文字列表記にする\n    #\n    # @param number [Integer, nil]\n    # @return [String]\n    def modifier(number)\n      if number.nil?\n        nil\n      elsif number == 0\n        \"\"\n      elsif number > 0\n        \"+\#{number}\"\n      else\n        number.to_s\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:Format>", "self", "module_function", "comparison_operator", "op", "$ret_or_1", "Symbol", "to_s", "modifier", "number", "nil?", "0", ">"], :mappings=>"AAAAA,gCAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;;MACEC,IAAAC,iBAAAA,CAAAA;;AAMAC,MAAAA,mCAAAA,+BAAwBC,EAAxBD;AAAAA,QAAAA;;QAEE,IAAA,QAAK,IAAL,EADAE,CAAAA,YAAKD,EAALC,CACA,CAAA;UACEF,OAAAA;QADF,OAEA,IAAA,QAAK,IAAL,EAdN,SAcM,CAAA;UACEA,OAAAA;QADF,OAEA,IAAA,QAAKG,YAAL,EAhBN,SAgBM,CAAA;UACEH,OAAAC,EAAEG,MAAAA,CAAAA;QADJ;UALAJ,OAAA;QAKA;MANFA,CAAAA;MAeAH,OAAAQ,wBAAAA,oBAAaC,MAAbD;AAAAA;QACE,IAAA,QAAGC,MAAMC,SAAAA,CAAAA,CAAT,CAAA;UACEF,OAAA;QADF,OAEA,IAAA,MAAMC,MAAN,EAAgBE,CAAhB,CAAA;UACEH,OAAAA;QADF,OAEA,IAAA,QAAaI,OAAPH,MAAOG,EAAED,CAAFC,CAAb,CAAA;UACEJ,OAACA,GAAD,GAAA,CAAIC,MAAJ;QADF;UAGED,OAAAC,MAAMF,MAAAA,CAAAA;QAHR;MALFC,CAAAA;IAtBFR,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>45, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/OracleEngine.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire 'bcdice/format'\n\nmodule BCDice\n  module GameSystem\n    class OracleEngine < Base\n      # ゲームシステムの識別子\n      ID = 'OracleEngine'\n\n      # ゲームシステム名\n      NAME = 'オラクルエンジン'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'おらくるえんしん'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<MESSAGETEXT\n  ・クラッチロール （xCL+y>=z)\n  ダイスをx個振り、1個以上目標シフトzに到達したか判定します。修正yは全てのダイスにかかります。\n  成功した時は目標シフトを、失敗した時はダイスの最大値-1シフトを返します\n  zが指定されないときは、ダイスをx個を振り、それに修正yしたものを返します。\n  通常、最低シフトは1、最大シフトは6です。目標シフトもそろえられます。\n  また、CLの後に7を入れ、(xCL7+y>=z)と入力すると最大シフトが7になります。\n ・判定 (xR6+y@c#f$b>=z)\n  ダイスをx個振り、大きいもの2つだけを見て達成値を算出し、成否を判定します。修正yは達成値にかかります。\n  ダイスブレイクとしてbを、クリティカル値としてcを、ファンブル値としてfを指定できます。\n  それぞれ指定されない時、0,12,2になります。\n  クリティカル値の上限はなし、下限は2。ファンブル値の上限は12、下限は0。\n  zが指定されないとき、達成値の算出のみ行います。\n ・ダメージロールのダイスブレイク (xD6+y$b)\n  ダイスをx個振り、合計値を出します。修正yは合計値にかかります。\n  ダイスブレイクとしてbを指定します。合計値は0未満になりません。\nMESSAGETEXT\n\n      # ダイスボットで使用するコマンドを配列で列挙する\n      register_prefix('\\d+CL', '\\d+R6', '\\d+D6.*\\$[\\+\\-]?\\d+')\n\n      def initialize(command)\n        super(command)\n        @sort_add_dice = true\n        @sort_barabara_dice = true\n      end\n\n      def eval_game_system_specific_command(command)\n        case command\n        when /\\d+CL.*/i\n          clutch_roll(command)\n        when /\\d+D6.*\\$[+-]?\\d.*/\n          damage_roll(command)\n        when /\\d+R6/\n          r_roll(command)\n        end\n      end\n\n      # クラッチロール\n      def clutch_roll(string)\n        debug(\"clutch_roll begin\", string)\n\n        parser = Command::Parser.new(/\\d+CL[67]?/, round_type: round_type)\n                                .restrict_cmp_op_to(nil, :>=)\n\n        @cmd = parser.parse(string)\n\n        unless @cmd\n          return nil\n        end\n\n        @times, @max_shift = @cmd.command.split(\"CL\").map(&:to_i)\n        @max_shift ||= 6\n        @cmd.target_number = clamp(@cmd.target_number, 1, @max_shift) if @cmd.cmp_op\n\n        if @times == 0\n          return nil\n        end\n\n        dice_list = @randomizer.roll_barabara(@times, 6).map { |x| clamp(x + @cmd.modify_number, 1, @max_shift) }.sort\n\n        sequence = [\n          expr_clutch(),\n          \"[\#{dice_list.join(', ')}]\",\n          result_clutch(dice_list.last)\n        ]\n\n        return sequence.join(' ＞ ')\n      end\n\n      def expr_clutch()\n        max_shift = @max_shift == 7 ? 7 : nil\n        cmp_op = Format.comparison_operator(@cmd.cmp_op)\n        modify_number = Format.modifier(@cmd.modify_number)\n\n        \"(\#{@times}CL\#{max_shift}\#{modify_number}\#{cmp_op}\#{@cmd.target_number})\"\n      end\n\n      def result_clutch(after_shift)\n        if @cmd.cmp_op != :>=\n          \"シフト\#{after_shift}\"\n        elsif after_shift >= @cmd.target_number\n          \"成功 シフト\#{@cmd.target_number}\"\n        else\n          after_shift -= 1\n          after_shift = 1 if after_shift < 1\n          \"失敗 シフト\#{after_shift}\"\n        end\n      end\n\n      def clamp(i, min, max)\n        if i < min\n          min\n        elsif i > max\n          max\n        else\n          i\n        end\n      end\n\n      # 判定\n      def r_roll(string)\n        parser = Command::Parser.new(/\\d+R6/, round_type: round_type)\n                                .restrict_cmp_op_to(nil, :>=)\n                                .enable_critical\n                                .enable_fumble\n                                .enable_dollar\n        @cmd = parser.parse(string)\n        unless @cmd\n          return nil\n        end\n\n        @times = @cmd.command.to_i\n\n        if @times == 0\n          return nil\n        end\n\n        @critical = normalize_critical(@cmd.critical || 12, string)\n        @fumble = normalize_fumble(@cmd.fumble || 2, string)\n        @break = (@cmd.dollar || 0).abs\n\n        dice_list = @randomizer.roll_barabara(@times, 6).sort\n        dice_broken = dice_list.pop(@break)\n\n        # ブレイク後のダイスから最大値２つの合計がダイスの値\n        dice_total = dice_list.dup.pop(2).inject(0, :+)\n        total = dice_total + @cmd.modify_number\n\n        sequence = [\n          expr_r(),\n          dice_result_r(dice_total, dice_list, dice_broken),\n          result_r(dice_total, total)\n        ]\n\n        return sequence.join(' ＞ ')\n      end\n\n      def expr_r()\n        modify_number = Format.modifier(@cmd.modify_number)\n        critical = @critical == 12 ? \"\" : \"c[\#{@critical}]\"\n        fumble = @fumble == 2 ? \"\" : \"f[\#{@fumble}]\"\n        brak = @break == 0 ? \"\" : \"b[\#{@break}]\"\n        cmp_op = Format.comparison_operator(@cmd.cmp_op)\n\n        \"(\#{@times}R6\#{modify_number}\#{critical}\#{fumble}\#{brak}\#{cmp_op}\#{@cmd.target_number})\"\n      end\n\n      def dice_result_r(dice_total, dice_list, break_list)\n        modify_number_text = Format.modifier(@cmd.modify_number)\n\n        if break_list.empty?\n          \"\#{dice_total}[\#{dice_list.join(', ')}]\#{modify_number_text}\"\n        else\n          \"\#{dice_total}[\#{dice_list.join(', ')}]×[\#{break_list.join(', ')}]\#{modify_number_text}\"\n        end\n      end\n\n      def result_r(dice_total, total)\n        if dice_total <= @fumble\n          \"ファンブル!\"\n        elsif dice_total >= @critical\n          \"クリティカル!\"\n        elsif @cmd.cmp_op == :>=\n          if total >= @cmd.target_number\n            \"\#{total} 成功\"\n          else\n            \"\#{total} 失敗\"\n          end\n        else\n          total.to_s\n        end\n      end\n\n      def normalize_critical(critical, string)\n        if /@[+-]/.match(string)\n          critical = 12 + critical\n        end\n\n        if critical < 2\n          critical = 2\n        end\n\n        return critical\n      end\n\n      def normalize_fumble(fumble, string)\n        if /#[+-]/.match(string)\n          fumble = 2 + fumble\n        end\n\n        return clamp(fumble, 0, 12)\n      end\n\n      # ダメージロール\n      def damage_roll(string)\n        parser = Command::Parser.new(/\\d+D6/, round_type: round_type)\n                                .restrict_cmp_op_to(nil)\n                                .enable_dollar\n        @cmd = parser.parse(string)\n        return nil unless @cmd\n\n        @times = @cmd.command.to_i\n        @break = (@cmd.dollar || 0).abs\n\n        if @times == 0\n          return nil\n        end\n\n        dice_list = @randomizer.roll_barabara(@times, 6).sort\n        dice_broken = dice_list.pop(@break)\n\n        total_n = dice_list.inject(0, :+) + @cmd.modify_number\n        total_n = 0 if total_n < 0\n\n        sequence = [\n          expr_damage(),\n          result_damage(dice_list, dice_broken),\n          total_n\n        ]\n\n        return sequence.join(' ＞ ')\n      end\n\n      def expr_damage()\n        modify_number = Format.modifier(@cmd.modify_number)\n        brak = @break == 0 ? \"\" : \"b[\#{@break}]\"\n\n        \"(\#{@times}D6\#{modify_number}\#{brak})\"\n      end\n\n      def result_damage(dice_list, break_list)\n        dice_total = dice_list.inject(0, :+)\n        modify_number_text = Format.modifier(@cmd.modify_number)\n\n        if break_list.empty?\n          \"\#{dice_total}[\#{dice_list.join(', ')}]\#{modify_number_text}\"\n        else\n          \"\#{dice_total}[\#{dice_list.join(', ')}]×[\#{break_list.join(', ')}]\#{modify_number_text}\"\n        end\n      end\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:OracleEngine>", "register_prefix", "initialize", "command", "@sort_add_dice", "@sort_barabara_dice", "eval_game_system_specific_command", "$ret_or_1", "clutch_roll", "damage_roll", "r_roll", "string", "debug", "parser", "Command::Parser", "Command", "new", "round_type", "restrict_cmp_op_to", "@cmd", "parse", "map", "split", "to_proc", "@times", "@max_shift", "6", "cmp_op", "target_number=", "clamp", "target_number", "1", "0", "dice_list", "@randomizer", "roll_barabara", "block in clutch_roll", "x", "block (2 levels) in clutch_roll", "+", "modify_number", "sort", "sequence", "expr_clutch", "join", "result_clutch", "last", "max_shift", "7", "Format", "comparison_operator", "modifier", "after_shift", ">=", "-", "<", "i", "min", "max", ">", "enable_critical", "enable_fumble", "enable_dollar", "to_i", "@critical", "normalize_critical", "critical", "12", "@fumble", "normalize_fumble", "fumble", "2", "@break", "dollar", "abs", "dice_broken", "pop", "dice_total", "dup", "inject", "total", "expr_r", "dice_result_r", "result_r", "brak", "break_list", "modify_number_text", "empty?", "<=", "to_s", "match", "total_n", "expr_damage", "result_damage", "Base"], :mappings=>"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"}}]}