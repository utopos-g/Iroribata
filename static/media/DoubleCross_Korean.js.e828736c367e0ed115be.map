{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/arithmetic_evaluator.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module ArithmeticEvaluator\n    class << self\n      # 四則演算を評価する\n      # @deprecated +Arithmetic.#eval+ を利用してください。\n      # @param expr [String, nil] 評価する式\n      # @param round_type [Symbol] 端数処理の種類\n      # @return [Integer] 評価結果を返す。不正な式の場合には0を返す。\n      def eval(expr, round_type: RoundType::FLOOR)\n        return 0 unless expr\n\n        Arithmetic.eval(expr, round_type) || 0\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:ArithmeticEvaluator>", "eval", "expr", "$kwargs", "RoundType::FLOOR", "RoundType", "0", "$ret_or_1", "Arithmetic", "round_type", "self"], :mappings=>"AAAAA,8CAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAA;QAAA;;QAME,OAAAC,oBAAAA,iBAASC,IAAD,EAVdC,OAUMF,GAAAA,MAAAA,IAAAA,wCAAAA;AAAAA,UAAAA;;;UAVN;;UAUqB,0CAAA,qCAAYG,IAAAC,eAAAD;UACzB,KAAA,QAAgBF,IAAhB,CAAA;YAAA,OAAOI;UAAP;UAEA,IAAA,QAAAC,CAAAA,YAAAC,gBAAUP,MAAAA,CAAMC,IAAhB,EAAsBO,UAAZR,CAAVM,CAAA,CAAA;YAAAN,OAAA;UAAA;YAAqCA,OAAAK;UAArC,EAHFL;YAAAA;YAAAA;UAAAA;QAAAA,CAAAA,IAAAA;MANF,4BAASS,IAAT;IADFV,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>40, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/range_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    # 各項目について、Rangeを用いて出目の合計の範囲を指定する、表のクラス。\n    #\n    # このクラスを使うと、表の定義を短く書ける。\n    # このクラスを使って表を定義するときは、各項目を以下の形で書く。\n    #\n    #     [出目の合計の範囲, 内容]\n    #\n    # 「出目の合計の範囲」には、Integerを要素とするRangeか、Integerを置ける。\n    #\n    # roll メソッドで表を振ると、出目の合計値と対応する項目が選ばれる。\n    #\n    # @example 表の定義（バトルテックの致命的命中表）\n    #   CRITICAL_TABLE = RangeTable.new(\n    #     '致命的命中表',\n    #     '2D6',\n    #     [\n    #       [2..7,   '致命的命中はなかった'],\n    #       [8..9,   '1箇所の致命的命中'],\n    #       [10..11, '2箇所の致命的命中'],\n    #       [12,     'その部位が吹き飛ぶ（腕、脚、頭）または3箇所の致命的命中（胴）']\n    #     ]\n    #   )\n    #\n    # @example 表を振った結果\n    #   CRITICAL_TABLE.roll(bcdice).formatted\n    #   # 出目の合計が7の場合 ：\"致命的命中表(7) ＞ 致命的命中はなかった\"\n    #   # 出目の合計が8の場合 ：\"致命的命中表(8) ＞ 1箇所の致命的命中\"\n    #   # 出目の合計が9の場合 ：\"致命的命中表(9) ＞ 1箇所の致命的命中\"\n    #   # 出目の合計が10の場合：\"致命的命中表(10) ＞ 2箇所の致命的命中\"\n    class RangeTable\n      # 表を振った結果を表す構造体\n      # @!attribute [rw] sum\n      #   @return [Integer] 出目の合計\n      # @!attribute [rw] values\n      #   @return [Array<Integer>] 出目の配列\n      # @!attribute [rw] content\n      #   @return [Object] 選ばれた項目の内容\n      # @!attribute [rw] formatted\n      #   @return [String] 整形された結果\n      RollResult = Struct.new(:sum, :values, :content, :formatted) do\n        alias_method :to_s, :formatted\n      end\n\n      # 表の項目を表す構造体\n      # @!attribute [rw] range\n      #   @return [Range] 出目の合計の範囲\n      # @!attribute [rw] content\n      #   @return [Object] 内容\n      Item = Struct.new(:range, :content)\n\n      # 項目を選ぶときのダイスロールの方法を表す正規表現\n      DICE_ROLL_METHOD_RE = /\\A(\\d+)D(\\d+)\\z/i.freeze\n\n      # 表を振った結果の整形処理（既定の処理）\n      DEFAULT_FORMATTER = lambda do |table, result|\n        \"\#{table.name}(\#{result.sum}) ＞ \#{result.content}\"\n      end\n\n      # @return [String] 表の名前\n      attr_reader :name\n      # @return [Integer] 振るダイスの個数\n      attr_reader :num_of_dice\n      # @return [Integer] 振るダイスの面数\n      attr_reader :num_of_sides\n\n      class << self\n        def from_i18n(key, locale)\n          table = I18n.t(key, locale: locale)\n          converted_items = table[:items].map do |item|\n            [conv_string_range(item[0]), item[1]]\n          end\n          new(table[:name], table[:type], converted_items)\n        end\n\n        def conv_string_range(x)\n          case x\n          when Integer\n            return x\n          when String\n            return x.include?(\"..\") ? Range.new(*x.split(\"..\", 2).map { |n| Integer(n) }) : Integer(x)\n          end\n\n          raise(\n            TypeError,\n            \"\#{@name}: \#{x} (\#{x.class}) must be a String or an Integer\"\n          )\n        end\n      end\n\n      # 表を初期化する\n      #\n      # ブロックを与えると、独自の結果整形処理を指定できる。\n      # ブロックは振った表（+table+）と振った結果（+result+）を引数として受け取る。\n      #\n      # @param [String] name 表の名前\n      # @param [String] dice_roll_method\n      #   項目を選ぶときのダイスロールの方法（+'1D6'+ など）\n      # @param [Array<(Range, Object)>, Array<(Integer, Object)>] items\n      #   表の項目の配列。[出目の合計の範囲, 内容]\n      # @yieldparam [RangeTable] table 振った表\n      # @yieldparam [RollResult] result 表を振った結果\n      # @raise [ArgumentError] ダイスロール方法が正しい書式で指定されていなかった場合\n      # @raise [TypeError] 範囲の型が正しくなかった場合\n      # @raise [RangeError] 出目の合計の最小値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の最大値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の範囲にずれや重なりがあった場合\n      #\n      # @example 表の定義（バトルテックの致命的命中表）\n      #   CRITICAL_TABLE = RangeTable.new(\n      #     '致命的命中表',\n      #     '2D6',\n      #     [\n      #       [2..7,   '致命的命中はなかった'],\n      #       [8..9,   '1箇所の致命的命中'],\n      #       [10..11, '2箇所の致命的命中'],\n      #       [12,     'その部位が吹き飛ぶ（腕、脚、頭）または3箇所の致命的命中（胴）']\n      #     ]\n      #   )\n      #\n      # @example 独自の結果整形処理を指定する場合\n      #   CRITICAL_TABLE_WITH_FORMATTER = RangeTable.new(\n      #     '致命的命中表',\n      #     '2D6',\n      #     [\n      #       [2..7,   '致命的命中はなかった'],\n      #       [8..9,   '1箇所の致命的命中'],\n      #       [10..11, '2箇所の致命的命中'],\n      #       [12,     'その部位が吹き飛ぶ（腕、脚、頭）または3箇所の致命的命中（胴）']\n      #     ]\n      #   ) do |table, result|\n      #     \"致命的命中発生? ＞ \#{result.sum}[\#{result.values}] ＞ \#{result.content}\"\n      #   end\n      #\n      #   CRITICAL_TABLE_WITH_FORMATTER.roll(bcdice).formatted\n      #   #=> \"致命的命中発生? ＞ 11[5,6] ＞ 2箇所の致命的命中\"\n      def initialize(name, dice_roll_method, items, &formatter)\n        @name = name.freeze\n        @formatter = formatter || DEFAULT_FORMATTER\n\n        m = DICE_ROLL_METHOD_RE.match(dice_roll_method)\n        unless m\n          raise(\n            ArgumentError,\n            \"\#{@name}: invalid dice roll method: \#{dice_roll_method}\"\n          )\n        end\n\n        @num_of_dice = m[1].to_i\n        @num_of_sides = m[2].to_i\n\n        store(items)\n      end\n\n      # 指定された値に対応する項目を返す\n      # @param [Integer] value 値（出目の合計）\n      # @return [Item] 指定された値に対応する項目\n      # @raise [RangeError] 範囲外の値が指定された場合\n      def fetch(value)\n        item = @items.find { |i| i.range.include?(value) }\n        unless item\n          raise RangeError, \"\#{@name}: value is out of range: \#{value}\"\n        end\n\n        return item\n      end\n\n      # 表を振る\n      # @param randomizer [#roll_barabara] ランダマイザ\n      # @return [RollResult] 表を振った結果\n      def roll(randomizer)\n        values = randomizer.roll_barabara(@num_of_dice, @num_of_sides)\n        sum = values.sum()\n\n        result = RollResult.new(sum, values, fetch(sum).content)\n        result.formatted = @formatter[self, result]\n\n        return result\n      end\n\n      private\n\n      # 表の項目を格納する\n      # @param [Array<(Range, Object)>, Array<(Integer, Object)>] items\n      #   表の項目の配列。[出目の合計の範囲, 内容]\n      # @return [self]\n      # @raise [TypeError] 範囲の型が正しくなかった場合\n      # @raise [RangeError] 出目の合計の最小値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の最大値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の範囲にずれや重なりがあった場合\n      def store(items)\n        items_with_range = items.map { |r, c| [coerce_to_int_range(r), c] }\n        sorted_items = items_with_range.sort_by { |r, _| r.min }\n\n        assert_min_sum_is_covered(sorted_items)\n        assert_max_sum_is_covered(sorted_items)\n        assert_no_gap_or_overlap_in_ranges(sorted_items)\n\n        @items = sorted_items\n                 .map { |range, content| Item.new(range, content.freeze).freeze }\n                 .freeze\n\n        self\n      end\n\n      # 引数を強制的に整数を要素とするRangeに変換する\n      # @param [Range, Integer] x 変換対象\n      # @return [Range] 整数を要素とするRange\n      # @raise [TypeError] xの型に対応していなかった場合\n      def coerce_to_int_range(x)\n        case x\n        when Integer\n          return Range.new(x, x)\n        when Range\n          if x.begin.is_a?(Integer) && x.end.is_a?(Integer)\n            return x\n          end\n        end\n\n        raise(\n          TypeError,\n          \"\#{@name}: \#{x} (\#{x.class}) must be an Integer or a Range with Integers \"\n        )\n      end\n\n      # 出目の合計の最小値がカバーされていることを確認する\n      # @param [Array<(Range, Object)>] sorted_items\n      #   ソートされた、項目の配列\n      # @return [self]\n      # @raise [RangeError] 出目の合計の最小値がカバーされていなかった場合\n      def assert_min_sum_is_covered(sorted_items)\n        min_sum = @num_of_dice\n        range = sorted_items.first[0]\n        unless range.include?(min_sum)\n          raise(\n            RangeError,\n            \"\#{@name}: min value (\#{min_sum}) is not covered: \#{range}\"\n          )\n        end\n\n        self\n      end\n\n      # 出目の合計の最大値がカバーされていることを確認する\n      # @param [Array<(Range, Object)>] sorted_items\n      #   ソートされた、項目の配列\n      # @return [self]\n      # @raise [RangeError] 出目の合計の最大値がカバーされていなかった場合\n      def assert_max_sum_is_covered(sorted_items)\n        max_sum = @num_of_dice * @num_of_sides\n        range = sorted_items.last[0]\n        unless range.include?(max_sum)\n          raise(\n            RangeError,\n            \"\#{@name}: max value (\#{max_sum}) is not covered: \#{range}\"\n          )\n        end\n\n        self\n      end\n\n      # 出目の合計の範囲にずれや重なりがないことを確認する\n      # @param [Array<(Range, Object)>] sorted_items\n      #   ソートされた、項目の配列\n      # @return [self]\n      # @raise [RangeError] 出目の合計の範囲にずれや重なりがあった場合\n      def assert_no_gap_or_overlap_in_ranges(sorted_items)\n        sorted_items.each_cons(2) do |i1, i2|\n          r1 = i1[0]\n          r2 = i2[0]\n\n          max1 = r1.max\n          next_of_max1 = max1 + 1\n\n          if r2.include?(max1)\n            raise RangeError, \"\#{@name}: Range overlap: \#{r1} and \#{r2}\"\n          end\n\n          unless r2.include?(next_of_max1)\n            raise RangeError, \"\#{@name}: Range gap: \#{r1} and \#{r2}\"\n          end\n        end\n\n        self\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:RangeTable>", "new", "Struct", "block in <class:RangeTable>", "block (2 levels) in <class:RangeTable>", "self", "alias_method", "freeze", "lambda", "table", "result", "name", "sum", "content", "attr_reader", "from_i18n", "key", "locale", "I18n", "t", "converted_items", "map", "[]", "block in from_i18n", "item", "block (2 levels) in from_i18n", "conv_string_range", "0", "1", "x", "Integer", "$ret_or_1", "String", "include?", "Range", "split", "2", "block in conv_string_range", "n", "block (2 levels) in conv_string_range", "raise", "TypeError", "@name", "class", "initialize", "dice_roll_method", "items", "@formatter", "formatter", "DEFAULT_FORMATTER", "m", "DICE_ROLL_METHOD_RE", "match", "ArgumentError", "@num_of_dice", "to_i", "@num_of_sides", "store", "fetch", "value", "find", "@items", "block in fetch", "i", "block (2 levels) in fetch", "range", "RangeError", "roll", "randomizer", "values", "roll_barabara", "RollResult", "formatted=", "private", "items_with_range", "block in store", "r", "c", "block (2 levels) in store", "coerce_to_int_range", "sorted_items", "sort_by", "_", "min", "assert_min_sum_is_covered", "assert_max_sum_is_covered", "assert_no_gap_or_overlap_in_ranges", "Item", "begin", "is_a?", "end", "min_sum", "first", "max_sum", "*", "last", "each_cons", "block in assert_no_gap_or_overlap_in_ranges", "i1", "i2", "block (2 levels) in assert_no_gap_or_overlap_in_ranges", "r1", "r2", "max1", "max", "next_of_max1", "+"], :mappings=>"AAAAA,gDAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MA8BEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAUE,sCAAmBC,MAANC,YAAMD,OAAAA,EAAAA,CAAK,KAAX,EAAiB,QAAjB,EAA0B,SAA1B,EAAoC,WAA9BA,CAAAA,EAANE,uBAAAA,EAAAC;;UACXA,OAAAC,IAAAC,cAAAA,CAAa,MAAb,EAAoB,WAApBA,CADWH,CAAAA,GAAAA,SAAAA,CAAMF,CAAnB;QASA,gCAAOC,YAAMD,KAAAA,CAAK,OAAX,EAAmB,SAAbA,CAAb;QAGA,+CAAsB,gBAAkBM,QAAAA,CAAAA,CAAxC;QAGA,6CAAoBC,MAAAH,IAAAG,UAAAA,EAAAA,EAAAA,EAAAL,uBAAWM,KAAD,EAAQC,MAAlBP;;UAAW;UAAO;UACpCC,OAAA,EAAA,GAAA,CAAGK,KAAKE,MAAAA,CAAAA,CAAR,CAAA,GAAcP,GAAd,GAAA,CAAiBM,MAAME,KAAAA,CAAAA,CAAvB,CAAA,GAA4BR,MAA5B,GAAA,CAAkCM,MAAMG,SAAAA,CAAAA,CAAxC,EADkBV,CAAAK,CAApB;QAKAH,IAAAS,aAAAA,CAAY,MAAZA;QAEAT,IAAAS,aAAAA,CAAY,aAAZA;QAEAT,IAAAS,aAAAA,CAAY,cAAZA;QAEA;UAAA;;;;AACEC,UAAAA,yBAAAA,qBAAcC,GAAD,EAAMC,MAAnBF;AAAAA,YAAAA;;;YACEN,QAAQS,UAAIC,GAAAA,CAAGH,GAAP,EAAY,oBAAA,UAAQC,MAAR,EAARE;YACZC,kBAA+BC,MAAbZ,KAAKa,OAAAA,CAAC,OAADA,CAAQD,OAAAA,EAAAA,EAAAA,EAAbE,aAAsBC,IAAtBD,EAAAE;;;cAAsB;cACtCA,OAAA,CAACpB,IAAAqB,mBAAAA,CAAkBF,IAAIF,OAAAA,CAACK,CAADL,CAAtBI,CAAD,EAA6BF,IAAIF,OAAAA,CAACM,CAADN,CAAjC,EADgBC,CAAAA,GAAAA,SAAAA,CAAaF;YAG/BN,OAAAV,IAAAJ,KAAAA,CAAIQ,KAAKa,OAAAA,CAAC,MAADA,CAAT,EAAkBb,KAAKa,OAAAA,CAAC,MAADA,CAAvB,EAAgCF,eAAhCnB;UALFc,CAAAA;UAQA,OAAAW,iCAAAA,6BAAsBG,CAAtBH;AAAAA,YAAAA;AAAAA;;;YAEE,IAAA,QAAKI,aAAL,EADAC,CAAAA,YAAKF,CAALE,CACA,CAAA;cACE,OAAOF;YADT,OAEA,IAAA,QAAKG,YAAL,EAlFV,SAkFU,CAAA;cACE,OAAO,CAAA,QAAAH,CAACI,aAAAA,CAAUP,IAAVO,CAAD,CAAA,GAAA,CAAwBhC,MAALiC,WAAKjC,OAAAA,EAAK,MAAiBoB,MAAhBQ,CAACM,OAAAA,CAAOT,IAAR,EAAcU,CAAbD,CAAed,OAAAA,EAAAA,EAAAA,EAAhBgB,aAAwBC,CAAxBD,EAAAE;;;gBAAwB;gBAAGA,OAAAlC,IAAAyB,SAAAA,CAAQQ,CAARR,EAA3BO,CAAAA,GAAAA,SAAAA,CAAgBhB,CAAjB,CAALpB,CAAxB,IAAA,CAAyEI,IAAAyB,SAAAA,CAAQD,CAARC,CAAzE,CAAA;YADT;cAHA;YAGA;YAIAJ,OAAArB,IAAAmC,OAAAA,CACEC,eADF,EAEE,EAAA,GAAA,CAAGC,SAAH,CAAA,GAAShB,IAAT,GAAA,CAAaG,CAAb,CAAA,GAAeH,IAAf,GAAA,CAAmBG,CAACc,OAAAA,CAAAA,CAApB,CAAA,GAA2BjB,kCAF7Bc;UARFd,CAAAA;QATF,4BAASrB,IAAT;;AAsEAuC,QAAAA,0BAAAA,sBAAejC,IAAD,EAAOkC,gBAAP,EAAyBC,KAAvCF;AAAAA,UAAAA;;UAAAA;;;UACEF,YAAQ/B,IAAIJ,QAAAA,CAAAA;UACZwC,iBAAa,CAAA,QAAAhB,CAAAA,YAAAiB,SAAAjB,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAakB,uBAAb,CAAA;UAEbC,IAAIC,yBAAmBC,OAAAA,CAAOP,gBAAPO;UACvB,KAAA,QAAOF,CAAP,CAAA;YACE7C,IAAAmC,OAAAA,CACEa,mBADF,EAEE,EAAA,GAAA,CAAGX,SAAH,CAAA,GAASE,8BAAT,GAAA,CAAuCC,gBAAvC,CAFFL;UADF;UAOAc,mBAAeJ,CAAC5B,OAAAA,CAACM,CAADN,CAAGiC,MAAAA,CAAAA;UACnBC,oBAAgBN,CAAC5B,OAAAA,CAACc,CAADd,CAAGiC,MAAAA,CAAAA;UAEpBX,OAAAvC,IAAAoD,OAAAA,CAAMX,KAANW;QAfFb,CAAAA;;AAsBAc,QAAAA,qBAAAA,iBAAUC,KAAVD;AAAAA,UAAAA;;;UACElC,OAAaoC,MAANC,UAAMD,QAAAA,EAAAA,EAAAA,EAANE,aAAeC,CAAfD;;YAAe;YAAGE,OAAAD,CAACE,OAAAA,CAAAA,CAAMhC,aAAAA,CAAU0B,KAAV1B,EAAzB6B,CAAMF;UACb,KAAA,QAAOpC,IAAP,CAAA;YACEnB,IAAAmC,OAAAA,CAAM0B,gBAAN,EAAkB,EAAA,GAAA,CAAGxB,SAAH,CAAA,GAASgB,2BAAT,GAAA,CAAoCC,KAApC,CAAlBnB;UADF;UAIA,OAAOhB;QANTkC,CAAAA;;AAYAS,QAAAA,oBAAAA,gBAASC,UAATD;AAAAA,UAAAA;;;UACEE,SAASD,UAAUE,eAAAA,CAAehB,gBAAzB,EAAuCE,iBAA7Bc;UACnB1D,MAAMyD,MAAMzD,KAAAA,CAAAA;UAEZF,SAAS6D,gBAAUtE,KAAAA,CAAKW,GAAf,EAAoByD,MAApB,EAA4BhE,IAAAqD,OAAAA,CAAM9C,GAAN8C,CAAU7C,SAAAA,CAAAA,CAA5BZ;UACnBS,MAAM8D,eAAAA,CAAazB,cAAUzB,OAAAA,CAACjB,IAAX,EAAiBK,MAAPY,CAAvBkD;UAEN,OAAO9D;QAPTyD,CAAAA;QAUA9D,IAAAoE,SAAAA,CAAAA;;AAUAhB,QAAAA,qBAAAA,iBAAUX,KAAVW;AAAAA,UAAAA;;;UACEiB,mBAAwBrD,MAALyB,KAAKzB,OAAAA,EAAAA,EAAAA,EAALsD,aAAaC,CAAD,EAAIC,CAAhBF,EAAAG;;;YAAa;YAAG;YAAGA,OAAA,CAACzE,IAAA0E,qBAAAA,CAAoBH,CAApBG,CAAD,EAAyBF,CAAzB,EAAnBF,CAAAA,GAAAA,SAAAA,CAAKtD;UACxB2D,eAA+BC,MAAhBP,gBAAgBO,WAAAA,EAAAA,EAAAA,EAAhBN,aAA4BC,CAAD,EAAIM,CAA/BP;;YAA4B;YAAG;YAAGG,OAAAF,CAACO,KAAAA,CAAAA,EAAnCR,CAAgBM;UAE/B5E,IAAA+E,2BAAAA,CAA0BJ,YAA1BI;UACA/E,IAAAgF,2BAAAA,CAA0BL,YAA1BK;UACAhF,IAAAiF,oCAAAA,CAAmCN,YAAnCM;UAEAzB,aACSxC,MADA2D,YACA3D,OAAAA,EAAAA,EAAAA,EADAsD,aACQV,KAAD,EAAQpD,OADf8D;;YACQ;YAAO;YAASG,OAAAS,UAAItF,KAAAA,CAAKgE,KAAT,EAAgBpD,OAAON,QAAAA,CAAAA,CAAnBN,CAA2BM,QAAAA,CAAAA,EADvDoE,CACAtD,CACAd,QAAAA,CAAAA;UAETkD,OAAApD;QAZFoD,CAAAA;;AAmBAsB,QAAAA,mCAAAA,+BAAwBlD,CAAxBkD;AAAAA,UAAAA;;;UAEE,IAAA,QAAKjD,aAAL,EADAC,CAAAA,YAAKF,CAALE,CACA,CAAA;YACE,OAAOG,WAAKjC,KAAAA,CAAK4B,CAAV,EAAaA,CAAR5B;UADd,OAEA,IAAA,QAAKiC,WAAL,EAxNR,SAwNQ,CAAA;YACE,IAAG,CAAA,QAAAL,CAAC2D,OAAAA,CAAAA,CAAMC,UAAAA,CAAO3D,aAAP2D,CAAP,CAAA,IAAA,CAAA,QAA0B5D,CAAC6D,KAAAA,CAAAA,CAAID,UAAAA,CAAO3D,aAAP2D,CAA/B,CAAA,CAAA,CAAH;cACE,OAAO5D;YADT;UADF;YAHA;UAGA;UAMAkD,OAAA1E,IAAAmC,OAAAA,CACEC,eADF,EAEE,EAAA,GAAA,CAAGC,SAAH,CAAA,GAASqC,IAAT,GAAA,CAAalD,CAAb,CAAA,GAAekD,IAAf,GAAA,CAAmBlD,CAACc,OAAAA,CAAAA,CAApB,CAAA,GAA2BoC,gDAF7BvC;QAVFuC,CAAAA;;AAqBAK,QAAAA,yCAAAA,qCAA8BJ,YAA9BI;AAAAA,UAAAA;;;UACEO,UAAUrC;UACVW,QAAQe,YAAYY,OAAAA,CAAAA,CAAMtE,OAAAA,CAACK,CAADL;UAC1B,KAAA,QAAO2C,KAAKhC,aAAAA,CAAU0D,OAAV1D,CAAZ,CAAA;YACE5B,IAAAmC,OAAAA,CACE0B,gBADF,EAEE,EAAA,GAAA,CAAGxB,SAAH,CAAA,GAAS0C,eAAT,GAAA,CAAwBO,OAAxB,CAAA,GAAgCP,oBAAhC,GAAA,CAAoDnB,KAApD,CAFFzB;UADF;UAOA4C,OAAA/E;QAVF+E,CAAAA;;AAkBAC,QAAAA,yCAAAA,qCAA8BL,YAA9BK;AAAAA,UAAAA;;;UACEQ,UAAuBC,UAAbxC,gBAAawC,EAAEtC,iBAAFsC;UACvB7B,QAAQe,YAAYe,MAAAA,CAAAA,CAAKzE,OAAAA,CAACK,CAADL;UACzB,KAAA,QAAO2C,KAAKhC,aAAAA,CAAU4D,OAAV5D,CAAZ,CAAA;YACE5B,IAAAmC,OAAAA,CACE0B,gBADF,EAEE,EAAA,GAAA,CAAGxB,SAAH,CAAA,GAAS2C,eAAT,GAAA,CAAwBQ,OAAxB,CAAA,GAAgCR,oBAAhC,GAAA,CAAoDpB,KAApD,CAFFzB;UADF;UAOA6C,OAAAhF;QAVFgF,CAAAA;QAkBArF,OAAAsF,kDAAAA,8CAAuCN,YAAvCM;AAAAA,UAAAA;;;UACcU,MAAZhB,YAAYgB,aAAAA,EAAAA,CAAW5D,CAAX4D,CAAAA,EAAZC,aAA8BC,EAAD,EAAKC,EAAlCF,EAAAG;AAAAA;;;YAA8B;YAAI;YAChCC,KAAKH,EAAE5E,OAAAA,CAACK,CAADL;YACPgF,KAAKH,EAAE7E,OAAAA,CAACK,CAADL;YAEPiF,OAAOF,EAAEG,KAAAA,CAAAA;YACTC,eAAoBC,SAALH,IAAKG,EAAE9E,CAAF8E;YAEpB,IAAA,QAAGJ,EAAErE,aAAAA,CAAUsE,IAAVtE,CAAL,CAAA;cACE5B,IAAAmC,OAAAA,CAAM0B,gBAAN,EAAkB,EAAA,GAAA,CAAGxB,SAAH,CAAA,GAAS0D,mBAAT,GAAA,CAA4BC,EAA5B,CAAA,GAA+BD,OAA/B,GAAA,CAAsCE,EAAtC,CAAlB9D;YADF;YAIA,IAAA,QAAO8D,EAAErE,aAAAA,CAAUwE,YAAVxE,CAAT,CAAA;cAzRVmE,OAAA;YAyRU;cACEA,OAAA/F,IAAAmC,OAAAA,CAAM0B,gBAAN,EAAkB,EAAA,GAAA,CAAGxB,SAAH,CAAA,GAAS0D,eAAT,GAAA,CAAwBC,EAAxB,CAAA,GAA2BD,OAA3B,GAAA,CAAkCE,EAAlC,CAAlB9D;YADF,EAXFyD,CAAAA,GAAAA,SAAAA,CAAYD;UAgBZV,OAAAjF;QAjBFiF,CAAAA;MA5OFtF,GAAAA,WAAAA,EAAAA,IAAAA;IA9BFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>247, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/DoubleCross.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire 'bcdice/arithmetic_evaluator'\nrequire 'bcdice/dice_table/range_table'\n\nmodule BCDice\n  module GameSystem\n    class DoubleCross < Base\n      # ゲームシステムの識別子\n      ID = 'DoubleCross'\n\n      # ゲームシステム名\n      NAME = 'ダブルクロス2nd,3rd'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'たふるくろす2'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・判定コマンド（xDX+y@c or xDXc+y）\n        　\"(個数)DX(修正)@(クリティカル値)\" もしくは \"(個数)DX(クリティカル値)(修正)\" で指定します。\n        　修正値も付けられます。\n        　例）10dx　　10dx+5@8（OD tool式)　　5DX7+7-3（疾風怒濤式）\n\n        ・各種表\n        　・感情表（ET）\n        　　ポジティブとネガティブの両方を振って、表になっている側に○を付けて表示します。\n        　　もちろん任意で選ぶ部分は変更して構いません。\n\n        ・D66ダイスあり\n      INFO_MESSAGE_TEXT\n\n      def initialize(command)\n        super(command)\n        @sides_implicit_d = 10\n      end\n\n      register_prefix('\\d+DX', 'ET')\n\n      # 成功判定コマンドのノード\n      class DX\n        include Translate\n\n        # ノードを初期化する\n        # @param [Integer] num ダイス数\n        # @param [Integer] critical_value クリティカル値\n        # @param [Integer] modifier 修正値\n        # @param [Integer] target_value 目標値\n        def initialize(num, critical_value, modifier, target_value)\n          @num = num\n          @critical_value = critical_value\n          @modifier = modifier\n          @target_value = target_value\n\n          @modifier_str = Format.modifier(@modifier)\n          @expression = node_expression()\n\n          @locale = :ja_jp\n        end\n\n        # 成功判定を行う\n        # @param randomizer [Randomizer]\n        # @return [Result] 判定結果\n        def execute(randomizer)\n          if @critical_value < 2\n            return Result.new(\"(\#{@expression}) ＞ \#{translate('DoubleCross.DX.invalid_critical')}\")\n          end\n\n          if @num < 1\n            return Result.failure(\"(\#{@expression}) ＞ \#{translate('DoubleCross.DX.auto_failure')}\")\n          end\n\n          # 出目のグループの配列\n          value_groups = []\n          # 次にダイスロールを行う際のダイス数\n          num_of_dice = @num\n          # 回転数\n          loop_count = 0\n\n          while num_of_dice > 0 && loop_count < CommonCommand::RerollDice::REROLL_LIMIT\n            values = randomizer.roll_barabara(num_of_dice, 10)\n\n            value_group = ValueGroup.new(values, @critical_value)\n            value_groups.push(value_group)\n\n            # 次回はクリティカル発生数と等しい個数のダイスを振る\n            # [3rd ルールブック1 p. 185]\n            num_of_dice = value_group.num_of_critical_occurrences\n\n            loop_count += 1\n          end\n\n          return result(value_groups)\n        end\n\n        private\n\n        # 数式表記を返す\n        # @return [String]\n        def node_expression\n          lhs = \"\#{@num}DX\#{@critical_value}\#{@modifier_str}\"\n\n          return @target_value ? \"\#{lhs}>=\#{@target_value}\" : lhs\n        end\n\n        # 判定結果を返す\n        # @param [Array<ValueGroup>] value_groups 出目のグループの配列\n        # @return [Result]\n        def result(value_groups)\n          r = Result.new\n\n          r.fumble = value_groups[0].values.all?(1)\n\n          sum = value_groups.map(&:max).sum\n          achieved_value = r.fumble? ? 0 : (sum + @modifier)\n\n          # ファンブルかどうかを含む達成値の表記\n          achieved_value_with_if_fumble =\n            if r.fumble?\n              \"\#{achieved_value} (\#{translate('fumble')})\"\n            else\n              achieved_value.to_s\n            end\n\n          r.critical = value_groups.length > 1\n\n          parts = [\n            \"(\#{@expression})\",\n            \"\#{value_groups.join('+')}\#{@modifier_str}\",\n            achieved_value_with_if_fumble\n          ]\n\n          if @target_value\n            # 行為判定成功か？\n            #\n            # ファンブル時は自動失敗、達成値が目標値以上ならば行為判定成功\n            # [3rd ルールブック1 pp. 186-187]\n            success = !r.fumble? && (achieved_value >= @target_value)\n\n            if success\n              r.success = true\n            else\n              r.failure = true\n            end\n\n            compare_result_text = translate(success ? 'success' : 'failure')\n            parts.push(compare_result_text)\n          end\n\n          r.text = parts.join(' ＞ ')\n\n          return r\n        end\n      end\n\n      # 出目のグループを表すクラス\n      class ValueGroup\n        # 出目の配列\n        # @return [Array<Integer>]\n        attr_reader :values\n        # クリティカル値\n        # @return [Integer]\n        attr_reader :critical_value\n\n        # 出目のグループを初期化する\n        # @param [Array<Integer>] values 出目の配列\n        # @param [Integer] critical_value クリティカル値\n        def initialize(values, critical_value)\n          @values = values.sort\n          @critical_value = critical_value\n        end\n\n        # 出目のグループの文字列表記を返す\n        # @return [String]\n        def to_s\n          \"\#{max}[\#{@values.join(',')}]\"\n        end\n\n        # 出目のグループ中の最大値を返す\n        # @return [Integer]\n        #\n        # クリティカル値以上の出目が含まれていた場合は10を返す。\n        # [3rd ルールブック1 pp. 185-186]\n        def max\n          @values.any? { |value| critical?(value) } ? 10 : @values.max\n        end\n\n        # クリティカルの発生数を返す\n        # @return [Integer]\n        def num_of_critical_occurrences\n          @values.count { |value| critical?(value) }\n        end\n\n        private\n\n        # クリティカルが発生したかを返す\n        # @param [Integer] value 出目\n        # @return [Boolean]\n        #\n        # クリティカル値以上の値が出た場合、クリティカルとする。\n        # [3rd ルールブック1 pp. 185-186]\n        def critical?(value)\n          value >= @critical_value\n        end\n      end\n\n      # ダイスボット固有コマンドの処理を行う\n      # @param [String] command コマンド\n      # @return [String] ダイスボット固有コマンドの結果\n      # @return [nil] 無効なコマンドだった場合\n      def eval_game_system_specific_command(command)\n        if (dx = parse_dx(command))\n          return dx.execute(@randomizer)\n        end\n\n        if command == 'ET'\n          return roll_emotion_table()\n        end\n\n        return nil\n      end\n\n      private\n\n      # 成功判定コマンドの構文解析を行う\n      # @param [String] command コマンド文字列\n      # @return [DX, nil]\n      def parse_dx(command)\n        parse_dx_od(command) || parse_dx_shippu_doto(command)\n      end\n\n      # OD Tool式の成功判定コマンドの正規表現マッチ情報からノードを作る\n      # @param command [String]\n      # @return [DX]\n      def parse_dx_od(command)\n        parser = Command::Parser.new(/\\d+DX/, round_type: round_type)\n                                .enable_critical\n                                .restrict_cmp_op_to(nil, :>=)\n        parsed = parser.parse(command)\n        return nil unless parsed\n\n        num = parsed.command.to_i\n        critical_value = parsed.critical || 10\n\n        self.class::DX.new(num, critical_value, parsed.modify_number, parsed.target_number)\n      end\n\n      # 疾風怒濤式の成功判定コマンドの正規表現マッチ情報からノードを作る\n      # @param command [String]\n      # @return [DX]\n      def parse_dx_shippu_doto(command)\n        parser = Command::Parser.new(/\\d+DX\\d*/, round_type: round_type)\n                                .restrict_cmp_op_to(nil, :>=)\n        parsed = parser.parse(command)\n        return nil unless parsed\n\n        num, critical_value = parsed.command.split(\"DX\", 2).map { |x| x&.to_i }\n        critical_value ||= 10\n\n        self.class::DX.new(num, critical_value, parsed.modify_number, parsed.target_number)\n      end\n\n      # 感情表を振る\n      #\n      # ポジティブとネガティブの両方を振って、表になっている側に○を付ける。\n      #\n      # @return [Result]\n      def roll_emotion_table\n        pos_result = self.class::POSITIVE_EMOTION_TABLE.roll(@randomizer)\n        neg_result = self.class::NEGATIVE_EMOTION_TABLE.roll(@randomizer)\n\n        positive = @randomizer.roll_once(2) == 1\n        pos_neg_text =\n          if positive\n            [\"○\#{pos_result.content}\", neg_result.content]\n          else\n            [pos_result.content, \"○\#{neg_result.content}\"]\n          end\n\n        name = translate(\"DoubleCross.ET.name\")\n        output_parts = [\n          \"\#{name}(\#{pos_result.sum}-\#{neg_result.sum})\",\n          pos_neg_text.join(' - ')\n        ]\n\n        return Result.new(output_parts.join(' ＞ '))\n      end\n\n      class << self\n        private\n\n        # @param locale [Symbol]\n        # @return [RangeTable]\n        def positive_emotion_table(locale)\n          DiceTable::RangeTable.new(\n            I18n.translate(\"DoubleCross.ET.positive.name\", locale: locale),\n            \"1D100\",\n            [\n              # [0, '傾倒(けいとう)'],\n              [1..5,    I18n.translate(\"DoubleCross.ET.positive.items.1_5\", locale: locale)],\n              [6..10,   I18n.translate(\"DoubleCross.ET.positive.items.6_10\", locale: locale)],\n              [11..15,  I18n.translate(\"DoubleCross.ET.positive.items.11_15\", locale: locale)],\n              [16..20,  I18n.translate(\"DoubleCross.ET.positive.items.16_20\", locale: locale)],\n              [21..25,  I18n.translate(\"DoubleCross.ET.positive.items.21_25\", locale: locale)],\n              [26..30,  I18n.translate(\"DoubleCross.ET.positive.items.26_30\", locale: locale)],\n              [31..35,  I18n.translate(\"DoubleCross.ET.positive.items.31_35\", locale: locale)],\n              [36..40,  I18n.translate(\"DoubleCross.ET.positive.items.36_40\", locale: locale)],\n              [41..45,  I18n.translate(\"DoubleCross.ET.positive.items.41_45\", locale: locale)],\n              [46..50,  I18n.translate(\"DoubleCross.ET.positive.items.46_50\", locale: locale)],\n              [51..55,  I18n.translate(\"DoubleCross.ET.positive.items.51_55\", locale: locale)],\n              [56..60,  I18n.translate(\"DoubleCross.ET.positive.items.56_60\", locale: locale)],\n              [61..65,  I18n.translate(\"DoubleCross.ET.positive.items.61_65\", locale: locale)],\n              [66..70,  I18n.translate(\"DoubleCross.ET.positive.items.66_70\", locale: locale)],\n              [71..75,  I18n.translate(\"DoubleCross.ET.positive.items.71_75\", locale: locale)],\n              [76..80,  I18n.translate(\"DoubleCross.ET.positive.items.76_80\", locale: locale)],\n              [81..85,  I18n.translate(\"DoubleCross.ET.positive.items.81_85\", locale: locale)],\n              [86..90,  I18n.translate(\"DoubleCross.ET.positive.items.86_90\", locale: locale)],\n              [91..95,  I18n.translate(\"DoubleCross.ET.positive.items.91_95\", locale: locale)],\n              [96..100, I18n.translate(\"DoubleCross.ET.positive.items.96_100\", locale: locale)],\n              # [101, '懐旧(かいきゅう)'],\n              # [102, '任意(にんい)'],\n            ]\n          )\n        end\n\n        # @param locale [Symbol]\n        # @return [RangeTable]\n        def negative_emotion_table(locale)\n          DiceTable::RangeTable.new(\n            I18n.translate(\"DoubleCross.ET.negative.name\", locale: locale),\n            \"1D100\",\n            [\n              # [0, '侮蔑(ぶべつ)'],\n              [1..5,    I18n.translate(\"DoubleCross.ET.negative.items.1_5\", locale: locale)],\n              [6..10,   I18n.translate(\"DoubleCross.ET.negative.items.6_10\", locale: locale)],\n              [11..15,  I18n.translate(\"DoubleCross.ET.negative.items.11_15\", locale: locale)],\n              [16..20,  I18n.translate(\"DoubleCross.ET.negative.items.16_20\", locale: locale)],\n              [21..25,  I18n.translate(\"DoubleCross.ET.negative.items.21_25\", locale: locale)],\n              [26..30,  I18n.translate(\"DoubleCross.ET.negative.items.26_30\", locale: locale)],\n              [31..35,  I18n.translate(\"DoubleCross.ET.negative.items.31_35\", locale: locale)],\n              [36..40,  I18n.translate(\"DoubleCross.ET.negative.items.36_40\", locale: locale)],\n              [41..45,  I18n.translate(\"DoubleCross.ET.negative.items.41_45\", locale: locale)],\n              [46..50,  I18n.translate(\"DoubleCross.ET.negative.items.46_50\", locale: locale)],\n              [51..55,  I18n.translate(\"DoubleCross.ET.negative.items.51_55\", locale: locale)],\n              [56..60,  I18n.translate(\"DoubleCross.ET.negative.items.56_60\", locale: locale)],\n              [61..65,  I18n.translate(\"DoubleCross.ET.negative.items.61_65\", locale: locale)],\n              [66..70,  I18n.translate(\"DoubleCross.ET.negative.items.66_70\", locale: locale)],\n              [71..75,  I18n.translate(\"DoubleCross.ET.negative.items.71_75\", locale: locale)],\n              [76..80,  I18n.translate(\"DoubleCross.ET.negative.items.76_80\", locale: locale)],\n              [81..85,  I18n.translate(\"DoubleCross.ET.negative.items.81_85\", locale: locale)],\n              [86..90,  I18n.translate(\"DoubleCross.ET.negative.items.86_90\", locale: locale)],\n              [91..95,  I18n.translate(\"DoubleCross.ET.negative.items.91_95\", locale: locale)],\n              [96..100, I18n.translate(\"DoubleCross.ET.negative.items.96_100\", locale: locale)],\n              # [101, '無関心(むかんしん)'],\n              # [102, '任意(にんい)'],\n            ]\n          ).freeze\n        end\n      end\n\n      # 感情表（ポジティブ）\n      POSITIVE_EMOTION_TABLE = positive_emotion_table(:ja_jp).freeze\n\n      # 感情表（ネガティブ）\n      NEGATIVE_EMOTION_TABLE = negative_emotion_table(:ja_jp).freeze\n    end\n  end\nend\n"], :names=>["<top (required)>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:DoubleCross>", "initialize", "command", "@sides_implicit_d", "10", "register_prefix", "<class:DX>", "include", "Translate", "num", "critical_value", "modifier", "target_value", "@num", "@critical_value", "@modifier", "@target_value", "@modifier_str", "Format", "@expression", "node_expression", "@locale", "execute", "randomizer", "<", "2", "Result", "new", "translate", "1", "failure", "value_groups", "num_of_dice", "loop_count", "0", "$ret_or_1", ">", "CommonCommand::RerollDice::REROLL_LIMIT", "CommonCommand::RerollDice", "CommonCommand", "values", "roll_barabara", "value_group", "ValueGroup", "push", "num_of_critical_occurrences", "+", "result", "private", "lhs", "r", "fumble=", "[]", "all?", "sum", "map", "to_proc", "achieved_value", "fumble?", "achieved_value_with_if_fumble", "to_s", "critical=", "length", "parts", "join", "success", "!", ">=", "success=", "failure=", "compare_result_text", "text=", "<class:ValueGroup>", "attr_reader", "@values", "sort", "max", "any?", "block in max", "value", "block (2 levels) in max", "critical?", "count", "block in num_of_critical_occurrences", "block (2 levels) in num_of_critical_occurrences", "eval_game_system_specific_command", "dx", "parse_dx", "@randomizer", "roll_emotion_table", "parse_dx_od", "parse_dx_shippu_doto", "parser", "Command::Parser", "Command", "round_type", "enable_critical", "restrict_cmp_op_to", "parsed", "parse", "to_i", "critical", "class::DX", "class", "modify_number", "target_number", "split", "block in parse_dx_shippu_doto", "x", "block (2 levels) in parse_dx_shippu_doto", "pos_result", "class::POSITIVE_EMOTION_TABLE", "roll", "neg_result", "class::NEGATIVE_EMOTION_TABLE", "positive", "roll_once", "==", "pos_neg_text", "content", "name", "output_parts", "positive_emotion_table", "locale", "DiceTable::RangeTable", "DiceTable", "I18n", "5", "6", "11", "15", "16", "20", "21", "25", "26", "30", "31", "35", "36", "40", "41", "45", "46", "50", "51", "55", "56", "60", "61", "65", "66", "70", "71", "75", "76", "80", "81", "85", "86", "90", "91", "95", "96", "100", "negative_emotion_table", "freeze", "Base"], :mappings=>"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"}}, {:offset=>{:line=>509, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/DoubleCross_Korean.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/game_system/DoubleCross\"\n\nmodule BCDice\n  module GameSystem\n    class DoubleCross_Korean < DoubleCross\n      # ゲームシステムの識別子\n      ID = 'DoubleCross:Korean'\n\n      # ゲームシステム名\n      NAME = '더블크로스2nd,3rd'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = '国際化:Korean:더블크로스'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・판정 커맨드（xDX+y@c or xDXc+y）\n        　\"(개수)DX(수정)@(크리티컬치)\" 혹은 \"(개수)DX(크리티컬치)(수정)\" 으로 지정합니다.\n        　수정치도 붙일 수 있습니다.\n        　예）10dx　　10dx+5@8（OD tool식)　　5DX7+7-3（질풍노도식）\n        ・각종표\n        　・감정표（ET）\n        　　포지티브와 네거티브 양쪽을 굴려, 겉으로 나타는 쪽에 O를 붙여 표시합니다.\n        　　물론 임의로 정하는 부분을 변경해도 괜찮습니다.\n        ・D66다이스 있음\n      INFO_MESSAGE_TEXT\n\n      register_prefix_from_super_class()\n\n      def initialize(command)\n        super(command)\n\n        @locale = :ko_kr\n      end\n\n      class DX < DoubleCross::DX\n        # @param (see DoubleCross::DX#initialize)\n        def initialize(num, critical_value, modifier, target_value)\n          super(num, critical_value, modifier, target_value)\n\n          @locale = :ko_kr\n        end\n      end\n\n      # 感情表（ポジティブ）\n      POSITIVE_EMOTION_TABLE = positive_emotion_table(:ko_kr).freeze\n\n      # 感情表（ネガティブ）\n      NEGATIVE_EMOTION_TABLE = negative_emotion_table(:ko_kr).freeze\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:DoubleCross_Korean>", "register_prefix_from_super_class", "initialize", "command", "@locale", "<class:DX>", "num", "critical_value", "modifier", "target_value", "DoubleCross::DX", "DoubleCross", "positive_emotion_table", "freeze", "negative_emotion_table"], :mappings=>"AAAAA,2BAAAA;EAAAA;;;EAEAC,IAAAC,SAAAA,CAAQF,gCAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;;QAEE,8BAAKA,oBAAL;QAGA,gCAAOA,cAAP;QAGA,oCAAWA,kBAAX;QAGA,wCACNA,8BADqB,GAErBA,8DAFqB,GAGrBA,oBAHqB,GAIrBA,gDAJqB,GAKrBA,QALqB,GAMrBA,aANqB,GAOrBA,gDAPqB,GAQrBA,gCARqB,GASrBA,cATM;QAYAJ,IAAAK,kCAAAA,CAAAA;;AAEAC,QAAAA,0BAAAA,sBAAeC,OAAfD;AAAAA,UAAAA;;UAAAA;;UACE,OAAAN,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAMO,OAAN,CAAA,EAAA,IAAA;UAEAD,OAAAE,CAAAA,cAAU,OAAVA;QAHFF,CAAAA;QAMAG;QAAAA;;;UAEEA,OAAAH,0BAAAA,sBAAeI,GAAD,EAAMC,cAAN,EAAsBC,QAAtB,EAAgCC,YAA9CP;AAAAA,YAAAA;;YAAAA;;YACE,OAAAN,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAMU,GAAN,EAAWC,cAAX,EAA2BC,QAA3B,EAAqCC,YAArC,CAAA,EAAA,IAAA;YAEAP,OAAAE,CAAAA,cAAU,OAAVA;UAHFF,CAAAA;QAFFG,GAAAA,WAAAA,EAAWK,IAAAC,iBAAAD,OAAXL;QAUA,kDAAyBT,IAAAgB,wBAAAA,CAAuB,OAAvBA,CAA8BC,QAAAA,CAAAA,CAAvD;QAGAb,OAAA,kDAAyBJ,IAAAkB,wBAAAA,CAAuB,OAAvBA,CAA8BD,QAAAA,CAAAA,CAAvD;MA5CFb,GAAAA,WAAAA,EAA2BW,iBAA3BX;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAJAH;"}}]}