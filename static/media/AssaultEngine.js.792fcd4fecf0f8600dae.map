{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/AssaultEngine.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class AssaultEngine < Base\n      # ゲームシステムの識別子\n      ID = 'AssaultEngine'\n\n      # ゲームシステム名\n      NAME = 'アサルトエンジン'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'あさるとえんしん'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・判定 AEt (t目標値)\n            例: AE45 （目標値45）\n        ・リロール nAEt (nロール前の値、t目標値)\n            例: 76AE45 (目標値45で、76を振り直す)\n\n        ・スワップ（t目標値） エネミーブックP11\n            例: AES45 （目標値45、スワップ表示あり）\n      MESSAGETEXT\n\n      register_prefix('\\d*AE')\n\n      def initialize(command)\n        super(command)\n        @round_type = RoundType::FLOOR # 端数切り捨て\n      end\n\n      def eval_game_system_specific_command(command)\n        cmd = Command::Parser.new(/AES?/, round_type: round_type).enable_prefix_number\n                             .has_suffix_number.parse(command)\n        return nil unless cmd\n\n        target = cmd.suffix_number\n        target = 99 if target >= 100\n\n        if cmd.command.include?(\"AES\") # SWAP初回\n          total = @randomizer.roll_once(100) % 100 # 0-99\n          swap = (total % 10) * 10 + (total / 10).floor\n          r1 = judge(target, total)\n          r2 = judge(target, swap)\n          text = \"(AES\#{format00(target)}) ＞ \#{r1.text} / スワップ\#{r2.text}\"\n          return_result(r1, r2, text)\n        elsif cmd.prefix_number.nil? # 初回ロール\n          total = @randomizer.roll_once(100) % 100 # 0-99\n          judge(target, total).tap do |r|\n            r.text = \"(AE\#{format00(target)}) ＞ \#{r.text}\"\n          end\n        else # リロール\n          now = cmd.prefix_number\n          die = @randomizer.roll_once(10) % 10 # 0-9\n          new1 = judge(target, ((now / 10).floor * 10) + die)    # 1の位を振り直す\n          new2 = judge(target, now % 10 + die * 10)      # 10の位を振り直す\n\n          text = \"(\#{format00(now)}AE\#{format00(target)}) ＞ \#{die} ＞ \#{new1.text} / \#{new2.text}\"\n          return_result(new1, new2, text)\n        end\n      end\n\n      def format00(dice)\n        format(\"%02d\", dice)\n      end\n\n      def return_result(result1, result2, text)\n        if result1.critical? || result2.critical?\n          Result.critical(text)\n        elsif result1.success? || result2.success?\n          Result.success(text)\n        elsif result1.fumble? && result2.fumble?\n          Result.fumble(text)\n        else\n          Result.failure(text)\n        end\n      end\n\n      def judge(target, total)\n        double = (total / 10).floor == (total % 10)\n        total_text = format00(total)\n        if total <= target\n          double ? Result.critical(\"(\#{total_text})クリティカル\") : Result.success(\"(\#{total_text})成功\")\n        else\n          double ? Result.fumble(\"(\#{total_text})ファンブル\") : Result.failure(\"(\#{total_text})失敗\")\n        end\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:AssaultEngine>", "self", "register_prefix", "initialize", "command", "@round_type", "RoundType::FLOOR", "RoundType", "eval_game_system_specific_command", "cmd", "Command::Parser", "Command", "new", "round_type", "enable_prefix_number", "has_suffix_number", "parse", "target", "suffix_number", ">=", "100", "99", "include?", "total", "@randomizer", "roll_once", "%", "swap", "+", "*", "10", "/", "floor", "r1", "judge", "r2", "text", "format00", "return_result", "prefix_number", "nil?", "tap", "block in eval_game_system_specific_command", "r", "block (2 levels) in eval_game_system_specific_command", "text=", "now", "die", "new1", "new2", "dice", "format", "result1", "result2", "critical?", "Result", "critical", "success?", "success", "fumble?", "fumble", "failure", "double$", "==", "total_text", "<=", "Base"], :mappings=>"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"}}]}