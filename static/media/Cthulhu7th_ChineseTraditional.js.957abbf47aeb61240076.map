{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Cthulhu7th_ChineseTraditional.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Cthulhu7th_ChineseTraditional < Base\n      # ゲームシステムの識別子\n      ID = 'Cthulhu7th:ChineseTraditional'\n\n      # ゲームシステム名\n      NAME = '克蘇魯神話第7版'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = '国際化:Chinese Traditional:克蘇魯神話第7版'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・判定　CC(x)<=（目標値）\n        　x：獎勵骰/懲罰骰：Bonus/Penalty Dice (2～－2)。沒有的話可以省略。\n        　致命的失敗：Fumble／失敗：Failure／通常成功：Regular success／\n        　困難成功：Hard success／極限成功：Extreme success／\n        　決定性的成功：Critical success　自動判定。\n        例）CC<=30　CC(2)<=50　CC(-1)<=75\n\n        ・組合判定　(CBR(x,y))\n        　進行目標値 x 和 y 的判定。\n        　例）CBR(50,20)\n\n        ・連射（Full Auto）判定　FAR(w,x,y,z)\n        　w：彈數(1～100）、x：技能値（1～100）、y：故障率\n        　z：獎勵、懲罰骰(-2～2)。可省略。\n        　只計算命中數、貫穿數及剩餘彈藥，不計算傷害。\n        例）FAR(25,70,98)　FAR(50,80,98,-1)\n\n        ・瘋狂表\n        ・實時型　Short／總結型　Longer\n      INFO_MESSAGE_TEXT\n\n      register_prefix('CC', 'CBR', 'FAR')\n\n      def initialize(command)\n        super(command)\n\n        @bonus_dice_range = (-2..2)\n      end\n\n      def eval_game_system_specific_command(command)\n        case command\n        when /CC/i\n          return getCheckResult(command)\n        when /CBR/i\n          return getCombineRoll(command)\n        when /FAR/i\n          return getFullAutoResult(command)\n        end\n\n        return nil\n      end\n\n      def getCheckResult(command)\n        nil unless /^CC([-\\d]+)?<=(\\d+)/i =~ command\n        bonus_dice_count = Regexp.last_match(1).to_i # 獎勵、懲罰骰數量\n        diff = Regexp.last_match(2).to_i\n\n        return \"錯誤。目標值需為1以上。\" if diff <= 0\n\n        unless @bonus_dice_range.include?(bonus_dice_count)\n          return \"錯誤。獎勵、懲罰骰値為\#{@bonus_dice_range.min}～\#{@bonus_dice_range.max}。\"\n        end\n\n        output = \"\"\n        output += \"(1D100<=\#{diff})\"\n        output += \" 獎勵、懲罰骰値[\#{bonus_dice_count}]\"\n\n        units_digit = rollPercentD10\n        total_list = getTotalLists(bonus_dice_count, units_digit)\n\n        total = getTotal(total_list, bonus_dice_count)\n        result_text = getCheckResultText(total, diff)\n\n        output += \" ＞ \#{total_list.join(', ')} ＞ \#{total} ＞ \#{result_text}\"\n\n        return output\n      end\n\n      def rollPercentD10\n        dice = @randomizer.roll_once(10)\n        dice = 0 if dice == 10\n\n        return dice\n      end\n\n      def getTotalLists(bonus_dice_count, units_digit)\n        total_list = []\n\n        tens_digit_count = 1 + bonus_dice_count.abs\n        tens_digit_count.times do\n          bonus = rollPercentD10\n          total = (bonus * 10) + units_digit\n          total = 100 if total == 0\n\n          total_list.push(total)\n        end\n\n        return total_list\n      end\n\n      def getTotal(total_list, bonus_dice_count)\n        return total_list.min if bonus_dice_count >= 0\n\n        return total_list.max\n      end\n\n      def getCheckResultText(total, diff, fumbleable = false)\n        if total <= diff\n          return \"決定性的成功\" if total == 1\n          return \"極限的成功\" if total <= (diff / 5).to_i\n          return \"困難的成功\" if total <= (diff / 2).to_i\n\n          return \"通常成功\"\n        end\n\n        fumble_text = \"致命的失敗\"\n\n        return fumble_text if total == 100\n\n        if total >= 96\n          if diff < 50\n            return fumble_text\n          else\n            return fumble_text if fumbleable\n          end\n        end\n\n        return \"失敗\"\n      end\n\n      def getCombineRoll(command)\n        return nil unless /CBR\\((\\d+),(\\d+)\\)/i =~ command\n\n        diff_1 = Regexp.last_match(1).to_i\n        diff_2 = Regexp.last_match(2).to_i\n\n        total = @randomizer.roll_once(100)\n\n        result_1 = getCheckResultText(total, diff_1)\n        result_2 = getCheckResultText(total, diff_2)\n\n        successList = [\"決定性的成功\", \"極限的成功\", \"困難的成功\", \"通常成功\"]\n\n        succesCount = 0\n        succesCount += 1 if successList.include?(result_1)\n        succesCount += 1 if successList.include?(result_2)\n        debug(\"succesCount\", succesCount)\n\n        rank =\n          if succesCount >= 2\n            \"成功\"\n          elsif succesCount == 1\n            \"部分的成功\"\n          else\n            \"失敗\"\n          end\n\n        return \"(1d100<=\#{diff_1},\#{diff_2}) ＞ \#{total}[\#{result_1},\#{result_2}] ＞ \#{rank}\"\n      end\n\n      def getFullAutoResult(command)\n        return nil unless /^FAR\\((-?\\d+)(,(-?\\d+))(,(-?\\d+))(,(-?\\d+))?\\)/i =~ command\n\n        bullet_count = Regexp.last_match(1).to_i\n        diff = Regexp.last_match(3).to_i\n        broken_number = Regexp.last_match(5).to_i\n        bonus_dice_count = (Regexp.last_match(7) || 0).to_i\n\n        output = \"\"\n\n        # 射擊數不超過（8回*（PC技能値最大値/10））＝72的上限\n        bullet_count_limit = 100\n        if bullet_count > bullet_count_limit\n          output += \"\\n彈藥太多。請改裝填\#{bullet_count_limit}發。\\n\"\n          bullet_count = bullet_count_limit\n        end\n\n        return \"正確裝填數。\" if bullet_count <= 0\n        return \"正確目標值。\" if diff <= 0\n\n        if broken_number < 0\n          output += \"\\n正確故障值。排除獎勵記號。\\n\"\n          broken_number = broken_number.abs\n        end\n\n        unless @bonus_dice_range.include?(bonus_dice_count)\n          return \"\\n錯誤。獎勵、懲罰骰値為\#{@bonus_dice_range.min}～\#{@bonus_dice_range.max}です。\"\n        end\n\n        output += \"獎勵、懲罰骰値[\#{bonus_dice_count}]\"\n        output += rollFullAuto(bullet_count, diff, broken_number, bonus_dice_count)\n\n        return output\n      end\n\n      def rollFullAuto(bullet_count, diff, broken_number, dice_num)\n        output = \"\"\n        loopCount = 0\n\n        counts = {\n          hit_bullet: 0,\n          impale_bullet: 0,\n          bullet: bullet_count,\n        }\n\n        # 難度變更用Lｏｏｐ\n        4.times do |more_difficlty|\n          output += getNextDifficltyMessage(more_difficlty)\n\n          # ペナルティダイスを減らしながらロール用ループ削減獎勵骰時角色用Lｏｏｐ\n          while dice_num >= @bonus_dice_range.min\n\n            loopCount += 1\n            hit_result, total, total_list = getHitResultInfos(dice_num, diff, more_difficlty)\n            output += \"\\n\#{loopCount}次: ＞ \#{total_list.join(', ')} ＞ \#{hit_result}\"\n\n            if total >= broken_number\n              output += \"卡彈\"\n              return getHitResultText(output, counts)\n            end\n\n            hit_type = getHitType(more_difficlty, hit_result)\n            hit_bullet, impale_bullet, lost_bullet = getBulletResults(counts[:bullet], hit_type, diff)\n\n            counts[:hit_bullet] += hit_bullet\n            counts[:impale_bullet] += impale_bullet\n            counts[:bullet] -= lost_bullet\n\n            return getHitResultText(output, counts) if counts[:bullet] <= 0\n\n            dice_num -= 1\n          end\n\n          dice_num += 1\n        end\n\n        return getHitResultText(output, counts)\n      end\n\n      def getHitResultInfos(dice_num, diff, more_difficlty)\n        units_digit = rollPercentD10\n        total_list = getTotalLists(dice_num, units_digit)\n        total = getTotal(total_list, dice_num)\n\n        fumbleable = getFumbleable(more_difficlty)\n        hit_result = getCheckResultText(total, diff, fumbleable)\n\n        return hit_result, total, total_list\n      end\n\n      def getHitResultText(output, counts)\n        return \"\#{output}\\n＞ \#{counts[:hit_bullet]}發射擊命中、\#{counts[:impale_bullet]}射擊貫穿、剩餘彈藥\#{counts[:bullet]}發\"\n      end\n\n      def getHitType(more_difficlty, hit_result)\n        successList, impaleBulletList = getSuccessListImpaleBulletList(more_difficlty)\n\n        return :hit if successList.include?(hit_result)\n        return :impale if impaleBulletList.include?(hit_result)\n\n        return \"\"\n      end\n\n      def getBulletResults(bullet_count, hit_type, diff)\n        bullet_set_count = getSetOfBullet(diff)\n        hit_bullet_count_base = getHitBulletCountBase(diff, bullet_set_count)\n        impale_bullet_count_base = (bullet_set_count / 2.to_f)\n\n        lost_bullet_count = 0\n        hit_bullet_count = 0\n        impale_bullet_count = 0\n\n        if !isLastBulletTurn(bullet_count, bullet_set_count)\n\n          case hit_type\n          when :hit\n            hit_bullet_count = hit_bullet_count_base # 正常命中彈藥數之計算\n\n          when :impale\n            hit_bullet_count = impale_bullet_count_base.floor\n            impale_bullet_count = impale_bullet_count_base.ceil # 貫穿彈藥數之計算\n          end\n\n          lost_bullet_count = bullet_set_count\n\n        else\n\n          case hit_type\n          when :hit\n            hit_bullet_count = getLastHitBulletCount(bullet_count)\n\n          when :impale\n            halfbull = bullet_count / 2.to_f\n\n            hit_bullet_count = halfbull.floor\n            impale_bullet_count = halfbull.ceil\n          end\n\n          lost_bullet_count = bullet_count\n        end\n\n        return hit_bullet_count, impale_bullet_count, lost_bullet_count\n      end\n\n      def getSuccessListImpaleBulletList(more_difficlty)\n        successList = []\n        impaleBulletList = []\n\n        case more_difficlty\n        when 0\n          successList = [\"困難的成功\", \"通常成功\"]\n          impaleBulletList = [\"決定性的成功\", \"極限的成功\"]\n        when 1\n          successList = [\"困難的成功\"]\n          impaleBulletList = [\"決定性的成功\", \"極限的成功\"]\n        when 2\n          successList = []\n          impaleBulletList = [\"決定性的成功\", \"極限的成功\"]\n        when 3\n          successList = [\"決定性的成功\"]\n          impaleBulletList = []\n        end\n\n        return successList, impaleBulletList\n      end\n\n      def getNextDifficltyMessage(more_difficlty)\n        case more_difficlty\n        when 1\n          return \"\\n    變更難度為困難的成功\"\n        when 2\n          return \"\\n    變更難度為極限的成功\"\n        when 3\n          return \"\\n    變更難度為決定性的成功\"\n        end\n\n        return \"\"\n      end\n\n      def getSetOfBullet(diff)\n        bullet_set_count = (diff / 10).to_i\n\n        if (diff >= 1) && (diff < 10)\n          bullet_set_count = 1 # 技能值９以下的最低限度保障處理\n        end\n\n        return bullet_set_count\n      end\n\n      def getHitBulletCountBase(diff, bullet_set_count)\n        hit_bullet_count_base = (bullet_set_count / 2).to_i\n\n        if (diff >= 1) && (diff < 10)\n          hit_bullet_count_base = 1 # 技能值９以下的最低限度保障處理\n        end\n\n        return hit_bullet_count_base\n      end\n\n      def isLastBulletTurn(bullet_count, bullet_set_count)\n        ((bullet_count - bullet_set_count) < 0)\n      end\n\n      def getLastHitBulletCount(bullet_count)\n        # 在剩餘彈藥為１的最低限度保障處理\n        if bullet_count == 1\n          return 1\n        end\n\n        count = (bullet_count / 2.to_f).floor\n        return count\n      end\n\n      def getFumbleable(more_difficlty)\n        # 成功判定時因只擲出４９以下數值，而大失敗率上昇\n        return (more_difficlty >= 1)\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Cthulhu7th_ChineseTraditional>", "self", "register_prefix", "initialize", "command", "@bonus_dice_range", "-2", "2", "eval_game_system_specific_command", "$ret_or_1", "getCheckResult", "getCombineRoll", "getFullAutoResult", "=~", "bonus_dice_count", "Regexp", "last_match", "1", "to_i", "diff", "<=", "0", "include?", "min", "max", "output", "+", "units_digit", "rollPercentD10", "total_list", "getTotalLists", "total", "getTotal", "result_text", "getCheckResultText", "join", "dice", "@randomizer", "roll_once", "10", "tens_digit_count", "abs", "times", "block in getTotalLists", "block (2 levels) in getTotalLists", "bonus", "*", "100", "push", ">=", "fumbleable", "/", "5", "fumble_text", "96", "<", "50", "diff_1", "diff_2", "result_1", "result_2", "successList", "succesCount", "debug", "rank", "bullet_count", "3", "broken_number", "7", "bullet_count_limit", ">", "rollFullAuto", "dice_num", "loopCount", "counts", "4", "block in rollFullAuto", "more_difficlty", "block (2 levels) in rollFullAuto", "getNextDifficltyMessage", "getHitResultInfos", "hit_result", "getHitResultText", "hit_type", "getHitType", "getBulletResults", "[]", "hit_bullet", "impale_bullet", "lost_bullet", "[]=", "-", "getFumbleable", "getSuccessListImpaleBulletList", "impaleBulletList", "bullet_set_count", "getSetOfBullet", "hit_bullet_count_base", "getHitBulletCountBase", "impale_bullet_count_base", "to_f", "lost_bullet_count", "hit_bullet_count", "impale_bullet_count", "isLastBulletTurn", "floor", "ceil", "getLastHitBulletCount", "halfbull", "count", "Base"], :mappings=>"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"}}]}