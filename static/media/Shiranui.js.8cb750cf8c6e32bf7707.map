{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Shiranui.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Shiranui < Base\n      # ゲームシステムの識別子\n      ID = 'Shiranui'\n\n      # ゲームシステム名\n      NAME = '不知火'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'しらぬい'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~HELP\n        ■∞D66ダイスロール\n        「 ∞D66 」または「 ID66 」\n        （ ID は Infinite D の略です）\n\n        □行動力や攻撃力の指定\n        「 x+∞D66 」または「 x+ID66 」\n        （ x は行動力や攻撃力）\n\n        □鬼火の使用について\n        鬼火を使用する∞D66は、ダイスボットでサポートしていません。\n\n        ■おみくじを引く\n        OMKJ\n      HELP\n\n      INFINITE_D66_ROLL_REG = /^((\\d+)\\+)?(∞|I)D66$/i.freeze\n      register_prefix('(\\d+\\+)?(∞|I)D66')\n\n      def initialize(command)\n        super(command)\n\n        @sort_barabara_dice = true\n      end\n\n      def eval_game_system_specific_command(command)\n        if (m = INFINITE_D66_ROLL_REG.match(command))\n          fixed_score = m[1]&.to_i\n          roll_infinite_d66(fixed_score)\n        else\n          roll_tables(command, TABLES)\n        end\n      end\n\n      def roll_infinite_d66(fixed_score)\n        steps = []\n\n        while steps.empty? || steps.last.to_continue_diceroll?\n          # 個別の出目をあつかうので、 roll_d66 ではなく roll_barabara を使う\n          dices = @randomizer.roll_barabara(2, 6).sort\n\n          steps << InifiniteD66Step.new(dices)\n        end\n\n        is_failure = steps.first.score.zero? # 「しくじり」か？\n        total = is_failure ? 0 : steps.sum(&:score) + fixed_score.to_i\n\n        result_text = \"(\#{self.class.make_command_text(fixed_score)})\"\n        result_text += \" ＞ \" + steps.map(&:to_s).join(' ＞ ')\n        if is_failure\n          result_text += \" ＞ しくじり\"\n        else\n          result_text += \" ＞ \" + self.class.score_expression_text(steps, fixed_score) if steps.size > 1 || !fixed_score.nil?\n          result_text += \" ＞ \" + total.to_s\n        end\n\n        Result.new(result_text).tap do |r|\n          r.critical = steps.size > 1\n          r.failure = is_failure\n          r.fumble = is_failure\n        end\n      end\n\n      def self.make_command_text(fixed_score)\n        fixed_score.nil? ? \"∞D66\" : \"\#{fixed_score}+∞D66\"\n      end\n\n      def self.score_expression_text(steps, fixed_score)\n        text = steps.map(&:score).join('+')\n        text = \"\#{fixed_score}+(\#{text})\" unless fixed_score.nil?\n        text\n      end\n\n      class InifiniteD66Step\n        def initialize(dices)\n          @dices = dices.dup.freeze\n        end\n\n        def score\n          if repdigit?\n            # ゾロ目の場合\n\n            digit = @dices.first\n\n            if digit == 1\n              # 1 のゾロ目なら 0 となる\n              0\n            else\n              # 1 以外のゾロ目なら、数字の 10 倍となる\n              digit * 10\n            end\n          else\n            # ゾロ目でない場合は、 D66 様式で値を算出する\n            @dices[0] * 10 + @dices[1]\n          end\n        end\n\n        def repdigit?\n          @dices[0] == @dices[1]\n        end\n\n        # ダイスロールを継続する必要があるか？\n        def to_continue_diceroll?\n          repdigit? && @dices[0] != 1\n        end\n\n        def to_s\n          \"[\#{@dices[0]},\#{@dices[1]}]\"\n        end\n      end\n\n      TABLES = {\n        \"OMKJ\" => DiceTable::Table.new(\n          \"おみくじ\",\n          \"1D6\",\n          [\n            \"大凶［御利益１］――このみくじにあたる人は、凶運から逃れることができぬ者なり。まさに凶運にその身をゆだねてこそ、浮かぶ瀬もあれ。……これより上演中に演者が振る［∞Ｄ66］で初めて⚀⚀が出たら、御利益を使っても振り直しができない。\",\n            \"凶［御利益２］――このみくじにあたる人は、吉兆を逃す定めにある。まさに、天の与うるを取らざれば反ってその咎めを受く。……これより上演中に演者が振る［∞Ｄ66］で初めて⚅⚅が出たら、強制的に１回の振り直しをする。\",\n            \"小吉［御利益３］――このみくじにあたる人は、神使の機嫌を損ねている。神使が何に怒り、何に苛立っているのかは、まさに神のみぞ知る。……神使の機嫌が突然、悪くなる。これより上演中に神使は何かと理由をつけてはシラヌイの前から立ち去ろうとする。\",\n            \"中吉［御利益４］――このみくじにあたる人は、神使の機嫌を良くすることを行った者なり。神使が何に喜び、なぜ機嫌が良いのか、まさに神のみぞ知る。……神使の機嫌がすこぶる良くなる。これより上演中に神使は上機嫌となり、シラヌイに何かにつけて話しかけてくれる。\",\n            \"吉［御利益５］――このみくじにあたる人は、悪運を幸運へと変える道を進む者なり。まさに禍福は糾える縄の如し。……これより上演中に演者が振る［∞Ｄ66］で初めて⚀⚀が出たら、御利益を消費することなく、１回の振り直しをする。\",\n            \"大吉［御利益６］――このみくじにあたる人は、思いもよらぬ幸運に巡り合う者なり。まさに、暗き道より出て、気づけば月の光あり。……これより上演中に演者が振る［∞Ｄ66］で１回だけ、サイコロの出目を⚅⚅に変えてよい。\",\n          ]\n        ),\n      }.freeze\n\n      register_prefix(TABLES.keys)\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Shiranui>", "freeze", "self", "register_prefix", "initialize", "command", "@sort_barabara_dice", "eval_game_system_specific_command", "m", "INFINITE_D66_ROLL_REG", "match", "fixed_score", "[]", "1", "roll_infinite_d66", "roll_tables", "TABLES", "steps", "$ret_or_1", "empty?", "last", "to_continue_diceroll?", "dices", "@randomizer", "roll_barabara", "2", "6", "sort", "<<", "InifiniteD66Step", "new", "is_failure", "first", "score", "zero?", "total", "0", "+", "sum", "to_proc", "to_i", "result_text", "class", "make_command_text", "map", "join", ">", "size", "nil?", "score_expression_text", "to_s", "tap", "Result", "block in roll_infinite_d66", "r", "block (2 levels) in roll_infinite_d66", "critical=", "failure=", "fumble=", "text", "<class:InifiniteD66Step>", "@dices", "dup", "repdigit?", "digit", "*", "10", "==", "!=", "DiceTable::Table", "DiceTable", "keys", "Base"], :mappings=>"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"}}]}