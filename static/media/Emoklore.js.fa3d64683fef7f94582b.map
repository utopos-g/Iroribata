{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Emoklore.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Emoklore < Base\n      # ゲームシステムの識別子\n      ID = \"Emoklore\"\n\n      # ゲームシステム名\n      NAME = \"エモクロアTRPG\"\n\n      # ゲームシステム名の読みがな\n      #\n      # 「ゲームシステム名の読みがなの設定方法」（docs/dicebot_sort_key.md）を参考にして\n      # 設定してください\n      SORT_KEY = \"えもくろあTRPG\"\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・技能値判定（xDM<=y）\n          \"(個数)DM<=(判定値)\"で指定します。\n          ダイスの個数は省略可能で、省略した場合1個になります。\n          例）2DM<=5 DM<=8\n        ・技能値判定（sDAa+z)\n          \"(技能レベル)DA(能力値)+(ダイスボーナス)\"で指定します。\n          ダイスボーナスの個数は省略可能で、省略した場合0になります。\n          技能レベルは1～3の数値、またはベース技能の場合\"b\"が入ります。\n          ダイスの個数は技能レベルとダイスボーナスの個数により決定し、s+z個のダイスを振ります。（s=\"b\"の場合はs=1）\n          判定値はs+aとなります。（s=\"b\"の場合はs=0）\n      MESSAGETEXT\n\n      # ダイスボットで使用するコマンドを配列で列挙する\n      register_prefix('\\d*DM<=', '(B|\\d*)DA')\n\n      CRITICAL_VALUE = 1\n      FUMBLE_VALUE = 10\n\n      # ダイスボット固有コマンドの処理を行う\n      # @param [String] command コマンド\n      # @return [String] ダイスボット固有コマンドの結果\n      # @return [nil] 無効なコマンドだった場合\n      def eval_game_system_specific_command(command)\n        case command\n        when /^\\d*DM<=\\d/\n          roll_dm(command)\n        when /^(B|\\d*)DA\\d+(\\+)?\\d*/\n          roll_da(command)\n        end\n      end\n\n      private\n\n      # ダイスロールの共通処理\n      # @param [Integer] num_dice\n      # @param [Integer] success_threshold\n      # @return [Result]\n      def dice_roll(num_dice, success_threshold)\n        # ダイスを振った結果を配列として取得\n        values = @randomizer.roll_barabara(num_dice, 10)\n        critical = values.count(CRITICAL_VALUE)\n        success = values.count { |num| num <= success_threshold }\n        fumble = values.count(FUMBLE_VALUE)\n\n        # 成功値\n        success_value = critical + success - fumble\n        result = compare_result(success_value)\n\n        result.text = \"[\#{values.join(', ')}] ＞ \#{success_value} ＞ \#{translate('Emoklore.success_count', count: success_value)} \#{result.text}\"\n        return result\n      end\n\n      # @param [Integer] success\n      # @return [Result]\n      def compare_result(success)\n        if success < 0\n          Result.fumble(translate(\"fumble\"))\n        elsif success == 0\n          Result.failure(translate(\"failure\"))\n        elsif success == 1\n          Result.success(translate(\"success\"))\n        elsif success == 2\n          Result.critical(translate(\"Emoklore.double\"))\n        elsif success == 3\n          Result.critical(translate(\"Emoklore.triple\"))\n        elsif success <= 9\n          Result.critical(translate(\"Emoklore.miracle\"))\n        else\n          Result.critical(translate(\"Emoklore.catastrophe\"))\n        end\n      end\n\n      # 技能判定\n      # @param [String] command コマンド\n      # @return [Result, nil] コマンドの結果\n      def roll_dm(command)\n        m = /^(\\d+)?DM<=(\\d+)$/.match(command)\n        unless m\n          return nil\n        end\n\n        num_dice = m[1]&.to_i || 1\n        success_threshold = m[2].to_i\n        if num_dice <= 0\n          return nil\n        end\n\n        # ダイスロール本体\n        result = dice_roll(num_dice, success_threshold)\n\n        result.text = \"(\#{num_dice}DM<=\#{success_threshold}) ＞ \#{result.text}\"\n        return result\n      end\n\n      # 取得技能判定\n      # @param [String] command コマンド\n      # @return [Result, nil] コマンドの結果\n      def roll_da(command)\n        m = /^(B|\\d+)?DA(\\d+)(\\+\\d+)?$/.match(command)\n        unless m\n          return nil\n        end\n\n        bonus = m[3].to_i\n        num_dice = (m[1] == \"B\" ? 1 : (m[1]&.to_i || 1)) + bonus\n        success_threshold = m[1].to_i + m[2].to_i\n\n        result = dice_roll(num_dice, success_threshold)\n\n        result.text = \"(\#{command}) ＞ (\#{num_dice}DM<=\#{success_threshold}) ＞ \#{result.text}\"\n        return result\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Emoklore>", "self", "register_prefix", "1", "10", "eval_game_system_specific_command", "command", "$ret_or_1", "roll_dm", "roll_da", "private", "dice_roll", "num_dice", "success_threshold", "values", "@randomizer", "roll_barabara", "critical", "count", "CRITICAL_VALUE", "success", "block in dice_roll", "num", "block (2 levels) in dice_roll", "<=", "fumble", "FUMBLE_VALUE", "success_value", "-", "+", "result", "compare_result", "text=", "join", "translate", "text", "<", "0", "Result", "failure", "2", "3", "9", "m", "match", "[]", "to_i", "bonus", "Base"], :mappings=>"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"}}]}