{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Ainecadette.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Ainecadette < Base\n      # ゲームシステムの識別子\n      ID = \"Ainecadette\"\n\n      # ゲームシステム名\n      NAME = \"エネカデット\"\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = \"えねかてつと\"\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ■ 判定\n        - 先輩 (AI) 10面ダイスを2つ振って判定します。『有利』なら【3AI】、『不利』なら【1AI】を使います。\n        - 後輩 (CA) 6面ダイスを2つ振って判定します。『有利』なら【3CA】、『不利』なら【1CA】を使います。\n      MESSAGETEXT\n\n      register_prefix('(\\d+)?AI', '(\\d+)?CA')\n\n      def eval_game_system_specific_command(command)\n        roll_action(command)\n      end\n\n      private\n\n      # 成功の目標値\n      SUCCESS_THRESHOLD = 4\n\n      # スペシャルとなる出目\n      SPECIAL_DICE = 6\n\n      def roll_action(command)\n        m = /^(\\d+)?(AI|CA)$/.match(command)\n        return nil unless m\n\n        is_senpai = m[2] == \"AI\"\n\n        times = m[1]&.to_i || 2\n        sides = is_senpai ? 10 : 6\n        return nil if times <= 0\n\n        dice_list = @randomizer.roll_barabara(times, sides)\n        max = dice_list.max\n\n        result =\n          if max <= 1\n            Result.fumble(\"ファンブル（もやもやカウンターを2個獲得）\")\n          elsif dice_list.include?(6)\n            me = is_senpai ? \"先輩\" : \"後輩\"\n            target = is_senpai ? \"後輩\" : \"先輩\"\n            Result.critical(\"スペシャル（絆カウンターを1個獲得し、\#{target}は\#{me}への感情を1つ獲得）\")\n          elsif max >= SUCCESS_THRESHOLD\n            Result.success(\"成功\")\n          else\n            Result.failure(\"失敗\")\n          end\n\n        result.text = \"(\#{command}) ＞ [\#{dice_list.join(',')}] ＞ \#{result.text}\"\n\n        return result\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Ainecadette>", "self", "register_prefix", "eval_game_system_specific_command", "command", "roll_action", "private", "4", "6", "m", "match", "is_senpai", "[]", "2", "==", "times", "$ret_or_1", "1", "sides", "10", "<=", "0", "dice_list", "@randomizer", "roll_barabara", "max", "result", "Result", "fumble", "include?", "me", "target", "critical", ">=", "SUCCESS_THRESHOLD", "success", "failure", "text=", "join", "text", "Base"], :mappings=>"AAAAA,2BAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAEE,8BAAKA,aAAL;QAGA,gCAAOA,QAAP;QAGA,oCAAWA,QAAX;QAGA,wCACNA,QADqB,GAErBA,6DAFqB,GAGrBA,4DAHM;QAMAC,IAAAC,iBAAAA,CAAgBF,WAAhB,EAA4BA,WAA5BE;;AAEAC,QAAAA,iDAAAA,6CAAsCC,OAAtCD;AAAAA,UAAAA;;UACEA,OAAAF,IAAAI,aAAAA,CAAYD,OAAZC;QADFF,CAAAA;QAIAF,IAAAK,SAAAA,CAAAA;QAGA,6CAAoBC,CAApB;QAGA,wCAAeC,CAAf;QAEAR,OAAAK,2BAAAA,uBAAgBD,OAAhBC;AAAAA,UAAAA;;;UACEI,IAAI,iBAAiBC,OAAAA,CAAON,OAAPM;UACrB,KAAA,QAAkBD,CAAlB,CAAA;YAAA,OAAO;UAAP;UAEAE,YAAYF,CAACG,OAAAA,CAACC,CAADD,CAAIE,OAAAA,CAAGT,IAAHS;UAEjBC,QAAQ,CAAA,QAAAC,CAAAA,YAAA,CAAA,KAAAP,CAACG,OAAAA,CAACK,CAADL,CAAD,qCAAA,EAAA,MAAA,CAAA,CAAA,CAAAI,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAcH,CAAd,CAAA;UACRK,QAAQ,CAAA,QAAAP,SAAA,CAAA,GAAA,CAAYQ,EAAZ,IAAA,CAAiBX,CAAjB,CAAA;UACR,IAAA,QAAoBY,OAANL,KAAMK,EAAGC,CAAHD,CAApB,CAAA;YAAA,OAAO;UAAP;UAEAE,YAAYC,eAAWC,eAAAA,CAAeT,KAA1B,EAAiCG,KAAtBM;UACvBC,MAAMH,SAASG,KAAAA,CAAAA;UAEfC,SACE,CAAA,QAAON,OAAJK,GAAIL,EAAGH,CAAHG,CAAP,CAAA,GAAA,CACEO,YAAMC,QAAAA,CAAQvB,uBAARuB,CADR,IAEA,CAAA,QAAMN,SAASO,aAAAA,CAAUrB,CAAVqB,CAAf,CAAA,GAAA,CACExB,CAAAyB,CAAAA,KAAK,CAAA,QAAAnB,SAAA,CAAA,GAAA,CAAYN,IAAZ,IAAA,CAAmBA,IAAnB,CAAA,CAALyB,GACAC,CAAAA,SAAS,CAAA,QAAApB,SAAA,CAAA,GAAA,CAAYN,IAAZ,IAAA,CAAmBA,IAAnB,CAAA,CAAT0B,GACAJ,YAAMK,UAAAA,CAAW3B,qBAAD,GAAA,CAAsB0B,MAAtB,CAAA,GAA6B1B,GAA7B,GAAA,CAAgCyB,EAAhC,CAAA,GAAmCzB,YAA7C2B,CAFN3B,CADF,IAIA,CAAA,QAAU4B,OAAJR,GAAIQ,EAAGC,uBAAHD,CAAV,CAAA,GAAA,CACEN,YAAMQ,SAAAA,CAAS9B,IAAT8B,CADR,IAAA,CAGER,YAAMS,SAAAA,CAAS/B,IAAT+B,CAHR,CAAA,CAJA,CAFA;UAYFV,MAAMW,UAAAA,CAAShC,GAAD,GAAA,CAAID,OAAJ,CAAA,GAAYC,OAAZ,GAAA,CAAmBiB,SAASgB,MAAAA,CAAMjC,GAANiC,CAA5B,CAAA,GAAuCjC,MAAvC,GAAA,CAA6CqB,MAAMa,MAAAA,CAAAA,CAAnD,CAARF;UAEN,OAAOX;QA5BTrB,CAAAA;MA/BFL,GAAAA,WAAAA,EAAoBwC,UAApBxC;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}]}