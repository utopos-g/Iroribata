{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["racc/parser.rb"], :sourcesContent=>["# Opal port of racc/parser.rb.\n#\n# Original license:\n#\n# frozen_string_literal: false\n#--\n# $originalId: parser.rb,v 1.8 2006/07/06 11:42:07 aamine Exp $\n#\n# Copyright (c) 1999-2006 Minero Aoki\n#\n# This program is free software.\n# You can distribute/modify this program under the same terms of ruby.\n#\n# As a special exception, when this code is copied by Racc\n# into a Racc output file, you may use that output file\n# without restriction.\n#++\n\nmodule Racc\n  class ParseError < StandardError; end\nend\nunless defined?(::ParseError)\n  ParseError = Racc::ParseError\nend\n\n# Racc is a LALR(1) parser generator.\n# It is written in Ruby itself, and generates Ruby programs.\n#\n# == Command-line Reference\n#\n#     racc [-o<var>filename</var>] [--output-file=<var>filename</var>]\n#          [-e<var>rubypath</var>] [--embedded=<var>rubypath</var>]\n#          [-v] [--verbose]\n#          [-O<var>filename</var>] [--log-file=<var>filename</var>]\n#          [-g] [--debug]\n#          [-E] [--embedded]\n#          [-l] [--no-line-convert]\n#          [-c] [--line-convert-all]\n#          [-a] [--no-omit-actions]\n#          [-C] [--check-only]\n#          [-S] [--output-status]\n#          [--version] [--copyright] [--help] <var>grammarfile</var>\n#\n# [+filename+]\n#   Racc grammar file. Any extension is permitted.\n# [-o+outfile+, --output-file=+outfile+]\n#   A filename for output. default is <+filename+>.tab.rb\n# [-O+filename+, --log-file=+filename+]\n#   Place logging output in file +filename+.\n#   Default log file name is <+filename+>.output.\n# [-e+rubypath+, --executable=+rubypath+]\n#   output executable file(mode 755). where +path+ is the Ruby interpreter.\n# [-v, --verbose]\n#   verbose mode. create +filename+.output file, like yacc's y.output file.\n# [-g, --debug]\n#   add debug code to parser class. To display debugging information,\n#   use this '-g' option and set @yydebug true in parser class.\n# [-E, --embedded]\n#   Output parser which doesn't need runtime files (racc/parser.rb).\n# [-C, --check-only]\n#   Check syntax of racc grammar file and quit.\n# [-S, --output-status]\n#   Print messages time to time while compiling.\n# [-l, --no-line-convert]\n#   turns off line number converting.\n# [-c, --line-convert-all]\n#   Convert line number of actions, inner, header and footer.\n# [-a, --no-omit-actions]\n#   Call all actions, even if an action is empty.\n# [--version]\n#   print Racc version and quit.\n# [--copyright]\n#   Print copyright and quit.\n# [--help]\n#   Print usage and quit.\n#\n# == Generating Parser Using Racc\n#\n# To compile Racc grammar file, simply type:\n#\n#   $ racc parse.y\n#\n# This creates Ruby script file \"parse.tab.y\". The -o option can change the output filename.\n#\n# == Writing A Racc Grammar File\n#\n# If you want your own parser, you have to write a grammar file.\n# A grammar file contains the name of your parser class, grammar for the parser,\n# user code, and anything else.\n# When writing a grammar file, yacc's knowledge is helpful.\n# If you have not used yacc before, Racc is not too difficult.\n#\n# Here's an example Racc grammar file.\n#\n#   class Calcparser\n#   rule\n#     target: exp { print val[0] }\n#\n#     exp: exp '+' exp\n#        | exp '*' exp\n#        | '(' exp ')'\n#        | NUMBER\n#   end\n#\n# Racc grammar files resemble yacc files.\n# But (of course), this is Ruby code.\n# yacc's $$ is the 'result', $0, $1... is\n# an array called 'val', and $-1, $-2... is an array called '_values'.\n#\n# See the {Grammar File Reference}[rdoc-ref:lib/racc/rdoc/grammar.en.rdoc] for\n# more information on grammar files.\n#\n# == Parser\n#\n# Then you must prepare the parse entry method. There are two types of\n# parse methods in Racc, Racc::Parser#do_parse and Racc::Parser#yyparse\n#\n# Racc::Parser#do_parse is simple.\n#\n# It's yyparse() of yacc, and Racc::Parser#next_token is yylex().\n# This method must returns an array like [TOKENSYMBOL, ITS_VALUE].\n# EOF is [false, false].\n# (TOKENSYMBOL is a Ruby symbol (taken from String#intern) by default.\n# If you want to change this, see the grammar reference.\n#\n# Racc::Parser#yyparse is little complicated, but useful.\n# It does not use Racc::Parser#next_token, instead it gets tokens from any iterator.\n#\n# For example, <code>yyparse(obj, :scan)</code> causes\n# calling +obj#scan+, and you can return tokens by yielding them from +obj#scan+.\n#\n# == Debugging\n#\n# When debugging, \"-v\" or/and the \"-g\" option is helpful.\n#\n# \"-v\" creates verbose log file (.output).\n# \"-g\" creates a \"Verbose Parser\".\n# Verbose Parser prints the internal status when parsing.\n# But it's _not_ automatic.\n# You must use -g option and set +@yydebug+ to +true+ in order to get output.\n# -g option only creates the verbose parser.\n#\n# === Racc reported syntax error.\n#\n# Isn't there too many \"end\"?\n# grammar of racc file is changed in v0.10.\n#\n# Racc does not use '%' mark, while yacc uses huge number of '%' marks..\n#\n# === Racc reported \"XXXX conflicts\".\n#\n# Try \"racc -v xxxx.y\".\n# It causes producing racc's internal log file, xxxx.output.\n#\n# === Generated parsers does not work correctly\n#\n# Try \"racc -g xxxx.y\".\n# This command let racc generate \"debugging parser\".\n# Then set @yydebug=true in your parser.\n# It produces a working log of your parser.\n#\n# == Re-distributing Racc runtime\n#\n# A parser, which is created by Racc, requires the Racc runtime module;\n# racc/parser.rb.\n#\n# Ruby 1.8.x comes with Racc runtime module,\n# you need NOT distribute Racc runtime files.\n#\n# If you want to include the Racc runtime module with your parser.\n# This can be done by using '-E' option:\n#\n#   $ racc -E -omyparser.rb myparser.y\n#\n# This command creates myparser.rb which `includes' Racc runtime.\n# Only you must do is to distribute your parser file (myparser.rb).\n#\n# Note: parser.rb is LGPL, but your parser is not.\n# Your own parser is completely yours.\nmodule Racc\n\n  unless defined?(Racc_No_Extensions)\n    Racc_No_Extensions = false # :nodoc:\n  end\n\n  class Parser\n\n    Racc_Runtime_Version = '1.4.6'\n    Racc_Runtime_Revision = %w$originalRevision: 1.8 $[1]\n\n    Racc_Runtime_Core_Version_R = '1.4.6'\n    Racc_Runtime_Core_Revision_R = %w$originalRevision: 1.8 $[1]\n    # DISABLED: opal has no racc/cparse\n    # begin\n    #   require 'racc/cparse'\n    # # Racc_Runtime_Core_Version_C  = (defined in extension)\n    #   Racc_Runtime_Core_Revision_C = Racc_Runtime_Core_Id_C.split[2]\n    #   unless new.respond_to?(:_racc_do_parse_c, true)\n    #     raise LoadError, 'old cparse.so'\n    #   end\n    #   if Racc_No_Extensions\n    #     raise LoadError, 'selecting ruby version of racc runtime core'\n    #   end\n    #\n    #   Racc_Main_Parsing_Routine    = :_racc_do_parse_c # :nodoc:\n    #   Racc_YY_Parse_Method         = :_racc_yyparse_c # :nodoc:\n    #   Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C # :nodoc:\n    #   Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_C # :nodoc:\n    #   Racc_Runtime_Type            = 'c' # :nodoc:\n    # rescue LoadError\n      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb\n      Racc_YY_Parse_Method         = :_racc_yyparse_rb\n      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R\n      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_R\n      Racc_Runtime_Type            = 'ruby'\n    # end\n\n    def Parser.racc_runtime_type # :nodoc:\n      Racc_Runtime_Type\n    end\n\n    def _racc_setup\n      @yydebug = false unless self.class::Racc_debug_parser\n      @yydebug = false unless defined?(@yydebug)\n      if @yydebug\n        @racc_debug_out = $stderr unless defined?(@racc_debug_out)\n        @racc_debug_out ||= $stderr\n      end\n      arg = self.class::Racc_arg\n      arg[13] = true if arg.size < 14\n      arg\n    end\n\n    def _racc_init_sysvars\n      @racc_state  = [0]\n      @racc_tstack = []\n      @racc_vstack = []\n\n      @racc_t = nil\n      @racc_val = nil\n\n      @racc_read_next = true\n\n      @racc_user_yyerror = false\n      @racc_error_status = 0\n    end\n\n    # The entry point of the parser. This method is used with #next_token.\n    # If Racc wants to get token (and its value), calls next_token.\n    #\n    # Example:\n    #     def parse\n    #       @q = [[1,1],\n    #             [2,2],\n    #             [3,3],\n    #             [false, '$']]\n    #       do_parse\n    #     end\n    #\n    #     def next_token\n    #       @q.shift\n    #     end\n    def do_parse\n      __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)\n    end\n\n    # The method to fetch next token.\n    # If you use #do_parse method, you must implement #next_token.\n    #\n    # The format of return value is [TOKEN_SYMBOL, VALUE].\n    # +token-symbol+ is represented by Ruby's symbol by default, e.g. :IDENT\n    # for 'IDENT'.  \";\" (String) for ';'.\n    #\n    # The final symbol (End of file) must be false.\n    def next_token\n      raise NotImplementedError, \"\#{self.class}\\#next_token is not defined\"\n    end\n\n    def _racc_do_parse_rb(arg, in_debug)\n      action_table, action_check, action_default, action_pointer,\n      _,            _,            _,              _,\n      _,            _,            token_table,    _,\n      _,            _,            * = arg\n\n      _racc_init_sysvars\n      tok = act = i = nil\n\n      catch(:racc_end_parse) {\n        while true\n          if i = action_pointer[@racc_state[-1]]\n            if @racc_read_next\n              if @racc_t != 0   # not EOF\n                tok, @racc_val = next_token()\n                unless tok      # EOF\n                  @racc_t = 0\n                else\n                  @racc_t = (token_table[tok] or 1)   # error token\n                end\n                racc_read_token(@racc_t, tok, @racc_val) if @yydebug\n                @racc_read_next = false\n              end\n            end\n            i += @racc_t\n            unless i >= 0 and\n                   act = action_table[i] and\n                   action_check[i] == @racc_state[-1]\n              act = action_default[@racc_state[-1]]\n            end\n          else\n            act = action_default[@racc_state[-1]]\n          end\n          while act = _racc_evalact(act, arg)\n            ;\n          end\n        end\n      }\n    end\n\n    # Another entry point for the parser.\n    # If you use this method, you must implement RECEIVER#METHOD_ID method.\n    #\n    # RECEIVER#METHOD_ID is a method to get next token.\n    # It must 'yield' the token, which format is [TOKEN-SYMBOL, VALUE].\n    def yyparse(recv, mid)\n      __send__(Racc_YY_Parse_Method, recv, mid, _racc_setup(), true)\n    end\n\n    def _racc_yyparse_rb(recv, mid, arg, c_debug)\n      action_table, action_check, action_default, action_pointer,\n      _,             _,            _,              _,\n      _,            _,            token_table,    _,\n      _,            _,            * = arg\n\n      _racc_init_sysvars\n      act = nil\n      i = nil\n\n      catch(:racc_end_parse) {\n        until i = action_pointer[@racc_state[-1]]\n          while act = _racc_evalact(action_default[@racc_state[-1]], arg)\n            ;\n          end\n        end\n        recv.__send__(mid) do |tok, val|\n          unless tok\n            @racc_t = 0\n          else\n            @racc_t = (token_table[tok] or 1)   # error token\n          end\n          @racc_val = val\n          @racc_read_next = false\n\n          i += @racc_t\n          unless i >= 0 and\n                 act = action_table[i] and\n                 action_check[i] == @racc_state[-1]\n            act = action_default[@racc_state[-1]]\n          end\n          while act = _racc_evalact(act, arg)\n            ;\n          end\n\n          while not(i = action_pointer[@racc_state[-1]]) or\n                not @racc_read_next or\n                @racc_t == 0   # $\n            unless i and i += @racc_t and\n                   i >= 0 and\n                   act = action_table[i] and\n                   action_check[i] == @racc_state[-1]\n              act = action_default[@racc_state[-1]]\n            end\n            while act = _racc_evalact(act, arg)\n              ;\n            end\n          end\n        end\n      }\n    end\n\n    ###\n    ### common\n    ###\n\n    def _racc_evalact(act, arg)\n      action_table, action_check, _, action_pointer,\n      _,   _, _, _,\n      _,   _, _, shift_n,  reduce_n,\n      _,   _, * = arg\n\n      if act > 0 and act < shift_n\n        #\n        # shift\n        #\n        if @racc_error_status > 0\n          @racc_error_status -= 1 unless @racc_t == 1   # error token\n        end\n        @racc_vstack.push @racc_val\n        @racc_state.push act\n        @racc_read_next = true\n        if @yydebug\n          @racc_tstack.push @racc_t\n          racc_shift @racc_t, @racc_tstack, @racc_vstack\n        end\n\n      elsif act < 0 and act > -reduce_n\n        #\n        # reduce\n        #\n        code = catch(:racc_jump) {\n          @racc_state.push _racc_do_reduce(arg, act)\n          false\n        }\n        if code\n          case code\n          when 1 # yyerror\n            @racc_user_yyerror = true   # user_yyerror\n            return -reduce_n\n          when 2 # yyaccept\n            return shift_n\n          else\n            raise '[Racc Bug] unknown jump code'\n          end\n        end\n\n      elsif act == shift_n\n        #\n        # accept\n        #\n        racc_accept if @yydebug\n        throw :racc_end_parse, @racc_vstack[0]\n\n      elsif act == -reduce_n\n        #\n        # error\n        #\n        case @racc_error_status\n        when 0\n          unless arg[21]    # user_yyerror\n            on_error @racc_t, @racc_val, @racc_vstack\n          end\n        when 3\n          if @racc_t == 0   # is $\n            throw :racc_end_parse, nil\n          end\n          @racc_read_next = true\n        end\n        @racc_user_yyerror = false\n        @racc_error_status = 3\n        while true\n          if i = action_pointer[@racc_state[-1]]\n            i += 1   # error token\n            if  i >= 0 and\n                (act = action_table[i]) and\n                action_check[i] == @racc_state[-1]\n              break\n            end\n          end\n          throw :racc_end_parse, nil if @racc_state.size <= 1\n          @racc_state.pop\n          @racc_vstack.pop\n          if @yydebug\n            @racc_tstack.pop\n            racc_e_pop @racc_state, @racc_tstack, @racc_vstack\n          end\n        end\n        return act\n\n      else\n        raise \"[Racc Bug] unknown action \#{act.inspect}\"\n      end\n\n      racc_next_state(@racc_state[-1], @racc_state) if @yydebug\n\n      nil\n    end\n\n    def _racc_do_reduce(arg, act)\n      _, _, _, _,\n      goto_table,   goto_check,   goto_default,   goto_pointer,\n      nt_base,      reduce_table, _,    _,\n      _,     use_result,   * = arg\n      state = @racc_state\n      vstack = @racc_vstack\n      tstack = @racc_tstack\n\n      i = act * -3\n      len       = reduce_table[i]\n      reduce_to = reduce_table[i+1]\n      method_id = reduce_table[i+2]\n      void_array = []\n\n      tmp_t = tstack[-len, len] if @yydebug\n      tmp_v = vstack[-len, len]\n      tstack[-len, len] = void_array if @yydebug\n      vstack[-len, len] = void_array\n      state[-len, len]  = void_array\n\n      # tstack must be updated AFTER method call\n      if use_result\n        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])\n      else\n        vstack.push __send__(method_id, tmp_v, vstack)\n      end\n      tstack.push reduce_to\n\n      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug\n\n      k1 = reduce_to - nt_base\n      if i = goto_pointer[k1]\n        i += state[-1]\n        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1\n          return curstate\n        end\n      end\n      goto_default[k1]\n    end\n\n    # This method is called when a parse error is found.\n    #\n    # ERROR_TOKEN_ID is an internal ID of token which caused error.\n    # You can get string representation of this ID by calling\n    # #token_to_str.\n    #\n    # ERROR_VALUE is a value of error token.\n    #\n    # value_stack is a stack of symbol values.\n    # DO NOT MODIFY this object.\n    #\n    # This method raises ParseError by default.\n    #\n    # If this method returns, parsers enter \"error recovering mode\".\n    def on_error(t, val, vstack)\n      raise ParseError, sprintf(\"\\nparse error on value %s (%s)\",\n                                val.inspect, token_to_str(t) || '?')\n    end\n\n    # Enter error recovering mode.\n    # This method does not call #on_error.\n    def yyerror\n      throw :racc_jump, 1\n    end\n\n    # Exit parser.\n    # Return value is Symbol_Value_Stack[0].\n    def yyaccept\n      throw :racc_jump, 2\n    end\n\n    # Leave error recovering mode.\n    def yyerrok\n      @racc_error_status = 0\n    end\n\n    # For debugging output\n    def racc_read_token(t, tok, val)\n      @racc_debug_out.print 'read    '\n      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '\n      @racc_debug_out.puts val.inspect\n      @racc_debug_out.puts\n    end\n\n    def racc_shift(tok, tstack, vstack)\n      @racc_debug_out.puts \"shift   \#{racc_token2str tok}\"\n      racc_print_stacks tstack, vstack\n      @racc_debug_out.puts\n    end\n\n    def racc_reduce(toks, sim, tstack, vstack)\n      out = @racc_debug_out\n      out.print 'reduce '\n      if toks.empty?\n        out.print ' <none>'\n      else\n        toks.each {|t| out.print ' ', racc_token2str(t) }\n      end\n      out.puts \" --> \#{racc_token2str(sim)}\"\n\n      racc_print_stacks tstack, vstack\n      @racc_debug_out.puts\n    end\n\n    def racc_accept\n      @racc_debug_out.puts 'accept'\n      @racc_debug_out.puts\n    end\n\n    def racc_e_pop(state, tstack, vstack)\n      @racc_debug_out.puts 'error recovering mode: pop token'\n      racc_print_states state\n      racc_print_stacks tstack, vstack\n      @racc_debug_out.puts\n    end\n\n    def racc_next_state(curstate, state)\n      @racc_debug_out.puts  \"goto    \#{curstate}\"\n      racc_print_states state\n      @racc_debug_out.puts\n    end\n\n    def racc_print_stacks(t, v)\n      out = @racc_debug_out\n      out.print '        ['\n      t.each_index do |i|\n        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'\n      end\n      out.puts ' ]'\n    end\n\n    def racc_print_states(s)\n      out = @racc_debug_out\n      out.print '        ['\n      s.each {|st| out.print ' ', st }\n      out.puts ' ]'\n    end\n\n    def racc_token2str(tok)\n      self.class::Racc_token_to_s_table[tok] or\n          raise \"[Racc Bug] can't convert token \#{tok} to string\"\n    end\n\n    # Convert internal ID of token symbol to the string.\n    def token_to_str(t)\n      self.class::Racc_token_to_s_table[t]\n    end\n\n  end\n\nend\n"], :names=>["<top (required)>", "<module:Racc>", "<class:ParseError>", "StandardError", "Racc::ParseError", "Racc", "<class:Parser>", "[]", "1", "Racc_Runtime_Core_Version_R", "Racc_Runtime_Core_Revision_R", "racc_runtime_type", "Parser", "Racc_Runtime_Type", "_racc_setup", "class::Racc_debug_parser", "self", "class", "@yydebug", "@racc_debug_out", "$stderr", "$ret_or_1", "arg", "class::Racc_arg", "<", "size", "14", "[]=", "13", "_racc_init_sysvars", "@racc_state", "0", "@racc_tstack", "@racc_vstack", "@racc_t", "@racc_val", "@racc_read_next", "@racc_user_yyerror", "@racc_error_status", "do_parse", "__send__", "Racc_Main_Parsing_Routine", "next_token", "raise", "NotImplementedError", "_racc_do_parse_rb", "in_debug", "action_table", "action_check", "action_default", "action_pointer", "_", "token_table", "tok", "act", "i", "catch", "block in _racc_do_parse_rb", "block (2 levels) in _racc_do_parse_rb", "-1", "racc_read_token", "+", ">=", "_racc_evalact", "yyparse", "recv", "mid", "Racc_YY_Parse_Method", "_racc_yyparse_rb", "c_debug", "block in _racc_yyparse_rb", "block (2 levels) in _racc_yyparse_rb", "val", "block (3 levels) in _racc_yyparse_rb", "$ret_or_2", "!", "==", "shift_n", "reduce_n", ">", "-", "push", "racc_shift", "-@", "code", "block in _racc_evalact", "block (2 levels) in _racc_evalact", "_racc_do_reduce", "2", "racc_accept", "throw", "21", "on_error", "3", "<=", "pop", "racc_e_pop", "inspect", "racc_next_state", "goto_table", "goto_check", "goto_default", "goto_pointer", "nt_base", "reduce_table", "use_result", "state", "vstack", "tstack", "*", "-3", "len", "reduce_to", "method_id", "void_array", "tmp_t", "tmp_v", "racc_reduce", "k1", "curstate", "t", "ParseError", "sprintf", "token_to_str", "yyerror", "yyaccept", "yyerrok", "print", "racc_token2str", "puts", "racc_print_stacks", "toks", "sim", "out", "empty?", "each", "block in racc_reduce", "block (2 levels) in racc_reduce", "racc_print_states", "v", "each_index", "block in racc_print_stacks", "block (2 levels) in racc_print_stacks", "s", "block in racc_print_states", "st", "block (2 levels) in racc_print_states", "class::Racc_token_to_s_table"], :mappings=>"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"}}, {:offset=>{:line=>468, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["./strscan.rb"], :sourcesContent=>["class StringScanner\n  attr_reader :pos, :matched\n\n  def initialize(string)\n    @string  = string\n    @pos     = 0\n    @matched = nil\n    @working = string\n    @match   = []\n  end\n\n  attr_reader :string\n\n  def beginning_of_line?\n    `\#{@pos} === 0 || \#{@string}.charAt(\#{@pos} - 1) === \"\\n\"`\n  end\n\n  def scan(pattern)\n    pattern = anchor(pattern)\n\n    %x{\n      var result = pattern.exec(\#{@working});\n\n      if (result == null) {\n        return \#{@matched} = nil;\n      }\n      \#{@prev_pos} = \#{@pos};\n      \#{@pos}     += result[0].length;\n      \#{@working}  = \#{@working}.substring(result[0].length);\n      \#{@matched}  = result[0];\n      \#{@match}    = result;\n\n      return result[0];\n    }\n  end\n\n  def scan_until(pattern)\n    pattern = anchor(pattern)\n\n    %x{\n      var working = \#{@working}\n\n      for(var i = 0; working.length != i; ++i) {\n        var result  = pattern.exec(working.substr(i));\n        if (result !== null) {\n          var matched_size = i + result[0].length\n          var matched = working.substr(0, matched_size)\n\n          \#{@matched}  = result[0]\n          \#{@match}  = result\n          \#{@prev_pos} = \#{@pos} + i; // Position of first character of matched\n          \#{@pos} += matched_size // Position one after last character of matched\n          \#{@working} = working.substr(matched_size)\n\n          return matched\n        }\n      }\n      return \#{@matched} = nil;\n    }\n  end\n\n  def [](idx)\n    if @match.empty?\n      return nil\n    end\n    case idx\n    when Symbol\n      idx = idx.to_s\n    when String\n      # noop\n    else\n      idx = ::Opal.coerce_to!(idx, Integer, :to_int)\n    end\n    %x{\n      var match = \#{@match};\n\n      if (idx < 0) {\n        idx += match.length;\n      }\n\n      if (idx < 0 || idx >= match.length) {\n        return nil;\n      }\n\n      if (match[idx] == null) {\n        return nil;\n      }\n\n      return match[idx];\n    }\n  end\n\n  def check(pattern)\n    pattern = anchor(pattern)\n\n    %x{\n      var result = pattern.exec(\#{@working});\n\n      if (result == null) {\n        return \#{@matched} = nil;\n      }\n\n      return \#{@matched} = result[0];\n    }\n  end\n\n  def check_until(pattern)\n    %x{\n      var old_prev_pos = \#{@prev_pos};\n      var old_pos      = \#{@pos};\n      var old_working  = \#{@working};\n\n      var result = \#{scan_until(pattern)};\n\n      \#{@prev_pos} = old_prev_pos;\n      \#{@pos}      = old_pos;\n      \#{@working}  = old_working;\n\n      return result;\n    }\n  end\n\n  def peek(length)\n    `\#{@working}.substring(0, length)`\n  end\n\n  def eos?\n    `\#{@working}.length === 0`\n  end\n\n  def exist?(pattern)\n    %x{\n      var result = pattern.exec(\#{@working});\n\n      if (result == null) {\n        return nil;\n      }\n      else if (result.index == 0) {\n        return 0;\n      }\n      else {\n        return result.index + 1;\n      }\n    }\n  end\n\n  def skip(pattern)\n    pattern = anchor(pattern)\n\n    %x{\n      var result = pattern.exec(\#{@working});\n\n      if (result == null) {\n        \#{@match} = [];\n        return \#{@matched} = nil;\n      }\n      else {\n        var match_str = result[0];\n        var match_len = match_str.length;\n\n        \#{@matched}   = match_str;\n        \#{@match}     = result;\n        \#{@prev_pos}  = \#{@pos};\n        \#{@pos}      += match_len;\n        \#{@working}   = \#{@working}.substring(match_len);\n\n        return match_len;\n      }\n    }\n  end\n\n  def skip_until(pattern)\n    %x{\n      var result = \#{scan_until(pattern)};\n\n      if (result === nil) {\n        return nil;\n      }\n      else {\n        \#{@matched} = result.substr(-1);\n\n        return result.length;\n      }\n    }\n  end\n\n  def get_byte\n    %x{\n      var result = nil;\n\n      if (\#{@pos} < \#{@string}.length) {\n        \#{@prev_pos}  = \#{@pos};\n        \#{@pos}      += 1;\n        result      = \#{@matched} = \#{@working}.substring(0, 1);\n        \#{@working}   = \#{@working}.substring(1);\n      }\n      else {\n        \#{@matched} = nil;\n      }\n\n      return result;\n    }\n  end\n\n  def match?(pattern)\n    pattern = anchor(pattern)\n\n    %x{\n      var result = pattern.exec(\#{@working});\n\n      if (result == null) {\n        return nil;\n      }\n      else {\n        \#{@prev_pos} = \#{@pos};\n\n        return result[0].length;\n      }\n    }\n  end\n\n  def pos=(pos)\n    %x{\n      if (pos < 0) {\n        pos += \#{@string.length};\n      }\n    }\n\n    @pos     = pos\n    @working = `\#{@string}.slice(pos)`\n  end\n\n  def matched_size\n    %x{\n      if (\#{@matched} === nil) {\n        return nil;\n      }\n\n      return \#{@matched}.length\n    }\n  end\n\n  def post_match\n    %x{\n      if (\#{@matched} === nil) {\n        return nil;\n      }\n\n      return \#{@string}.substr(\#{@pos});\n    }\n  end\n\n  def pre_match\n    %x{\n      if (\#{@matched} === nil) {\n        return nil;\n      }\n\n      return \#{@string}.substr(0, \#{@prev_pos});\n    }\n  end\n\n  def reset\n    @working = @string\n    @matched = nil\n    @pos     = 0\n  end\n\n  def rest\n    @working\n  end\n\n  def rest?\n    `\#{@working}.length !== 0`\n  end\n\n  def rest_size\n    rest.size\n  end\n\n  def terminate\n    @match = nil\n    self.pos = @string.length\n  end\n\n  def unscan\n    @pos      = @prev_pos\n    @prev_pos = nil\n    @match    = nil\n\n    self\n  end\n\n  alias bol? beginning_of_line?\n  alias getch get_byte # not exactly the same, but for now...\n\n  private\n\n  def anchor(pattern)\n    %x{\n      var flags = pattern.toString().match(/\\/([^\\/]+)$/);\n      flags = flags ? flags[1] : undefined;\n      return new RegExp('^(?:' + pattern.source + ')', flags);\n    }\n  end\nend\n"], :names=>["<top (required)>", "<class:StringScanner>", "self", "attr_reader", "initialize", "string", "@string", "@pos", "0", "@matched", "@working", "@match", "beginning_of_line?", "scan", "pattern", "anchor", "@prev_pos", "scan_until", "[]", "idx", "empty?", "Symbol", "$ret_or_1", "to_s", "String", "Opal", "coerce_to!", "Integer", "check", "check_until", "peek", "length", "eos?", "exist?", "skip", "skip_until", "get_byte", "match?", "pos=", "pos", "matched_size", "post_match", "pre_match", "reset", "rest", "rest?", "rest_size", "size", "terminate", "unscan", "private"], :mappings=>"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"}}, {:offset=>{:line=>827, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/normalize.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module Normalize\n    module_function\n\n    # 比較演算子をシンボルに正規化する\n    #\n    # @param op [String]\n    # @return [Symbol, nil]\n    def comparison_operator(op)\n      case op\n      when /<=|=</\n        :<=\n      when />=|=>/\n        :>=\n      when /<>|!=|=!/\n        :'!='\n      when /</\n        :<\n      when />/\n        :>\n      when /=/\n        :==\n      end\n    end\n\n    # 目標値を正規化する\n    #\n    # @param val [String]\n    # @return [Integer, String] 整数か'?'\n    def target_number(val)\n      if val == \"?\"\n        val\n      else\n        val.to_i\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:Normalize>", "self", "module_function", "comparison_operator", "op", "$ret_or_1", "target_number", "val", "to_i"], :mappings=>"AAAAA,mCAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;;;MACEC,IAAAC,iBAAAA,CAAAA;;AAMAC,MAAAA,mCAAAA,+BAAwBC,EAAxBD;AAAAA,QAAAA;;QAEE,IAAA,QAAK,OAAL,EADAE,CAAAA,YAAKD,EAALC,CACA,CAAA;UACEF,OAAA;QADF,OAEA,IAAA,QAAK,OAAL,EAdN,SAcM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,UAAL,EAhBN,SAgBM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,GAAL,EAlBN,SAkBM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,GAAL,EApBN,SAoBM,CAAA;UACEA,OAAA;QADF,OAEA,IAAA,QAAK,GAAL,EAtBN,SAsBM,CAAA;UACEA,OAAA;QADF;UAXAA,OAAA;QAWA;MAZFA,CAAAA;MAqBAH,OAAAM,6BAAAA,yBAAkBC,GAAlBD;AAAAA;QACE,IAAA,MAAGC,GAAH,EAAUD,GAAV,CAAA;UACEA,OAAAC;QADF;UAGED,OAAAC,GAAGC,MAAAA,CAAAA;QAHL;MADFF,CAAAA;IA5BFN,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>873, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/common_command/lexer.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"strscan\"\nrequire \"bcdice/normalize\"\n\nmodule BCDice\n  module CommonCommand\n    class Lexer\n      SYMBOLS = {\n        \"+\" => :PLUS,\n        \"-\" => :MINUS,\n        \"*\" => :ASTERISK,\n        \"/\" => :SLASH,\n        \"(\" => :PARENL,\n        \")\" => :PARENR,\n        \"[\" => :BRACKETL,\n        \"]\" => :BRACKETR,\n        \"?\" => :QUESTION,\n        \"@\" => :AT,\n      }.freeze\n\n      def initialize(source)\n        # sourceが空文字だとString#splitが空になる\n        source = source.split(\" \", 2).first || \"\"\n        @scanner = StringScanner.new(source)\n      end\n\n      def next_token\n        return [false, \"$\"] if @scanner.eos?\n\n        if (number = @scanner.scan(/\\d+/))\n          [:NUMBER, number.to_i]\n        elsif (cmp_op = @scanner.scan(/[<>!=]+/))\n          [:CMP_OP, Normalize.comparison_operator(cmp_op)]\n        else\n          char = @scanner.getch.upcase\n          type = SYMBOLS[char] || char.to_sym\n          [type, char]\n        end\n      end\n\n      def source\n        @scanner.string\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "self", "require", "<module:BCDice>", "<module:CommonCommand>", "<class:Lexer>", "freeze", "initialize", "source", "$ret_or_1", "split", "2", "first", "@scanner", "StringScanner", "new", "next_token", "eos?", "number", "scan", "to_i", "cmp_op", "Normalize", "comparison_operator", "char$", "getch", "upcase", "type", "SYMBOLS", "[]", "to_sym", "string"], :mappings=>"AAAAA,8CAAAA,gBAAAA;EAAAA;;;EAEAC,IAAAC,SAAAA,CAAQF,SAARE;EACAD,IAAAC,SAAAA,CAAQF,kBAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QACE,mCAAU,4DAAA,KACD,MADC,EAAA,KAED,OAFC,EAAA,KAGD,UAHC,EAAA,KAID,OAJC,EAAA,KAKD,QALC,EAAA,KAMD,QANC,EAAA,KAOD,UAPC,EAAA,KAQD,UARC,EAAA,KASD,UATC,EAAA,KAUD,IAVC,EAWTC,QAAAA,CAAAA,CAXD;;AAaAC,QAAAA,0BAAAA,sBAAeC,MAAfD;AAAAA,UAAAA;;;UAEEC,SAAS,CAAA,QAAAC,CAAAA,YAAAD,MAAME,OAAAA,CAAOH,GAAb,EAAkBI,CAAZD,CAAcE,OAAAA,CAAAA,CAApBH,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAA8BF,EAA9B,CAAA;UACTA,OAAAM,CAAAA,eAAWC,mBAAaC,KAAAA,CAAKP,MAALO,CAAxBF;QAHFN,CAAAA;;AAMAS,QAAAA,0BAAAA,sBAAAA;AAAAA,UAAAA;;;UACE,IAAA,QAAuBH,YAAQI,SAAAA,CAAAA,CAA/B,CAAA;YAAA,OAAO,CAAC,KAAD,EAAQD,GAAR;UAAP;UAEA,IAAA,QAAIE,CAAAA,SAASL,YAAQM,MAAAA,CAAM,KAANA,CAAjBD,CAAJ,CAAA;YACEF,OAAA,CAAC,QAAD,EAAUE,MAAME,MAAAA,CAAAA,CAAhB;UADF,OAEA,IAAA,QAAOC,CAAAA,SAASR,YAAQM,MAAAA,CAAM,SAANA,CAAjBE,CAAP,CAAA;YACEL,OAAA,CAAC,QAAD,EAAUM,eAASC,qBAAAA,CAAqBF,MAArBE,CAAnB;UADF;;YAGEC,QAAOX,YAAQY,OAAAA,CAAAA,CAAMC,QAAAA,CAAAA;YACrBC,OAAO,CAAA,QAAAlB,CAAAA,YAAAmB,aAAOC,OAAAA,CAACL,KAADK,CAAPpB,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAiBe,KAAIM,QAAAA,CAAAA,CAArB,CAAA;YACPd,OAAA,CAACW,IAAD,EAAOH,KAAP;UALF;QALFR,CAAAA;QAcAX,OAAAG,sBAAAA,kBAAAA;AAAAA,UAAAA;;UACEA,OAAAK,YAAQkB,QAAAA,CAAAA;QADVvB,CAAAA;MAlCFH,GAAAA,WAAAA,EAAAA,IAAAA;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AALAH;"}}, {:offset=>{:line=>934, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/common_command/reroll_dice/node.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module CommonCommand\n    module RerollDice\n      module Node\n        class Command\n          def initialize(secret:, notations:, source:, cmp_op: nil, target_number: nil, reroll_cmp_op: nil, reroll_threshold: nil)\n            @secret = secret\n            @notations = notations\n            @cmp_op = cmp_op\n            @target_number_node = target_number\n            @reroll_cmp_op = reroll_cmp_op\n            @reroll_threshold_node = reroll_threshold\n            @source = source\n          end\n\n          def eval(game_system, randomizer)\n            round_type = game_system.round_type\n            cmp_op = @cmp_op || game_system.default_cmp_op\n            reroll_cmp_op = @reroll_cmp_op || cmp_op || :>=\n\n            target_number =\n              @target_number_node&.eval(round_type) ||\n              game_system.default_target_number\n\n            reroll_threshold =\n              @reroll_threshold_node&.eval(round_type) ||\n              game_system.reroll_dice_reroll_threshold ||\n              target_number\n\n            reroll_condition = RerollCondition.new(reroll_cmp_op, reroll_threshold)\n\n            dice_queue = @notations.map { |node| node.to_dice(round_type) }\n            unless dice_queue.all? { |d| reroll_condition.valid?(d.sides) }\n              return result_with_text(\"\#{@source} ＞ 条件が間違っています。2R6>=5 あるいは 2R6[5] のように振り足し目標値を指定してください。\")\n            end\n\n            dice_list_list = roll(\n              dice_queue,\n              randomizer,\n              reroll_condition,\n              game_system.sort_barabara_dice?\n            )\n\n            dice_list = dice_list_list.flatten\n\n            # 振り足し分は出目1の個数をカウントしない\n            one_count = dice_list_list\n                        .take(@notations.size)\n                        .flatten\n                        .count(1)\n\n            success_count =\n              if cmp_op\n                dice_list.count { |val| val.send(cmp_op, target_number) }\n              else\n                0\n              end\n\n            sequence = [\n              expr(round_type, reroll_condition, cmp_op, target_number),\n              dice_list_list.map { |list| list.join(\",\") }.join(\" + \"),\n              \"成功数\#{success_count}\",\n              game_system.grich_text(one_count, dice_list.size, success_count),\n            ].compact\n\n            result_with_text(sequence.join(\" ＞ \"))\n          end\n\n          private\n\n          # ダイスロールを行う\n          # @param dice_queue [Array<Dice>] ダイスキュー\n          # @param randomizer [Randomizer] 乱数生成器\n          # @param reroll_condition [RerollCondition] 振り足し条件\n          # @param sort [Boolean] 出目を並び替えるか\n          # @return [Array<Array<Integer>>]\n          def roll(dice_queue, randomizer, reroll_condition, sort)\n            dice_list_list = []\n            loop_count = 0\n\n            while !dice_queue.empty? && loop_count < REROLL_LIMIT\n              dice = dice_queue.shift\n              loop_count += 1\n\n              dice_list = dice.roll(randomizer)\n              dice_list.sort! if sort\n              dice_list_list.push(dice_list)\n\n              reroll_count = dice_list.count { |val| reroll_condition.reroll?(val) }\n              if reroll_count > 0\n                dice_queue.push(Dice.new(reroll_count, dice.sides))\n              end\n            end\n\n            return dice_list_list\n          end\n\n          def expr(round_type, reroll_condition, cmp_op, target_number)\n            notation = @notations.map { |n| n.to_dice(round_type) }.join(\"+\")\n\n            reroll_cmp_op_text =\n              if reroll_condition.cmp_op == cmp_op\n                \"\"\n              else\n                Format.comparison_operator(reroll_condition.cmp_op)\n              end\n\n            cmp_op_text = Format.comparison_operator(cmp_op)\n\n            \"(\#{notation}[\#{reroll_cmp_op_text}\#{reroll_condition.threshold}]\#{cmp_op_text}\#{target_number})\"\n          end\n\n          def result_with_text(text)\n            Result.new.tap do |r|\n              r.secret = @secret\n              r.text = text\n            end\n          end\n        end\n\n        # 振り足し条件を表すクラス。\n        class RerollCondition\n          # @return [Symbol] 比較演算子\n          attr_reader :cmp_op\n          # @return [Integer] 振り足しの閾値\n          attr_reader :threshold\n\n          # @param cmp_op [Symbol] 比較演算子\n          # @param threshold [Integer] 振り足しの閾値\n          def initialize(cmp_op, threshold)\n            @cmp_op = cmp_op\n            @threshold = threshold\n          end\n\n          # @param sides [Integer] ダイスの面数\n          # @return [Boolean] 振り足し条件が妥当か\n          def valid?(sides)\n            return false unless @threshold\n\n            case @cmp_op\n            when :<=\n              @threshold < sides\n            when :<\n              @threshold <= sides\n            when :>=\n              @threshold > 1\n            when :>\n              @threshold >= 1\n            when :'!='\n              (1..sides).include?(@threshold)\n            else # :==\n              true\n            end\n          end\n\n          # @param value [Integer] 出目\n          # @return [Boolean] 振り足しを行うべきか\n          def reroll?(value)\n            value.send(@cmp_op, @threshold)\n          end\n        end\n\n        class Notation\n          def initialize(times, sides)\n            @times = times\n            @sides = sides\n          end\n\n          def to_dice(round_type)\n            times = @times.eval(round_type)\n            sides = @sides.eval(round_type)\n\n            Dice.new(times, sides)\n          end\n        end\n\n        class Dice\n          attr_reader :times, :sides\n\n          def initialize(times, sides)\n            @times = times\n            @sides = sides\n          end\n\n          def roll(randomizer)\n            randomizer.roll_barabara(times, sides)\n          end\n\n          def to_s\n            \"\#{times}R\#{sides}\"\n          end\n        end\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:CommonCommand>", "<module:RerollDice>", "<module:Node>", "<class:Command>", "initialize", "$kwargs", "@secret", "secret", "@notations", "notations", "@cmp_op", "cmp_op", "@target_number_node", "target_number", "@reroll_cmp_op", "reroll_cmp_op", "@reroll_threshold_node", "reroll_threshold", "@source", "source", "eval", "game_system", "randomizer", "round_type", "$ret_or_1", "default_cmp_op", "$ret_or_2", "default_target_number", "reroll_dice_reroll_threshold", "reroll_condition", "RerollCondition", "new", "dice_queue", "map", "block in eval", "node", "block (2 levels) in eval", "to_dice", "all?", "d", "valid?", "sides", "self", "result_with_text", "dice_list_list", "roll", "sort_barabara_dice?", "dice_list", "flatten", "one_count", "take", "size", "count", "1", "success_count", "val", "send", "0", "sequence", "expr", "list", "join", "grich_text", "compact", "private", "sort", "loop_count", "empty?", "!", "<", "REROLL_LIMIT", "dice", "shift", "+", "sort!", "push", "reroll_count", "block in roll", "block (2 levels) in roll", "reroll?", ">", "Dice", "notation", "block in expr", "n", "block (2 levels) in expr", "reroll_cmp_op_text", "Format", "comparison_operator", "cmp_op_text", "threshold", "text", "tap", "Result", "block in result_with_text", "r", "block (2 levels) in result_with_text", "secret=", "text=", "<class:RerollCondition>", "attr_reader", "@threshold", "<=", ">=", "include?", "value", "<class:Notation>", "times", "@times", "@sides", "<class:Dice>", "roll_barabara", "to_s"], :mappings=>"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"}}, {:offset=>{:line=>1185, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/arithmetic/node.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module Arithmetic\n    module Node\n      class BinaryOp\n        def initialize(lhs, op, rhs)\n          @lhs = lhs\n          @op = op\n          @rhs = rhs\n        end\n\n        def eval(round_type)\n          l = @lhs.eval(round_type)\n          r = @rhs.eval(round_type)\n          l.send(@op, r)\n        end\n\n        # @return [String] メッセージへの出力\n        def output\n          \"\#{@lhs.output}\#{@op}\#{@rhs.output}\"\n        end\n\n        # @return [String] ノードのS式\n        def s_exp\n          \"(\#{op_for_s_exp} \#{@lhs.s_exp} \#{@rhs.s_exp})\"\n        end\n\n        # @return [String] S式で使う演算子の表現\n        def op_for_s_exp\n          @op\n        end\n      end\n\n      # 除算ノードの基底クラス\n      #\n      # 定数 +ROUNDING_METHOD+ で端数処理方法を示す記号\n      # ( +'U'+, +'R'+, +''+ ) を定義すること。\n      # また、除算および端数処理を行う +divide_and_round+ メソッドを実装すること。\n      class DivideBase < BinaryOp\n        # ノードを初期化する\n        # @param [Object] lhs 左のオペランドのノード\n        # @param [Object] rhs 右のオペランドのノード\n        def initialize(lhs, rhs)\n          super(lhs, :/, rhs)\n        end\n\n        def eval(round_type)\n          l = @lhs.eval(round_type)\n          r = @rhs.eval(round_type)\n\n          raise ZeroDivisionError if r == 0\n          divide_and_round(l, r, round_type)\n        end\n\n        # メッセージへの出力を返す\n        #\n        # 通常の結果の末尾に、端数処理方法を示す記号を付加する。\n        #\n        # @return [String]\n        def output\n          \"\#{super}\#{rounding_method}\"\n        end\n\n        private\n\n        # 端数処理方法を示す記号を返す\n        # @return [String]\n        def rounding_method\n          self.class::ROUNDING_METHOD\n        end\n\n        # S式で使う演算子の表現を返す\n        # @return [String]\n        def op_for_s_exp\n          \"\#{@op}\#{rounding_method}\"\n        end\n\n        # 除算および端数処理を行う\n        # @param [Integer] _dividend 被除数\n        # @param [Integer] _divisor 除数（0以外）\n        # @param [Symbol] _round_type ゲームシステムの端数処理設定\n        # @return [Integer]\n        def divide_and_round(_dividend, _divisor, _round_type)\n          raise NotImplementedError\n        end\n      end\n\n      # 除算（端数処理はゲームシステム依存）のノード\n      class DivideWithGameSystemDefault < DivideBase\n        # 端数処理方法を示す記号\n        ROUNDING_METHOD = \"\"\n\n        private\n\n        # 除算および端数処理を行う\n        # @param [Integer] dividend 被除数\n        # @param [Integer] divisor 除数（0以外）\n        # @param [Symbol] round_type ゲームシステムの端数処理設定\n        # @return [Integer]\n        def divide_and_round(dividend, divisor, round_type)\n          case round_type\n          when RoundType::CEIL\n            (dividend.to_f / divisor).ceil\n          when RoundType::ROUND\n            x = dividend.to_f / divisor\n            x.negative? ? -(x.abs.round) : x.round\n          else # RoundType::FLOOR\n            (dividend / divisor).floor\n          end\n        end\n      end\n\n      # 除算（切り上げ）のノード\n      class DivideWithCeil < DivideBase\n        # 端数処理方法を示す記号\n        ROUNDING_METHOD = \"C\"\n\n        private\n\n        # 除算および端数処理を行う\n        # @param [Integer] dividend 被除数\n        # @param [Integer] divisor 除数（0以外）\n        # @param [Symbol] _round_type ゲームシステムの端数処理設定\n        # @return [Integer]\n        def divide_and_round(dividend, divisor, _round_type)\n          (dividend.to_f / divisor).ceil\n        end\n      end\n\n      # 除算（四捨五入）のノード\n      class DivideWithRound < DivideBase\n        # 端数処理方法を示す記号\n        ROUNDING_METHOD = \"R\"\n\n        private\n\n        # 除算および端数処理を行う\n        # @param [Integer] dividend 被除数\n        # @param [Integer] divisor 除数（0以外）\n        # @param [Symbol] _round_type ゲームシステムの端数処理設定\n        # @return [Integer]\n        def divide_and_round(dividend, divisor, _round_type)\n          x = dividend.to_f / divisor\n          x.negative? ? -(x.abs.round) : x.round\n        end\n      end\n\n      # 除算（切り捨て）のノード\n      class DivideWithFloor < DivideBase\n        # 端数処理方法を示す記号\n        ROUNDING_METHOD = \"F\"\n\n        private\n\n        # 除算および端数処理を行う\n        # @param [Integer] dividend 被除数\n        # @param [Integer] divisor 除数（0以外）\n        # @param [Symbol] _round_type ゲームシステムの端数処理設定\n        # @return [Integer]\n        def divide_and_round(dividend, divisor, _round_type)\n          (dividend / divisor).floor\n        end\n      end\n\n      class Negative\n        def initialize(body)\n          @body = body\n        end\n\n        def eval(round_type)\n          -@body.eval(round_type)\n        end\n\n        # @return [String] メッセージへの出力\n        def output\n          \"-\#{@body.output}\"\n        end\n\n        def s_exp\n          \"(- \#{@body.s_exp})\"\n        end\n      end\n\n      # カッコで式をまとめるノード\n      class Parenthesis\n        # @param expr [Object] カッコ内のノード\n        def initialize(expr)\n          @expr = expr\n        end\n\n        # @param round_type [Symbol] 端数処理方法\n        # @return [Integer] 評価結果\n        def eval(round_type)\n          @expr.eval(round_type)\n        end\n\n        # @return [String] メッセージへの出力\n        def output\n          \"(\#{@expr.output})\"\n        end\n\n        # @return [String] S式\n        def s_exp\n          \"(Parenthesis \#{@expr.s_exp})\"\n        end\n      end\n\n      class Number\n        def initialize(value)\n          @value = value\n        end\n\n        def eval(_round_type)\n          @value\n        end\n\n        # @return [String] メッセージへの出力\n        def output\n          @value.to_s\n        end\n\n        alias s_exp output\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:Arithmetic>", "<module:Node>", "<class:BinaryOp>", "initialize", "lhs", "op", "rhs", "@lhs", "@op", "@rhs", "eval", "round_type", "l", "r", "send", "output", "s_exp", "self", "op_for_s_exp", "<class:DivideBase>", "0", "raise", "ZeroDivisionError", "divide_and_round", "rounding_method", "private", "class::ROUNDING_METHOD", "class", "_dividend", "_divisor", "_round_type", "NotImplementedError", "BinaryOp", "<class:DivideWithGameSystemDefault>", "dividend", "divisor", "RoundType::CEIL", "RoundType", "$ret_or_1", "/", "to_f", "ceil", "RoundType::ROUND", "x", "negative?", "abs", "round", "-@", "floor", "DivideBase", "<class:DivideWithCeil>", "<class:DivideWithRound>", "<class:DivideWithFloor>", "<class:Negative>", "@body", "<class:Parenthesis>", "@expr", "<class:Number>", "@value", "to_s"], :mappings=>"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"}}, {:offset=>{:line=>1457, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/common_command/barabara_dice/parser.rb"], :sourcesContent=>["#\n# DO NOT MODIFY!!!!\n# This file is automatically generated by Racc 1.7.3\n# from Racc grammar file \"parser.y\".\n#\n\nrequire 'racc/parser.rb'\n\n\nrequire \"bcdice/common_command/lexer\"\nrequire \"bcdice/common_command/reroll_dice/node\"\nrequire \"bcdice/arithmetic/node\"\n\nmodule BCDice\n  module CommonCommand\n    module BarabaraDice\n      class Parser < Racc::Parser\n\n\ndef self.parse(source)\n  new.parse(source)\nend\n\ndef parse(source)\n  @lexer = Lexer.new(source)\n  do_parse()\nrescue ParseError\n  nil\nend\n\nprivate\n\ndef next_token\n  @lexer.next_token\nend\n##### State transition tables begin ###\n\nracc_action_table = [\n    13,     9,     3,     9,    24,    25,     9,     9,     9,    26,\n    18,    19,     8,    12,     8,    18,    19,     8,     8,     8,\n     9,     4,     9,    38,    36,    37,    39,    18,    19,    18,\n    19,     8,     9,     8,     9,    27,    28,    24,    25,    18,\n    19,    18,    19,     8,     9,     8,     9,    27,    28,    27,\n    28,    18,    19,    18,    19,     8,    10,     8,    14 ]\n\nracc_action_check = [\n     5,     2,     0,     8,    15,    15,    13,    14,    12,    15,\n     8,     8,     2,     5,     8,    12,    12,    13,    14,    12,\n    18,     1,    19,    34,    34,    34,    34,    18,    18,    19,\n    19,    18,    24,    19,    25,    16,    16,    21,    21,    24,\n    24,    25,    25,    24,    27,    25,    28,    31,    31,    32,\n    32,    27,    27,    28,    28,    27,     4,    28,     7 ]\n\nracc_action_pointer = [\n    -6,    21,    -1,   nil,    56,    -9,   nil,    55,     1,   nil,\n   nil,   nil,     6,     4,     5,    -5,    24,   nil,    18,    20,\n   nil,    28,   nil,   nil,    30,    32,   nil,    42,    44,   nil,\n   nil,    36,    38,   nil,    19,   nil,   nil,   nil,   nil,   nil ]\n\nracc_action_default = [\n    -2,   -25,   -25,    -3,   -25,    -4,    -7,   -25,   -25,   -24,\n    40,    -1,   -25,   -25,   -25,   -25,   -11,   -14,   -25,   -25,\n   -22,    -5,    -6,    -8,   -25,   -25,   -23,   -25,   -25,   -20,\n   -21,    -9,   -10,   -12,   -15,   -13,   -16,   -17,   -18,   -19 ]\n\nracc_goto_table = [\n     7,     1,     6,    15,     2,    29,    30,    21,    31,    32,\n     5,     7,    23,    22,    33,    34,    11,    35 ]\n\nracc_goto_check = [\n     7,     1,     6,     5,     2,     9,     9,     5,     8,     8,\n     3,     7,     7,     6,     9,     9,     4,    10 ]\n\nracc_goto_pointer = [\n   nil,     1,     4,     8,    11,    -5,     0,    -2,   -16,   -13,\n   -17 ]\n\nracc_goto_default = [\n   nil,   nil,   nil,   nil,   nil,   nil,   nil,    20,    16,    17,\n   nil ]\n\nracc_reduce_table = [\n  0, 0, :racc_error,\n  3, 24, :_reduce_1,\n  0, 25, :_reduce_2,\n  1, 25, :_reduce_3,\n  0, 27, :_reduce_4,\n  2, 27, :_reduce_5,\n  3, 26, :_reduce_6,\n  1, 26, :_reduce_7,\n  3, 29, :_reduce_8,\n  3, 28, :_reduce_9,\n  3, 28, :_reduce_10,\n  1, 28, :_reduce_none,\n  3, 31, :_reduce_12,\n  4, 31, :_reduce_13,\n  1, 31, :_reduce_none,\n  0, 33, :_reduce_15,\n  1, 33, :_reduce_16,\n  1, 33, :_reduce_17,\n  1, 33, :_reduce_18,\n  1, 33, :_reduce_19,\n  2, 32, :_reduce_20,\n  2, 32, :_reduce_21,\n  1, 32, :_reduce_none,\n  3, 30, :_reduce_23,\n  1, 30, :_reduce_24 ]\n\nracc_reduce_n = 25\n\nracc_shift_n = 40\n\nracc_token_table = {\n  false => 0,\n  :error => 1,\n  :NUMBER => 2,\n  :B => 3,\n  :R => 4,\n  :U => 5,\n  :C => 6,\n  :F => 7,\n  :S => 8,\n  :PLUS => 9,\n  :MINUS => 10,\n  :ASTERISK => 11,\n  :SLASH => 12,\n  :PARENL => 13,\n  :PARENR => 14,\n  :BRACKETL => 15,\n  :BRACKETR => 16,\n  :LESS => 17,\n  :GREATER => 18,\n  :EQUAL => 19,\n  :NOT => 20,\n  :AT => 21,\n  :CMP_OP => 22 }\n\nracc_nt_base = 23\n\nracc_use_result_var = true\n\nRacc_arg = [\n  racc_action_table,\n  racc_action_check,\n  racc_action_default,\n  racc_action_pointer,\n  racc_goto_table,\n  racc_goto_check,\n  racc_goto_default,\n  racc_goto_pointer,\n  racc_nt_base,\n  racc_reduce_table,\n  racc_token_table,\n  racc_shift_n,\n  racc_reduce_n,\n  racc_use_result_var ]\nRactor.make_shareable(Racc_arg) if defined?(Ractor)\n\nRacc_token_to_s_table = [\n  \"$end\",\n  \"error\",\n  \"NUMBER\",\n  \"B\",\n  \"R\",\n  \"U\",\n  \"C\",\n  \"F\",\n  \"S\",\n  \"PLUS\",\n  \"MINUS\",\n  \"ASTERISK\",\n  \"SLASH\",\n  \"PARENL\",\n  \"PARENR\",\n  \"BRACKETL\",\n  \"BRACKETR\",\n  \"LESS\",\n  \"GREATER\",\n  \"EQUAL\",\n  \"NOT\",\n  \"AT\",\n  \"CMP_OP\",\n  \"$start\",\n  \"expr\",\n  \"secret\",\n  \"notations\",\n  \"target\",\n  \"add\",\n  \"dice\",\n  \"term\",\n  \"mul\",\n  \"unary\",\n  \"round_type\" ]\nRactor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)\n\nRacc_debug_parser = false\n\n##### State transition tables end #####\n\n# reduce 0 omitted\n\ndef _reduce_1(val, _values, result)\n          result = Node::Command.new(\n            secret: val[0],\n            notations: val[1],\n            cmp_op: val[2][:cmp_op],\n            target_number: val[2][:target]\n          )\n\n    result\nend\n\ndef _reduce_2(val, _values, result)\n result = false\n    result\nend\n\ndef _reduce_3(val, _values, result)\n result = true\n    result\nend\n\ndef _reduce_4(val, _values, result)\n result = {}\n    result\nend\n\ndef _reduce_5(val, _values, result)\n            cmp_op, target = val\n            raise ParseError unless cmp_op\n\n            result = {cmp_op: cmp_op, target: target}\n\n    result\nend\n\ndef _reduce_6(val, _values, result)\n               notations = val[0]\n               notations.push(val[2])\n               result = notations\n\n    result\nend\n\ndef _reduce_7(val, _values, result)\n result = [val[0]]\n    result\nend\n\ndef _reduce_8(val, _values, result)\n          times = val[0]\n          sides = val[2]\n          result = Node::Notation.new(times, sides)\n\n    result\nend\n\ndef _reduce_9(val, _values, result)\n result = Arithmetic::Node::BinaryOp.new(val[0], :+, val[2])\n    result\nend\n\ndef _reduce_10(val, _values, result)\n result = Arithmetic::Node::BinaryOp.new(val[0], :-, val[2])\n    result\nend\n\n# reduce 11 omitted\n\ndef _reduce_12(val, _values, result)\n result = Arithmetic::Node::BinaryOp.new(val[0], :*, val[2])\n    result\nend\n\ndef _reduce_13(val, _values, result)\n         divied_class = val[3]\n         result = divied_class.new(val[0], val[2])\n\n    result\nend\n\n# reduce 14 omitted\n\ndef _reduce_15(val, _values, result)\n result = Arithmetic::Node::DivideWithGameSystemDefault\n    result\nend\n\ndef _reduce_16(val, _values, result)\n result = Arithmetic::Node::DivideWithCeil\n    result\nend\n\ndef _reduce_17(val, _values, result)\n result = Arithmetic::Node::DivideWithCeil\n    result\nend\n\ndef _reduce_18(val, _values, result)\n result = Arithmetic::Node::DivideWithRound\n    result\nend\n\ndef _reduce_19(val, _values, result)\n result = Arithmetic::Node::DivideWithFloor\n    result\nend\n\ndef _reduce_20(val, _values, result)\n result = val[1]\n    result\nend\n\ndef _reduce_21(val, _values, result)\n result = Arithmetic::Node::Negative.new(val[1])\n    result\nend\n\n# reduce 22 omitted\n\ndef _reduce_23(val, _values, result)\n result = val[1]\n    result\nend\n\ndef _reduce_24(val, _values, result)\n result = Arithmetic::Node::Number.new(val[0])\n    result\nend\n\ndef _reduce_none(val, _values, result)\n  val[0]\nend\n\n      end   # class Parser\n    end   # module BarabaraDice\n  end   # module CommonCommand\nend   # module BCDice\n"], :names=>["<top (required)>", "self", "require", "<module:BCDice>", "<module:CommonCommand>", "<module:BarabaraDice>", "<class:Parser>", "parse", "source", "new", "@lexer", "Lexer", "do_parse", "ParseError", "private", "next_token", "racc_action_table", "racc_action_check", "racc_action_pointer", "racc_action_default", "racc_goto_table", "7", "1", "6", "15", "2", "29", "30", "21", "31", "32", "5", "23", "22", "33", "34", "11", "35", "racc_goto_check", "9", "8", "3", "4", "10", "racc_goto_pointer", "-5", "0", "-2", "-16", "-13", "-17", "racc_goto_default", "20", "16", "17", "racc_reduce_table", "racc_reduce_n", "25", "racc_shift_n", "40", "racc_token_table", "12", "13", "14", "18", "19", "racc_nt_base", "racc_use_result_var", "Ractor", "make_shareable", "Racc_arg", "Racc_token_to_s_table", "_reduce_1", "val", "_values", "result", "Node::Command", "Node", "[]", "_reduce_2", "_reduce_3", "_reduce_4", "_reduce_5", "cmp_op", "target", "raise", "_reduce_6", "notations", "push", "_reduce_7", "_reduce_8", "times", "sides", "Node::Notation", "_reduce_9", "Arithmetic::Node::BinaryOp", "Arithmetic::Node", "Arithmetic", "_reduce_10", "_reduce_12", "_reduce_13", "divied_class", "_reduce_15", "Arithmetic::Node::DivideWithGameSystemDefault", "_reduce_16", "Arithmetic::Node::DivideWithCeil", "_reduce_17", "_reduce_18", "Arithmetic::Node::DivideWithRound", "_reduce_19", "Arithmetic::Node::DivideWithFloor", "_reduce_20", "_reduce_21", "Arithmetic::Node::Negative", "_reduce_23", "_reduce_24", "Arithmetic::Node::Number", "_reduce_none", "Racc::Parser", "Racc"], :mappings=>"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"}}, {:offset=>{:line=>1664, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/common_command/barabara_dice.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/common_command/barabara_dice/parser\"\n\nmodule BCDice\n  module CommonCommand\n    module BarabaraDice\n      PREFIX_PATTERN = /\\d+B\\d+/.freeze\n\n      class << self\n        def eval(command, game_system, randomizer)\n          cmd = Parser.parse(command)\n          cmd&.eval(game_system, randomizer)\n        end\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "self", "require", "<module:BCDice>", "<module:CommonCommand>", "<module:BarabaraDice>", "freeze", "eval", "command", "game_system", "randomizer", "cmd", "Parser", "parse"], :mappings=>"AAAAA,sDAAAA,gBAAAA;EAAAA;;;EAEAC,IAAAC,SAAAA,CAAQF,4CAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;;QACE,0CAAiB,SAASC,QAAAA,CAAAA,CAA1B;QAEAD,OAAA;UAAA;;UACE,OAAAE,oBAAAA,iBAASC,OAAD,EAAUC,WAAV,EAAuBC,UAA/BH,GAAAA,MAAAA,IAAAA,wCAAAA;AAAAA,YAAAA;;;YACEI,MAAMC,YAAMC,OAAAA,CAAOL,OAAPK;YACZN,OAAA,CAAA,KAAAI,GAAA,qCAAA,EAAA,MAAA,CAAUF,WAAV,EAAuBC,UAAvB,CAAA,EAFFH;cAAAA;cAAAA;YAAAA;UAAAA,CAAAA;QADF,4BAASN,IAAT;MAHFI,GAAAA,WAAAA;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAJAH;"}}, {:offset=>{:line=>1705, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    # 表を表すクラス\n    class Table\n      # @param key [String]\n      # @param locale [Symbol]\n      # @return [Table]\n      def self.from_i18n(key, locale)\n        table = I18n.t(key, locale: locale)\n        new(table[:name], table[:type], table[:items])\n      end\n\n      # @param [String] name 表の名前\n      # @param [String] type 項目を選ぶときのダイスロールの方法 '1D6'など\n      # @param [Array<String>] items 表の項目の配列\n      def initialize(name, type, items)\n        @name = name\n        @items = items.freeze\n\n        m = /(\\d+)D(\\d+)/i.match(type)\n        unless m\n          raise ArgumentError, \"Unexpected table type: \#{type}\"\n        end\n\n        @times = m[1].to_i\n        @sides = m[2].to_i\n      end\n\n      # 表を振る\n      # @param [BCDice] bcdice ランダマイザ\n      # @return [String] 結果\n      def roll(bcdice)\n        value = bcdice.roll_sum(@times, @sides)\n        return choice(value)\n      end\n\n      def choice(value)\n        index = value - @times\n        return RollResult.new(@name, value, @items[index])\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:Table>", "from_i18n", "self", "key", "locale", "table", "I18n", "t", "new", "[]", "initialize", "name", "type", "items", "@name", "@items", "freeze", "m", "match", "raise", "ArgumentError", "@times", "1", "to_i", "@sides", "2", "roll", "bcdice", "value", "roll_sum", "choice", "index", "-", "RollResult"], :mappings=>"AAAAA,0CAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MAEEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAIEC,MAAIC,IAAJD,gBAAAA,qBAAmBE,GAAD,EAAMC,MAAxBH;AAAAA,UAAAA;;;UACEI,QAAQC,UAAIC,GAAAA,CAAGJ,GAAP,EAAY,oBAAA,UAAQC,MAAR,EAARG;UACZN,OAAAC,IAAAM,KAAAA,CAAIH,KAAKI,OAAAA,CAAC,MAADA,CAAT,EAAkBJ,KAAKI,OAAAA,CAAC,MAADA,CAAvB,EAAgCJ,KAAKI,OAAAA,CAAC,OAADA,CAArCD;QAFFP,CAAAA;;AAQAS,QAAAA,0BAAAA,sBAAeC,IAAD,EAAOC,IAAP,EAAaC,KAA3BH;AAAAA,UAAAA;;;UACEI,YAAQH;UACRI,aAASF,KAAKG,QAAAA,CAAAA;UAEdC,IAAI,cAAcC,OAAAA,CAAON,IAAPM;UAClB,KAAA,QAAOD,CAAP,CAAA;YACEf,IAAAiB,OAAAA,CAAMC,mBAAN,EAAsBV,yBAAD,GAAA,CAA0BE,IAA1B,CAArBO;UADF;UAIAE,aAASJ,CAACR,OAAAA,CAACa,CAADb,CAAGc,MAAAA,CAAAA;UACbb,OAAAc,CAAAA,aAASP,CAACR,OAAAA,CAACgB,CAADhB,CAAGc,MAAAA,CAAAA,CAAbC;QAVFd,CAAAA;;AAgBAgB,QAAAA,oBAAAA,gBAASC,MAATD;AAAAA,UAAAA;;;UACEE,QAAQD,MAAME,UAAAA,CAAUR,UAAhB,EAAwBG,UAAlBK;UACd,OAAO3B,IAAA4B,QAAAA,CAAOF,KAAPE;QAFTJ,CAAAA;QAKA1B,OAAA8B,sBAAAA,kBAAWF,KAAXE;AAAAA,UAAAA;;;UACEC,QAAcC,UAANJ,KAAMI,EAAEX,UAAFW;UACd,OAAOC,gBAAUzB,KAAAA,CAAKM,SAAf,EAAsBc,KAAtB,EAA6Bb,UAAMN,OAAAA,CAACsB,KAADtB,CAAzBD;QAFnBsB,CAAAA;MAjCF9B,GAAAA,WAAAA,EAAAA,IAAAA;IAFFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>1766, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/NinjaSlayer.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire 'bcdice/common_command/barabara_dice'\nrequire 'bcdice/dice_table/table'\n\nmodule BCDice\n  module GameSystem\n    class NinjaSlayer < Base\n      # ゲームシステムの識別子\n      ID = 'NinjaSlayer'\n\n      # ゲームシステム名\n      NAME = 'ニンジャスレイヤーTRPG'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'にんしやすれいやあTRPG'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・通常判定　NJ\n        　NJx[y] or NJx@y or NJx\n        　x=判定ダイス y=難易度 省略時はNORMAL(4)\n        　例:NJ4@H 難易度HARD、判定ダイス4で判定\n        ・回避判定　EV\n        　EVx[y]/z or EVx@y/z or EVx/z or EVx[y] or EVx@y or EVx\n        　x=判定ダイス y=難易度 z=攻撃側の成功数(省略可) 難易度を省略時はNORMAL(4)\n        　攻撃側の成功数を指定した場合、カウンターカラテ発生時には表示\n        　例:EV5/3 難易度NORMAL(省略時)、判定ダイス5、攻撃側の成功数3で判定\n        ・近接攻撃　AT\n        　ATx[y] or ATx@y or ATx\n        　x=判定ダイス y=難易度 省略時はNORMAL(4) サツバツ！発生時には表示\n        　例:AT6[H] 難易度HARD,判定ダイス5で近接攻撃の判定\n        ・サツバツ判定　SB\n        ・電子戦　EL\n        　ELx[y] or ELx@y or ELx\n        　x=判定ダイス y=難易度 省略時はNORMAL(4)\n        　例:EL6[H] 難易度HARD,判定ダイス5で電子戦の判定\n\n        ・難易度\n        　KIDS=K,EASY=E,NORMAL=N,HARD=H,ULTRA HARD=UH 数字にも対応\n\n        ※上記コマンド群は『ニンジャスレイヤーTRPG コア・ルールブック』に対応していません。コア・ルールブックで遊ぶ場合には『ニンジャスレイヤーTRPG 2版』のコマンドを利用してください。\n      MESSAGETEXT\n\n      def initialize(command)\n        super(command)\n\n        @default_cmp_op = :>=\n        @default_target_number = 4\n      end\n\n      # 難易度の値の正規表現\n      DIFFICULTY_VALUE_RE = 'UH|[2-6KENH]'.freeze\n      # 難易度の正規表現\n      DIFFICULTY_RE = \"(\\\\[(\#{DIFFICULTY_VALUE_RE})\\\\]|@(\#{DIFFICULTY_VALUE_RE}))\".freeze\n\n      # 通常判定の正規表現\n      NJ_RE = /^(S)?NJ(\\d+)\#{DIFFICULTY_RE}?$/io.freeze\n      # 回避判定の正規表現\n      EV_RE = /^EV(\\d+)\#{DIFFICULTY_RE}?(?:\\/(\\d+))?$/io.freeze\n      # 近接攻撃の正規表現\n      AT_RE = /^AT(\\d+)\#{DIFFICULTY_RE}?$/io.freeze\n      # 電子戦の正規表現\n      EL_RE = /^EL(\\d+)\#{DIFFICULTY_RE}?$/io.freeze\n\n      # 回避判定のノード\n      EV = Struct.new(:num, :difficulty, :targetValue)\n      # 近接攻撃のノード\n      AT = Struct.new(:num, :difficulty)\n      # 電子戦のノード\n      EL = Struct.new(:num, :difficulty)\n\n      # 難易度の文字表現から整数値への対応\n      DIFFICULTY_SYMBOL_TO_INTEGER = {\n        'K' => 2,\n        'E' => 3,\n        'N' => 4,\n        'H' => 5,\n        'UH' => 6\n      }.freeze\n\n      def change_text(str)\n        m = NJ_RE.match(str)\n        return str unless m\n\n        b_roll = bRollCommand(m[2], integerValueOfDifficulty(m[4] || m[5]))\n        return \"\#{m[1]}\#{b_roll}\"\n      end\n\n      def eval_game_system_specific_command(command)\n        debug('eval_game_system_specific_command begin string', command)\n\n        if (table = TABLES[command])\n          return table.roll(randomizer)\n        end\n\n        case node = parse(command)\n        when EV\n          return executeEV(node)\n        when AT\n          return executeAT(node)\n        when EL\n          return executeEL(node)\n        else\n          return nil\n        end\n      end\n\n      private\n\n      # 構文解析する\n      # @param [String] command コマンド文字列\n      # @return [EV, AT, EL, nil]\n      def parse(command)\n        case command\n        when EV_RE\n          return parseEV(Regexp.last_match)\n        when AT_RE\n          return parseAT(Regexp.last_match)\n        when EL_RE\n          return parseEL(Regexp.last_match)\n        else\n          return nil\n        end\n      end\n\n      # 正規表現のマッチ情報から回避判定ノードを作る\n      # @param [MatchData] m 正規表現のマッチ情報\n      # @return [EV]\n      def parseEV(m)\n        num = m[1].to_i\n        difficulty = integerValueOfDifficulty(m[3] || m[4])\n        targetValue = m[5]&.to_i\n\n        return EV.new(num, difficulty, targetValue)\n      end\n\n      # 正規表現のマッチ情報から近接攻撃ノードを作る\n      # @param [MatchData] m 正規表現のマッチ情報\n      # @return [AT]\n      def parseAT(m)\n        num = m[1].to_i\n        difficulty = integerValueOfDifficulty(m[3] || m[4])\n\n        return AT.new(num, difficulty)\n      end\n\n      # 正規表現のマッチ情報から電子戦ノードを作る\n      # @param [MatchData] m 正規表現のマッチ情報\n      # @return [EL]\n      def parseEL(m)\n        num = m[1].to_i\n        difficulty = integerValueOfDifficulty(m[3] || m[4])\n\n        return EL.new(num, difficulty)\n      end\n\n      # 回避判定を行う\n      # @param [EV] ev 回避判定ノード\n      # @return [String] 回避判定結果\n      def executeEV(ev)\n        command = bRollCommand(ev.num, ev.difficulty)\n        roll_result = BCDice::CommonCommand::BarabaraDice.eval(command, self, @randomizer)\n\n        parts = [roll_result.text]\n\n        if ev.targetValue && roll_result.success_num > ev.targetValue\n          parts.push(\"カウンターカラテ!!\")\n        end\n\n        return parts.join(\" ＞ \")\n      end\n\n      # 近接攻撃を行う\n      # @param [AT] at 近接攻撃ノード\n      # @return [String] 近接攻撃結果\n      def executeAT(at)\n        command = bRollCommand(at.num, at.difficulty)\n        roll_result = BCDice::CommonCommand::BarabaraDice.eval(command, self, @randomizer)\n\n        num_of_max_values = roll_result.last_dice_list.count(6)\n\n        parts = [roll_result.text]\n\n        if num_of_max_values >= 2\n          parts.push(\"サツバツ!!\")\n        end\n\n        return parts.join(\" ＞ \")\n      end\n\n      # 電子戦を行う\n      # @param [EL] el 電子戦ノード\n      # @return [String] 電子戦結果\n      def executeEL(el)\n        command = bRollCommand(el.num, el.difficulty)\n        roll_result = BCDice::CommonCommand::BarabaraDice.eval(command, self, @randomizer)\n\n        values = roll_result.last_dice_list\n        num_of_max_values = values.count(6)\n        sum_of_true_values = values.count { |v| v >= el.difficulty }\n\n        if num_of_max_values >= 1\n          return [\n            \"\#{roll_result.text} + \#{num_of_max_values}\",\n            sum_of_true_values + num_of_max_values\n          ].join(\" ＞ \")\n        end\n\n        return roll_result.text\n      end\n\n      # 難易度の整数値を返す\n      # @param [String, nil] s 難易度表記\n      # @return [Integer] 難易度の整数値\n      # @raise [KeyError, IndexError] 無効な難易度表記が渡された場合。\n      #\n      # sは2から6までの数字あるいは'K', 'E', 'N', 'H', 'UH'。\n      # sがnilの場合は 4 を返す。\n      def integerValueOfDifficulty(s)\n        return 4 unless s\n\n        return s.to_i if /^[2-6]$/.match(s)\n\n        return DIFFICULTY_SYMBOL_TO_INTEGER.fetch(s.upcase)\n      end\n\n      # バラバラロールのコマンドを返す\n      # @param [#to_s] num ダイス数\n      # @param [#to_s] difficulty 難易度\n      # @return [String]\n      def bRollCommand(num, difficulty)\n        \"\#{num}B6>=\#{difficulty}\"\n      end\n\n      # サツバツ表\n      SATSUBATSU_TABLE = [\n        '「死ねーッ！」腹部に強烈な一撃！　敵はくの字に折れ曲がり、ワイヤーアクションめいて吹っ飛んだ！：本来のダメージ+1ダメージを与える。敵は後方の壁または障害物に向かって、何マスでもまっすぐ弾き飛ばされる（他のキャラのいるマスは通過する）。壁または障害物に接触した時点で、敵はさらに1ダメージを受ける。敵はこの激突ダメージに対して改めて『回避判定』を行っても良い。',\n        '「イヤーッ！」頭部への痛烈なカラテ！　眼球破壊もしくは激しい脳震盪が敵を襲う！：本来のダメージを与える。さらに敵の【ニューロン】と【ワザマエ】がそれぞれ1ずつ減少する（これによる最低値は1）。残虐ボーナスにより【万札】がD3発生。この攻撃を【カルマ：善】のキャラに対して行ってしまった場合、【DKK】がD3上昇する。',\n        '「苦しみ抜いて死ぬがいい」急所を情け容赦なく破壊！：本来のダメージ+1ダメージを与える。耐え難い苦痛により、敵は【精神力】が-2され、【ニューロン】が1減少する（これによる最低値は1）。残虐ボーナスにより【万札】がD3発生。この攻撃を【カルマ：善】のキャラに対して行ってしまった場合、【DKK】がD3上昇する。',\n        '「逃げられるものなら逃げてみよ」敵の脚を粉砕！：本来のダメージを与える。さらに敵の【脚力】がD3減少する（最低値は1）。残虐ボーナスにより【万札】がD3発生。この攻撃を【カルマ：善】のキャラに対して行ってしまった場合、【DKK】がD3上昇する。',\n        '「これで手も足も出まい！」敵の両腕を切り飛ばした！　鮮血がスプリンクラーめいて噴き出す！：本来のダメージ+1ダメージを与える。さらに敵の【ワザマエ】と【カラテ】がそれぞれ2減少する（最低値は1）。残虐ボーナスにより【万札】がD3発生。この攻撃を【カルマ：善】のキャラに対して行ってしまった場合、【DKK】がD3上昇する。',\n        '「イイイヤアアアアーーーーッ！」ヤリめいたチョップが敵の胸を貫通！　さらに心臓を掴み取り、握りつぶした！　ナムアミダブツ！：敵は残り【体力】に関係なく即死する。残虐ボーナスにより【万札】がD6発生。この攻撃を【カルマ：善】のキャラに対して行ってしまった場合、【DKK】がD6上昇する。'\n      ].freeze\n\n      # 表の定義\n      TABLES = {\n        'SB' => DiceTable::Table.new(\n          'サツバツ表',\n          '1D6',\n          SATSUBATSU_TABLE\n        )\n      }.freeze\n\n      # ダイスボットで使用するコマンドを配列で列挙する\n      register_prefix(\n        'NJ',\n        'EV',\n        'AT',\n        'EL',\n        TABLES.keys\n      )\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:NinjaSlayer>", "initialize", "command", "@default_cmp_op", "@default_target_number", "4", "freeze", "DIFFICULTY_VALUE_RE", "DIFFICULTY_RE", "Struct", "new", "2", "3", "5", "6", "change_text", "str", "m", "NJ_RE", "match", "b_roll", "bRollCommand", "[]", "integerValueOfDifficulty", "$ret_or_1", "1", "eval_game_system_specific_command", "debug", "table", "TABLES", "roll", "randomizer", "EV", "node", "parse", "executeEV", "AT", "executeAT", "EL", "executeEL", "private", "EV_RE", "parseEV", "Regexp", "last_match", "AT_RE", "parseAT", "EL_RE", "parseEL", "num", "to_i", "difficulty", "targetValue", "ev", "roll_result", "BCDice::CommonCommand::BarabaraDice", "BCDice::CommonCommand", "BCDice", "eval", "@randomizer", "parts", "text", ">", "success_num", "push", "join", "at", "num_of_max_values", "last_dice_list", "count", ">=", "el", "values", "sum_of_true_values", "block in executeEL", "v", "block (2 levels) in executeEL", "+", "s", "DIFFICULTY_SYMBOL_TO_INTEGER", "fetch", "upcase", "DiceTable::Table", "DiceTable", "SATSUBATSU_TABLE", "register_prefix", "keys", "Base"], :mappings=>"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"}}]}