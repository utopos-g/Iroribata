{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/cthulhu7th/rollable.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Cthulhu7th < Base\n      module Rollable\n        private\n\n        # 1D100の一の位用のダイスロール\n        # 0から9までの値を返す\n        #\n        # @return [Integer]\n        def roll_ones_d10\n          dice = @randomizer.roll_once(10)\n          return 0 if dice == 10\n\n          return dice\n        end\n\n        # @param bonus [Integer] ボーナス・ペナルティダイスの数。負の数ならペナルティダイス。\n        # @return [Array<(Integer, Array<Integer>)>]\n        def roll_with_bonus(bonus)\n          tens_list = Array.new(bonus.abs + 1) { @randomizer.roll_tens_d10 }\n          ones = roll_ones_d10()\n\n          dice_list = tens_list.map do |tens|\n            dice = tens + ones\n            dice == 0 ? 100 : dice\n          end\n\n          dice =\n            if bonus >= 0\n              dice_list.min\n            else\n              dice_list.max\n            end\n\n          return dice, dice_list\n        end\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:GameSystem>", "<class:Cthulhu7th>", "<module:Rollable>", "self", "private", "roll_ones_d10", "dice", "@randomizer", "roll_once", "10", "0", "roll_with_bonus", "bonus", "tens_list", "new", "Array", "+", "abs", "1", "block in roll_with_bonus", "block (2 levels) in roll_with_bonus", "roll_tens_d10", "ones", "dice_list", "map", "tens", "100", ">=", "min", "max", "Base"], :mappings=>"AAAAA,yDAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;QACEA,OAAAC;QAAAA;;UAAAA;;;UACEC,IAAAC,SAAAA,CAAAA;;AAMAC,UAAAA,6BAAAA,yBAAAA;AAAAA,YAAAA;AAAAA;;;YACEC,OAAOC,eAAWC,WAAAA,CAAWC,EAAXD;YAClB,IAAA,MAAYF,IAAZ,EAAoBG,EAApB,CAAA;cAAA,OAAOC;YAAP;YAEA,OAAOJ;UAJTD,CAAAA;UASAH,OAAAS,+BAAAA,2BAAoBC,KAApBD;AAAAA,YAAAA;;;YACEE,YAAiBC,MAALC,WAAKD,OAAAA,EAAAA,CAAeE,SAAVJ,KAAKK,KAAAA,CAAAA,CAAKD,EAAEE,CAAFF,CAAfF,CAAAA,EAALK,aAAAA,EAAAC;AAAAA;;cAA2BA,OAAAb,eAAWc,eAAAA,CAAAA,CAAtCF,CAAAA,GAAAA,SAAAA,CAAKL;YACjBQ,OAAOnB,IAAAE,eAAAA,CAAAA;YAEPkB,YAAqBC,MAATX,SAASW,OAAAA,EAAAA,EAAAA,EAATL,aAAkBM,IAAlBN,EAAAC;;;cAAkB;cAC5Bd,OAAYU,SAALS,IAAKT,EAAEM,IAAFN;cACZ,IAAA,MAAAV,IAAA,EAAQI,CAAR,CAAA;gBAAYU,OAAAM;cAAZ;gBAAkBN,OAAAd;cAAlB,EAFUa,CAASK;YAKrBlB,OACE,CAAA,QAASqB,OAANf,KAAMe,EAAGjB,CAAHiB,CAAT,CAAA,GAAA,CACEJ,SAASK,KAAAA,CAAAA,CADX,IAAA,CAGEL,SAASM,KAAAA,CAAAA,CAHX,CAAA;YAMF,OAAA,CAAOvB,IAAP,EAAaiB,SAAb;UAhBFZ,CAAAA;QAhBFT,GAAAA,WAAAA;MADFD,GAAAA,WAAAA,EAAmB6B,UAAnB7B;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>65, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/cthulhu7th/full_auto.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Cthulhu7th < Base\n      class FullAuto\n        BONUS_DICE_RANGE = (-2..2).freeze\n\n        # 連射処理を止める条件（難易度の閾値）\n        # @return [Hash<String, Integer>]\n        #\n        # 成功の種類の小文字表記 => 難易度の閾値\n        ROLL_FULL_AUTO_DIFFICULTY_THRESHOLD = {\n          # レギュラー\n          \"r\" => 0,\n          # ハード\n          \"h\" => 1,\n          # イクストリーム\n          \"e\" => 2\n        }.freeze\n\n        def self.eval(command, randomizer)\n          new.eval(command, randomizer)\n        end\n\n        def eval(command, randomizer)\n          @randomizer = randomizer\n          getFullAutoResult(command)\n        end\n\n        private\n\n        include Rollable\n\n        def getFullAutoResult(command)\n          m = /^FAR\\((-?\\d+),(-?\\d+),(-?\\d+)(?:,(-?\\d+)?)?(?:,(-?\\w+)?)?(?:,(-?\\d+)?)?\\)$/i.match(command)\n          unless m\n            return nil\n          end\n\n          bullet_count = m[1].to_i\n          diff = m[2].to_i\n          broken_number = m[3].to_i\n          bonus_dice_count = m[4].to_i\n          stop_count = m[5]&.downcase || \"\"\n          bullet_set_count_cap = m[6]&.to_i || (diff / 10).to_i\n\n          output = \"\"\n\n          # 最大で（8回*（PC技能値最大値/10））＝72発しか撃てないはずなので上限\n          bullet_count_limit = 100\n          if bullet_count > bullet_count_limit\n            output += \"弾薬が多すぎます。装填された弾薬を\#{bullet_count_limit}発に変更します。\\n\"\n            bullet_count = bullet_count_limit\n          end\n\n          # ボレーの上限の設定がおかしい場合の注意表示\n          if (bullet_set_count_cap > (diff / 10).to_i) && (diff > 39) && !m[6].nil?\n            bullet_set_count_cap = (diff / 10).to_i\n            output += \"ボレーの弾丸の数の上限は\\[技能値÷10（切り捨て）\\]発なので、それより高い数を指定できません。ボレーの弾丸の数を\#{bullet_set_count_cap}発に変更します。\\n\"\n          elsif (diff <= 39) && (bullet_set_count_cap > 3) && !m[6].nil?\n            bullet_set_count_cap = 3\n            output += \"技能値が39以下ではボレーの弾丸の数の上限および下限は3発です。ボレーの弾丸の数を\#{bullet_set_count_cap}発に変更します。\\n\"\n          end\n\n          # ボレーの下限の設定がおかしい場合の注意表示およびエラー表示\n          return \"ボレーの弾丸の数は正の数です。\" if (bullet_set_count_cap <= 0) && !m[6].nil?\n\n          if (bullet_set_count_cap < 3) && !m[6].nil?\n            bullet_set_count_cap = 3\n            output += \"ボレーの弾丸の数の下限は3発です。ボレーの弾丸の数を3発に変更します。\\n\"\n          end\n\n          return \"弾薬は正の数です。\" if bullet_count <= 0\n          return \"目標値は正の数です。\" if diff <= 0\n\n          if broken_number < 0\n            output += \"故障ナンバーは正の数です。マイナス記号を外します。\\n\"\n            broken_number = broken_number.abs\n          end\n\n          unless BONUS_DICE_RANGE.include?(bonus_dice_count)\n            return \"エラー。ボーナス・ペナルティダイスの値は\#{BONUS_DICE_RANGE.min}～\#{BONUS_DICE_RANGE.max}です。\"\n          end\n\n          output += \"ボーナス・ペナルティダイス[\#{bonus_dice_count}]\"\n          output += rollFullAuto(bullet_count, diff, broken_number, bonus_dice_count, stop_count, bullet_set_count_cap)\n\n          return output\n        end\n\n        def rollFullAuto(bullet_count, diff, broken_number, dice_num, stop_count, bullet_set_count_cap)\n          output = \"\"\n          loopCount = 0\n\n          counts = {\n            hit_bullet: 0,\n            impale_bullet: 0,\n            bullet: bullet_count,\n          }\n\n          # 難易度変更用ループ\n          4.times do |more_difficulty|\n            output += getNextDifficultyMessage(more_difficulty)\n\n            # ペナルティダイスを減らしながらロール用ループ\n            while dice_num >= BONUS_DICE_RANGE.min\n\n              loopCount += 1\n              hit_result, total, total_list = getHitResultInfos(dice_num, diff, more_difficulty)\n              output += \"\\n\#{loopCount}回目: ＞ \#{total_list.join(', ')} ＞ \#{hit_result}\"\n\n              if total >= broken_number\n                output += \"　ジャム\"\n                return getHitResultText(output, counts)\n              end\n\n              hit_type = getHitType(more_difficulty, hit_result)\n              hit_bullet, impale_bullet, lost_bullet = getBulletResults(counts[:bullet], hit_type, diff, bullet_set_count_cap)\n\n              output += \"　（\#{hit_bullet}発が命中、\#{impale_bullet}発が貫通）\"\n\n              counts[:hit_bullet] += hit_bullet\n              counts[:impale_bullet] += impale_bullet\n              counts[:bullet] -= lost_bullet\n\n              return getHitResultText(output, counts) if counts[:bullet] <= 0\n\n              dice_num -= 1\n            end\n\n            # 指定された難易度となった場合、連射処理を途中で止める\n            if shouldStopRollFullAuto?(stop_count, more_difficulty)\n              output += \"\\n【指定の難易度となったので、処理を終了します。】\"\n              break\n            end\n\n            dice_num += 1\n          end\n\n          return getHitResultText(output, counts)\n        end\n\n        # 連射処理を止めるべきかどうかを返す\n        # @param [String] stop_count 成功の種類\n        # @param [Integer] difficulty 難易度\n        # @return [Boolean]\n        def shouldStopRollFullAuto?(stop_count, difficulty)\n          difficulty_threshold = ROLL_FULL_AUTO_DIFFICULTY_THRESHOLD[stop_count]\n          return difficulty_threshold && difficulty >= difficulty_threshold\n        end\n\n        def getHitResultInfos(dice_num, diff, more_difficulty)\n          total, total_list = roll_with_bonus(dice_num)\n\n          fumbleable = getFumbleable(more_difficulty)\n          hit_result = ResultLevel.from_values(total, diff, fumbleable).to_s\n\n          return hit_result, total, total_list\n        end\n\n        def getHitResultText(output, counts)\n          return \"\#{output}\\n＞ \#{counts[:hit_bullet]}発が通常命中、\#{counts[:impale_bullet]}発が貫通、残弾\#{counts[:bullet]}発\"\n        end\n\n        def getHitType(more_difficulty, hit_result)\n          successList, impaleBulletList = getSuccessListImpaleBulletList(more_difficulty)\n\n          return :hit if successList.include?(hit_result)\n          return :impale if impaleBulletList.include?(hit_result)\n\n          return \"\"\n        end\n\n        def getBulletResults(bullet_count, hit_type, diff, bullet_set_count_cap)\n          bullet_set_count = getSetOfBullet(diff, bullet_set_count_cap)\n          hit_bullet_count_base = getHitBulletCountBase(diff, bullet_set_count)\n          impale_bullet_count_base = (bullet_set_count / 2.to_f)\n\n          lost_bullet_count = 0\n          hit_bullet_count = 0\n          impale_bullet_count = 0\n\n          if !isLastBulletTurn(bullet_count, bullet_set_count)\n\n            case hit_type\n            when :hit\n              hit_bullet_count = hit_bullet_count_base # 通常命中した弾数の計算\n\n            when :impale\n              impale_bullet_count = impale_bullet_count_base.floor # 貫通した弾数の計算\n              hit_bullet_count = impale_bullet_count_base.ceil\n            end\n\n            lost_bullet_count = bullet_set_count\n\n          else\n\n            case hit_type\n            when :hit\n              hit_bullet_count = getLastHitBulletCount(bullet_count)\n\n            when :impale\n              impale_bullet_count = getLastHitBulletCount(bullet_count)\n              hit_bullet_count = bullet_count - impale_bullet_count\n            end\n\n            lost_bullet_count = bullet_count\n          end\n\n          return hit_bullet_count, impale_bullet_count, lost_bullet_count\n        end\n\n        def getSuccessListImpaleBulletList(more_difficulty)\n          successList = []\n          impaleBulletList = []\n\n          case more_difficulty\n          when 0\n            successList = [\"ハード成功\", \"レギュラー成功\"]\n            impaleBulletList = [\"クリティカル\", \"イクストリーム成功\"]\n          when 1\n            successList = [\"ハード成功\"]\n            impaleBulletList = [\"クリティカル\", \"イクストリーム成功\"]\n          when 2\n            successList = []\n            impaleBulletList = [\"クリティカル\", \"イクストリーム成功\"]\n          when 3\n            successList = [\"クリティカル\"]\n            impaleBulletList = []\n          end\n\n          return successList, impaleBulletList\n        end\n\n        def getNextDifficultyMessage(more_difficulty)\n          case more_difficulty\n          when 1\n            return \"\\n【難易度がハードに変更】\"\n          when 2\n            return \"\\n【難易度がイクストリームに変更】\"\n          when 3\n            return \"\\n【難易度がクリティカルに変更】\"\n          end\n\n          return \"\"\n        end\n\n        def getSetOfBullet(diff, bullet_set_count_cap)\n          bullet_set_count = (diff / 10).to_i\n\n          if bullet_set_count_cap < bullet_set_count\n            bullet_set_count = bullet_set_count_cap\n          end\n\n          if (diff >= 1) && (diff < 30)\n            bullet_set_count = 3 # 技能値が29以下での最低値保障処理\n          end\n\n          return bullet_set_count\n        end\n\n        def getHitBulletCountBase(diff, bullet_set_count)\n          hit_bullet_count_base = (bullet_set_count / 2).to_i\n\n          if (diff >= 1) && (diff < 30)\n            hit_bullet_count_base = 1 # 技能値29以下での最低値保障\n          end\n\n          return hit_bullet_count_base\n        end\n\n        def isLastBulletTurn(bullet_count, bullet_set_count)\n          ((bullet_count - bullet_set_count) < 0)\n        end\n\n        def getLastHitBulletCount(bullet_count)\n          # 残弾1での最低値保障処理\n          if bullet_count == 1\n            return 1\n          end\n\n          count = (bullet_count / 2.to_f).floor\n          return count\n        end\n\n        def getFumbleable(more_difficulty)\n          # 成功が49以下の出目のみとなるため、ファンブル値は上昇\n          return (more_difficulty >= 1)\n        end\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:GameSystem>", "<class:Cthulhu7th>", "<class:FullAuto>", "-2", "2", "freeze", "0", "1", "eval", "self", "command", "randomizer", "new", "@randomizer", "getFullAutoResult", "private", "include", "Rollable", "m", "match", "bullet_count", "[]", "to_i", "diff", "broken_number", "3", "bonus_dice_count", "4", "stop_count", "$ret_or_1", "5", "bullet_set_count_cap", "6", "/", "10", "output", "bullet_count_limit", "100", ">", "+", "39", "nil?", "<=", "<", "abs", "BONUS_DICE_RANGE", "include?", "min", "max", "rollFullAuto", "dice_num", "loopCount", "counts", "times", "block in rollFullAuto", "more_difficulty", "block (2 levels) in rollFullAuto", "getNextDifficultyMessage", ">=", "getHitResultInfos", "hit_result", "total", "total_list", "join", "getHitResultText", "hit_type", "getHitType", "getBulletResults", "hit_bullet", "impale_bullet", "lost_bullet", "[]=", "-", "shouldStopRollFullAuto?", "difficulty", "difficulty_threshold", "ROLL_FULL_AUTO_DIFFICULTY_THRESHOLD", "roll_with_bonus", "fumbleable", "getFumbleable", "ResultLevel", "from_values", "to_s", "getSuccessListImpaleBulletList", "successList", "impaleBulletList", "bullet_set_count", "getSetOfBullet", "hit_bullet_count_base", "getHitBulletCountBase", "impale_bullet_count_base", "to_f", "lost_bullet_count", "hit_bullet_count", "impale_bullet_count", "isLastBulletTurn", "floor", "ceil", "getLastHitBulletCount", "30", "count", "Base"], :mappings=>"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"}}, {:offset=>{:line=>399, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Cthulhu7th.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/game_system/cthulhu7th/rollable\"\nrequire \"bcdice/game_system/cthulhu7th/full_auto\"\n\nmodule BCDice\n  module GameSystem\n    class Cthulhu7th < Base\n      # ゲームシステムの識別子\n      ID = 'Cthulhu7th'\n\n      # ゲームシステム名\n      NAME = '新クトゥルフ神話TRPG'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'しんくとうるふしんわTRPG'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・判定　CC(x)<=（目標値）\n        　x：ボーナス・ペナルティダイス。省略可。\n        　目標値が無くても1D100は表示される。\n        　ファンブル／失敗／　レギュラー成功／ハード成功／\n        　イクストリーム成功／クリティカル を自動判定。\n        　例）CC<=30　CC(2)<=50 CC(+2)<=50 CC(-1)<=75 CC-1<=50 CC1<=65 CC+1<=65 CC\n\n        ・技能ロールの難易度指定　CC(x)<=(目標値)(難易度)\n        　目標値の後に難易度を指定することで\n        　成功／失敗／クリティカル／ファンブル を自動判定する。\n        　難易度の指定：\n        　　r:レギュラー　h:ハード　e:イクストリーム　c:クリティカル\n        　例）CC<=70r CC1<=60h CC-2<=50e CC2<=99c\n\n        ・組み合わせ判定　(CBR(x,y))\n        　目標値 x と y で％ロールを行い、成否を判定。\n        　例）CBR(50,20)\n\n        ・自動火器の射撃判定　FAR(w,x,y,z,d,v)\n        　w：弾丸の数(1～100）、x：技能値（1～100）、y：故障ナンバー、\n        　z：ボーナス・ペナルティダイス(-2～2)。省略可。\n        　d：指定難易度で連射を終える（レギュラー：r,ハード：h,イクストリーム：e）。省略可。\n        　v：ボレーの弾丸の数を変更する。省略可。\n        　命中数と貫通数、残弾数のみ算出。ダメージ算出はありません。\n        例）FAR(25,70,98)　FAR(50,80,98,-1)　far(30,70,99,1,R)\n        　　far(25,88,96,2,h,5)　FaR(40,77,100,,e,4)　fAr(20,47,100,,,3)\n\n        ・各種表\n        　【狂気関連】\n        　・狂気の発作（リアルタイム）（Bouts of Madness Real Time）　BMR\n        　・狂気の発作（サマリー）（Bouts of Madness Summary）　BMS\n        　・恐怖症（Sample Phobias）表　PH／マニア（Sample Manias）表　MA\n        　【魔術関連】\n        　・プッシュ時のキャスティング・ロール（Casting Roll）の失敗表\n        　　強力でない呪文の場合　FCL／強力な呪文の場合　FCM\n      INFO_MESSAGE_TEXT\n\n      register_prefix('CC', 'CBR', 'FAR', 'BMR', 'BMS', 'FCL', 'FCM', 'PH', 'MA')\n\n      def eval_game_system_specific_command(command)\n        case command\n        when /^CC/i\n          skill_roll(command)\n        when /^CBR/i\n          combine_roll(command)\n        when /^FAR/i\n          getFullAutoResult(command)\n        when \"BMR\" # 狂気の発作（リアルタイム）\n          roll_bmr_table()\n        when \"BMS\" # 狂気の発作（サマリー）\n          roll_bms_table()\n        when \"FCL\" # キャスティング・ロールのプッシュに失敗した場合（小）\n          roll_1d8_table(\"キャスティング・ロール失敗(小)表\", FAILED_CASTING_L_TABLE)\n        when \"FCM\" # キャスティング・ロールのプッシュに失敗した場合（大）\n          roll_1d8_table(\"キャスティング・ロール失敗(大)表\", FAILED_CASTING_M_TABLE)\n        when \"PH\" # 恐怖症表\n          roll_1d100_table(\"恐怖症表\", PHOBIAS_TABLE)\n        when \"MA\" # マニア表\n          roll_1d100_table(\"マニア表\", MANIAS_TABLE)\n        end\n      end\n\n      class ResultLevel\n        LEVEL = [\n          :fumble,\n          :failure,\n          :success,\n          :regular_success,\n          :hard_success,\n          :extreme_success,\n          :critical,\n        ].freeze\n\n        LEVEL_TO_S = {\n          critical: \"クリティカル\",\n          extreme_success: \"イクストリーム成功\",\n          hard_success: \"ハード成功\",\n          regular_success: \"レギュラー成功\",\n          success: \"成功\",\n          fumble: \"ファンブル\",\n          failure: \"失敗\",\n        }.freeze\n\n        def self.with_difficulty_level(total, difficulty)\n          fumble = difficulty < 50 ? 96 : 100\n\n          if total == 1\n            ResultLevel.new(:critical)\n          elsif total >= fumble\n            ResultLevel.new(:fumble)\n          elsif total <= difficulty\n            ResultLevel.new(:success)\n          else\n            ResultLevel.new(:failure)\n          end\n        end\n\n        def self.from_values(total, difficulty, fumbleable = false)\n          fumble = difficulty < 50 || fumbleable ? 96 : 100\n\n          if total == 1\n            ResultLevel.new(:critical)\n          elsif total >= fumble\n            ResultLevel.new(:fumble)\n          elsif total <= (difficulty / 5).to_i\n            ResultLevel.new(:extreme_success)\n          elsif total <= (difficulty / 2).to_i\n            ResultLevel.new(:hard_success)\n          elsif total <= difficulty\n            ResultLevel.new(:regular_success)\n          else\n            ResultLevel.new(:failure)\n          end\n        end\n\n        def initialize(level)\n          @level = level\n          @level_index = LEVEL.index(level)\n          raise ArgumentError unless @level_index\n        end\n\n        def success?\n          @level_index >= LEVEL.index(:success)\n        end\n\n        def failure?\n          @level_index <= LEVEL.index(:failure)\n        end\n\n        def critical?\n          @level == :critical\n        end\n\n        def fumble?\n          @level == :fumble\n        end\n\n        def to_s\n          LEVEL_TO_S[@level]\n        end\n      end\n\n      private\n\n      include Rollable\n\n      def roll_1d8_table(table_name, table)\n        total_n = @randomizer.roll_once(8)\n        index = total_n - 1\n\n        text = table[index]\n\n        return \"\#{table_name}(\#{total_n}) ＞ \#{text}\"\n      end\n\n      def roll_1d100_table(table_name, table)\n        total_n = @randomizer.roll_once(100)\n        index = total_n - 1\n\n        text = table[index]\n\n        return \"\#{table_name}(\#{total_n}) ＞ \#{text}\"\n      end\n\n      def skill_roll(command)\n        m = /^CC([-+]?\\d+)?(?:<=(\\d+)([RHEC])?)?$/.match(command)\n        unless m\n          return nil\n        end\n\n        bonus_dice = m[1].to_i\n        difficulty = m[2]&.to_i\n        difficulty_level = m[3]\n\n        if difficulty == 0\n          difficulty = nil\n        elsif difficulty_level == \"H\"\n          difficulty = (difficulty / 2).to_i\n        elsif difficulty_level == \"E\"\n          difficulty = (difficulty / 5).to_i\n        elsif difficulty_level == \"C\"\n          difficulty = 0\n        end\n\n        if bonus_dice == 0 && difficulty.nil?\n          dice = @randomizer.roll_once(100)\n          return \"1D100 ＞ \#{dice}\"\n        end\n\n        if bonus_dice.abs > 100\n          return \"ボーナス・ペナルティダイスの値は-100以上、100以下としてください\"\n        end\n\n        total, total_list = roll_with_bonus(bonus_dice)\n\n        expr = difficulty.nil? ? \"1D100\" : \"1D100<=\#{difficulty}\"\n        result =\n          if difficulty_level\n            ResultLevel.with_difficulty_level(total, difficulty)\n          elsif difficulty\n            ResultLevel.from_values(total, difficulty)\n          end\n\n        sequence = [\n          \"(\#{expr}) ボーナス・ペナルティダイス[\#{bonus_dice}]\",\n          total_list.join(\", \"),\n          total,\n          result,\n        ].compact\n\n        Result.new.tap do |r|\n          r.text = sequence.join(\" ＞ \")\n          if result\n            r.condition = result.success?\n            r.critical = result.critical?\n            r.fumble = result.fumble?\n          end\n        end\n      end\n\n      def getFullAutoResult(command)\n        FullAuto.eval(command, @randomizer)\n      end\n\n      def combine_roll(command)\n        m = /^CBR\\((\\d+),(\\d+)\\)$/.match(command)\n        return nil unless m\n\n        difficulty_1 = m[1].to_i\n        difficulty_2 = m[2].to_i\n\n        total = @randomizer.roll_once(100)\n\n        result_1 = ResultLevel.from_values(total, difficulty_1)\n        result_2 = ResultLevel.from_values(total, difficulty_2)\n\n        rank =\n          if result_1.success? && result_2.success?\n            \"成功\"\n          elsif result_1.success? || result_2.success?\n            \"部分的成功\"\n          else\n            \"失敗\"\n          end\n\n        Result.new.tap do |r|\n          r.text = \"(1d100<=\#{difficulty_1},\#{difficulty_2}) ＞ \#{total}[\#{result_1},\#{result_2}] ＞ \#{rank}\"\n          r.success = result_1.success? && result_2.success?\n          r.failure = result_1.failure? && result_2.failure?\n        end\n      end\n\n      # 表一式\n      # 即時の恐怖症表\n      def roll_bmr_table()\n        total_n = @randomizer.roll_once(10)\n        text = MADNESS_REAL_TIME_TABLE[total_n - 1]\n\n        time_n = @randomizer.roll_once(10)\n\n        return \"狂気の発作（リアルタイム）(\#{total_n}) ＞ \#{text}(1D10＞\#{time_n}ラウンド)\"\n      end\n\n      MADNESS_REAL_TIME_TABLE = [\n        '健忘症：探索者は、最後に安全な場所にいた時からあとに起こった出来事の記憶を持たない。例えば、朝食を食べていた次の瞬間には怪物と向かい合っている。これは1D10ラウンド続く。',\n        '身体症状症：探索者は1D10ラウンドの間、狂気によって視覚や聴覚に異常が生じたり、四肢の1つまたは複数が動かなくなる。',\n        '暴力衝動：赤い霧が探索者に降り、1D10ラウンドの間、抑えの利かない暴力と破壊を敵味方を問わず周囲に向かって爆発させる。',\n        '偏執症：探索者は1D10ラウンドの間、重い偏執症に襲われる。誰もが探索者に襲い掛かろうとしている。信用できる者はいない。監視されている。裏切ったやつがいる。これはわなだ。',\n        '重要な人々：探索者のバックストーリーの重要な人々を見直す。探索者はその場にいた人物を、自分にとっての重要な人々だと思い込む。人間関係の性質を考慮した上で、探索者はそれに従って行動する。1D10ラウンド続く。',\n        '失神：探索者は失神する。1D10ラウンド後に回復する。',\n        'パニックになって逃亡する：探索者は利用できるあらゆる手段を使って、可能なかぎり遠くへ逃げ出さずにはいられない。それが唯一の車両を奪って仲間を置き去りにすることであっても。探索者は1D10ラウンドの間、逃げ続ける。',\n        '身体的ヒステリーもしくは感情爆発：探索者は1D10ラウンドの間、笑ったり、泣いたり、あるいは叫んだりし続け、行動できなくなる。',\n        '恐怖症：探索者は新しい恐怖症に陥る。恐怖症表（PHコマンド）をロールするか、キーパーが恐怖症を1つ選ぶ。恐怖症の原因は存在しなくとも、その探索者は次の1D10ラウンドの間、それがそこにあると思い込む。',\n        'マニア：探索者は新しいマニアに陥る。マニア表（MAコマンド）をロールするか、キーパーがマニアを1つ選ぶ。その探索者は次の1D10ラウンドの間、自分の新しいマニアに没頭しようとする。'\n      ].freeze\n\n      # 略式の恐怖表\n      def roll_bms_table()\n        total_n = @randomizer.roll_once(10)\n        text = MADNESS_SUMMARY_TABLE[total_n - 1]\n\n        time_n = @randomizer.roll_once(10)\n\n        return \"狂気の発作（サマリー）(\#{total_n}) ＞ \#{text}(1D10＞\#{time_n}時間)\"\n      end\n\n      MADNESS_SUMMARY_TABLE = [\n        '健忘症：探索者が意識を取り戻すと、見知らぬ場所におり、自分が誰かもわからない。記憶は時間をかけてゆっくりと戻るだろう。',\n        '盗難：探索者は1D10時間後に意識を取り戻すが、盗難の被害を受けている。傷つけられてはいない。探索者が秘蔵の品を身に着けていた場合（「探索者のバックストーリー」参照）、〈幸運〉ロールを行い、それが盗まれていないか判定する。値打ちのあるものはすべて自動的に失われる。',\n        '暴行：探索者は1D10時間後に意識を取り戻し、自分が暴行を受け、傷ついていることに気づく。耐久力は狂気に陥る前の半分に減少している。ただし重症は生じていない。盗まれたものはない。どのようにダメージが加えられたかは、キーパーに委ねられる。',\n        '暴力：探索者は暴力と破壊の噴流を爆発させる。探索者が意識を取り戻した時、その行動を認識し記憶していることもあればそうでないこともある。探索者が暴力を振るった物、もしくは人、そして相手を殺してしまったのか、あるいは単に傷つけただけなのかはキーパーに委ねられる。',\n        'イデオロギー／信念：探索者のバックストーリーのイデオロギーと信念を参照する。探索者はこれらの1つの権化となり、急進的かつ狂気じみて、感情もあらわに主張するようになる。例えば、宗教に関係する者は、その後地下鉄で声高に福音を説教しているところを目撃されるかもしれない。',\n        '重要な人々：探索者のバックストーリーの重要な人々を参照し、なぜその人物との関係が重要かを考える。時間がたってから（1D10時間以上）、探索者はその人物に近づくための最善の行動、そしてその人物との関係にとって最善の行動をとる。',\n        '収容：探索者は精神療養施設あるいは警察の留置所で意識を取り戻す。探索者は徐々にそこにいたった出来事を思い出すかもしれない。',\n        'パニック：探索者は非常に遠い場所で意識を取り戻す。荒野で道に迷っているか、列車に乗っているか、長距離バスに乗っているかもしれない。',\n        '恐怖症：探索者は新たな恐怖症を獲得する。恐怖症表（PHコマンド）をロールするか、キーパーがどれか1つ選ぶ。探索者は1D10時間後に意識を取り戻し、この新たな恐怖症の対象を避けるためにあらゆる努力をする。',\n        'マニア：探索者は新たなマニアを獲得する。マニア表（MAコマンド）をロールするか、キーパーがどれか1つ選ぶ。この狂気の発作の間、探索者はこの新たなマニアに完全に溺れているだろう。これがほかの人々に気づかれるかどうかは、キーパーとプレイヤーに委ねられる。'\n      ].freeze\n\n      # キャスティング・ロールのプッシュに失敗した場合（小）\n      FAILED_CASTING_L_TABLE = [\n        '視界がぼんやりするか、あるいは一時的な失明。',\n        '悲鳴、声、あるいはほかの雑音が肉体から発せられる。',\n        '強風やほかの大気の現象。',\n        '術者、ほかのその場に居合わせた者が出血する。あるいは環境（例えば、壁）から出血する。',\n        '奇妙な幻視と幻覚。',\n        'その付近の小動物たちが爆発する。',\n        '硫黄の悪臭。',\n        'クトゥルフ神話の怪物が偶然召喚される。'\n      ].freeze\n\n      # キャスティング・ロールのプッシュに失敗した場合（大）\n      FAILED_CASTING_M_TABLE = [\n        '大地が震え、壁に亀裂が入って崩れる。',\n        '叙事詩的な電撃。',\n        '血が空から降る。',\n        '術者の手がしなび、焼けただれる。',\n        '術者は不自然に年をとる（年齢に+2D10歳、30ページの「年齢」を参照し、能力値に修正を適用すること）。',\n        '強力な、あるいは無数のクトゥルフ神話存在が現れ、術者を手始めに、近くの全員を攻撃する！',\n        '術者や近くの全員が遠い時代か場所に吸い込まれる。',\n        'クトゥルフ神話の神格が偶然招来される。'\n      ].freeze\n\n      # 恐怖症表\n      PHOBIAS_TABLE = [\n        '入浴恐怖症：体、手、顔を洗うのが怖い。',\n        '高所恐怖症：高いところが怖い。',\n        '飛行恐怖症：飛ぶのが怖い。',\n        '広場恐怖症：広場、公共の(混雑した)場所が怖い。',\n        '鶏肉恐怖症：鶏肉が怖い。',\n        'ニンニク恐怖症：ニンニクが怖い。',\n        '乗車恐怖症：車両の中にいたり車両に乗るのが怖い。',\n        '風恐怖症：風が怖い。',\n        '男性恐怖症：男性が怖い。',\n        'イングランド恐怖症：イングランド、もしくはイングランド文化などが怖い。',\n        '花恐怖症：花が怖い。',\n        '切断恐怖症：手足や指などが切断された人が怖い。',\n        'クモ恐怖症：クモが怖い。',\n        '稲妻恐怖症：稲妻が怖い。',\n        '廃墟恐怖症：廃墟が怖い。',\n        '笛恐怖症：笛(フルート)が怖い。',\n        '細菌恐怖症：細菌、バクテリアが怖い。',\n        '銃弾恐怖症：投擲物や銃弾が怖い。',\n        '落下恐怖症：落下が怖い。',\n        '書物恐怖症：本が怖い。',\n        '植物恐怖症：植物が怖い。',\n        '美女恐怖症：美しい女性が怖い。',\n        '低温恐怖症：冷たいものが怖い。',\n        '時計恐怖症：時計が怖い。',\n        '閉所恐怖症：壁に囲まれた場所が怖い。',\n        '道化師恐怖症：道化師が怖い。',\n        '犬恐怖症：犬が怖い。',\n        '悪魔恐怖症：悪魔が怖い。',\n        '群集恐怖症：人混みが怖い。',\n        '歯科医恐怖症：歯科医が怖い。',\n        '処分恐怖症：物を捨てるのが怖い(ためこみ症)',\n        '毛皮恐怖症：毛皮が怖い。',\n        '構断恐怖症：道路を横断するのが怖い。',\n        '教会恐怖症：教会が怖い。',\n        '鏡恐怖症：鏡が怖い。',\n        'ピン恐怖症：針やピンが怖い。',\n        '昆虫恐怖症：昆虫が怖い。',\n        '猫恐怖症：猫が怖い。',\n        '橋恐怖症：橋を渡るのが怖い。',\n        '老人恐怖症：老人や年をとることが怖い。',\n        '女性恐怖症：女性が怖い。',\n        '血液恐怖症：血が怖い。',\n        '過失恐怖症：失敗が怖い。',\n        '接触恐怖症：触ることが怖い。',\n        '爬虫類恐怖症：爬虫類が怖い。',\n        '霧恐怖症：霧が怖い。',\n        '銃器恐怖症：銃器が怖い。',\n        '水恐怖症：水が怖い。',\n        '睡眠恐怖症：眠ったり、催眠状態に陥るのが怖い。',\n        '医師恐怖症：医師が怖い。',\n        '魚恐怖症：魚が怖い。',\n        'ゴキブリ恐怖症：ゴキブリが怖い。',\n        '雷鳴恐怖症：雷鳴が怖い。',\n        '野菜恐怖症：野菜が怖い。',\n        '大騒音恐怖症：大きな騒音が怖い。',\n        '湖恐怖症：湖が怖い。',\n        '機械恐怖症：機械や装置が怖い。',\n        '巨大物恐怖症：巨大なものが怖い。',\n        '拘束恐怖症：縛られたり結びつけられたりするのが怖い。',\n        '隕石恐怖症：流星や隕石が怖い。',\n        '孤独恐怖症：独りでいることが怖い。',\n        '汚染恐怖症：汚れたり汚染されたりするのが怖い。',\n        '粘液恐怖症：粘液、粘体が怖い。',\n        '死体恐怖症：死体が怖い。',\n        '8恐怖症：8の数字が怖い。',\n        '歯恐怖症：歯が怖い。',\n        '夢恐怖症：夢が怖い。',\n        '名称恐怖症：特定の言葉（1つまたは複数）を聞くのが怖い。',\n        '蛇恐怖症：蛇が怖い。',\n        '鳥恐怖症：鳥が怖い。',\n        '寄生生物恐怖症：寄生生物が怖い。',\n        '人形恐怖症：人形が怖い。',\n        '恐食症：のみ込むこと食べること、もしくは食べられることが怖い。',\n        '薬物恐怖症：薬物が怖い。',\n        '幽霊恐怖症：幽霊が怖い。',\n        '羞明：日光が怖い。',\n        'ひげ恐怖症：ひげが怖い',\n        '河川恐怖症：川が怖い',\n        'アルコール恐怖症：アルコールやアルコール飲料が怖い。',\n        '火恐怖症：火が怖い。',\n        '魔術恐怖症：魔術が怖い。',\n        '暗黒恐怖症：暗闇や夜が怖い。',\n        '月恐怖症：月が怖い。',\n        '鉄道恐怖症：列車の旅が怖い。',\n        '星恐怖症：星が怖い。',\n        '狭所恐怖症：狭いものや場所が怖い。',\n        '対称恐怖症：左右対称が怖い。',\n        '生き埋め恐怖症：生き埋めになることや墓地が怖い。',\n        '雄牛恐怖症：雄牛が怖い。',\n        '電話恐怖症：電話が怖い。',\n        '奇形恐怖症：怪物が怖い。',\n        '海洋恐怖症：海が怖い。',\n        '手術恐怖症：外科手術が怖い。',\n        '13恐怖症：13の数字が怖い。',\n        '衣類恐怖症：衣服が怖い。',\n        '魔女恐怖症：魔女と魔術が怖い。',\n        '黄色恐怖症：黄色や「黄色」という言葉が怖い。',\n        '外国語恐怖症：外国語が怖い。',\n        '外国人恐怖症：外国人が怖い。',\n        '動物恐怖症：動物が怖い。',\n      ].freeze\n\n      # マニア表\n      MANIAS_TABLE = [\n        '洗浄マニア：自分の体を洗わずにはいられない。',\n        '無為マニア：病的な優柔不断。',\n        '暗闇マニア：暗黒に関する過度の嗜好。',\n        '高所マニア：高い場所に登らずにはいられない。',\n        '善良マニア：病的な親切。',\n        '広場マニア：開けた場所にいたいという激しい願望。',\n        '先鋭マニア：鋭いもの、とがったものへの執着。',\n        '猫マニア：猫に関する異常な愛好心。',\n        '疼痛性愛：痛みへの執着。',\n        'にんにくマニア：にんにくへの執着。',\n        '乗り物マニア：車の中にいることへの執着。',\n        '病的快活：不合理なほがらかさ。',\n        '花マニア：花への執着。',\n        '計算マニア：数への偏執的な没頭。',\n        '浪費マニア：衝動的あるいは無謀な浪費。',\n        '自己マニア：孤独への過度の嗜好。',\n        'バレエマニア：バレエに関する異常な愛好心。',\n        '書籍約盗癖：本を盗みたいという強迫的衝動。',\n        '書物マニア：本または読書、あるいはその両方への執着。',\n        '歯ぎしりマニア：歯ぎしりしたいという強迫的衝動。',\n        '悪霊マニア：誰かの中に邪悪な精霊がいるという病的な信念。',\n        '自己愛マニア：自分自身の美への執着。',\n        '地図マニア：いたる所の地図を見る制御不可能な強迫的衝動。',\n        '飛び降りマニア：高い場所から跳躍することへの執着。',\n        '寒冷マニア：冷たさ、または冷たいもの、あるいはその両方への異常な欲望。',\n        '舞踏マニア：踊ることへの愛好もしくは制御不可能な熱狂。',\n        '睡眠マニア：寝ることへの過度の願望。',\n        '墓地マニア：墓地への執着。',\n        '色彩マニア：特定の色への執着。',\n        'ピエロマニア：ピエロへの執着。',\n        '遭遇マニア：恐ろしい状況を経験したいという強迫的衝動。',\n        '殺害マニア：殺害への執着。',\n        '悪魔マニア：誰かが悪魔にとりつかれているという病的な信念。',\n        '皮膚マニア：人の皮膚を引っぱりたいという強迫的衝動。',\n        '正義マニア：正義が完遂されるのを見たいという執着。',\n        'アルコールマニア：アルコールに関する異常な欲求。',\n        '毛皮マニア：毛皮を所有することへの執着。',\n        '贈り物マニア：贈り物を与えることへの執着。',\n        '逃走マニア：逃走することへの迫的衝動。',\n        '外出マニア：外を歩き回ることの強迫的衝動。',\n        '自己中心マニア：不合理な自心の態度か自己崇拝。',\n        '公職マニア：公的な職業に就きいという強欲な衝動。',\n        '戦慄マニア：誰かが罪を犯したという病的な信念',\n        '知識マニア：知識を得ることへ執着。',\n        '静寂マニア：静寂であることへ強迫的衝動。',\n        'エーテルマニア：エーテルへの切望',\n        '求婚マニア：奇妙な求婚をすることへの執着。',\n        '笑いマニア：制御不可能な笑うことへの強迫的衝動。',\n        '魔術マニア：魔女と魔術への執着。',\n        '筆記マニア：すべてを書き留めることへの執着。',\n        '裸体マニア：裸になりたいという強迫的衝動。',\n        '幻想マニア：快い幻想(現実とは関係なく)にとらわれやすい異常な傾向。',\n        '蟲マニア：蟲に関する過度の嗜好。',\n        '火器マニア：火器への執着。',\n        '水マニア：水に関する不合理な渇望。',\n        '魚マニア：魚への執着。',\n        'アイコンマニア：像や肖像への執着。',\n        'アイドルマニア：偶像への執着または献身。',\n        '情報マニア：事実を集めることへの過度の献身。',\n        '絶叫マニア：叫ぶことへの説明できない強迫的衝動。',\n        '窃盗マニア：盗むことへの説明できない強迫的衝動。',\n        '騒音マニア：大きな、あるいは甲高い騒音を出すことへの制御不可能な強迫的衝動。',\n        'ひもマニア：ひもへの執着。',\n        '宝くじマニア：宝くじに参加したいという極度の願望。',\n        'うつマニア：異常に深くふさぎ込む傾向。',\n        '巨石マニア：環状列石/立石があると奇妙な考えにとらわれる異常な傾向。',\n        '音楽マニア：音楽もしくは特定の旋律への執着。',\n        '作詩マニア：詩を書くことへの強欲な願望。',\n        '憎悪マニア：何らかの対象あるいはグループの何もかもを憎む執着。',\n        '偏執マニア：ただ1つの思想やアイデアへの異常な執着。',\n        '虚言マニア：異常なほどにうそをついたり、誇張して話す。',\n        '疾病マニア：想像上の病気に苦められる幻想。',\n        '記録マニア：あらゆるものを記録に残そうという強迫的衝動。',\n        '名前マニア：人々、場所、ものなどの名前への執着',\n        '単語マニア：ある単語を繰り返したいという押さえ切れない欲求。',\n        '爪損傷マニア：指の爪をむしったりはがそうとする強迫的衝動。',\n        '美食マニア：1種類の食物への異常な愛。',\n        '不平マニア：不平を言うことへの異常な喜び。',\n        '仮面マニア：仮面や覆面を着けたいという強迫的衝動。',\n        '幽霊マニア：幽霊への執着。',\n        '殺人マニア：殺人への病的な傾向。',\n        '光線マニア：光への病的な願望。',\n        '放浪マニア：社会の規範に背きたいという異常な欲望。',\n        '長者マニア：富への強迫的な欲望。',\n        '病的虚言マニア：うそをつきたくてたまらない強迫的衝動。',\n        '放火マニア：火をつけることへの強迫的衝動。',\n        '質問マニア：質問したいという激しい強迫的衝動。',\n        '鼻マニア：鼻をいじりたいという強迫的衝動。',\n        '落書きマニア：いらずら書きや落書きへの執着。',\n        '列車マニア：列車と鉄道旅行への強い魅了。',\n        '知性マニア：誰かが信じられないほど知的であるという幻想。',\n        'テクノマニア：新技術への執着。',\n        'タナトスマニア：誰かが死を招く魔術によって呪われているという信念。',\n        '宗教マニア：その人が神であるという信仰。',\n        'かき傷マニア：かき傷をつけることへの強迫的衝動。',\n        '手術マニア：外科手術を行なうことへの不合理な嗜好。',\n        '抜毛マニア：自分の髪を引き抜くことへの切望。',\n        '失明マニア：病的な視覚障害。',\n        '異国マニア：外国のものへの執着。',\n        '動物マニア：動物への正気でない溺愛。',\n      ].freeze\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:Cthulhu7th>", "register_prefix", "eval_game_system_specific_command", "command", "$ret_or_1", "skill_roll", "combine_roll", "getFullAutoResult", "roll_bmr_table", "roll_bms_table", "roll_1d8_table", "FAILED_CASTING_L_TABLE", "FAILED_CASTING_M_TABLE", "roll_1d100_table", "PHOBIAS_TABLE", "MANIAS_TABLE", "<class:ResultLevel>", "freeze", "with_difficulty_level", "total", "difficulty", "fumble", "<", "50", "96", "100", "1", "ResultLevel", "new", ">=", "<=", "from_values", "fumbleable", "/", "5", "to_i", "2", "initialize", "level", "@level", "@level_index", "LEVEL", "index", "raise", "ArgumentError", "success?", "failure?", "critical?", "==", "fumble?", "to_s", "LEVEL_TO_S", "[]", "private", "include", "Rollable", "table_name", "table", "total_n", "@randomizer", "roll_once", "8", "-", "text", "m", "match", "bonus_dice", "difficulty_level", "3", "0", "nil?", "dice", ">", "abs", "roll_with_bonus", "total_list", "expr", "result", "sequence", "join", "compact", "tap", "Result", "block in skill_roll", "r", "block (2 levels) in skill_roll", "text=", "condition=", "critical=", "fumble=", "FullAuto", "eval", "difficulty_1", "difficulty_2", "result_1", "result_2", "rank", "block in combine_roll", "block (2 levels) in combine_roll", "success=", "failure=", "10", "MADNESS_REAL_TIME_TABLE", "time_n", "MADNESS_SUMMARY_TABLE", "Base"], :mappings=>"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"}}]}