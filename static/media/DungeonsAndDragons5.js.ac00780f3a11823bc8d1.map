{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/DungeonsAndDragons5.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class DungeonsAndDragons5 < Base\n      # ゲームシステムの識別子\n      ID = 'DungeonsAndDragons5'\n\n      # ゲームシステム名\n      NAME = 'ダンジョンズ＆ドラゴンズ第5版'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'たんしよんすあんととらこんす5'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・攻撃ロール　AT[x][@c][>=t][y]\n        　x：+-修正。省略可。\n        　c:クリティカル値。省略可。\n        　t:敵のアーマークラス。>=を含めて省略可。\n        　y:有利(A), 不利(D)。省略可。\n        　ファンブル／失敗／成功／クリティカル を自動判定。\n        　例）AT AT>=10 AT+5>=18 AT-3>=16 ATA AT>=10A AT+3>=18A AT-3>=16 ATD AT>=10D AT+5>=18D AT-5>=16D\n        　    AT@19 AT+5@18 AT-2@19>=15\n        ・能力値判定　AR[x][>=t][y]\n        　攻撃ロールと同様。失敗／成功を自動判定。\n        　例）AR AR>=10 AR+5>=18 AR-3>=16 ARA AR>=10A AR+3>=18A AR-3>=16 ARD AR>=10D AR+5>=18D AR-5>=16D\n        ・両手持ちのダメージ　2HnDx[m]\n        　n:ダイスの個数\n        　x:ダイスの面数\n        　m:+-修正。省略可。\n        　パラディンとファイターの武器の両手持ちによるダメージダイスの1,2の出目の振り直しを行います。\n        　例)2H3D6 2H1D10+3 2H2D8-1\n      INFO_MESSAGE_TEXT\n\n      register_prefix('AT([+-]\\d+)?(@\\d+)?(>=\\d+)?[AD]?', 'AR([+-]\\d+)?(>=\\d+)?[AD]?', '2H(\\d+)D(\\d+)([+-]\\d+)?')\n\n      def initialize(command)\n        super(command)\n\n        @sort_barabara_dice = false # バラバラロール（Bコマンド）でソート無\n      end\n\n      def eval_game_system_specific_command(command)\n        attack_roll(command) || ability_roll(command) || twohands_damage_roll(command)\n      end\n\n      def number_with_sign_from_int(number)\n        if number == 0\n          return \"\"\n        elsif number > 0\n          return \"+\#{number}\"\n        else\n          return number.to_s\n        end\n      end\n\n      # 攻撃ロール\n      def attack_roll(command)\n        m = /^AT([-+]\\d+)?(@(\\d+))?(>=(\\d+))?([AD]?)/.match(command)\n        unless m\n          return nil\n        end\n\n        modify = m[1].to_i\n        critical_no = m[3].to_i\n        difficulty = m[5].to_i\n        advantage = m[6]\n\n        usedie = 0\n        roll_die = \"\"\n\n        dice_command = \"AT\#{number_with_sign_from_int(modify)}\"\n        if critical_no > 0\n          dice_command += \"@\#{critical_no}\"\n        else\n          critical_no = 20\n        end\n        if difficulty > 0\n          dice_command += \">=\#{difficulty}\"\n        end\n        unless advantage.empty?\n          dice_command += advantage.to_s\n        end\n\n        output = [\"(\#{dice_command})\"]\n\n        if advantage.empty?\n          usedie = @randomizer.roll_once(20)\n          roll_die = usedie\n        else\n          dice = @randomizer.roll_barabara(2, 20)\n          roll_die = \"[\" + dice.join(\",\") + \"]\"\n          if advantage == \"A\"\n            usedie = dice.max\n          else\n            usedie = dice.min\n          end\n        end\n\n        if modify != 0\n          output.push(\"\#{roll_die}\#{number_with_sign_from_int(modify)}\")\n          output.push((usedie + modify).to_s)\n        else\n          unless advantage.empty?\n            output.push(roll_die)\n          end\n          output.push(usedie.to_s)\n        end\n\n        result = Result.new\n        if usedie >= critical_no\n          result.critical = true\n          result.success = true\n          output.push(\"クリティカル\")\n        elsif usedie == 1\n          result.fumble = true\n          output.push(\"ファンブル\")\n        elsif difficulty > 0\n          if usedie + modify >= difficulty\n            result.success = true\n            output.push(\"成功\")\n          else\n            output.push(\"失敗\")\n          end\n        end\n\n        Result.new.tap do |r|\n          r.text = output.join(\" ＞ \")\n          if result\n            if difficulty > 0 || result.critical? || result.fumble?\n              r.condition = result.success?\n            end\n            r.critical = result.critical?\n            r.fumble = result.fumble?\n          end\n        end\n      end\n\n      # 能力値ロール\n      def ability_roll(command)\n        m = /^AR([-+]\\d+)?(>=(\\d+))?([AD]?)/.match(command)\n        unless m\n          return nil\n        end\n\n        modify = m[1].to_i\n        difficulty = m[3].to_i\n        advantage = m[4]\n\n        usedie = 0\n        roll_die = \"\"\n\n        dice_command = \"AR\#{number_with_sign_from_int(modify)}\"\n        if difficulty > 0\n          dice_command += \">=\#{difficulty}\"\n        end\n        unless advantage.empty?\n          dice_command += advantage.to_s\n        end\n\n        output = [\"(\#{dice_command})\"]\n\n        if advantage.empty?\n          usedie = @randomizer.roll_once(20)\n          roll_die = usedie\n        else\n          dice = @randomizer.roll_barabara(2, 20)\n          roll_die = \"[\" + dice.join(\",\") + \"]\"\n          if advantage == \"A\"\n            usedie = dice.max\n          else\n            usedie = dice.min\n          end\n        end\n\n        if modify != 0\n          output.push(\"\#{roll_die}\#{number_with_sign_from_int(modify)}\")\n          output.push((usedie + modify).to_s)\n        else\n          unless advantage.empty?\n            output.push(roll_die)\n          end\n          output.push(usedie.to_s)\n        end\n\n        result = Result.new\n        if difficulty > 0\n          if usedie + modify >= difficulty\n            result.success = true\n            output.push(\"成功\")\n          else\n            output.push(\"失敗\")\n          end\n        end\n\n        Result.new.tap do |r|\n          r.text = output.join(\" ＞ \")\n          if result\n            if difficulty > 0\n              r.condition = result.success?\n            end\n            r.critical = result.critical?\n            r.fumble = result.fumble?\n          end\n        end\n      end\n\n      # 武器の両手持ちダメージ\n      def twohands_damage_roll(command)\n        m = /^2H(\\d+)D(\\d+)([+-]\\d+)?/.match(command)\n        unless m\n          return nil\n        end\n\n        dice_count = m[1].to_i\n        dice_number = m[2].to_i\n        modify = m[3].to_i\n        mod_str = number_with_sign_from_int(modify)\n        output = [\"(2H\#{dice_count}D\#{dice_number}\#{mod_str})\"]\n\n        dice = @randomizer.roll_barabara(dice_count, dice_number)\n        roll_dice = \"[\" + dice.join(\",\") + \"]\"\n        output.push(\"\#{roll_dice}\#{mod_str}\")\n\n        ex_dice = []\n        new_dice = []\n        sum_dice = 0\n        dice.each do |num|\n          if num.to_i > 2\n            sum_dice += num.to_i\n            ex_dice.push(num)\n          else\n            one_die = @randomizer.roll_once(dice_number)\n            sum_dice += one_die.to_i\n            new_dice.push(one_die)\n          end\n        end\n        unless new_dice.empty?\n          output.push(\"[\" + ex_dice.join(\",\") + \"][\" + new_dice.join(\",\") + \"]\#{mod_str}\")\n        end\n        output.push((sum_dice + modify).to_s)\n\n        Result.new.tap do |r|\n          r.text = output.join(\" ＞ \")\n        end\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:DungeonsAndDragons5>", "self", "register_prefix", "initialize", "command", "@sort_barabara_dice", "eval_game_system_specific_command", "$ret_or_1", "$ret_or_2", "attack_roll", "ability_roll", "twohands_damage_roll", "number_with_sign_from_int", "number", "0", ">", "to_s", "m", "match", "modify", "[]", "1", "to_i", "critical_no", "3", "difficulty", "5", "advantage", "6", "usedie", "roll_die", "dice_command", "+", "20", "empty?", "output", "@randomizer", "roll_once", "dice", "roll_barabara", "2", "join", "max", "min", "push", "result", "Result", "new", ">=", "critical=", "success=", "fumble=", "tap", "block in attack_roll", "r", "block (2 levels) in attack_roll", "text=", "critical?", "fumble?", "condition=", "success?", "4", "block in ability_roll", "block (2 levels) in ability_roll", "dice_count", "dice_number", "mod_str", "roll_dice", "ex_dice", "new_dice", "sum_dice", "each", "block in twohands_damage_roll", "num", "block (2 levels) in twohands_damage_roll", "one_die", "Base"], :mappings=>"AAAAA,2BAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAEE,8BAAKA,qBAAL;QAGA,gCAAOA,iBAAP;QAGA,oCAAWA,iBAAX;QAGA,wCACNA,4BADqB,GAErBA,gBAFqB,GAGrBA,mBAHqB,GAIrBA,2BAJqB,GAKrBA,wBALqB,GAMrBA,8BANqB,GAOrBA,iGAPqB,GAQrBA,kCARqB,GASrBA,wBATqB,GAUrBA,yBAVqB,GAWrBA,iGAXqB,GAYrBA,uBAZqB,GAarBA,aAbqB,GAcrBA,aAdqB,GAerBA,gBAfqB,GAgBrBA,oDAhBqB,GAiBrBA,6BAjBM;QAoBAC,IAAAC,iBAAAA,CAAgBF,qCAAhB,EAAoDA,6BAApD,EAAiFA,4BAAjFE;;AAEAC,QAAAA,0BAAAA,sBAAeC,OAAfD;AAAAA,UAAAA;;UAAAA;;UACE,OAAAF,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAMG,OAAN,CAAA,EAAA,IAAA;UAEAD,OAAAE,CAAAA,0BAAsB,KAAtBA;QAHFF,CAAAA;;AAMAG,QAAAA,iDAAAA,6CAAsCF,OAAtCE;AAAAA,UAAAA;;UACE,IAAA,QAAAC,CAAAA,YAAA,CAAA,QAAAC,CAAAA,YAAAP,IAAAQ,aAAAA,CAAYL,OAAZK,CAAAD,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAwBP,IAAAS,cAAAA,CAAaN,OAAbM,CAAxB,CAAA,CAAAH,CAAA,CAAA;YAAAD,OAAA;UAAA;YAAiDA,OAAAL,IAAAU,sBAAAA,CAAqBP,OAArBO;UAAjD;QADFL,CAAAA;;AAIAM,QAAAA,yCAAAA,qCAA8BC,MAA9BD;AAAAA;UACE,IAAA,MAAGC,MAAH,EAAaC,CAAb,CAAA;YACE,OAAOF;UADT,OAEA,IAAA,QAAaG,OAAPF,MAAOE,EAAED,CAAFC,CAAb,CAAA;YACE,OAAQH,GAAD,GAAA,CAAIC,MAAJ;UADT;YAGE,OAAOA,MAAMG,MAAAA,CAAAA;UAHf;QAHFJ,CAAAA;;AAWAH,QAAAA,2BAAAA,uBAAgBL,OAAhBK;AAAAA,UAAAA;;;UACEQ,IAAI,yCAAyCC,OAAAA,CAAOd,OAAPc;UAC7C,KAAA,QAAOD,CAAP,CAAA;YACE,OAAO;UADT;UAIAE,SAASF,CAACG,OAAAA,CAACC,CAADD,CAAGE,MAAAA,CAAAA;UACbC,cAAcN,CAACG,OAAAA,CAACI,CAADJ,CAAGE,MAAAA,CAAAA;UAClBG,aAAaR,CAACG,OAAAA,CAACM,CAADN,CAAGE,MAAAA,CAAAA;UACjBK,YAAYV,CAACG,OAAAA,CAACQ,CAADR;UAEbS,SAASf;UACTgB,WAAWrB;UAEXsB,eAAgBtB,IAAD,GAAA,CAAKR,IAAAW,2BAAAA,CAA0BO,MAA1BP,CAAL;UACf,IAAA,QAAeG,OAAZQ,WAAYR,EAAED,CAAFC,CAAf,CAAA;YACEgB,eAAaC,SAAbD,YAAaC,EAAIvB,GAAD,GAAA,CAAIc,WAAJ,CAAHS;UADf;YAGET,cAAcU;UAHhB;UAKA,IAAA,QAAclB,OAAXU,UAAWV,EAAED,CAAFC,CAAd,CAAA;YACEgB,eAAaC,SAAbD,YAAaC,EAAIvB,IAAD,GAAA,CAAKgB,UAAL,CAAHO;UADf;UAGA,KAAA,QAAOL,SAASO,WAAAA,CAAAA,CAAhB,CAAA;YACEH,eAAaC,SAAbD,YAAaC,EAAGL,SAASX,MAAAA,CAAAA,CAAZgB;UADf;UAIAG,SAAS,CAAE1B,GAAD,GAAA,CAAIsB,YAAJ,CAAA,GAAiBtB,GAAlB;UAET,IAAA,QAAGkB,SAASO,WAAAA,CAAAA,CAAZ,CAAA;;YACEL,SAASO,eAAWC,WAAAA,CAAWJ,EAAXI;YACpBP,WAAWD;UAFb;;YAIES,OAAOF,eAAWG,eAAAA,CAAeC,CAA1B,EAA6BP,EAAlBM;YAClBT,WAAgCE,SAAjBA,SAAJvB,GAAIuB,EAAEM,IAAIG,MAAAA,CAAMhC,GAANgC,CAANT,CAAiBA,EAAEvB,GAAFuB;YAChC,IAAA,MAAGL,SAAH,EAAgBlB,GAAhB,CAAA;cACEoB,SAASS,IAAII,KAAAA,CAAAA;YADf;cAGEb,SAASS,IAAIK,KAAAA,CAAAA;YAHf;UANF;UAaA,IAAA,OAAGxB,MAAH,EAAaL,CAAb,CAAA;;YACEqB,MAAMS,MAAAA,CAAM,EAAA,GAAA,CAAGd,QAAH,CAAA,GAAA,CAAc7B,IAAAW,2BAAAA,CAA0BO,MAA1BP,CAAd,CAANgC;YACNT,MAAMS,MAAAA,CAAcZ,SAAPH,MAAOG,EAAEb,MAAFa,CAAShB,MAAAA,CAAAA,CAAvB4B;UAFR;;YAIE,KAAA,QAAOjB,SAASO,WAAAA,CAAAA,CAAhB,CAAA;cACEC,MAAMS,MAAAA,CAAMd,QAANc;YADR;YAGAT,MAAMS,MAAAA,CAAMf,MAAMb,MAAAA,CAAAA,CAAZ4B;UAPR;UAUAC,SAASC,YAAMC,KAAAA,CAAAA;UACf,IAAA,QAAUC,OAAPnB,MAAOmB,EAAGzB,WAAHyB,CAAV,CAAA;;YACEH,MAAMI,cAAAA,CAAY,IAAZA;YACNJ,MAAMK,aAAAA,CAAW,IAAXA;YACNf,MAAMS,MAAAA,CAAMnC,QAANmC;UAHR,OAIA,IAAA,MAAMf,MAAN,EAAgBR,CAAhB,CAAA;;YACEwB,MAAMM,YAAAA,CAAU,IAAVA;YACNhB,MAAMS,MAAAA,CAAMnC,OAANmC;UAFR,OAGA,IAAA,QAAiB7B,OAAXU,UAAWV,EAAED,CAAFC,CAAjB,CAAA;YACE,IAAA,QAAmBiC,OAAThB,SAAPH,MAAOG,EAAEb,MAAFa,CAASgB,EAAGvB,UAAHuB,CAAnB,CAAA;;cACEH,MAAMK,aAAAA,CAAW,IAAXA;cACNf,MAAMS,MAAAA,CAAMnC,IAANmC;YAFR;cAIET,MAAMS,MAAAA,CAAMnC,IAANmC;YAJR;UADF;UASAnC,OAAU2C,MAAVN,YAAMC,KAAAA,CAAAA,CAAIK,OAAAA,EAAAA,EAAAA,EAAVC,aAAmBC,CAAnBD,EAAAE;;;YAAmB;YACjBD,CAACE,UAAAA,CAAQrB,MAAMM,MAAAA,CAAMc,KAANd,CAAde;YACD,IAAA,QAAGX,MAAH,CAAA;;cACE,IAAG,CAAA,CAAA,QAAW9B,OAAXU,UAAWV,EAAED,CAAFC,CAAX,CAAA,IAAA,CAAA,QAAkB8B,MAAMY,cAAAA,CAAAA,CAAxB,CAAA,CAAA,CAAA,IAAA,CAAA,QAAsCZ,MAAMa,YAAAA,CAAAA,CAA5C,CAAA,CAAA,CAAH;gBACEJ,CAACK,eAAAA,CAAad,MAAMe,aAAAA,CAAAA,CAAnBD;cADH;cAGAL,CAACL,cAAAA,CAAYJ,MAAMY,cAAAA,CAAAA,CAAlBR;cACDM,OAACJ,MAAAA,CAAUN,MAAMa,YAAAA,CAAAA,CAAhBP,CAAAA,EAAAA,MAADG,CAACH,WAAAA,EAAAA,EAAAA,CAAAA,EAAAA;YALH;cAjIVI,OAAA;YAiIU,EAFFF,CAAUD;QArEZ3C,CAAAA;;AAkFAC,QAAAA,4BAAAA,wBAAiBN,OAAjBM;AAAAA,UAAAA;;;UACEO,IAAI,gCAAgCC,OAAAA,CAAOd,OAAPc;UACpC,KAAA,QAAOD,CAAP,CAAA;YACE,OAAO;UADT;UAIAE,SAASF,CAACG,OAAAA,CAACC,CAADD,CAAGE,MAAAA,CAAAA;UACbG,aAAaR,CAACG,OAAAA,CAACI,CAADJ,CAAGE,MAAAA,CAAAA;UACjBK,YAAYV,CAACG,OAAAA,CAACyC,CAADzC;UAEbS,SAASf;UACTgB,WAAWpB;UAEXqB,eAAgBrB,IAAD,GAAA,CAAKT,IAAAW,2BAAAA,CAA0BO,MAA1BP,CAAL;UACf,IAAA,QAAcG,OAAXU,UAAWV,EAAED,CAAFC,CAAd,CAAA;YACEgB,eAAaC,SAAbD,YAAaC,EAAItB,IAAD,GAAA,CAAKe,UAAL,CAAHO;UADf;UAGA,KAAA,QAAOL,SAASO,WAAAA,CAAAA,CAAhB,CAAA;YACEH,eAAaC,SAAbD,YAAaC,EAAGL,SAASX,MAAAA,CAAAA,CAAZgB;UADf;UAIAG,SAAS,CAAEzB,GAAD,GAAA,CAAIqB,YAAJ,CAAA,GAAiBrB,GAAlB;UAET,IAAA,QAAGiB,SAASO,WAAAA,CAAAA,CAAZ,CAAA;;YACEL,SAASO,eAAWC,WAAAA,CAAWJ,EAAXI;YACpBP,WAAWD;UAFb;;YAIES,OAAOF,eAAWG,eAAAA,CAAeC,CAA1B,EAA6BP,EAAlBM;YAClBT,WAAgCE,SAAjBA,SAAJtB,GAAIsB,EAAEM,IAAIG,MAAAA,CAAM/B,GAAN+B,CAANT,CAAiBA,EAAEtB,GAAFsB;YAChC,IAAA,MAAGL,SAAH,EAAgBjB,GAAhB,CAAA;cACEmB,SAASS,IAAII,KAAAA,CAAAA;YADf;cAGEb,SAASS,IAAIK,KAAAA,CAAAA;YAHf;UANF;UAaA,IAAA,OAAGxB,MAAH,EAAaL,CAAb,CAAA;;YACEqB,MAAMS,MAAAA,CAAM,EAAA,GAAA,CAAGd,QAAH,CAAA,GAAA,CAAc7B,IAAAW,2BAAAA,CAA0BO,MAA1BP,CAAd,CAANgC;YACNT,MAAMS,MAAAA,CAAcZ,SAAPH,MAAOG,EAAEb,MAAFa,CAAShB,MAAAA,CAAAA,CAAvB4B;UAFR;;YAIE,KAAA,QAAOjB,SAASO,WAAAA,CAAAA,CAAhB,CAAA;cACEC,MAAMS,MAAAA,CAAMd,QAANc;YADR;YAGAT,MAAMS,MAAAA,CAAMf,MAAMb,MAAAA,CAAAA,CAAZ4B;UAPR;UAUAC,SAASC,YAAMC,KAAAA,CAAAA;UACf,IAAA,QAAchC,OAAXU,UAAWV,EAAED,CAAFC,CAAd,CAAA;YACE,IAAA,QAAmBiC,OAAThB,SAAPH,MAAOG,EAAEb,MAAFa,CAASgB,EAAGvB,UAAHuB,CAAnB,CAAA;;cACEH,MAAMK,aAAAA,CAAW,IAAXA;cACNf,MAAMS,MAAAA,CAAMlC,IAANkC;YAFR;cAIET,MAAMS,MAAAA,CAAMlC,IAANkC;YAJR;UADF;UASAlC,OAAU0C,MAAVN,YAAMC,KAAAA,CAAAA,CAAIK,OAAAA,EAAAA,EAAAA,EAAVU,aAAmBR,CAAnBQ,EAAAC;;;YAAmB;YACjBT,CAACE,UAAAA,CAAQrB,MAAMM,MAAAA,CAAMsB,KAANtB,CAAde;YACD,IAAA,QAAGX,MAAH,CAAA;;cACE,IAAA,QAAc9B,OAAXU,UAAWV,EAAED,CAAFC,CAAd,CAAA;gBACEuC,CAACK,eAAAA,CAAad,MAAMe,aAAAA,CAAAA,CAAnBD;cADH;cAGAL,CAACL,cAAAA,CAAYJ,MAAMY,cAAAA,CAAAA,CAAlBR;cACDc,OAACZ,MAAAA,CAAUN,MAAMa,YAAAA,CAAAA,CAAhBP,CAAAA,EAAAA,MAADG,CAACH,WAAAA,EAAAA,EAAAA,CAAAA,EAAAA;YALH;cAtMVY,OAAA;YAsMU,EAFFD,CAAUV;QAxDZ1C,CAAAA;QAqEAV,OAAAW,oCAAAA,gCAAyBP,OAAzBO;AAAAA,UAAAA;;;UACEM,IAAI,0BAA0BC,OAAAA,CAAOd,OAAPc;UAC9B,KAAA,QAAOD,CAAP,CAAA;YACE,OAAO;UADT;UAIA+C,aAAa/C,CAACG,OAAAA,CAACC,CAADD,CAAGE,MAAAA,CAAAA;UACjB2C,cAAchD,CAACG,OAAAA,CAACoB,CAADpB,CAAGE,MAAAA,CAAAA;UAClBH,SAASF,CAACG,OAAAA,CAACI,CAADJ,CAAGE,MAAAA,CAAAA;UACb4C,UAAUjE,IAAAW,2BAAAA,CAA0BO,MAA1BP;UACVuB,SAAS,CAAExB,KAAD,GAAA,CAAMqD,UAAN,CAAA,GAAiBrD,GAAjB,GAAA,CAAoBsD,WAApB,CAAA,GAAA,CAAkCC,OAAlC,CAAA,GAA0CvD,GAA3C;UAET2B,OAAOF,eAAWG,eAAAA,CAAeyB,UAA1B,EAAsCC,WAA3B1B;UAClB4B,YAAiCnC,SAAjBA,SAAJrB,GAAIqB,EAAEM,IAAIG,MAAAA,CAAM9B,GAAN8B,CAANT,CAAiBA,EAAErB,GAAFqB;UACjCG,MAAMS,MAAAA,CAAM,EAAA,GAAA,CAAGuB,SAAH,CAAA,GAAA,CAAeD,OAAf,CAANtB;UAENwB,UAAU;UACVC,WAAW;UACXC,WAAWxD;UACPyD,MAAJjC,IAAIiC,QAAAA,EAAAA,EAAAA,EAAJC,aAAcC,GAAdD,EAAAE;AAAAA;;;YAAc;YACZ,IAAA,QAAY3D,OAAT0D,GAAGnD,MAAAA,CAAAA,CAAMP,EAAEyB,CAAFzB,CAAZ,CAAA;;cACEuD,WAAStC,SAATsC,QAAStC,EAAGyC,GAAGnD,MAAAA,CAAAA,CAANU;cACT0C,OAAAN,OAAOxB,MAAAA,CAAM6B,GAAN7B;YAFT;;cAIE+B,UAAUvC,eAAWC,WAAAA,CAAW4B,WAAX5B;cACrBiC,WAAStC,SAATsC,QAAStC,EAAG2C,OAAOrD,MAAAA,CAAAA,CAAVU;cACT0C,OAAAL,QAAQzB,MAAAA,CAAM+B,OAAN/B;YANV,EADF4B,CAAAA,GAAAA,SAAAA,CAAID;UAUJ,KAAA,QAAOF,QAAQnC,WAAAA,CAAAA,CAAf,CAAA;YACEC,MAAMS,MAAAA,CAA0DZ,SAArBA,SAAPA,SAApBA,SAAJrB,GAAIqB,EAAEoC,OAAO3B,MAAAA,CAAM9B,GAAN8B,CAATT,CAAoBA,EAAErB,IAAFqB,CAAOA,EAAEqC,QAAQ5B,MAAAA,CAAM9B,GAAN8B,CAAVT,CAAqBA,EAAGrB,GAAD,GAAA,CAAIuD,OAAJ,CAAFlC,CAA1DY;UADR;UAGAT,MAAMS,MAAAA,CAAgBZ,SAATsC,QAAStC,EAAEb,MAAFa,CAAShB,MAAAA,CAAAA,CAAzB4B;UAENjC,OAAUyC,MAAVN,YAAMC,KAAAA,CAAAA,CAAIK,OAAAA,EAAAA,EAAAA,EAAVoB,aAAmBlB,CAAnBkB,EAAAE;;;YAAmB;YACjBA,OAAClB,MAAAA,CAAQrB,MAAMM,MAAAA,CAAMiC,KAANjC,CAAde,CAAAA,EAAAA,MAADF,CAACE,SAAAA,EAAAA,EAAAA,CAAAA,EAAAA,mBADHgB,CAAUpB;QAlCZzC,CAAAA;MA7MFX,GAAAA,WAAAA,EAA4B4E,UAA5B5E;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}]}