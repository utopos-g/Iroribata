{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/StrangerOfSwordCity.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class StrangerOfSwordCity < Base\n      # ゲームシステムの識別子\n      ID = 'StrangerOfSwordCity'\n\n      # ゲームシステム名\n      NAME = '剣の街の異邦人TRPG'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'つるきのまちのいほうしんTRPG'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・判定　xSR or xSRy or xSR+y or xSR-y or xSR+y>=z\n        　x=ダイス数、y=修正値(省略可、±省略時は＋として扱う)、z=難易度(省略可)\n        　判定時はクリティカル、ファンブルの自動判定を行います。\n        ・通常のnD6ではクリティカル、ファンブルの自動判定は行いません。\n        ・D66ダイスあり\n      INFO_MESSAGE_TEXT\n\n      register_prefix('\\d+SR')\n\n      def initialize(command)\n        super(command)\n\n        @sort_add_dice = true\n        @d66_sort_type = D66SortType::NO_SORT\n        @round_type = RoundType::FLOOR\n      end\n\n      def eval_game_system_specific_command(command)\n        debug('eval_game_system_specific_command command', command)\n\n        command = command.upcase\n\n        result = checkRoll(command)\n\n        return result if result.instance_of?(Result)\n        return result unless result.empty?\n\n        return result\n      end\n\n      def checkRoll(command)\n        debug(\"checkRoll begin command\", command)\n\n        result = Result.new\n        result.text = ''\n        return result unless command =~ /^(\\d+)SR([+-]?\\d+)?(>=(\\d+))?$/i\n\n        diceCount = Regexp.last_match(1).to_i\n        modify = Regexp.last_match(2).to_i\n        difficulty = Regexp.last_match(4).to_i if Regexp.last_match(4)\n\n        diceList = @randomizer.roll_barabara(diceCount, 6).sort\n        dice = diceList.sum()\n\n        totalValue = (dice + modify)\n        modifyText = getModifyText(modify)\n        result.text += \"(\#{command}) ＞ \#{dice}[\#{diceList.join(',')}]\#{modifyText} ＞ \#{totalValue}\"\n\n        criticalResult = getCriticalResult(diceList)\n        unless criticalResult.nil?\n          result.critical = true\n          result.success = true\n          result.text += \" ＞ クリティカル(+\#{criticalResult}D6)\"\n          return result\n        end\n\n        if isFumble(diceList, diceCount)\n          result.fumble = true\n          result.failure = true\n          result.text += ' ＞ ファンブル'\n          return result\n        end\n\n        unless difficulty.nil?\n          if totalValue >= difficulty\n            result.success = true\n            result.text += ' ＞ 成功'\n          else\n            result.failure = true\n            result.text += ' ＞ 失敗'\n          end\n        end\n\n        return result\n      end\n\n      def getModifyText(modify)\n        return \"\" if modify == 0\n        return modify.to_s if modify < 0\n\n        return \"+\#{modify}\"\n      end\n\n      def getCriticalResult(diceList)\n        dice6Count = diceList.select { |i| i == 6 }.size\n\n        if dice6Count >= 2\n          return dice6Count.to_s\n        end\n\n        return nil\n      end\n\n      def isFumble(diceList, diceCount)\n        (diceList.select { |i| i == 1 }.size >= diceCount)\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:StrangerOfSwordCity>", "self", "register_prefix", "initialize", "command", "@sort_add_dice", "@d66_sort_type", "D66SortType::NO_SORT", "D66SortType", "@round_type", "RoundType::FLOOR", "RoundType", "eval_game_system_specific_command", "debug", "upcase", "result", "checkRoll", "instance_of?", "Result", "empty?", "new", "text=", "=~", "diceCount", "Regexp", "last_match", "1", "to_i", "modify", "2", "4", "difficulty", "diceList", "@randomizer", "roll_barabara", "6", "sort", "dice", "sum", "totalValue", "+", "modifyText", "getModifyText", "text", "join", "criticalResult", "getCriticalResult", "nil?", "critical=", "success=", "isFumble", "fumble=", "failure=", ">=", "0", "<", "to_s", "dice6Count", "select", "block in getCriticalResult", "i", "block (2 levels) in getCriticalResult", "==", "size", "block in isFumble", "block (2 levels) in isFumble", "Base"], :mappings=>"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"}}]}