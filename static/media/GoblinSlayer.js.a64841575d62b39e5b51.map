{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/GoblinSlayer.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class GoblinSlayer < Base\n      # ゲームシステムの識別子\n      ID = 'GoblinSlayer'\n\n      # ゲームシステム名\n      NAME = 'ゴブリンスレイヤーTRPG'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'こふりんすれいやあTRPG'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・判定　GS(x)@c#f>=y\n        　2d6の判定を行い、達成値を出力します。\n        　xは基準値、yは目標値、cは大成功の下限、fは大失敗の上限です。いずれも省略可能です。\n        　cが未指定の場合には c=12 、fが未指定の場合には f=2 となります。\n        　yが設定されている場合、大成功/成功/失敗/大失敗を自動判定します。\n        　例）GS>=12　GS>10　GS(10)>14　GS+10>=15　GS10>=15　GS(10)　GS+10　GS10　GS\n        　　　GS@10　GS@10#3　GS#3@10\n\n        ・祈念　MCPI(n)$m\n        　祈念を行います。\n        　nは【幸運】などによるボーナスです。この値は省略可能です。\n        　mは因果点の現在値です。\n        　因果点の現在値を使用して祈念を行い、成功/失敗を自動判定します。\n        　例）MCPI$3　MCPI(1)$4　MCPI+2$5　MCPI2$6\n\n        ・命中判定の効力値によるボーナス　DB(n)\n        　ダメージ効力表による威力へのボーナスを自動で求めます。\n        　nは命中判定の効力値です。\n        　例）DB(15)　DB12\n\n        ※上記コマンドの計算内で割り算を行った場合、小数点以下は切り上げされます。\n        　ただしダイス出目を割り算した場合、小数点以下は切り捨てされます。\n        　例）入力：GS(8+3/2)　実行結果：(GS10) ＞ 10 + 3[1,2] ＞ 13\n        　　　入力：2d6/2    　実行結果：(2D6/2) ＞ 3[1,2]/2 ＞ 1\n\n        ※MCPIでは、シークレットダイスを使用できません。\n      MESSAGETEXT\n\n      # 因果点は共有リソースなのでMCPIはシークレットダイスを無効化\n      register_prefix('GS', '^MCPI.*$', 'DB')\n\n      def initialize(command)\n        super(command)\n        @round_type = RoundType::CEIL\n      end\n\n      def eval_game_system_specific_command(command)\n        case command\n        when /^GS/i\n          return getCheckResult(command)\n        when /^MCPI/i\n          return murmurChantPrayInvoke(command)\n        when /^DB/i\n          return damageBonus(command)\n        else\n          return nil\n        end\n      end\n\n      def getCheckResult(command)\n        m = /^GS([-+]?\\d+)?(?:(?:([@#])([-+]?\\d+))(?:([@#])([-+]?\\d+))?)?(?:(>=?)(\\d+))?$/i.match(command)\n        unless m\n          return nil\n        end\n\n        basis = m[1].to_i # 基準値\n        target = m[7].to_i\n        cmp_op = m[6]\n        without_compare = cmp_op.nil?\n\n        option1 = m[2]\n        option1_value = m[3]\n        option2 = m[4]\n        option2_param = m[5]\n\n        if option1 && option1 == option2\n          return nil\n        end\n\n        threshold_critical, threshold_fumble = calc_threshold(option1, option1_value, option2, option2_param)\n\n        dice_list = @randomizer.roll_barabara(2, 6)\n        total = dice_list.sum()\n        diceText = dice_list.join(\",\")\n\n        achievement = basis + total # 達成値\n\n        fumble = total <= threshold_fumble\n        critical = total >= threshold_critical\n\n        result = \" ＞ \#{resultStr(achievement, target, cmp_op, fumble, critical)}\"\n        if without_compare && !fumble && !critical\n          result = \"\"\n        end\n        basis_str = basis == 0 ? \"\" : \"\#{basis} + \"\n\n        return \"(\#{command}) ＞ \#{basis_str}\#{total}[\#{diceText}] ＞ \#{achievement}\#{result}\"\n      end\n\n      CRITICAL = 12\n      FUMBLE = 2\n\n      def calc_threshold(option1, option1_value, _option2, option2_value)\n        critical, fumble = option1 == \"@\" ? [option1_value, option2_value] : [option2_value, option1_value]\n\n        return [critical&.to_i || CRITICAL, fumble&.to_i || FUMBLE]\n      end\n\n      def murmurChantPrayInvoke(command)\n        m = /^MCPI(\\+?\\d+)?\\$(\\d+)$/i.match(command)\n        unless m\n          return nil\n        end\n\n        luck = m[1].to_i # 幸運\n        volition = m[2].to_i # 因果点\n        if volition >= 12\n          return \"因果点が12点以上の場合、因果点は使用できません。\"\n        end\n\n        dice_list = @randomizer.roll_barabara(2, 6)\n        total = dice_list.sum()\n        diceText = dice_list.join(\",\")\n\n        achievement = total + luck\n\n        result = \" ＞ \#{resultStr(achievement, volition, '>=', false, false)}\"\n        luck_str = luck == 0 ? \"\" : \"+\#{luck}\"\n\n        return \"祈念(2d6\#{luck_str}) ＞ \#{total}[\#{diceText}]\#{luck_str} ＞ \#{achievement}\#{result}, 因果点：\#{volition}点 → \#{volition + 1}点\"\n      end\n\n      def damageBonus(command)\n        m = /^DB(\\d+)$/i.match(command)\n        unless m\n          return nil\n        end\n\n        num = m[1].to_i\n        fmt = \"命中判定の効力値によるボーナス ＞ \"\n\n        if num < 15\n          return fmt + \"なし\"\n        end\n\n        times =\n          if num >= 40\n            5\n          elsif num >= 30\n            4\n          elsif num >= 25\n            3\n          elsif num >= 20\n            2\n          else\n            1\n          end\n\n        dice_list = @randomizer.roll_barabara(times, 6)\n        total = dice_list.sum()\n        diceText = dice_list.join(\",\")\n\n        return fmt + \"\#{total}[\#{diceText}] ＞ \#{total}\"\n      end\n\n      # 判定結果の文字列を返す\n      # @param [Integer] achievement 達成値\n      # @param [Integer] target 目標値\n      # @param [String] cmp_op 達成値と目標値を比較する比較演算子\n      # @param [Boolean] fumble ファンブルかどうか\n      # @param [Boolean] critical クリティカルかどうか\n      # @return [String]\n      def resultStr(achievement, target, cmp_op, fumble, critical)\n        return '大失敗' if fumble\n        return '大成功' if critical\n        if cmp_op == \">=\"\n          return achievement >= target ? \"成功\" : \"失敗\"\n        else\n          return achievement > target ? \"成功\" : \"失敗\"\n        end\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:GoblinSlayer>", "self", "register_prefix", "initialize", "command", "@round_type", "RoundType::CEIL", "RoundType", "eval_game_system_specific_command", "$ret_or_1", "getCheckResult", "murmurChantPrayInvoke", "damageBonus", "m", "match", "basis", "[]", "1", "to_i", "target", "7", "cmp_op", "6", "without_compare", "nil?", "option1", "2", "option1_value", "3", "option2", "4", "option2_param", "5", "calc_threshold", "threshold_critical", "threshold_fumble", "dice_list", "@randomizer", "roll_barabara", "total", "sum", "diceText", "join", "achievement", "+", "fumble", "<=", "critical", ">=", "result", "resultStr", "basis_str", "0", "12", "_option2", "option2_value", "CRITICAL", "FUMBLE", "luck", "volition", "luck_str", "num", "fmt", "<", "15", "times", "40", "30", "25", "20", ">", "Base"], :mappings=>"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"}}]}