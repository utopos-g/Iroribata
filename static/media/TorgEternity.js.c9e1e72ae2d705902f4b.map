{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/TorgEternity.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class TorgEternity < Base\n      # ゲームシステムの識別子\n      ID = 'TorgEternity'\n      # ゲームシステム名\n      NAME = 'トーグ エタニティ'\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'とおくえたにてい'\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・判定\n        　・TG\n        　　\"TG[m]\"で1d20をロールします。[]内は省略可能。\n        　　mは技能基本値を入れて下さい。Rコマンドに読替されます。\n        　　振り足しを自動で行い、20の出目が出たときには技能無し値も並記します。\n        　　(TORGダイスボットと同じ挙動をするコマンドです。ロールボーナスの読み替えのみ、Eternity版となります)\n        　・TE\n        　　\"TE\"で1d20をロールします。\n        　　振り足しを自動で行い、20の出目が出たときには技能無し値も並記します。\n        　　出目1の時には「Mishap!　自動失敗！」と出力されます。\n        　・UP\n        　　\"UP[m]\"で高揚状態のロール(通常の1d20に加え、1d20を追加で振り足し)を行います。\n        　　[]内は省略可能。mは技能基本値を入れて下さい。\n        　　各ロールでの振り足しを自動で行い、20の出目が出たときには技能無し値も並記します。\n        　　一投目で出目1の時には「Mishap!　自動失敗！」と出力され、二投目は行われません。\n        　・POS\n        　　\"POSm\"で、ポシビリティ使用による1d20のロールを行います。\n        　　mはポシビリティを使用する前のロール結果を入れて下さい。\n        　　出目が10未満の場合は、10への読み替えが行われます。\n        　　また、振り足しを自動で行い、20の出目が出たときには技能無し値も並記します。\n        ・ボーナスダメージロール\n        　\"xBD[+y]\"でロールします。[]内は省略可能。\n        　xはダメージダイス数。yはダメージ基本値 or 式を入れて下さい。\n        　xは1以上が必要です。0だとエラーが出力されます。マイナス値はコマンドとして認識されません。\n        　振り足し処理は自動で行われます。(振り足し発生時の目は、「5∞」と出力されます)\n        ・各種表\n        　\"(表コマンド)(数値)\"で振ります。\n        　・成功レベル表「RTx or RESULTx」\n        　・ダメージ結果表「DTx or DAMAGEx」\n        　・ロールボーナス表「BTx+y or BONUSx+y or TOTALx+y」 xは数値, yは技能基本値\n      INFO_MESSAGE_TEXT\n      register_prefix('TE', 'UP', 'POS', '\\d+BD', 'TG', 'RT', 'Result', 'DT', 'damage', 'BT', 'bonus', 'total', '1R20')\n\n      def eval_game_system_specific_command(command)\n        torg_check(command) ||\n          getRolld20DiceCommandResult(command) ||\n          getUpRollDiceCommandResult(command) ||\n          getPossibilityRollDiceCommandResult(command) ||\n          getBonusDamageDiceCommandResult(command) ||\n          getSuccessLevelDiceCommandResult(command) ||\n          getDamageResultDiceCommandResult(command) ||\n          getRollBonusDiceCommandResult(command)\n      end\n\n      private\n\n      ####################            TORG 1.x            ########################\n      def replace_text(string)\n        string = string.gsub(/TG(\\d+)/i) { \"1R20+\#{Regexp.last_match(1)}\" }\n        string = string.gsub(/TG/i, '1R20')\n        return string\n      end\n\n      def torg_check(string)\n        string = replace_text(string)\n\n        m = /^1R20(([+-]\\d+)*)$/i.match(string)\n        unless m\n          return nil\n        end\n\n        mod = m[1]\n\n        debug(mod)\n        mod = ArithmeticEvaluator.eval(mod) if mod\n        debug(mod)\n        mod = mod.to_i\n        skilled, unskilled, dice_str, = torg_eternity_dice(false, false)\n        sk_bonus = get_torg_eternity_bonus(skilled)\n        if mod\n          if mod > 0\n            output = \"\#{sk_bonus}[\#{dice_str}]+\#{mod}\"\n          else\n            output = \"\#{sk_bonus}[\#{dice_str}]\#{mod}\"\n          end\n        else\n          output = \"\#{sk_bonus}[\#{dice_str}]\"\n        end\n        output += \" ＞ \" + (sk_bonus + mod).to_s\n        if skilled != unskilled\n          output += \"(技能無\" + (get_torg_eternity_bonus(unskilled) + mod).to_s + \")\"\n        end\n        output = \"(\#{string}) ＞ \#{output}\"\n        return output\n      end\n\n      ####################          TORG Eternity        ########################\n      # ロールコマンド (通常ロール)\n      def getRolld20DiceCommandResult(command)\n        debug(\"Torg Eternity Dice Roll Command ? \", command)\n        unless command == \"TE\"\n          return nil\n        end\n\n        skilled, unskilled, dice_str, mishap = torg_eternity_dice(false, true)\n        if mishap == 1\n          output = \"d20ロール（通常） ＞ 1d20[\#{dice_str}] ＞ Mishap!　絶対失敗！\"\n        else\n          value_skilled = format(\"%+d\", get_torg_eternity_bonus(skilled))\n          if skilled != unskilled\n            value_unskilled = format(\"%+d\", get_torg_eternity_bonus(unskilled))\n            output = \"d20ロール（通常） ＞ 1d20[\#{dice_str}] ＞ \#{value_skilled}[\#{skilled}]（技能有） / \#{value_unskilled}[\#{unskilled}]（技能無）\"\n          else\n            output = \"d20ロール（通常） ＞ 1d20[\#{dice_str}] ＞ \#{value_skilled}[\#{skilled}]\"\n          end\n        end\n\n        return output\n      end\n\n      # ロールコマンド (高揚ロール)\n      def getUpRollDiceCommandResult(command)\n        debug(\"Torg Eternity Dice Roll ( UP ) Command ? \", command)\n        m = /^UP(\\d*)$/i.match(command)\n        unless m\n          return nil\n        end\n\n        sequence = []\n        mod = m[1].to_i\n        skilled1, unskilled1, dice_str1, mishap = torg_eternity_dice(false, true)\n        if mishap == 1\n          sequence = [\n            \"d20ロール（高揚）\",\n            \"1d20[\#{dice_str1}]\",\n            \"Mishap!　絶対失敗！\",\n          ].compact\n        else\n          skilled2, unskilled2, dice_str2, = torg_eternity_dice(false, false)\n          subtotal_skilled = skilled1 + skilled2\n          subtotal_unskilled = unskilled1 + unskilled2\n          value_skilled = format(\"%+d\", get_torg_eternity_bonus(subtotal_skilled))\n          value_unskilled = format(\"%+d\", get_torg_eternity_bonus(subtotal_unskilled))\n\n          if mod <= 0\n            if subtotal_skilled != subtotal_unskilled\n              sequence = [\n                \"d20ロール（高揚）\",\n                \"1d20[\#{dice_str1}] + 1d20[\#{dice_str2}]\",\n                \"\#{value_skilled}[\#{subtotal_skilled}]（技能有） / \#{value_unskilled}[\#{subtotal_unskilled}]（技能無）\",\n              ].compact\n            else\n              sequence = [\n                \"d20ロール（高揚）\",\n                \"1d20[\#{dice_str1}] + 1d20[\#{dice_str2}]\",\n                \"\#{value_skilled}[\#{subtotal_skilled}]\",\n              ].compact\n            end\n          else\n            if subtotal_skilled != subtotal_unskilled\n              sequence = [\n                \"d20ロール（高揚）\",\n                \"1d20[\#{dice_str1}] + 1d20[\#{dice_str2}] + \#{mod}\",\n                \"\#{value_skilled}[\#{subtotal_skilled}]+\#{mod}（技能有） / \#{value_unskilled}[\#{subtotal_unskilled}]+\#{mod}（技能無）\",\n                format(\"%+d\", (value_skilled.to_i + mod)) + \"（技能有） / \" + format(\"%+d\", (value_unskilled.to_i + mod)) + \"（技能無）\",\n              ].compact\n            else\n              sequence = [\n                \"d20ロール（高揚）\",\n                \"1d20[\#{dice_str1}] + 1d20[\#{dice_str2}] + \#{mod}\",\n                \"\#{value_skilled}[\#{subtotal_skilled}]+\#{mod}\",\n                format(\"%+d\", (value_skilled.to_i + mod)),\n              ].compact\n            end\n          end\n        end\n\n        output = sequence.join(\" ＞ \")\n\n        return output\n      end\n\n      # ロールコマンド (ポシビリティロール)\n      def getPossibilityRollDiceCommandResult(command)\n        debug(\"Torg Eternity Possibility Roll Command ? \", command)\n        m = /^POS((\\d+)(\\+\\d+)?)$/i.match(command)\n        unless m\n          return nil\n        end\n\n        output_modifier = ArithmeticEvaluator.eval(m[1])\n        skilled, unskilled, dice_str, = torg_eternity_dice(true, false)\n        subtotal_skilled = skilled + output_modifier\n        subtotal_unskilled = unskilled + output_modifier\n        value_skilled = format(\"%+d\", get_torg_eternity_bonus(subtotal_skilled))\n        if subtotal_skilled != subtotal_unskilled\n          value_unskilled = format(\"%+d\", get_torg_eternity_bonus(subtotal_unskilled))\n          output = \"d20ロール（ポシビリティ） ＞ \#{output_modifier}+1d20[\#{dice_str}] ＞ \#{value_skilled}[\#{subtotal_skilled}]（技能有） / \#{value_unskilled}[\#{subtotal_unskilled}]（技能無）\"\n        else\n          output = \"d20ロール（ポシビリティ） ＞ \#{output_modifier}+1d20[\#{dice_str}] ＞ \#{value_skilled}[\#{subtotal_skilled}]\"\n        end\n\n        return output\n      end\n\n      # ダメージボーナスコマンド\n      def getBonusDamageDiceCommandResult(command)\n        debug(\"TorgEternity Bonus Damage Roll Command ? \", command)\n        m = /^(\\d+)(BD)(([+-]\\d+)*)$/i.match(command)\n        unless m\n          return nil\n        end\n\n        number_bonus_die = m[1].to_i\n        value_modifier, output_modifier = get_torg_eternity_modifier(m[3])\n        if number_bonus_die <= 0\n          output = \"エラーです。xBD (x≧1) として下さい\"\n        else\n          value_roll, output_roll = get_torg_eternity_damage_bonus_dice(number_bonus_die)\n          output_value = value_roll + value_modifier\n          output = \"ボーナスダメージロール(\#{number_bonus_die}BD\#{output_modifier}) ＞ \#{value_roll}[\#{output_roll}]\#{output_modifier} ＞ \#{output_value}ダメージ\"\n        end\n        return output\n      end\n\n      # 成功レベル表コマンド\n      def getSuccessLevelDiceCommandResult(command)\n        debug(\"TorgEternity Success Level Table Command ? \", command)\n        m = /^(RT|Result)(-*\\d+([+-]\\d+)*)$/i.match(command)\n        unless m\n          return nil\n        end\n\n        value = ArithmeticEvaluator.eval(m[2])\n        debug(value)\n        if value < 0\n          output = \"Failure.\"\n        else\n          output = get_torg_eternity_success_level(value)\n        end\n        output = \"成功レベル表[\#{value}] ＞ \#{output}\"\n        debug(output)\n        return output\n      end\n\n      # ダメージ結果表コマンド\n      def getDamageResultDiceCommandResult(command)\n        debug(\"TorgEternity Damage Result Table Command ? \", command)\n        m = /^(DT|Damage)(-*\\d+([+-]\\d+)*)$/i.match(command)\n        unless m\n          return nil\n        end\n\n        value = ArithmeticEvaluator.eval(m[2])\n        debug(value)\n        output = get_torg_eternity_damage_result(value)\n        output = \"ダメージ結果表[\#{value}] ＞ \#{output}\"\n        debug(output)\n        return output\n      end\n\n      # ロールボーナス表コマンド\n      def getRollBonusDiceCommandResult(command)\n        debug(\"TorgEternity Roll Bonus Table Command ? \", command)\n        m = /^(BT|Bonus|Total)(\\d+)(([+-]\\d+)*)$/i.match(command)\n        unless m\n          return nil\n        end\n\n        value_roll = m[2].to_i\n        output_bonus = get_torg_eternity_bonus(value_roll)\n        debug(output_bonus)\n        value_modifier, output_modifier = get_torg_eternity_modifier(m[3])\n        if value_roll <= 1\n          output = \"ロールボーナス表[\#{value_roll}] ＞ Mishap!!\"\n        elsif output_modifier.empty?\n          output = \"ロールボーナス表[\#{value_roll}] ＞ \#{output_bonus}\"\n        else\n          value_result = output_bonus.to_i + value_modifier\n          debug(value_result)\n          output = \"ロールボーナス表[\#{value_roll}]\#{output_modifier} ＞ \#{output_bonus}[\#{value_roll}]\#{output_modifier} ＞ \#{value_result}\"\n        end\n        debug(output)\n        return output\n      end\n\n      def get_torg_eternity_table_result(value, table)\n        output = nil\n        table.each do |item|\n          item_index = item[0]\n          if item_index > value\n            break\n          end\n\n          output = item[1]\n        end\n        return output\n      end\n\n      # 修正式計算サブルーチン\n      def get_torg_eternity_modifier(string_modifier)\n        debug(\"modifier check : \#{string_modifier}\")\n        if string_modifier == ''\n          value_modifier = 0\n          output_modifier = \"\"\n        else\n          value_modifier = ArithmeticEvaluator.eval(string_modifier)\n          output_modifier = format(\"%+d\", value_modifier)\n        end\n        debug(value_modifier)\n        debug(output_modifier)\n        return value_modifier, output_modifier\n      end\n\n      # d20ロールサブルーチン\n      def torg_eternity_dice(check_pos, check_mishap)\n        isSkilledCritical = true\n        isCritical = true\n        skilled = 0\n        unskilled = 0\n        mishap = 0\n        dice_str = \"\"\n        while isSkilledCritical\n          dice_str += \",\" unless dice_str.empty?\n          dice_n = @randomizer.roll_once(20)\n          if check_pos\n            if dice_n < 10\n              dice_str_now = \"\#{dice_n}→10\"\n              dice_n = 10\n              isSkilledCritical = false\n            else\n              dice_str_now = dice_n.to_s\n            end\n            dice_str += dice_str_now\n          else\n            dice_str += dice_n.to_s\n          end\n          skilled += dice_n\n          unskilled += dice_n if isCritical\n          if dice_n == 20\n            isCritical = false\n          elsif dice_n != 10\n            isSkilledCritical = false\n            isCritical = false\n            if check_mishap & (dice_n == 1)\n              mishap = 1\n            end\n          end\n          check_pos = false\n          check_mishap = false\n        end\n        return skilled, unskilled, dice_str, mishap\n      end\n\n      # ボーナスダイスロールサブルーチン\n      def get_torg_eternity_damage_bonus_dice(number)\n        debug(\"bonus dice roll : \#{number}\")\n        value_roll = 0\n        output_roll = \"\"\n        if number > 0\n          value_roll = 0\n          output_roll = \"\"\n          while number > 0\n            output_roll = \"\#{output_roll},\" unless output_roll.empty?\n\n            dice_value = @randomizer.roll_once(6)\n            dice_text = dice_value.to_s\n\n            if dice_value == 6\n              dice_value = 5\n              dice_text = \"5∞\"\n              number += 1\n            end\n            value_roll += dice_value\n            output_roll = \"\#{output_roll}\#{dice_text}\"\n            debug(value_roll)\n            debug(output_roll)\n            number -= 1\n          end\n        else\n          output_roll = \"0\"\n        end\n        debug(value_roll)\n        debug(output_roll)\n        return value_roll, output_roll\n      end\n\n      # 成功レベル表\n      def get_torg_eternity_success_level(value)\n        success_table = [\n          [0, \"Success - Standard.\"],\n          [5, \"Success - Good!\"],\n          [10, \"Success - Outstanding!!\"]\n        ]\n        return get_torg_eternity_table_result(value, success_table)\n      end\n\n      # ダメージチャート\n      def get_torg_eternity_damage_result(value)\n        damage_table = [\n          [-50, \"ノーダメージ\"],\n          [-5, \"1ショック\"],\n          [0, \"2ショック\"],\n          [5, \"1レベル負傷 + 2ショック\"],\n          [10, \"2レベル負傷 + 4ショック\"],\n          [15, \"3レベル負傷 + 6ショック\"],\n          [20, \"4レベル負傷 + 8ショック\"],\n          [25, \"5レベル負傷 + 10ショック\"],\n          [30, \"6レベル負傷 + 12ショック\"],\n          [35, \"7レベル負傷 + 14ショック\"],\n          [40, \"8レベル負傷 + 16ショック\"],\n          [45, \"9レベル負傷 + 18ショック\"],\n          [50, \"10レベル負傷 + 20ショック\"]\n        ]\n        return get_torg_eternity_table_result(value, damage_table)\n      end\n\n      def get_torg_eternity_bonus(value)\n        bonus_table = [\n          [1, -10],\n          [2, -8],\n          [3, -6],\n          [5, -4],\n          [7, -2],\n          [9, -1],\n          [11, 0],\n          [13, 1],\n          [15, 2],\n          [16, 3],\n          [17, 4],\n          [18, 5],\n          [19, 6],\n          [20, 7]\n        ]\n        bonus = get_torg_eternity_table_result(value, bonus_table)\n        if value > 20\n          over_value_bonus = ((value - 21) / 5).to_i + 1\n          bonus += over_value_bonus\n        end\n        return bonus\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:TorgEternity>", "self", "register_prefix", "eval_game_system_specific_command", "command", "$ret_or_1", "$ret_or_2", "$ret_or_3", "$ret_or_4", "$ret_or_5", "$ret_or_6", "$ret_or_7", "torg_check", "getRolld20DiceCommandResult", "getUpRollDiceCommandResult", "getPossibilityRollDiceCommandResult", "getBonusDamageDiceCommandResult", "getSuccessLevelDiceCommandResult", "getDamageResultDiceCommandResult", "getRollBonusDiceCommandResult", "private", "replace_text", "string", "gsub", "block in replace_text", "block (2 levels) in replace_text", "Regexp", "last_match", "1", "m", "match", "mod", "[]", "debug", "ArithmeticEvaluator", "eval", "to_i", "torg_eternity_dice", "skilled", "unskilled", "dice_str", "sk_bonus", "get_torg_eternity_bonus", ">", "0", "output", "+", "to_s", "mishap", "value_skilled", "format", "value_unskilled", "sequence", "skilled1", "unskilled1", "dice_str1", "compact", "skilled2", "unskilled2", "dice_str2", "subtotal_skilled", "subtotal_unskilled", "<=", "join", "output_modifier", "number_bonus_die", "get_torg_eternity_modifier", "3", "value_modifier", "get_torg_eternity_damage_bonus_dice", "value_roll", "output_roll", "output_value", "value", "2", "<", "get_torg_eternity_success_level", "get_torg_eternity_damage_result", "output_bonus", "empty?", "value_result", "get_torg_eternity_table_result", "table", "each", "block in get_torg_eternity_table_result", "item", "block (2 levels) in get_torg_eternity_table_result", "item_index", "string_modifier", "check_pos", "check_mishap", "isSkilledCritical", "isCritical", "dice_n", "@randomizer", "roll_once", "20", "10", "dice_str_now", "&", "==", "number", "dice_value", "6", "dice_text", "5", "-", "success_table", "damage_table", "-50", "-5", "15", "25", "30", "35", "40", "45", "50", "bonus_table", "-10", "-8", "-6", "-4", "7", "-2", "9", "-1", "11", "13", "16", "17", "4", "18", "19", "bonus", "over_value_bonus", "/", "21", "Base"], :mappings=>"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"}}]}