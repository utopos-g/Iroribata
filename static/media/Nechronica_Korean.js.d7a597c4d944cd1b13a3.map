{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    # 表を表すクラス\n    class Table\n      # @param key [String]\n      # @param locale [Symbol]\n      # @return [Table]\n      def self.from_i18n(key, locale)\n        table = I18n.t(key, locale: locale)\n        new(table[:name], table[:type], table[:items])\n      end\n\n      # @param [String] name 表の名前\n      # @param [String] type 項目を選ぶときのダイスロールの方法 '1D6'など\n      # @param [Array<String>] items 表の項目の配列\n      def initialize(name, type, items)\n        @name = name\n        @items = items.freeze\n\n        m = /(\\d+)D(\\d+)/i.match(type)\n        unless m\n          raise ArgumentError, \"Unexpected table type: \#{type}\"\n        end\n\n        @times = m[1].to_i\n        @sides = m[2].to_i\n      end\n\n      # 表を振る\n      # @param [BCDice] bcdice ランダマイザ\n      # @return [String] 結果\n      def roll(bcdice)\n        value = bcdice.roll_sum(@times, @sides)\n        return choice(value)\n      end\n\n      def choice(value)\n        index = value - @times\n        return RollResult.new(@name, value, @items[index])\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:Table>", "from_i18n", "self", "key", "locale", "table", "I18n", "t", "new", "[]", "initialize", "name", "type", "items", "@name", "@items", "freeze", "m", "match", "raise", "ArgumentError", "@times", "1", "to_i", "@sides", "2", "roll", "bcdice", "value", "roll_sum", "choice", "index", "-", "RollResult"], :mappings=>"AAAAA,0CAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MAEEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAIEC,MAAIC,IAAJD,gBAAAA,qBAAmBE,GAAD,EAAMC,MAAxBH;AAAAA,UAAAA;;;UACEI,QAAQC,UAAIC,GAAAA,CAAGJ,GAAP,EAAY,oBAAA,UAAQC,MAAR,EAARG;UACZN,OAAAC,IAAAM,KAAAA,CAAIH,KAAKI,OAAAA,CAAC,MAADA,CAAT,EAAkBJ,KAAKI,OAAAA,CAAC,MAADA,CAAvB,EAAgCJ,KAAKI,OAAAA,CAAC,OAADA,CAArCD;QAFFP,CAAAA;;AAQAS,QAAAA,0BAAAA,sBAAeC,IAAD,EAAOC,IAAP,EAAaC,KAA3BH;AAAAA,UAAAA;;;UACEI,YAAQH;UACRI,aAASF,KAAKG,QAAAA,CAAAA;UAEdC,IAAI,cAAcC,OAAAA,CAAON,IAAPM;UAClB,KAAA,QAAOD,CAAP,CAAA;YACEf,IAAAiB,OAAAA,CAAMC,mBAAN,EAAsBV,yBAAD,GAAA,CAA0BE,IAA1B,CAArBO;UADF;UAIAE,aAASJ,CAACR,OAAAA,CAACa,CAADb,CAAGc,MAAAA,CAAAA;UACbb,OAAAc,CAAAA,aAASP,CAACR,OAAAA,CAACgB,CAADhB,CAAGc,MAAAA,CAAAA,CAAbC;QAVFd,CAAAA;;AAgBAgB,QAAAA,oBAAAA,gBAASC,MAATD;AAAAA,UAAAA;;;UACEE,QAAQD,MAAME,UAAAA,CAAUR,UAAhB,EAAwBG,UAAlBK;UACd,OAAO3B,IAAA4B,QAAAA,CAAOF,KAAPE;QAFTJ,CAAAA;QAKA1B,OAAA8B,sBAAAA,kBAAWF,KAAXE;AAAAA,UAAAA;;;UACEC,QAAcC,UAANJ,KAAMI,EAAEX,UAAFW;UACd,OAAOC,gBAAUzB,KAAAA,CAAKM,SAAf,EAAsBc,KAAtB,EAA6Bb,UAAMN,OAAAA,CAACsB,KAADtB,CAAzBD;QAFnBsB,CAAAA;MAjCF9B,GAAAA,WAAAA,EAAAA,IAAAA;IAFFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>61, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Nechronica.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire 'bcdice/dice_table/table'\n\nmodule BCDice\n  module GameSystem\n    class Nechronica < Base\n      # ゲームシステムの識別子\n      ID = 'Nechronica'\n\n      # ゲームシステム名\n      NAME = 'ネクロニカ'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'ねくろにか'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・判定　(nNC+m)\n        　ダイス数n、修正値mで判定ロールを行います(省略=1)\n        　ダイス数が2以上の時のパーツ破損数も表示します。\n        ・攻撃判定　(nNA+m)\n        　ダイス数n、修正値mで攻撃判定ロールを行います(省略=1)\n        　命中部位とダイス数が2以上の時のパーツ破損数も表示します。\n\n        表\n        ・姉妹への未練表 nm\n        ・中立者への未練表 nmn\n        ・敵への未練表 nme\n      INFO_MESSAGE_TEXT\n\n      def initialize(command)\n        super(command)\n\n        @sort_add_dice = true\n        @sort_barabara_dice = true\n        @default_target_number = 6 # 目標値が空欄の時の目標値\n      end\n\n      def eval_game_system_specific_command(command)\n        roll_tables(command, self.class::TABLES) || nechronica_check(command)\n      end\n\n      def result_nd10(total, _dice_total, value_list, cmp_op, target)\n        # 後方互換を維持するため、1d10>=nを目標値nの1NCとして処理\n        if value_list.count != 1 || cmp_op != :>= || target.nil? || target == \"?\"\n          return nil\n        end\n\n        result_nechronica([total], target)\n      end\n\n      private\n\n      def result_nechronica(value_list, target)\n        if value_list.max >= target\n          if value_list.max >= 11\n            Result.critical(translate(\"Nechronica.critical\"))\n          else\n            Result.success(translate(\"success\"))\n          end\n        elsif value_list.count { |i| i <= 1 } == 0\n          Result.failure(translate(\"failure\"))\n        elsif value_list.size > 1\n          break_all_parts = translate(\"Nechronica.break_all_parts\")\n          fumble = translate(\"Nechronica.fumble\")\n          Result.fumble(\"\#{fumble} ＞ \#{break_all_parts}\")\n        else\n          Result.fumble(translate(\"Nechronica.fumble\"))\n        end\n      end\n\n      # Rコマンドの後方互換を維持する\n      def r_backward_compatibility(command)\n        m = command.match(/^(\\d)?R10([+\\-\\d]+)?(\\[(\\d+)\\])?$/)\n        return command unless m\n\n        if m[4] == \"1\"\n          \"\#{m[1]}NA\#{m[2]}\"\n        else\n          \"\#{m[1]}NC\#{m[2]}\"\n        end\n      end\n\n      def nechronica_check(command)\n        command = r_backward_compatibility(command)\n        # 歴史的経緯で10を受理する\n        cmd = Command::Parser.new(/N[CA](10)?/, round_type: round_type)\n                             .enable_prefix_number.parse(command)\n        return nil unless cmd\n\n        dice_count = [1, cmd.prefix_number.to_i].max\n        modify_number = cmd.modify_number || 0\n\n        dice = @randomizer.roll_barabara(dice_count, 10).sort\n        dice_mod = dice.map { |i| i + modify_number }\n        total = dice_mod.max\n\n        na = get_hit_location(total) if cmd.command.start_with?(\"NA\")\n\n        result = result_nechronica(dice_mod, 6)\n\n        sequence = [\n          \"(\#{cmd})\",\n          \"[\#{dice.join(',')}]\#{Format.modifier(modify_number)}\",\n          \"\#{total}[\#{dice_mod.join(',')}]\",\n          result.text,\n          na,\n        ].compact\n\n        result.text = sequence.join(\" ＞ \")\n        return result\n      end\n\n      def get_hit_location(value)\n        return nil if value <= 5\n\n        table = translate(\"Nechronica.hit_location.table\")\n        text = table[(value - 6).clamp(0, 5)]\n\n        if value > 10\n          text + translate(\"Nechronica.hit_location.additional_damage\", damage: value - 10)\n        else\n          text\n        end\n      end\n\n      class << self\n        private\n\n        def translate_tables(locale)\n          {\n            \"NM\" => DiceTable::Table.from_i18n(\"Nechronica.table.NM\", locale),\n            \"NMN\" => DiceTable::Table.from_i18n(\"Nechronica.table.NMN\", locale),\n            \"NME\" => DiceTable::Table.from_i18n(\"Nechronica.table.NME\", locale),\n          }\n        end\n      end\n\n      TABLES = translate_tables(:ja_jp)\n\n      register_prefix('\\d?NC', '\\d?NA', '\\dR10', TABLES.keys)\n    end\n  end\nend\n"], :names=>["<top (required)>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:Nechronica>", "initialize", "command", "@sort_add_dice", "@sort_barabara_dice", "@default_target_number", "6", "eval_game_system_specific_command", "$ret_or_1", "roll_tables", "class::TABLES", "class", "nechronica_check", "result_nd10", "total", "_dice_total", "value_list", "cmp_op", "target", "count", "1", "nil?", "result_nechronica", "private", ">=", "max", "11", "Result", "critical", "translate", "success", "block in result_nechronica", "i", "block (2 levels) in result_nechronica", "<=", "0", "failure", ">", "size", "break_all_parts", "fumble", "r_backward_compatibility", "m", "match", "[]", "4", "2", "cmd", "Command::Parser", "Command", "new", "round_type", "enable_prefix_number", "parse", "dice_count", "prefix_number", "to_i", "modify_number", "dice", "@randomizer", "roll_barabara", "10", "sort", "dice_mod", "map", "block in nechronica_check", "block (2 levels) in nechronica_check", "+", "start_with?", "na", "get_hit_location", "result", "sequence", "join", "Format", "modifier", "text", "compact", "text=", "value", "5", "table", "-", "clamp", "translate_tables", "locale", "DiceTable::Table", "DiceTable", "from_i18n", "register_prefix", "TABLES", "keys", "Base"], :mappings=>"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"}}, {:offset=>{:line=>217, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Nechronica_Korean.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/game_system/Nechronica\"\n\nmodule BCDice\n  module GameSystem\n    class Nechronica_Korean < Nechronica\n      # ゲームシステムの識別子\n      ID = 'Nechronica:Korean'\n\n      # ゲームシステム名\n      NAME = '네크로니카'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = '国際化:Korean:네크로니카'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・판정　(nNC+m)\n        　주사위 수n、수정치m으로 판정굴림을 행합니다.\n        　주사위 수가 2개 이상일 때에 파츠파손 수도 표시합니다.\n        ・공격판정　(nNA+m)\n        　주사위 수n、수정치m으로 공격판정굴림을 행합니다.\n        　명중부위와 주사위 수가 2개 이상일 때에 파츠파손 수도 표시합니다.\n\n        表\n        ・姉妹への未練表 nm\n        ・中立者への未練表 nmn\n        ・敵への未練表 nme\n      INFO_MESSAGE_TEXT\n\n      register_prefix_from_super_class()\n\n      def initialize(command)\n        super(command)\n\n        @locale = :ko_kr\n      end\n\n      TABLES = translate_tables(:ko_kr)\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:Nechronica_Korean>", "register_prefix_from_super_class", "initialize", "command", "@locale", "translate_tables", "Nechronica"], :mappings=>"AAAAA,2BAAAA;EAAAA;;;EAEAC,IAAAC,SAAAA,CAAQF,+BAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAAC;MAAAA;;QAAAA;;;QAEE,8BAAKA,mBAAL;QAGA,gCAAOA,OAAP;QAGA,oCAAWA,kBAAX;QAGA,wCACNA,eADqB,GAErBA,8BAFqB,GAGrBA,oCAHqB,GAIrBA,iBAJqB,GAKrBA,gCALqB,GAMrBA,0CANqB,GAOrBA,IAPqB,GAQrBA,KARqB,GASrBA,eATqB,GAUrBA,iBAVqB,GAWrBA,eAXM;QAcAJ,IAAAK,kCAAAA,CAAAA;;AAEAC,QAAAA,0BAAAA,sBAAeC,OAAfD;AAAAA,UAAAA;;UAAAA;;UACE,OAAAN,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAMO,OAAN,CAAA,EAAA,IAAA;UAEAD,OAAAE,CAAAA,cAAU,OAAVA;QAHFF,CAAAA;QAMAF,OAAA,kCAASJ,IAAAS,kBAAAA,CAAiB,OAAjBA,CAAT;MAjCFL,GAAAA,WAAAA,EAA0BM,gBAA1BN;IADFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAJAH;"}}]}