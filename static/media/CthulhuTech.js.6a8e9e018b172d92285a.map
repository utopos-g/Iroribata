{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/arithmetic_evaluator.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module ArithmeticEvaluator\n    class << self\n      # 四則演算を評価する\n      # @deprecated +Arithmetic.#eval+ を利用してください。\n      # @param expr [String, nil] 評価する式\n      # @param round_type [Symbol] 端数処理の種類\n      # @return [Integer] 評価結果を返す。不正な式の場合には0を返す。\n      def eval(expr, round_type: RoundType::FLOOR)\n        return 0 unless expr\n\n        Arithmetic.eval(expr, round_type) || 0\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:ArithmeticEvaluator>", "eval", "expr", "$kwargs", "RoundType::FLOOR", "RoundType", "0", "$ret_or_1", "Arithmetic", "round_type", "self"], :mappings=>"AAAAA,8CAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MACEA,OAAA;QAAA;;QAME,OAAAC,oBAAAA,iBAASC,IAAD,EAVdC,OAUMF,GAAAA,MAAAA,IAAAA,wCAAAA;AAAAA,UAAAA;;;UAVN;;UAUqB,0CAAA,qCAAYG,IAAAC,eAAAD;UACzB,KAAA,QAAgBF,IAAhB,CAAA;YAAA,OAAOI;UAAP;UAEA,IAAA,QAAAC,CAAAA,YAAAC,gBAAUP,MAAAA,CAAMC,IAAhB,EAAsBO,UAAZR,CAAVM,CAAA,CAAA;YAAAN,OAAA;UAAA;YAAqCA,OAAAK;UAArC,EAHFL;YAAAA;YAAAA;UAAAA;QAAAA,CAAAA,IAAAA;MANF,4BAASS,IAAT;IADFV,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>40, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/CthulhuTech.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire 'bcdice/arithmetic_evaluator'\n\nmodule BCDice\n  module GameSystem\n    class CthulhuTech < Base\n      register_prefix('\\d+D10')\n\n      # ゲームシステムの識別子\n      ID = 'CthulhuTech'\n\n      # ゲームシステム名\n      NAME = 'クトゥルフテック'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'くとうるふてつく'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・行為判定（test）：nD10+m>=d\n        　n個のダイスを使用して、修正値m、難易度dで行為判定（test）を行います。\n        　修正値mは省略可能、複数指定可能（例：+2-4）です。\n        　成功、失敗、クリティカル、ファンブルを自動判定します。\n        　例）2D10>=12　4D10+2>=28　5D10+2-4>=32\n\n        ・対抗判定（contest）：nD10+m>d\n        　行為判定と同様ですが、防御側有利のため「>=」ではなく「>」を入力します。\n        　ダメージダイスも表示します。\n      INFO_MESSAGE_TEXT\n\n      # 行為判定のノード\n      class Test\n        # 判定で用いる比較演算子\n        #\n        # 対抗判定で変えられるように定数で定義する。\n        COMPARE_OP = :>=\n\n        # ノードを初期化する\n        # @param [Integer] num ダイス数\n        # @param [Integer] modifier 修正値\n        # @param [Integer] difficulty 難易度\n        def initialize(num, modifier, difficulty)\n          @num = num\n          @modifier = modifier\n          @difficulty = difficulty\n        end\n\n        # 判定を行う\n        # @param randomizer [Randoizer]\n        # @return [String] 判定結果\n        def execute(randomizer)\n          dice_values = randomizer.roll_barabara(@num, 10)\n\n          # ファンブル：出目の半分（小数点以下切り上げ）以上が1の場合\n          fumble = dice_values.count(1) >= ((dice_values.length + 1) / 2).to_i\n\n          sorted_dice_values = dice_values.sort\n          roll_result = calculate_roll_result(sorted_dice_values)\n          test_value = roll_result + @modifier\n\n          diff = test_value - @difficulty\n\n          # diff と @difficulty との比較の演算子が変わるので、send で対応\n          # 例：COMPARE_OP が :>= ならば、diff >= 0 と同じ\n          success = !fumble && diff.send(self.class::COMPARE_OP, 0)\n\n          critical = diff >= 10\n\n          output_parts = [\n            \"(\#{expression()})\",\n            test_value_expression(sorted_dice_values, roll_result),\n            test_value,\n            result_str(success, fumble, critical, diff)\n          ]\n\n          return output_parts.join(' ＞ ')\n        end\n\n        private\n\n        # 数式表現を返す\n        # @return [String]\n        def expression\n          modifier_str = Format.modifier(@modifier)\n          return \"\#{@num}D10\#{modifier_str}\#{self.class::COMPARE_OP}\#{@difficulty}\"\n        end\n\n        # 判定値の数式表現を返す\n        # @param [Array<Integer>] dice_values 出目の配列\n        # @param [Integer] roll_result ダイスロール結果の値\n        # @return [String]\n        def test_value_expression(dice_values, roll_result)\n          dice_str = dice_values.join(',')\n          modifier_str = Format.modifier(@modifier)\n\n          return \"\#{roll_result}[\#{dice_str}]\#{modifier_str}\"\n        end\n\n        # 判定結果の文字列を返す\n        # @param [Boolean] success 成功したか\n        # @param [Boolean] fumble ファンブルだったか\n        # @param [Boolean] critical クリティカルだったか\n        # @param [Integer] _diff 判定値と難易度の差\n        # @return [String]\n        def result_str(success, fumble, critical, _diff)\n          return 'ファンブル' if fumble\n          return 'クリティカル' if critical\n\n          return success ? '成功' : '失敗'\n        end\n\n        # ダイスロール結果を計算する\n        #\n        # 以下のうち最大のものを返す。\n        #\n        # * 出目の最大値\n        # * ゾロ目の和の最大値\n        # * ストレート（昇順で連続する3個以上の値）の和の最大値\n        #\n        # @param [Array<Integer>] sorted_dice_values 昇順でソートされた出目の配列\n        # @return [Integer]\n        def calculate_roll_result(sorted_dice_values)\n          highest_single_roll = sorted_dice_values.last\n\n          sum_of_highest_set_of_multiples = sorted_dice_values\n                                            .group_by(&:itself)\n                                            .values\n                                            .map(&:sum)\n                                            .max\n\n          candidates = [\n            highest_single_roll,\n            sum_of_highest_set_of_multiples,\n            sum_of_largest_straight(sorted_dice_values)\n          ]\n\n          return candidates.max\n        end\n\n        # ストレートの和の最大値を求める\n        #\n        # ストレートとは、昇順で3個以上連続した値のこと。\n        #\n        # @param [Array<Integer>] sorted_dice_values 昇順にソートされた出目の配列\n        # @return [Integer] ストレートの和の最大値\n        # @return [0] ストレートが存在しなかった場合\n        def sum_of_largest_straight(sorted_dice_values)\n          # 出目が3個未満ならば、ストレートは存在しない\n          return 0 if sorted_dice_values.length < 3\n\n          # ストレートの和の最大値\n          max_sum = 0\n\n          # 連続した値の数\n          n_consecutive_values = 0\n          # 連続した値の和\n          sum = 0\n          # 直前の値\n          # 初期値を負の値にして、最初の値と連続にならないようにする\n          last = -1\n\n          sorted_dice_values.uniq.each do |value|\n            # 値が連続でなければ、状態を初期化する（現在の値を連続1個目とする）\n            if value - last > 1\n              n_consecutive_values = 1\n              sum = value\n              last = value\n\n              next\n            end\n\n            # 連続した値なので溜める\n            n_consecutive_values += 1\n            sum += value\n            last = value\n\n            # ストレートならば、和の最大値を更新する\n            if n_consecutive_values >= 3 && sum > max_sum\n              max_sum = sum\n            end\n          end\n\n          return max_sum\n        end\n      end\n\n      # 対抗判定のノード\n      class Contest < Test\n        # 判定で用いる比較演算子\n        COMPARE_OP = :>\n\n        # 判定結果の文字列を返す\n        #\n        # 成功した場合（クリティカルを含む）、ダメージロールのコマンドを末尾に\n        # 追加する。\n        #\n        # @param [Boolean] success 成功したか\n        # @param [Integer] diff 判定値と難易度の差\n        # @return [String]\n        def result_str(success, _fumble, _critical, diff)\n          formatted = super\n\n          if success\n            damage_roll_num = (diff / 5.0).ceil\n            damage_roll = \"\#{damage_roll_num}D10\"\n\n            \"\#{formatted}（ダメージ：\#{damage_roll}）\"\n          else\n            formatted\n          end\n        end\n      end\n\n      # ダイスボットを初期化する\n      def initialize(command)\n        super(command)\n\n        # 加算ロールで出目をソートする\n        @sort_add_dice = true\n      end\n\n      # ダイスボット固有コマンドの処理を行う\n      # @param [String] command コマンド\n      # @return [String] ダイスボット固有コマンドの結果\n      # @return [nil] 無効なコマンドだった場合\n      def eval_game_system_specific_command(command)\n        node = parse(command)\n        return nil unless node\n\n        return node.execute(@randomizer)\n      end\n\n      private\n\n      # 判定コマンドの正規表現\n      TEST_RE = /\\A(\\d+)D10((?:[-+]\\d+)+)?(>=?)(\\d+)\\z/.freeze\n\n      # 構文解析する\n      # @param [String] command コマンド\n      # @return [Test, Contest] 判定のノード\n      # @return [nil] 無効なコマンドだった場合\n      def parse(command)\n        m = TEST_RE.match(command)\n        return nil unless m\n\n        num = m[1].to_i\n        modifier = m[2] ? ArithmeticEvaluator.eval(m[2]) : 0\n        node_class = m[3] == '>' ? Contest : Test\n        difficulty = m[4].to_i\n\n        return node_class.new(num, modifier, difficulty)\n      end\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:CthulhuTech>", "register_prefix", "<class:Test>", "initialize", "num", "modifier", "difficulty", "@num", "@modifier", "@difficulty", "execute", "randomizer", "dice_values", "roll_barabara", "10", "fumble", ">=", "count", "1", "/", "+", "length", "2", "to_i", "sorted_dice_values", "sort", "roll_result", "calculate_roll_result", "test_value", "diff", "-", "success", "$ret_or_1", "!", "send", "class::COMPARE_OP", "class", "0", "critical", "output_parts", "expression", "test_value_expression", "result_str", "join", "private", "modifier_str", "Format", "dice_str", "_diff", "highest_single_roll", "last", "sum_of_highest_set_of_multiples", "map", "group_by", "to_proc", "values", "max", "candidates", "sum_of_largest_straight", "<", "3", "max_sum", "n_consecutive_values", "sum", "-1", "each", "uniq", "block in sum_of_largest_straight", "value", ">", "block (2 levels) in sum_of_largest_straight", "<class:Contest>", "_fumble", "_critical", "formatted", "damage_roll_num", "ceil", "damage_roll", "Test", "command", "@sort_add_dice", "eval_game_system_specific_command", "node", "parse", "@randomizer", "freeze", "m", "TEST_RE", "match", "[]", "ArithmeticEvaluator", "eval", "node_class", "Contest", "4", "new", "Base"], :mappings=>"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"}}]}