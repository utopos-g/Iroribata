{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/format.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module Format\n    module_function\n\n    # 比較演算子を文字列表記にする\n    #\n    # @param op [Symbol]\n    # @return [String, nil]\n    def comparison_operator(op)\n      case op\n      when :==\n        \"=\"\n      when :'!='\n        \"<>\"\n      when Symbol\n        op.to_s\n      end\n    end\n\n    # 修正値を文字列表記にする\n    #\n    # @param number [Integer, nil]\n    # @return [String]\n    def modifier(number)\n      if number.nil?\n        nil\n      elsif number == 0\n        \"\"\n      elsif number > 0\n        \"+\#{number}\"\n      else\n        number.to_s\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:Format>", "self", "module_function", "comparison_operator", "op", "$ret_or_1", "Symbol", "to_s", "modifier", "number", "nil?", "0", ">"], :mappings=>"AAAAA,gCAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;;MACEC,IAAAC,iBAAAA,CAAAA;;AAMAC,MAAAA,mCAAAA,+BAAwBC,EAAxBD;AAAAA,QAAAA;;QAEE,IAAA,QAAK,IAAL,EADAE,CAAAA,YAAKD,EAALC,CACA,CAAA;UACEF,OAAAA;QADF,OAEA,IAAA,QAAK,IAAL,EAdN,SAcM,CAAA;UACEA,OAAAA;QADF,OAEA,IAAA,QAAKG,YAAL,EAhBN,SAgBM,CAAA;UACEH,OAAAC,EAAEG,MAAAA,CAAAA;QADJ;UALAJ,OAAA;QAKA;MANFA,CAAAA;MAeAH,OAAAQ,wBAAAA,oBAAaC,MAAbD;AAAAA;QACE,IAAA,QAAGC,MAAMC,SAAAA,CAAAA,CAAT,CAAA;UACEF,OAAA;QADF,OAEA,IAAA,MAAMC,MAAN,EAAgBE,CAAhB,CAAA;UACEH,OAAAA;QADF,OAEA,IAAA,QAAaI,OAAPH,MAAOG,EAAED,CAAFC,CAAb,CAAA;UACEJ,OAACA,GAAD,GAAA,CAAIC,MAAJ;QADF;UAGED,OAAAC,MAAMF,MAAAA,CAAAA;QAHR;MALFC,CAAAA;IAtBFR,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>45, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/NightmareHunterDeep.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire \"bcdice/format\"\n\nmodule BCDice\n  module GameSystem\n    class NightmareHunterDeep < Base\n      # ゲームシステムの識別子\n      ID = 'NightmareHunterDeep'\n\n      # ゲームシステム名\n      NAME = 'ナイトメアハンター=ディープ'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'ないとめあはんたあていいふ'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        判定（xD6+y>=a, xD6+y, xD6)\n          出目6の個数をカウントして、その4倍を合計値に加算します。\n          また、宿命を獲得したか表示します。\n\n          Lv目標値 (xD6+y>=LVn, xD6+y>=NLn)\n            レベルで目標値を指定することができます。\n            LVn -> n*5+1, NLn -> n*5+5 に変換されます。\n          目標値'?' (xD6+y>=?)\n            目標値を '?' にすると何Lv成功か、何NL成功かを表示します。\n\n        ※判定コマンドは xD6 から始まる必要があります。また xD6 が複数あると反応しません。\n      INFO_MESSAGE_TEXT\n\n      register_prefix('\\d+D6')\n\n      def initialize(command)\n        super(command)\n\n        @sort_add_dice = true\n      end\n\n      def eval_game_system_specific_command(command)\n        command = command\n                  .sub(/Lv(\\d+)/i) { (Regexp.last_match(1).to_i * 5 - 1).to_s }\n                  .sub(/NL(\\d+)/i) { (Regexp.last_match(1).to_i * 5 + 5).to_s }\n\n        parser = Command::Parser.new(/\\d+D6/, round_type: round_type)\n                                .restrict_cmp_op_to(nil, :>=)\n                                .enable_question_target()\n        cmd = parser.parse(command)\n        unless cmd\n          return nil\n        end\n\n        times = cmd.command.to_i\n\n        dice_list = @randomizer.roll_barabara(times, 6).sort\n        dice_total = dice_list.sum()\n        total = dice_total + cmd.modify_number\n\n        suffix, revision = dice_revision(dice_list)\n        total += revision\n\n        target = cmd.question_target? ? \"?\" : cmd.target_number\n        result = result_text(total, cmd.cmp_op, target)\n\n        sequence = [\n          \"(\#{cmd})\",\n          interim_expr(cmd, dice_total, dice_list),\n          expr_with_revision(dice_total + cmd.modify_number, suffix),\n          total,\n          result,\n          fate(dice_list),\n        ].compact\n\n        return sequence.join(\" ＞ \")\n      end\n\n      def result_text(total, cmp_op, target)\n        return nil unless cmp_op == :>=\n\n        if target != \"?\"\n          return total >= target ? \"成功\" : \"失敗\"\n        end\n\n        success_lv = ((total + 1) / 5).to_i\n        success_nl = ((total - 5) / 5).to_i\n\n        return success_lv > 0 ? \"Lv\#{success_lv}/NL\#{success_nl}成功\" : \"失敗\"\n      end\n\n      # ナイトメアハンターディープ用宿命表示\n      def fate(dice_list)\n        dice_list.count(1) > 0 ? \"宿命獲得\" : nil\n      end\n\n      def interim_expr(cmd, dice_total, dice_list)\n        if dice_list.size > 1 || cmd.modify_number != 0\n          modifier = Format.modifier(cmd.modify_number)\n          \"\#{dice_total}[\#{dice_list.join(',')}]\#{modifier}\"\n        end\n      end\n\n      def expr_with_revision(total, suffix)\n        suffix ? \"\#{total}\#{suffix}\" : nil\n      end\n\n      def dice_revision(dice_list)\n        count6 = dice_list.count(6)\n        if count6 > 0\n          return \"+\#{count6}*4\", count6 * 4\n        else\n          return nil, 0\n        end\n      end\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:NightmareHunterDeep>", "register_prefix", "initialize", "command", "@sort_add_dice", "eval_game_system_specific_command", "sub", "block in eval_game_system_specific_command", "block (2 levels) in eval_game_system_specific_command", "-", "*", "Regexp", "last_match", "1", "to_i", "5", "to_s", "+", "parser", "Command::Parser", "Command", "new", "round_type", "restrict_cmp_op_to", "enable_question_target", "cmd", "parse", "times", "dice_list", "@randomizer", "roll_barabara", "6", "sort", "dice_total", "sum", "total", "modify_number", "dice_revision", "suffix", "revision", "target", "question_target?", "target_number", "result", "result_text", "cmp_op", "sequence", "interim_expr", "expr_with_revision", "fate", "compact", "join", ">=", "success_lv", "/", "success_nl", ">", "0", "count", "size", "modifier", "Format", "count6", "4", "Base"], :mappings=>"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"}}]}