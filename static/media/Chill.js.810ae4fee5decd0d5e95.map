{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/Chill.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class Chill < Base\n      # ゲームシステムの識別子\n      ID = 'Chill'\n\n      # ゲームシステム名\n      NAME = 'Chill'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'ちる'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~INFO_MESSAGE_TEXT\n        ・ストライク・ランク　(SRx)\n        　\"SRストライク・ランク\"の形で記入します。\n        　ストライク・ランク・チャートに従って自動でダイスロールを行い、\n        　負傷とスタミナロスを計算します。\n        　ダイスロールと同様に、他のプレイヤーに隠れてロールすることも可能です。\n        　例）SR7　　　sr13　　　SR(7+4)　　　Ssr10\n      INFO_MESSAGE_TEXT\n\n      register_prefix('SR')\n\n      def result_1d100(total, _dice_total, cmp_op, target)\n        return nil if target == '?'\n        return nil if cmp_op != :<=\n\n        if total >= 100\n          Result.fumble(\"ファンブル\")\n        elsif total > target\n          Result.failure(\"失敗\")\n        elsif total >= (target * 0.9)\n          Result.success(\"Ｌ成功\")\n        elsif total >= (target / 2).to_i\n          Result.success(\"Ｍ成功\")\n        elsif total >= (target / 10).to_i\n          Result.success(\"Ｈ成功\")\n        else\n          Result.critical(\"Ｃ成功\")\n        end\n      end\n\n      def eval_game_system_specific_command(command)\n        roll_strike_rank_result(command)\n      end\n\n      def roll_strike_rank_result(string)\n        debug('strike_rank begin string', string)\n\n        wounds = 0\n        sta_loss = 0\n        dice = ''\n        dice_add = \"\"\n        dice_str = \"\"\n\n        unless /(^|\\s)[sS]?(SR|sr)(\\d+)($|\\s)/ =~ string\n          debug('invalid string', string)\n          return \"1\"\n        end\n\n        strikeRank = Regexp.last_match(3).to_i\n\n        if strikeRank < 14\n          sta_loss, dice, dice_add, dice_str = check_strike_rank(strikeRank)\n          wounds, dice_w, dice_wa, dice_ws = check_strike_rank(strikeRank - 3)\n          dice = dice + ', ' + dice_w\n          dice_add += ', ' + dice_wa\n          dice_str = dice_str + ', ' + dice_ws\n        else\n          sta_loss, _dice, dice_add, dice_str = check_strike_rank(13)\n\n          dice_list = @randomizer.roll_barabara(4, 10)\n          wounds = dice_list.sum()\n          dice_ws = dice_list.join(\",\")\n\n          dice = '5d10*3, 4d10+' + ((strikeRank - 13) * 2).to_s + 'd10'\n          dice_add += ', ' + wounds.to_s\n          dice_str = \"\#{dice_str}, \#{dice_ws}\"\n\n          dice_list = @randomizer.roll_barabara((strikeRank - 13) * 2, 10)\n          wounds_wk = dice_list.sum()\n          dice_ws = dice_list.join(\",\")\n\n          dice_str += \"+\#{dice_ws}\"\n          dice_add += \"+\#{wounds_wk}\"\n          wounds += wounds_wk\n        end\n\n        output = \"\#{dice_str} ＞ \#{dice_add} ＞ スタミナ損失\#{sta_loss}, 負傷\#{wounds}\"\n\n        string += ':' + dice\n\n        if output.empty?\n          return \"1\"\n        end\n\n        output = \"(\#{string}) ＞ \#{output}\"\n        debug('strike_rank end output', output)\n\n        return output\n      end\n\n      def check_strike_rank(strikeRank)\n        strikeRank = strikeRank.to_i\n\n        dice = ''\n        dice_add = ''\n        dice_str = ''\n        damage = 0\n\n        if strikeRank < 1\n          damage = 0\n          dice_str = '-'\n          dice_add = '-'\n          dice = '-'\n\n        elsif strikeRank < 2\n          dice = '0or1'\n          damage = @randomizer.roll_once(2)\n          dice_str = damage.to_s\n\n          damage -= 1\n          dice_add = damage.to_s\n        elsif strikeRank < 3\n          dice = '1or2'\n          damage = @randomizer.roll_once(2)\n          dice_str = damage.to_s\n          dice_add = damage.to_s\n        elsif strikeRank < 4\n          dice = '1d5'\n          damage = @randomizer.roll_once(5)\n          dice_str = damage.to_s\n          dice_add = damage.to_s\n        elsif strikeRank < 10\n          dice = (strikeRank - 3).to_s + 'd10'\n          dice_list = @randomizer.roll_barabara(strikeRank - 3, 10)\n          damage = dice_list.sum()\n          dice_add = damage.to_s\n          dice_str = dice_list.join(\",\")\n        elsif strikeRank < 13\n          dice = (strikeRank - 6).to_s + 'd10*2'\n          dice_list = @randomizer.roll_barabara(strikeRank - 6, 10)\n          total = dice_list.sum()\n          dice_add = \"\#{total}*2\"\n          damage = total * 2\n          dice_str = \"(\#{dice_list.join(',')})*2\"\n        else\n          dice = '5d10*3'\n          dice_list = @randomizer.roll_barabara(5, 10)\n          total = dice_list.sum()\n          dice_add = \"\#{total}*3\"\n          damage = total * 3\n          dice_str = \"(\#{dice_list.join(',')})*3\"\n        end\n\n        return damage, dice, dice_add, dice_str\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:Chill>", "self", "register_prefix", "result_1d100", "total", "_dice_total", "cmp_op", "target", ">=", "100", "Result", "fumble", ">", "failure", "*", "success", "/", "2", "to_i", "10", "critical", "eval_game_system_specific_command", "command", "roll_strike_rank_result", "string", "debug", "wounds", "0", "sta_loss", "dice", "dice_add", "dice_str", "=~", "strikeRank", "Regexp", "last_match", "3", "<", "14", "check_strike_rank", "-", "dice_w", "dice_wa", "dice_ws", "+", "13", "_dice", "dice_list", "@randomizer", "roll_barabara", "4", "sum", "join", "to_s", "wounds_wk", "output", "empty?", "damage", "1", "roll_once", "5", "6", "Base"], :mappings=>"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"}}]}