{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/RuneQuestRoleplayingInGlorantha.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module GameSystem\n    class RuneQuestRoleplayingInGlorantha < Base\n      # ゲームシステムの識別子\n      ID = 'RuneQuestRoleplayingInGlorantha'\n\n      # ゲームシステム名\n      NAME = 'ルーンクエスト：ロールプレイング・イン・グローランサ'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'るうんくえすと4'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・判定コマンド クリティカル、スペシャル、ファンブルを含めた判定を行う。\n        RQG<=成功率\n\n        例1：RQG<=80 （技能値80で判定）\n        例2：RQG<=80+20 （技能値100で判定）\n\n        ・抵抗判定コマンド（能動-受動） クリティカル、スペシャル、ファンブルを含めた判定を行う。\n        RES(能動能力-受動能力)m増強値\n        増強値は省略可能。\n\n        例1：RES(9-11)    (能動能力9 vs 受動能力11で判定)\n        例2：RES(9-11)m20 (能動能力9 vs 受動能力11、+20%の増強が能動側に入る判定)\n        例3：RES(9)m50    (能動能力と受動能力の差が9で、+50%の増強が能動側に入る判定)\n\n        ・抵抗判定コマンド(能動側のみ) クリティカル、スペシャル、ファンブルは含めず判定を行う。\n        RSA(能動能力)m増強値\n        増強値は省略可能。\n\n        例1：RSA(9)       (能動能力9で判定)\n        例2：RSA(9)m20    (能動能力9で判定、+20%の増強が能動側に入る判定)\n\n      MESSAGETEXT\n\n      register_prefix('RQG', 'RES', 'RSA')\n\n      def eval_game_system_specific_command(command)\n        case command\n        when /RQG/i\n          return do_ability_roll(command)\n        when /RES/i\n          return do_resistance_roll(command)\n        when /RSA/i\n          return do_resistance_active_characteristic_roll(command)\n        end\n        return nil\n      end\n\n      private\n\n      # 技能などの一般判定\n      def do_ability_roll(command)\n        m = %r{\\A(RQG)(<=([+-/*\\d]+))?$}.match(command)\n        unless m\n          return nil\n        end\n\n        roll_value = @randomizer.roll_once(100)\n        unless m[3]\n          # RQGのみ指定された場合は1d100を振ったのと同じ挙動\n          return \"(1D100) ＞ \#{roll_value}\"\n        end\n\n        ability_value = Arithmetic.eval(m[3], RoundType::ROUND)\n        result_prefix_str = \"(1D100<=\#{ability_value}) ＞\"\n\n        if ability_value == 0\n          # 0%は判定なしで失敗\n          return Result.failure(\"\#{result_prefix_str} 失敗\")\n        end\n\n        result_str = \"\#{result_prefix_str} \#{roll_value} ＞\"\n\n        # 判定\n        get_roll_result(result_str, ability_value, roll_value)\n      end\n\n      # 抵抗判定\n      def do_resistance_roll(command)\n        m = %r{\\A(RES)([+-/*\\d]+)(M([+-/*\\d]+))?$}.match(command)\n        unless m\n          return nil\n        end\n\n        unless m[2]\n          return nil\n        end\n\n        difference_value = Arithmetic.eval(m[2], RoundType::ROUND)\n        difference_value = -10 if difference_value < -10\n\n        resistance_velue = 50 + (difference_value * 5)\n        resistance_velue += Arithmetic.eval(m[4], RoundType::ROUND) if m[4]\n\n        roll_value = @randomizer.roll_once(100)\n        result_str = \"(1D100<=\#{resistance_velue}) ＞ \#{roll_value} ＞\"\n\n        # 判定\n        get_roll_result(result_str, resistance_velue, roll_value)\n      end\n\n      # 能動側のみの対抗判定\n      def do_resistance_active_characteristic_roll(command)\n        m = %r{\\A(RSA)(\\d+)(M([+-/*\\d]+))?$}.match(command)\n        unless m\n          return nil\n        end\n\n        unless m[2]\n          return nil\n        end\n\n        active_ability_value = m[2].to_i\n        if active_ability_value == 0\n          return \"0は指定できません。\"\n        end\n\n        modifiy_value = m[4] ? Arithmetic.eval(m[4], RoundType::ROUND) : 0\n        roll_value = @randomizer.roll_once(100)\n        active_value = active_ability_value * 5 + modifiy_value\n        result_prefix_str = \"(1D100<=\#{active_value}) ＞ \#{roll_value} ＞\"\n\n        note_str = \"クリティカル/スペシャル、ファンブルは未処理。必要なら確認すること。\"\n\n        if roll_value >= 96\n          # 96以上は無条件で失敗\n          Result.failure(\"\#{result_prefix_str} 失敗\\n\#{note_str}\")\n        elsif roll_value <= 5 || roll_value <= modifiy_value\n          # 05以下あるいは修正値以下は無条件で成功\n          Result.success(\"\#{result_prefix_str} 成功\\n\#{note_str}\")\n        else\n          # 上記全てが当てはまらない時に突破可能な能力値を算出\n          \"\#{result_prefix_str} 相手側能力値\#{active_ability_value + ((50 + modifiy_value - roll_value) / 5).floor}まで成功\\n\#{note_str}\"\n        end\n      end\n\n      # 判定結果の取得\n      def get_roll_result(result_str, success_value, roll_value)\n        critical_value = (success_value.to_f / 20).round\n        special_value = (success_value.to_f / 5).round\n        funmble_value = ((100 - success_value.to_f) / 20).round\n\n        if (roll_value == 1) || (roll_value <= critical_value)\n          # クリティカル(01は必ずクリティカル)\n          Result.critical(\"\#{result_str} クリティカル/スペシャル\")\n        elsif (roll_value == 100) || (roll_value >= (100 - funmble_value + 1))\n          # ファンブル(00は必ずファンブル)\n          Result.fumble(\"\#{result_str} ファンブル\")\n        elsif roll_value >= 96 || ((roll_value > success_value) && (roll_value > 5))\n          # 失敗(96以上は必ず失敗、出目が01-05ではなく技能値より上なら失敗)\n          Result.failure(\"\#{result_str} 失敗\")\n        elsif roll_value <= special_value\n          # スペシャル\n          Result.success(\"\#{result_str} スペシャル\")\n        elsif (roll_value <= 5) || (roll_value <= success_value)\n          # 成功(05以下は必ず成功)\n          Result.success(\"\#{result_str} 成功\")\n        else\n          # ここには到達しないはずだが、念のため捕捉\n          Result.failure(\"\#{result_str} エラー\")\n        end\n      end\n    end\n  end\nend\n"], :names=>["<main>", "<module:BCDice>", "<module:GameSystem>", "<class:RuneQuestRoleplayingInGlorantha>", "self", "register_prefix", "eval_game_system_specific_command", "command", "$ret_or_1", "do_ability_roll", "do_resistance_roll", "do_resistance_active_characteristic_roll", "private", "m", "match", "roll_value", "@randomizer", "roll_once", "100", "[]", "3", "ability_value", "Arithmetic", "eval", "RoundType::ROUND", "RoundType", "result_prefix_str", "0", "Result", "failure", "result_str", "get_roll_result", "2", "difference_value", "<", "-10", "resistance_velue", "+", "50", "*", "5", "4", "active_ability_value", "to_i", "modifiy_value", "active_value", "note_str", ">=", "96", "<=", "success", "/", "-", "floor", "success_value", "critical_value", "to_f", "20", "round", "special_value", "funmble_value", "1", "critical", "fumble", ">", "Base"], :mappings=>"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"}}]}