{:version=>3, :sections=>[{:offset=>{:line=>0, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    # 表を表すクラス\n    class Table\n      # @param key [String]\n      # @param locale [Symbol]\n      # @return [Table]\n      def self.from_i18n(key, locale)\n        table = I18n.t(key, locale: locale)\n        new(table[:name], table[:type], table[:items])\n      end\n\n      # @param [String] name 表の名前\n      # @param [String] type 項目を選ぶときのダイスロールの方法 '1D6'など\n      # @param [Array<String>] items 表の項目の配列\n      def initialize(name, type, items)\n        @name = name\n        @items = items.freeze\n\n        m = /(\\d+)D(\\d+)/i.match(type)\n        unless m\n          raise ArgumentError, \"Unexpected table type: \#{type}\"\n        end\n\n        @times = m[1].to_i\n        @sides = m[2].to_i\n      end\n\n      # 表を振る\n      # @param [BCDice] bcdice ランダマイザ\n      # @return [String] 結果\n      def roll(bcdice)\n        value = bcdice.roll_sum(@times, @sides)\n        return choice(value)\n      end\n\n      def choice(value)\n        index = value - @times\n        return RollResult.new(@name, value, @items[index])\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:Table>", "from_i18n", "self", "key", "locale", "table", "I18n", "t", "new", "[]", "initialize", "name", "type", "items", "@name", "@items", "freeze", "m", "match", "raise", "ArgumentError", "@times", "1", "to_i", "@sides", "2", "roll", "bcdice", "value", "roll_sum", "choice", "index", "-", "RollResult"], :mappings=>"AAAAA,0CAAAA,gBAAAA;EAAAA;;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;MAEEA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAIEC,MAAIC,IAAJD,gBAAAA,qBAAmBE,GAAD,EAAMC,MAAxBH;AAAAA,UAAAA;;;UACEI,QAAQC,UAAIC,GAAAA,CAAGJ,GAAP,EAAY,oBAAA,UAAQC,MAAR,EAARG;UACZN,OAAAC,IAAAM,KAAAA,CAAIH,KAAKI,OAAAA,CAAC,MAADA,CAAT,EAAkBJ,KAAKI,OAAAA,CAAC,MAADA,CAAvB,EAAgCJ,KAAKI,OAAAA,CAAC,OAADA,CAArCD;QAFFP,CAAAA;;AAQAS,QAAAA,0BAAAA,sBAAeC,IAAD,EAAOC,IAAP,EAAaC,KAA3BH;AAAAA,UAAAA;;;UACEI,YAAQH;UACRI,aAASF,KAAKG,QAAAA,CAAAA;UAEdC,IAAI,cAAcC,OAAAA,CAAON,IAAPM;UAClB,KAAA,QAAOD,CAAP,CAAA;YACEf,IAAAiB,OAAAA,CAAMC,mBAAN,EAAsBV,yBAAD,GAAA,CAA0BE,IAA1B,CAArBO;UADF;UAIAE,aAASJ,CAACR,OAAAA,CAACa,CAADb,CAAGc,MAAAA,CAAAA;UACbb,OAAAc,CAAAA,aAASP,CAACR,OAAAA,CAACgB,CAADhB,CAAGc,MAAAA,CAAAA,CAAbC;QAVFd,CAAAA;;AAgBAgB,QAAAA,oBAAAA,gBAASC,MAATD;AAAAA,UAAAA;;;UACEE,QAAQD,MAAME,UAAAA,CAAUR,UAAhB,EAAwBG,UAAlBK;UACd,OAAO3B,IAAA4B,QAAAA,CAAOF,KAAPE;QAFTJ,CAAAA;QAKA1B,OAAA8B,sBAAAA,kBAAWF,KAAXE;AAAAA,UAAAA;;;UACEC,QAAcC,UAANJ,KAAMI,EAAEX,UAAFW;UACd,OAAOC,gBAAUzB,KAAAA,CAAKM,SAAf,EAAsBc,KAAtB,EAA6Bb,UAAMN,OAAAA,CAACsB,KAADtB,CAAzBD;QAFnBsB,CAAAA;MAjCF9B,GAAAA,WAAAA,EAAAA,IAAAA;IAFFD,GAAAA,WAAAA;EADFD,GAAAA,WAAAA;AAFAD;"}}, {:offset=>{:line=>61, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/dice_table/range_table.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nmodule BCDice\n  module DiceTable\n    # 各項目について、Rangeを用いて出目の合計の範囲を指定する、表のクラス。\n    #\n    # このクラスを使うと、表の定義を短く書ける。\n    # このクラスを使って表を定義するときは、各項目を以下の形で書く。\n    #\n    #     [出目の合計の範囲, 内容]\n    #\n    # 「出目の合計の範囲」には、Integerを要素とするRangeか、Integerを置ける。\n    #\n    # roll メソッドで表を振ると、出目の合計値と対応する項目が選ばれる。\n    #\n    # @example 表の定義（バトルテックの致命的命中表）\n    #   CRITICAL_TABLE = RangeTable.new(\n    #     '致命的命中表',\n    #     '2D6',\n    #     [\n    #       [2..7,   '致命的命中はなかった'],\n    #       [8..9,   '1箇所の致命的命中'],\n    #       [10..11, '2箇所の致命的命中'],\n    #       [12,     'その部位が吹き飛ぶ（腕、脚、頭）または3箇所の致命的命中（胴）']\n    #     ]\n    #   )\n    #\n    # @example 表を振った結果\n    #   CRITICAL_TABLE.roll(bcdice).formatted\n    #   # 出目の合計が7の場合 ：\"致命的命中表(7) ＞ 致命的命中はなかった\"\n    #   # 出目の合計が8の場合 ：\"致命的命中表(8) ＞ 1箇所の致命的命中\"\n    #   # 出目の合計が9の場合 ：\"致命的命中表(9) ＞ 1箇所の致命的命中\"\n    #   # 出目の合計が10の場合：\"致命的命中表(10) ＞ 2箇所の致命的命中\"\n    class RangeTable\n      # 表を振った結果を表す構造体\n      # @!attribute [rw] sum\n      #   @return [Integer] 出目の合計\n      # @!attribute [rw] values\n      #   @return [Array<Integer>] 出目の配列\n      # @!attribute [rw] content\n      #   @return [Object] 選ばれた項目の内容\n      # @!attribute [rw] formatted\n      #   @return [String] 整形された結果\n      RollResult = Struct.new(:sum, :values, :content, :formatted) do\n        alias_method :to_s, :formatted\n      end\n\n      # 表の項目を表す構造体\n      # @!attribute [rw] range\n      #   @return [Range] 出目の合計の範囲\n      # @!attribute [rw] content\n      #   @return [Object] 内容\n      Item = Struct.new(:range, :content)\n\n      # 項目を選ぶときのダイスロールの方法を表す正規表現\n      DICE_ROLL_METHOD_RE = /\\A(\\d+)D(\\d+)\\z/i.freeze\n\n      # 表を振った結果の整形処理（既定の処理）\n      DEFAULT_FORMATTER = lambda do |table, result|\n        \"\#{table.name}(\#{result.sum}) ＞ \#{result.content}\"\n      end\n\n      # @return [String] 表の名前\n      attr_reader :name\n      # @return [Integer] 振るダイスの個数\n      attr_reader :num_of_dice\n      # @return [Integer] 振るダイスの面数\n      attr_reader :num_of_sides\n\n      class << self\n        def from_i18n(key, locale)\n          table = I18n.t(key, locale: locale)\n          converted_items = table[:items].map do |item|\n            [conv_string_range(item[0]), item[1]]\n          end\n          new(table[:name], table[:type], converted_items)\n        end\n\n        def conv_string_range(x)\n          case x\n          when Integer\n            return x\n          when String\n            return x.include?(\"..\") ? Range.new(*x.split(\"..\", 2).map { |n| Integer(n) }) : Integer(x)\n          end\n\n          raise(\n            TypeError,\n            \"\#{@name}: \#{x} (\#{x.class}) must be a String or an Integer\"\n          )\n        end\n      end\n\n      # 表を初期化する\n      #\n      # ブロックを与えると、独自の結果整形処理を指定できる。\n      # ブロックは振った表（+table+）と振った結果（+result+）を引数として受け取る。\n      #\n      # @param [String] name 表の名前\n      # @param [String] dice_roll_method\n      #   項目を選ぶときのダイスロールの方法（+'1D6'+ など）\n      # @param [Array<(Range, Object)>, Array<(Integer, Object)>] items\n      #   表の項目の配列。[出目の合計の範囲, 内容]\n      # @yieldparam [RangeTable] table 振った表\n      # @yieldparam [RollResult] result 表を振った結果\n      # @raise [ArgumentError] ダイスロール方法が正しい書式で指定されていなかった場合\n      # @raise [TypeError] 範囲の型が正しくなかった場合\n      # @raise [RangeError] 出目の合計の最小値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の最大値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の範囲にずれや重なりがあった場合\n      #\n      # @example 表の定義（バトルテックの致命的命中表）\n      #   CRITICAL_TABLE = RangeTable.new(\n      #     '致命的命中表',\n      #     '2D6',\n      #     [\n      #       [2..7,   '致命的命中はなかった'],\n      #       [8..9,   '1箇所の致命的命中'],\n      #       [10..11, '2箇所の致命的命中'],\n      #       [12,     'その部位が吹き飛ぶ（腕、脚、頭）または3箇所の致命的命中（胴）']\n      #     ]\n      #   )\n      #\n      # @example 独自の結果整形処理を指定する場合\n      #   CRITICAL_TABLE_WITH_FORMATTER = RangeTable.new(\n      #     '致命的命中表',\n      #     '2D6',\n      #     [\n      #       [2..7,   '致命的命中はなかった'],\n      #       [8..9,   '1箇所の致命的命中'],\n      #       [10..11, '2箇所の致命的命中'],\n      #       [12,     'その部位が吹き飛ぶ（腕、脚、頭）または3箇所の致命的命中（胴）']\n      #     ]\n      #   ) do |table, result|\n      #     \"致命的命中発生? ＞ \#{result.sum}[\#{result.values}] ＞ \#{result.content}\"\n      #   end\n      #\n      #   CRITICAL_TABLE_WITH_FORMATTER.roll(bcdice).formatted\n      #   #=> \"致命的命中発生? ＞ 11[5,6] ＞ 2箇所の致命的命中\"\n      def initialize(name, dice_roll_method, items, &formatter)\n        @name = name.freeze\n        @formatter = formatter || DEFAULT_FORMATTER\n\n        m = DICE_ROLL_METHOD_RE.match(dice_roll_method)\n        unless m\n          raise(\n            ArgumentError,\n            \"\#{@name}: invalid dice roll method: \#{dice_roll_method}\"\n          )\n        end\n\n        @num_of_dice = m[1].to_i\n        @num_of_sides = m[2].to_i\n\n        store(items)\n      end\n\n      # 指定された値に対応する項目を返す\n      # @param [Integer] value 値（出目の合計）\n      # @return [Item] 指定された値に対応する項目\n      # @raise [RangeError] 範囲外の値が指定された場合\n      def fetch(value)\n        item = @items.find { |i| i.range.include?(value) }\n        unless item\n          raise RangeError, \"\#{@name}: value is out of range: \#{value}\"\n        end\n\n        return item\n      end\n\n      # 表を振る\n      # @param randomizer [#roll_barabara] ランダマイザ\n      # @return [RollResult] 表を振った結果\n      def roll(randomizer)\n        values = randomizer.roll_barabara(@num_of_dice, @num_of_sides)\n        sum = values.sum()\n\n        result = RollResult.new(sum, values, fetch(sum).content)\n        result.formatted = @formatter[self, result]\n\n        return result\n      end\n\n      private\n\n      # 表の項目を格納する\n      # @param [Array<(Range, Object)>, Array<(Integer, Object)>] items\n      #   表の項目の配列。[出目の合計の範囲, 内容]\n      # @return [self]\n      # @raise [TypeError] 範囲の型が正しくなかった場合\n      # @raise [RangeError] 出目の合計の最小値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の最大値がカバーされていなかった場合\n      # @raise [RangeError] 出目の合計の範囲にずれや重なりがあった場合\n      def store(items)\n        items_with_range = items.map { |r, c| [coerce_to_int_range(r), c] }\n        sorted_items = items_with_range.sort_by { |r, _| r.min }\n\n        assert_min_sum_is_covered(sorted_items)\n        assert_max_sum_is_covered(sorted_items)\n        assert_no_gap_or_overlap_in_ranges(sorted_items)\n\n        @items = sorted_items\n                 .map { |range, content| Item.new(range, content.freeze).freeze }\n                 .freeze\n\n        self\n      end\n\n      # 引数を強制的に整数を要素とするRangeに変換する\n      # @param [Range, Integer] x 変換対象\n      # @return [Range] 整数を要素とするRange\n      # @raise [TypeError] xの型に対応していなかった場合\n      def coerce_to_int_range(x)\n        case x\n        when Integer\n          return Range.new(x, x)\n        when Range\n          if x.begin.is_a?(Integer) && x.end.is_a?(Integer)\n            return x\n          end\n        end\n\n        raise(\n          TypeError,\n          \"\#{@name}: \#{x} (\#{x.class}) must be an Integer or a Range with Integers \"\n        )\n      end\n\n      # 出目の合計の最小値がカバーされていることを確認する\n      # @param [Array<(Range, Object)>] sorted_items\n      #   ソートされた、項目の配列\n      # @return [self]\n      # @raise [RangeError] 出目の合計の最小値がカバーされていなかった場合\n      def assert_min_sum_is_covered(sorted_items)\n        min_sum = @num_of_dice\n        range = sorted_items.first[0]\n        unless range.include?(min_sum)\n          raise(\n            RangeError,\n            \"\#{@name}: min value (\#{min_sum}) is not covered: \#{range}\"\n          )\n        end\n\n        self\n      end\n\n      # 出目の合計の最大値がカバーされていることを確認する\n      # @param [Array<(Range, Object)>] sorted_items\n      #   ソートされた、項目の配列\n      # @return [self]\n      # @raise [RangeError] 出目の合計の最大値がカバーされていなかった場合\n      def assert_max_sum_is_covered(sorted_items)\n        max_sum = @num_of_dice * @num_of_sides\n        range = sorted_items.last[0]\n        unless range.include?(max_sum)\n          raise(\n            RangeError,\n            \"\#{@name}: max value (\#{max_sum}) is not covered: \#{range}\"\n          )\n        end\n\n        self\n      end\n\n      # 出目の合計の範囲にずれや重なりがないことを確認する\n      # @param [Array<(Range, Object)>] sorted_items\n      #   ソートされた、項目の配列\n      # @return [self]\n      # @raise [RangeError] 出目の合計の範囲にずれや重なりがあった場合\n      def assert_no_gap_or_overlap_in_ranges(sorted_items)\n        sorted_items.each_cons(2) do |i1, i2|\n          r1 = i1[0]\n          r2 = i2[0]\n\n          max1 = r1.max\n          next_of_max1 = max1 + 1\n\n          if r2.include?(max1)\n            raise RangeError, \"\#{@name}: Range overlap: \#{r1} and \#{r2}\"\n          end\n\n          unless r2.include?(next_of_max1)\n            raise RangeError, \"\#{@name}: Range gap: \#{r1} and \#{r2}\"\n          end\n        end\n\n        self\n      end\n    end\n  end\nend\n"], :names=>["<top (required)>", "<module:BCDice>", "<module:DiceTable>", "<class:RangeTable>", "new", "Struct", "block in <class:RangeTable>", "block (2 levels) in <class:RangeTable>", "self", "alias_method", "freeze", "lambda", "table", "result", "name", "sum", "content", "attr_reader", "from_i18n", "key", "locale", "I18n", "t", "converted_items", "map", "[]", "block in from_i18n", "item", "block (2 levels) in from_i18n", "conv_string_range", "0", "1", "x", "Integer", "$ret_or_1", "String", "include?", "Range", "split", "2", "block in conv_string_range", "n", "block (2 levels) in conv_string_range", "raise", "TypeError", "@name", "class", "initialize", "dice_roll_method", "items", "@formatter", "formatter", "DEFAULT_FORMATTER", "m", "DICE_ROLL_METHOD_RE", "match", "ArgumentError", "@num_of_dice", "to_i", "@num_of_sides", "store", "fetch", "value", "find", "@items", "block in fetch", "i", "block (2 levels) in fetch", "range", "RangeError", "roll", "randomizer", "values", "roll_barabara", "RollResult", "formatted=", "private", "items_with_range", "block in store", "r", "c", "block (2 levels) in store", "coerce_to_int_range", "sorted_items", "sort_by", "_", "min", "assert_min_sum_is_covered", "assert_max_sum_is_covered", "assert_no_gap_or_overlap_in_ranges", "Item", "begin", "is_a?", "end", "min_sum", "first", "max_sum", "*", "last", "each_cons", "block in assert_no_gap_or_overlap_in_ranges", "i1", "i2", "block (2 levels) in assert_no_gap_or_overlap_in_ranges", "r1", "r2", "max1", "max", "next_of_max1", "+"], :mappings=>"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"}}, {:offset=>{:line=>268, :column=>0}, :map=>{:version=>3, :sourceRoot=>"", :sources=>["bcdice/game_system/KemonoNoMori.rb"], :sourcesContent=>["# frozen_string_literal: true\n\nrequire 'bcdice/dice_table/table'\nrequire 'bcdice/dice_table/range_table'\n\nmodule BCDice\n  module GameSystem\n    class KemonoNoMori < Base\n      # ゲームシステムの識別子\n      ID = 'KemonoNoMori'\n\n      # ゲームシステム名\n      NAME = '獸ノ森'\n\n      # ゲームシステム名の読みがな\n      SORT_KEY = 'けもののもり'\n\n      # ダイスボットの使い方\n      HELP_MESSAGE = <<~MESSAGETEXT\n        ・行為判定(成功度自動算出)(P119): KAx[±y]\n        ・継続判定(成功度+1固定): KCx[±y]\n           x=目標値\n           y=目標値への修正(任意) x+y-z のように複数指定可能\n             例1）KA7+3 → 目標値7にプラス3の修正を加えた行為判定\n             例2）KC6 → 目標値6の継続判定\n        ・罠動作チェック+獲物表(P163): CTR\n           罠ごとに1D12を振り、12が出た場合には生き物が罠を動作させ、その影響を受けている。\n        ・各種表（基本ルールブック）\n          ・大失敗表(P120): FT\n          ・能力値ランダム決定表(P121): RST\n          ・ランダム所要時間表(P122): RTT\n          ・ランダム消耗表(P122): RET\n          ・ランダム天気表(P128): RWT\n          ・ランダム天気持続表(P128): RWDT\n          ・ランダム遮蔽物表（屋外）(P140): ROMT\n          ・ランダム遮蔽物表（屋内）(P140): RIMT\n          ・逃走体験表(P144): EET\n          ・食材採集表(P157): GFT\n          ・水採集表(P157): GWT\n          ・白の魔石効果表(P186): WST\n        ・部位ダメージ関連の表（参照先ページはリプレイ&データブック「嚙神ノ宴」のもの）\n          ・人間部位表(P216): HPT\n          ・部位ダメージ段階表(P217): PDT\n          ・四足動物部位表(P225): QPT\n          ・無足動物部位表(P225): APT\n          ・二足動物部位表(P226): TPT\n          ・鳥部位表(P226): BPT\n          ・頭足動物部位表(P227): CPT\n          ・昆虫部位表(P227): IPT\n          ・蜘蛛部位表(P228): SPT\n      MESSAGETEXT\n\n      def eval_game_system_specific_command(command)\n        case command\n        when /KA\\d[-+\\d]*/ then check_1D12(command, true)\n        when /KC\\d[-+\\d]*/ then check_1D12(command, false)\n        when 'CTR' then get_trap_result()\n        when 'EET' then get_escape_experience_table_result(command)\n        else roll_tables(command, TABLES)\n        end\n      end\n\n      def check_1D12(command, is_action_judge)\n        debug('獸ノ森の1d12判定')\n        m = /K[AC](\\d[-+\\d]*)/.match(command)\n        return nil unless m\n\n        # 修正込みの目標値を計算\n        target_total = ArithmeticEvaluator.eval(m[1])\n        debug('target_total', target_total)\n\n        # 行為判定の成功度は [目標値の10の位の数+1]\n        # 継続判定の成功度は固定で+1\n        success_degree = is_action_judge ? (target_total / 10).to_i + 1 : 1\n\n        dice_total = @randomizer.roll_once(12)\n        debug('dice_total, target_total, success_degree = ', dice_total, target_total, success_degree)\n\n        if dice_total == 12\n          Result.fumble(\"(1D12<=\#{target_total}) ＞ \#{dice_total} ＞ 大失敗\")\n        elsif dice_total == 11\n          Result.critical(\"(1D12<=\#{target_total}) ＞ \#{dice_total} ＞ 大成功（成功度+\#{success_degree}, 次の継続判定の目標値を10に変更）\")\n        elsif dice_total <= target_total\n          Result.success(\"(1D12<=\#{target_total}) ＞ \#{dice_total} ＞ 成功（成功度+\#{success_degree}）\")\n        else\n          Result.failure(\"(1D12<=\#{target_total}) ＞ \#{dice_total} ＞ 失敗\")\n        end\n      end\n\n      def get_trap_result()\n        tra_check_num = @randomizer.roll_once(12)\n        unless tra_check_num == 12\n          return Result.new(\"罠動作チェック(1D12) ＞ \#{tra_check_num} ＞ 罠は動作していなかった\")\n        end\n\n        chase_num = @randomizer.roll_once(12)\n        chase = case chase_num\n                when 1, 2, 3, 4 then '小型動物'\n                when 5, 6, 7, 8 then '大型動物'\n                when 9, 10, 11, 12 then '人間の放浪者'\n                end\n        Result.new(\"罠動作チェック(1D12) ＞ \#{tra_check_num} ＞ 罠が動作していた！ ＞ 獲物表(\#{chase_num}) ＞ \#{chase}が罠にかかっていた\")\n      end\n\n      def get_escape_experience_table_result(command)\n        escape_experience = roll_tables(command, TABLES)\n        escape_duration = @randomizer.roll_once(12)\n        Result.new(\"\#{escape_experience} (再登場: \#{escape_duration}時間後)\")\n      end\n\n      TABLES = {\n        'FT' => DiceTable::RangeTable.new(\n          '大失敗表',\n          '1D12',\n          [\n            [1..3, '【余裕】が3点減少する（最低0まで）'],\n            [4..5, 'ランダムな荷物1個が落ちて行方不明になる（大失敗したエリアのアイテム調査で見つけることが可能）'],\n            [6..7, 'ランダムな荷物1個が破壊される'],\n            [8..9, 'ランダム天気表(RWT)を使用し、結果をターンの終了まで適用する'],\n            [10,   'ランダムな準備している小道具1個が破壊される'],\n            [11,   '着装している防具が破壊される'],\n            [12,   '準備している武器が破壊される'],\n          ]\n        ),\n        'RST' => DiceTable::RangeTable.new(\n          '能力値ランダム決定表',\n          '1D12',\n          [\n            [1..2,   '【移動】'],\n            [3..4,   '【格闘】'],\n            [5..6,   '【射撃】'],\n            [7..8,   '【製作】'],\n            [9..10,  '【察知】'],\n            [11..12, '【自制】'],\n          ]\n        ),\n        'RTT' => DiceTable::RangeTable.new(\n          'ランダム所要時間表',\n          '1D12',\n          [\n            [1..3,   '2'],\n            [4..6,   '3'],\n            [7..9,   '4'],\n            [10..12, '5'],\n          ]\n        ),\n        'RET' => DiceTable::RangeTable.new(\n          'ランダム消耗表',\n          '1D12',\n          [\n            [1..3,   '0'],\n            [4..6,   '1'],\n            [7..9,   '2'],\n            [10..12, '4'],\n          ]\n        ),\n        'RWT' => DiceTable::RangeTable.new(\n          'ランダム天気表',\n          '1D12',\n          [\n            [1..2,   '濃霧'],\n            [3..4,   '大雨'],\n            [5..6,   '雷雨'],\n            [7..8,   '強風'],\n            [9..10,  '酷暑'],\n            [11..12, '極寒'],\n          ]\n        ),\n        'RWDT' => DiceTable::RangeTable.new(\n          'ランダム天気持続表',\n          '1D12',\n          [\n            [1..2,   '1ターン'],\n            [3..4,   '3ターン'],\n            [5..6,   '6ターン'],\n            [7..8,   '24ターン'],\n            [9..10,  '72ターン'],\n            [11..12, '156ターン'],\n          ]\n        ),\n        'ROMT' => DiceTable::RangeTable.new(\n          'ランダム遮蔽物表(屋外)',\n          '1D12',\n          [\n            [1..2,   '【藪】耐久度3,軽減値1,特殊効果:コンタクト内のキャラクターに対する射撃攻撃判定に-1の修正を付加'],\n            [3..5,   '【木】耐久度5,軽減値2,特殊効果:コンタクト内のキャラクターに対する射撃攻撃判定に-1の修正を付加'],\n            [6..8,   '【大木】耐久度7,軽減値3,特殊効果:コンタクト内のキャラクターに対する射撃攻撃判定に-2の修正を付加'],\n            [9..10,  '【岩】耐久度6,軽減値4,特殊効果:コンタクト内のキャラクターに対する射撃攻撃判定に-1の修正を付加/コンタクト内で行われる格闘攻撃のダメージ+1'],\n            [11..12, '【岩壁】耐久度8,軽減値4,特殊効果:コンタクト内のキャラクターに対する射撃攻撃判定に-2の修正を付加/コンタクト内で行われる格闘攻撃のダメージ+2'],\n          ]\n        ),\n        'RIMT' => DiceTable::RangeTable.new(\n          'ランダム遮蔽物表(屋内)',\n          '1D12',\n          [\n            [1..4,  '【木材の壁】耐久度4,軽減値2,特殊効果:コンタクト内のキャラクターに対する射撃攻撃判定に-1の修正を付加'],\n            [5..8,  '【木材の扉】耐久度4,軽減値2,特殊効果:コンタクト内のキャラクターに対する射撃攻撃判定に-1、接触判定と突撃判定に-2の修正を付加'],\n            [9..12, '【木製家具】耐久度3,軽減値2,特殊効果:コンタクト内で行われる格闘攻撃のダメージ+1'],\n          ]\n        ),\n        'EET' => DiceTable::RangeTable.new(\n          '逃走体験表',\n          '1D12',\n          [\n            [1..3,   '【余裕】が0になる'],\n            [4..6,   '任意の【絆】を合計2点減少する'],\n            [7..9,   '全ての荷物を失う（逃走したエリアに配置され、調査で発見可能）'],\n            [10..12, '全ての武器と防具と小道具と荷物を失う（逃走したエリアに配置され、調査で発見可能）'],\n          ]\n        ),\n        'GFT' => DiceTable::RangeTable.new(\n          '食材採集表',\n          '1D12',\n          [\n            [1..2,  '食べられる根（栄養価:2）'],\n            [3..5,  '食べられる草（栄養価:3）'],\n            [6..8,  '食べられる実（栄養価:5）'],\n            [9..10, '小型動物（栄養価:10）'],\n            [11,    '大型動物（栄養価:40）'],\n            [12,    '気持ち悪い虫（栄養価:1）'],\n          ]\n        ),\n        'GWT' => DiceTable::RangeTable.new(\n          '水採集表',\n          '1D12',\n          [\n            [1..6,  '汚水'],\n            [7..11, '飲料水'],\n            [12,    '毒水'],\n          ]\n        ),\n        'WST' => DiceTable::Table.new(\n          '白の魔石効果表',\n          '1D12',\n          [\n            '役に立たないものの色を変える',\n            '役に立たないものを大きくする',\n            '役に立たないものを小さくする',\n            '役に立たないものを保存する',\n            '役に立たないものを復元する',\n            '役に立たないものを召喚する',\n            '役に立たないものを動かす',\n            '役に立たないものを増やす',\n            '役に立たないものを貼り付ける',\n            '役に立たないものを作り出す',\n            '小型動物を召喚する',\n            '大型動物を召喚する',\n          ]\n        ),\n        'HPT' => DiceTable::RangeTable.new(\n          '人間部位表',\n          '1D12',\n          [\n            [1..2,  '右腕部'],\n            [3..4,  '左腕部'],\n            [5..6,  '右脚部'],\n            [7..8,  '左脚部'],\n            [9..11, '胴部'],\n            [12,    '頭部'],\n          ]\n        ),\n        'PDT' => DiceTable::RangeTable.new(\n          '部位ダメージ段階表',\n          '1D12',\n          [\n            [1..6,  '軽傷'],\n            [7..10, '重傷'],\n            [11,    '破壊'],\n            [12,    '喪失'],\n          ]\n        ),\n        'QPT' => DiceTable::RangeTable.new(\n          '四足動物部位表',\n          '1D12',\n          [\n            [1..2,    '異形'],\n            [3,       '武器'],\n            [4,       '右前脚部'],\n            [5,       '左前脚部'],\n            [6,       '右後脚部'],\n            [7,       '左後脚部'],\n            [8..10,   '胴部'],\n            [11..12,  '頭部'],\n          ]\n        ),\n        'APT' => DiceTable::RangeTable.new(\n          '無足動物部位表',\n          '1D12',\n          [\n            [1..3,    '異形'],\n            [4..6,    '武器'],\n            [7..10,   '胴部'],\n            [11..12,  '頭部'],\n          ]\n        ),\n        'TPT' => DiceTable::RangeTable.new(\n          '二足動物部位表',\n          '1D12',\n          [\n            [1,     '異形'],\n            [2,     '武器'],\n            [3,     '右腕部'],\n            [4,     '左腕部'],\n            [5..6,  '右脚部'],\n            [7..8,  '左脚部'],\n            [9..11, '胴部'],\n            [12,    '頭部'],\n          ]\n        ),\n        'BPT' => DiceTable::RangeTable.new(\n          '鳥部位表',\n          '1D12',\n          [\n            [1,     '異形'],\n            [2,     '武器'],\n            [3..4,  '右翼(右腕部)'],\n            [5..6,  '左翼(左腕部)'],\n            [7,     '右脚部'],\n            [8,     '左脚部'],\n            [9..11, '胴部'],\n            [12,    '頭部'],\n          ]\n        ),\n        'CPT' => DiceTable::RangeTable.new(\n          '頭足動物部位表',\n          '1D12',\n          [\n            [1,     '異形'],\n            [2,     '武器'],\n            [3,     '右腕部'],\n            [4,     '左腕部'],\n            [5..7,  '右脚部'],\n            [8..10, '左脚部'],\n            [11,    '胴部'],\n            [12,    '頭部'],\n          ]\n        ),\n        'IPT' => DiceTable::RangeTable.new(\n          '昆虫部位表',\n          '1D12',\n          [\n            [1..2,    '異形'],\n            [3,       '武器'],\n            [4,       '右前脚部'],\n            [5,       '左前脚部'],\n            [6,       '右中脚部'],\n            [7,       '左中脚部'],\n            [8,       '右後脚部'],\n            [9,       '左後脚部'],\n            [10..11,  '胴部'],\n            [12,      '頭部'],\n          ]\n        ),\n        'SPT' => DiceTable::RangeTable.new(\n          '蜘蛛部位表',\n          '1D12',\n          [\n            [1,   '異形'],\n            [2,   '武器'],\n            [3,   '右第一脚部'],\n            [4,   '左第一脚部'],\n            [5,   '右第二脚部'],\n            [6,   '左第二脚部'],\n            [7,   '右第三脚部'],\n            [8,   '左第三脚部'],\n            [9,   '右第四脚部'],\n            [10,  '左第四脚部'],\n            [11,  '胴部'],\n            [12,  '頭部'],\n          ]\n        ),\n      }.freeze\n\n      register_prefix('K[AC]', 'CTR', TABLES.keys)\n    end\n  end\nend\n"], :names=>["<main>", "self", "require", "<module:BCDice>", "<module:GameSystem>", "<class:KemonoNoMori>", "eval_game_system_specific_command", "command", "$ret_or_1", "check_1D12", "get_trap_result", "get_escape_experience_table_result", "roll_tables", "TABLES", "is_action_judge", "debug", "m", "match", "target_total", "ArithmeticEvaluator", "eval", "[]", "1", "success_degree", "+", "/", "10", "to_i", "dice_total", "@randomizer", "roll_once", "12", "Result", "fumble", "11", "critical", "<=", "success", "failure", "tra_check_num", "new", "chase_num", "chase", "2", "3", "4", "5", "6", "7", "8", "9", "escape_experience", "escape_duration", "DiceTable::RangeTable", "DiceTable", "DiceTable::Table", "freeze", "register_prefix", "keys", "Base"], :mappings=>"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"}}]}